
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000212e  000021c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000212e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  00800122  00800122  000021e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00002254  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000159d  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000352  00000000  00000000  00003941  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001f24  00000000  00000000  00003c93  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ec  00000000  00000000  00005bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000109cb  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c78  00000000  00000000  00016a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000186e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  00018817  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_1>
       8:	1b c7       	rjmp	.+3638   	; 0xe40 <__vector_2>
       a:	00 00       	nop
       c:	41 c7       	rjmp	.+3714   	; 0xe90 <__vector_3>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c6       	rjmp	.+3404   	; 0xd82 <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ae 0c       	add	r10, r14
      8e:	b3 0c       	add	r11, r3
      90:	2c 0d       	add	r18, r12
      92:	46 0d       	add	r20, r6
      94:	4a 0d       	add	r20, r10
      96:	4e 0d       	add	r20, r14
      98:	52 0d       	add	r21, r2
      9a:	23 0e       	add	r2, r19
      9c:	69 0d       	add	r22, r9
      9e:	6e 0d       	add	r22, r14
      a0:	75 0d       	add	r23, r5
      a2:	7c 0d       	add	r23, r12
      a4:	83 0d       	add	r24, r3
      a6:	8a 0d       	add	r24, r10
      a8:	91 0d       	add	r25, r1
      aa:	98 0d       	add	r25, r8

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ee e2       	ldi	r30, 0x2E	; 46
      c0:	f1 e2       	ldi	r31, 0x21	; 33
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a2 32       	cpi	r26, 0x22	; 34
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a2 e2       	ldi	r26, 0x22	; 34
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	af 3d       	cpi	r26, 0xDF	; 223
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <main>
      e6:	0c 94 95 10 	jmp	0x212a	; 0x212a <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
      ec:	08 95       	ret

000000ee <linje_get_error>:
	return styr_fel;
}



int linje_get_error(){
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	float styr_fel=0;
	fel_antal=0;
     112:	10 92 60 01 	sts	0x0160, r1
     116:	10 92 5f 01 	sts	0x015F, r1
	cli();
     11a:	f8 94       	cli
	int Reflex_data_tmp = Reflex_data;
     11c:	80 90 9c 01 	lds	r8, 0x019C
     120:	90 90 9d 01 	lds	r9, 0x019D
	int Reflex_data2_tmp = Reflex_data2;
     124:	20 90 c5 01 	lds	r2, 0x01C5
     128:	30 90 c6 01 	lds	r3, 0x01C6
	sei();
     12c:	78 94       	sei
     12e:	c0 90 5f 01 	lds	r12, 0x015F
     132:	d0 90 60 01 	lds	r13, 0x0160
     136:	05 e0       	ldi	r16, 0x05	; 5
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	d0 e0       	ldi	r29, 0x00	; 0
}



int linje_get_error(){
	float styr_fel=0;
     13e:	41 2c       	mov	r4, r1
     140:	51 2c       	mov	r5, r1
     142:	32 01       	movw	r6, r4
     144:	0f 2e       	mov	r0, r31
     146:	f5 e0       	ldi	r31, 0x05	; 5
     148:	af 2e       	mov	r10, r31
     14a:	b1 2c       	mov	r11, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	c5 01       	movw	r24, r10
     150:	80 1b       	sub	r24, r16
     152:	91 0b       	sbc	r25, r17
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
	{
		if(i < 8){ //första 8 sensorenrna
     154:	08 97       	sbiw	r24, 0x08	; 8
     156:	14 f5       	brge	.+68     	; 0x19c <linje_get_error+0xae>
			styr_fel += ((5-i) * ((Reflex_data_tmp>>(i*2))&3));
     158:	74 01       	movw	r14, r8
     15a:	0c 2e       	mov	r0, r28
     15c:	02 c0       	rjmp	.+4      	; 0x162 <linje_get_error+0x74>
     15e:	f5 94       	asr	r15
     160:	e7 94       	ror	r14
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <linje_get_error+0x70>
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	e8 22       	and	r14, r24
     16a:	ff 24       	eor	r15, r15
     16c:	0e 9d       	mul	r16, r14
     16e:	b0 01       	movw	r22, r0
     170:	0f 9d       	mul	r16, r15
     172:	70 0d       	add	r23, r0
     174:	1e 9d       	mul	r17, r14
     176:	70 0d       	add	r23, r0
     178:	11 24       	eor	r1, r1
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     186:	9b 01       	movw	r18, r22
     188:	ac 01       	movw	r20, r24
     18a:	c3 01       	movw	r24, r6
     18c:	b2 01       	movw	r22, r4
     18e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     192:	2b 01       	movw	r4, r22
     194:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data_tmp>>(i*2))&0x3);
     196:	ce 0c       	add	r12, r14
     198:	df 1c       	adc	r13, r15
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <linje_get_error+0xf2>
     19c:	ce 01       	movw	r24, r28
     19e:	40 97       	sbiw	r24, 0x10	; 16
		}
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
     1a0:	71 01       	movw	r14, r2
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <linje_get_error+0xba>
     1a4:	f5 94       	asr	r15
     1a6:	e7 94       	ror	r14
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <linje_get_error+0xb6>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	e8 22       	and	r14, r24
     1b0:	ff 24       	eor	r15, r15
     1b2:	0e 9d       	mul	r16, r14
     1b4:	b0 01       	movw	r22, r0
     1b6:	0f 9d       	mul	r16, r15
     1b8:	70 0d       	add	r23, r0
     1ba:	1e 9d       	mul	r17, r14
     1bc:	70 0d       	add	r23, r0
     1be:	11 24       	eor	r1, r1
     1c0:	07 2e       	mov	r0, r23
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     1d8:	2b 01       	movw	r4, r22
     1da:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
     1dc:	ce 0c       	add	r12, r14
     1de:	df 1c       	adc	r13, r15
     1e0:	22 96       	adiw	r28, 0x02	; 2
     1e2:	01 50       	subi	r16, 0x01	; 1
     1e4:	11 09       	sbc	r17, r1
	fel_antal=0;
	cli();
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
     1e6:	c6 31       	cpi	r28, 0x16	; 22
     1e8:	d1 05       	cpc	r29, r1
     1ea:	09 f0       	breq	.+2      	; 0x1ee <linje_get_error+0x100>
     1ec:	b0 cf       	rjmp	.-160    	; 0x14e <linje_get_error+0x60>
     1ee:	d0 92 60 01 	sts	0x0160, r13
     1f2:	c0 92 5f 01 	sts	0x015F, r12
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
     1f6:	c1 14       	cp	r12, r1
     1f8:	d1 04       	cpc	r13, r1
     1fa:	69 f0       	breq	.+26     	; 0x216 <linje_get_error+0x128>
		styr_fel = 0; //kan inte dela med 0, specialfall
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
     1fc:	b6 01       	movw	r22, r12
     1fe:	dd 0c       	add	r13, r13
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__divsf3>
     214:	03 c0       	rjmp	.+6      	; 0x21c <linje_get_error+0x12e>
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
		styr_fel = 0; //kan inte dela med 0, specialfall
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
	return styr_fel;
     21c:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fixsfsi>
}
     220:	cb 01       	movw	r24, r22
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
     232:	bf 90       	pop	r11
     234:	af 90       	pop	r10
     236:	9f 90       	pop	r9
     238:	8f 90       	pop	r8
     23a:	7f 90       	pop	r7
     23c:	6f 90       	pop	r6
     23e:	5f 90       	pop	r5
     240:	4f 90       	pop	r4
     242:	3f 90       	pop	r3
     244:	2f 90       	pop	r2
     246:	08 95       	ret

00000248 <linje_RGBsveng>:
	}
	
}

signed char linje_RGBsveng() //om RGB ger utslag
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	cli();
     24c:	f8 94       	cli
	signed char styr_fel=0x00;
	int Reflex_data_tmp = Reflex_data;
     24e:	40 91 9c 01 	lds	r20, 0x019C
     252:	50 91 9d 01 	lds	r21, 0x019D
	int Reflex_data2_tmp = Reflex_data2;
     256:	60 91 c5 01 	lds	r22, 0x01C5
     25a:	70 91 c6 01 	lds	r23, 0x01C6
	sei();
     25e:	78 94       	sei
		time=0;
	}
	else // fortsätt med RGB sväng
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
     260:	80 91 af 01 	lds	r24, 0x01AF
     264:	88 23       	and	r24, r24
     266:	09 f4       	brne	.+2      	; 0x26a <linje_RGBsveng+0x22>
     268:	a3 c0       	rjmp	.+326    	; 0x3b0 <linje_RGBsveng+0x168>
     26a:	20 91 5d 01 	lds	r18, 0x015D
     26e:	30 91 5e 01 	lds	r19, 0x015E
     272:	23 2b       	or	r18, r19
     274:	b1 f4       	brne	.+44     	; 0x2a2 <linje_RGBsveng+0x5a>
     276:	20 91 59 01 	lds	r18, 0x0159
     27a:	30 91 5a 01 	lds	r19, 0x015A
     27e:	23 2b       	or	r18, r19
     280:	81 f4       	brne	.+32     	; 0x2a2 <linje_RGBsveng+0x5a>
		counter_timer_line_RGB = 0;
     282:	10 92 6a 01 	sts	0x016A, r1
     286:	10 92 69 01 	sts	0x0169, r1
		RGB_reset_timer = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 5e 01 	sts	0x015E, r25
     292:	80 93 5d 01 	sts	0x015D, r24
		RGB_force = 1;
     296:	90 93 5a 01 	sts	0x015A, r25
     29a:	80 93 59 01 	sts	0x0159, r24
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     29e:	80 e0       	ldi	r24, 0x00	; 0
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
     2a0:	8e c0       	rjmp	.+284    	; 0x3be <linje_RGBsveng+0x176>
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     2a2:	20 91 69 01 	lds	r18, 0x0169
     2a6:	30 91 6a 01 	lds	r19, 0x016A
     2aa:	24 30       	cpi	r18, 0x04	; 4
     2ac:	31 05       	cpc	r19, r1
     2ae:	0c f0       	brlt	.+2      	; 0x2b2 <linje_RGBsveng+0x6a>
     2b0:	6f c0       	rjmp	.+222    	; 0x390 <linje_RGBsveng+0x148>
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	71 f5       	brne	.+92     	; 0x312 <linje_RGBsveng+0xca>
     2b6:	a0 ef       	ldi	r26, 0xF0	; 240
     2b8:	bf ef       	ldi	r27, 0xFF	; 255
     2ba:	2b ef       	ldi	r18, 0xFB	; 251
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
			
			for(int i=0;i<11;i++)
			{
				if (styr_fel==0){
     2c2:	81 11       	cpse	r24, r1
     2c4:	1f c0       	rjmp	.+62     	; 0x304 <linje_RGBsveng+0xbc>
					if(i < 8){ //första 8 sensorenrna
     2c6:	e8 30       	cpi	r30, 0x08	; 8
     2c8:	f1 05       	cpc	r31, r1
     2ca:	84 f4       	brge	.+32     	; 0x2ec <linje_RGBsveng+0xa4>
     2cc:	cf 01       	movw	r24, r30
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     2d2:	ea 01       	movw	r28, r20
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <linje_RGBsveng+0x92>
     2d6:	d5 95       	asr	r29
     2d8:	c7 95       	ror	r28
     2da:	8a 95       	dec	r24
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <linje_RGBsveng+0x8e>
     2de:	ce 01       	movw	r24, r28
     2e0:	86 95       	lsr	r24
     2e2:	81 70       	andi	r24, 0x01	; 1
     2e4:	28 9f       	mul	r18, r24
     2e6:	80 2d       	mov	r24, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <linje_RGBsveng+0xbc>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     2ec:	cb 01       	movw	r24, r22
     2ee:	0a 2e       	mov	r0, r26
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <linje_RGBsveng+0xae>
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	0a 94       	dec	r0
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <linje_RGBsveng+0xaa>
     2fa:	86 95       	lsr	r24
     2fc:	81 70       	andi	r24, 0x01	; 1
     2fe:	28 9f       	mul	r18, r24
     300:	80 2d       	mov	r24, r0
     302:	11 24       	eor	r1, r1
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
			
			for(int i=0;i<11;i++)
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	12 96       	adiw	r26, 0x02	; 2
     30a:	26 30       	cpi	r18, 0x06	; 6
     30c:	d1 f6       	brne	.-76     	; 0x2c2 <linje_RGBsveng+0x7a>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
		styr_fel = -3;
     30e:	8d ef       	ldi	r24, 0xFD	; 253
     310:	56 c0       	rjmp	.+172    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data==2){ //raktfram
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	69 f4       	brne	.+26     	; 0x330 <linje_RGBsveng+0xe8>
			
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
     316:	40 7f       	andi	r20, 0xF0	; 240
     318:	50 93 9d 01 	sts	0x019D, r21
     31c:	40 93 9c 01 	sts	0x019C, r20
			Reflex_data2 = Reflex_data2_tmp & 0x03;
     320:	63 70       	andi	r22, 0x03	; 3
     322:	77 27       	eor	r23, r23
     324:	70 93 c6 01 	sts	0x01C6, r23
     328:	60 93 c5 01 	sts	0x01C5, r22
			return linje_get_error();
     32c:	e0 de       	rcall	.-576    	; 0xee <linje_get_error>
     32e:	47 c0       	rjmp	.+142    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	d1 f5       	brne	.+116    	; 0x3a8 <linje_RGBsveng+0x160>
     334:	a6 e0       	ldi	r26, 0x06	; 6
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e6 e0       	ldi	r30, 0x06	; 6
     33a:	8b e0       	ldi	r24, 0x0B	; 11
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 e0       	ldi	r18, 0x00	; 0
			for(int i=11;i>0;i--){
				if (styr_fel == 0){
     340:	21 11       	cpse	r18, r1
     342:	1f c0       	rjmp	.+62     	; 0x382 <linje_RGBsveng+0x13a>
					if(i < 8){ //första 8 sensorenrna
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	91 05       	cpc	r25, r1
     348:	84 f4       	brge	.+32     	; 0x36a <linje_RGBsveng+0x122>
     34a:	9c 01       	movw	r18, r24
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     350:	ea 01       	movw	r28, r20
     352:	02 c0       	rjmp	.+4      	; 0x358 <linje_RGBsveng+0x110>
     354:	d5 95       	asr	r29
     356:	c7 95       	ror	r28
     358:	2a 95       	dec	r18
     35a:	e2 f7       	brpl	.-8      	; 0x354 <linje_RGBsveng+0x10c>
     35c:	9e 01       	movw	r18, r28
     35e:	26 95       	lsr	r18
     360:	21 70       	andi	r18, 0x01	; 1
     362:	e2 9f       	mul	r30, r18
     364:	20 2d       	mov	r18, r0
     366:	11 24       	eor	r1, r1
     368:	0c c0       	rjmp	.+24     	; 0x382 <linje_RGBsveng+0x13a>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     36a:	9b 01       	movw	r18, r22
     36c:	0a 2e       	mov	r0, r26
     36e:	02 c0       	rjmp	.+4      	; 0x374 <linje_RGBsveng+0x12c>
     370:	35 95       	asr	r19
     372:	27 95       	ror	r18
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <linje_RGBsveng+0x128>
     378:	26 95       	lsr	r18
     37a:	21 70       	andi	r18, 0x01	; 1
     37c:	e2 9f       	mul	r30, r18
     37e:	20 2d       	mov	r18, r0
     380:	11 24       	eor	r1, r1
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	e1 50       	subi	r30, 0x01	; 1
     386:	12 97       	sbiw	r26, 0x02	; 2
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
			Reflex_data2 = Reflex_data2_tmp & 0x03;
			return linje_get_error();
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
			for(int i=11;i>0;i--){
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	d1 f6       	brne	.-76     	; 0x340 <linje_RGBsveng+0xf8>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
			styr_fel = 3;
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	17 c0       	rjmp	.+46     	; 0x3be <linje_RGBsveng+0x176>
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
		}
	}
	else{
		RGB_data=0;
     390:	10 92 af 01 	sts	0x01AF, r1
		RGB_reset_timer = 0;
     394:	10 92 5e 01 	sts	0x015E, r1
     398:	10 92 5d 01 	sts	0x015D, r1
		RGB_force = 0;
     39c:	10 92 5a 01 	sts	0x015A, r1
     3a0:	10 92 59 01 	sts	0x0159, r1
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <linje_RGBsveng+0x176>
				}
			}
			styr_fel = 3;
		}
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <linje_RGBsveng+0x176>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <linje_RGBsveng+0x176>
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     3b0:	80 91 69 01 	lds	r24, 0x0169
     3b4:	90 91 6a 01 	lds	r25, 0x016A
     3b8:	04 97       	sbiw	r24, 0x04	; 4
     3ba:	c4 f3       	brlt	.-16     	; 0x3ac <linje_RGBsveng+0x164>
     3bc:	e9 cf       	rjmp	.-46     	; 0x390 <linje_RGBsveng+0x148>
		RGB_force = 0;
		
	}
	 
	return styr_fel;
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sekvens_goal_detekted>:
bool sekvens_goal_detekted(){
	//int fel_antal=0;
	#ifndef time
		static int prew_fel_antal=0;
	#endif
	linje_get_error();		// Borde uppdatera fel_antal
     3c4:	94 de       	rcall	.-728    	; 0xee <linje_get_error>
	if(fel_antal>22){		// om robbot paserar tejp på tvären 
     3c6:	80 91 5f 01 	lds	r24, 0x015F
     3ca:	90 91 60 01 	lds	r25, 0x0160
     3ce:	87 31       	cpi	r24, 0x17	; 23
     3d0:	91 05       	cpc	r25, r1
     3d2:	34 f0       	brlt	.+12     	; 0x3e0 <sekvens_goal_detekted+0x1c>
		
		prew_fel_antal=fel_antal;
     3d4:	90 93 27 01 	sts	0x0127, r25
     3d8:	80 93 26 01 	sts	0x0126, r24
		return true;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	08 95       	ret
	}
	else if(prew_fel_antal+fel_antal>34 && prew_fel_antal <=22 && RGB_data==0){
     3e0:	20 91 26 01 	lds	r18, 0x0126
     3e4:	30 91 27 01 	lds	r19, 0x0127
     3e8:	ac 01       	movw	r20, r24
     3ea:	42 0f       	add	r20, r18
     3ec:	53 1f       	adc	r21, r19
     3ee:	43 32       	cpi	r20, 0x23	; 35
     3f0:	51 05       	cpc	r21, r1
     3f2:	6c f0       	brlt	.+26     	; 0x40e <sekvens_goal_detekted+0x4a>
     3f4:	27 31       	cpi	r18, 0x17	; 23
     3f6:	31 05       	cpc	r19, r1
     3f8:	54 f4       	brge	.+20     	; 0x40e <sekvens_goal_detekted+0x4a>
     3fa:	20 91 af 01 	lds	r18, 0x01AF
     3fe:	21 11       	cpse	r18, r1
     400:	06 c0       	rjmp	.+12     	; 0x40e <sekvens_goal_detekted+0x4a>
		//PORTD &= ~(1 << PD1);
		//PORTD &= ~(1 << PD0);
		prew_fel_antal=fel_antal;
     402:	90 93 27 01 	sts	0x0127, r25
     406:	80 93 26 01 	sts	0x0126, r24
		return true;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	08 95       	ret
	}
	else{
		prew_fel_antal=fel_antal;
     40e:	90 93 27 01 	sts	0x0127, r25
     412:	80 93 26 01 	sts	0x0126, r24
		return false;
     416:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(fel_antal>3 & fel_antal < 7 & max-min > 5 & max-min < 8) // måste kalibreras bör nog vara && ?
		return true;
	return false;
	*/
}
     418:	08 95       	ret

0000041a <detect_goal>:
bool detect_goal(){// brettar om robotten är i mål eller inte
		#ifndef time
			static int time;
			static int count;
		#endif
		linje_get_error();		// Borde uppdatera fel_antal
     41a:	69 de       	rcall	.-814    	; 0xee <linje_get_error>
		PORTD |= (1 << PD1);
		PORTD |= (1 << PD0);
		return true;
	}*/
	
	if((Goal_reset_timer == 0) && (sekvens_goal_detekted() == true)){		
     41c:	80 91 5b 01 	lds	r24, 0x015B
     420:	90 91 5c 01 	lds	r25, 0x015C
     424:	89 2b       	or	r24, r25
     426:	69 f4       	brne	.+26     	; 0x442 <detect_goal+0x28>
     428:	cd df       	rcall	.-102    	; 0x3c4 <sekvens_goal_detekted>
     42a:	88 23       	and	r24, r24
     42c:	51 f0       	breq	.+20     	; 0x442 <detect_goal+0x28>
		Goal_reset_timer = 1;	
     42e:	81 e0       	ldi	r24, 0x01	; 1
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	90 93 5c 01 	sts	0x015C, r25
     436:	80 93 5b 01 	sts	0x015B, r24
		counter_timer_line_goal = 0;																						// Nollar timern som sitter i timerintrerruptet, ISR för timern sker 10ggr per sekund						
     43a:	10 92 66 01 	sts	0x0166, r1
     43e:	10 92 65 01 	sts	0x0165, r1
		Goal_reset_timer = 0;
		return true;
		//count++;
		//return false;
	}*/
	if((sekvens_goal_detekted() == true)){
     442:	c0 df       	rcall	.-128    	; 0x3c4 <sekvens_goal_detekted>
     444:	88 23       	and	r24, r24
     446:	59 f0       	breq	.+22     	; 0x45e <detect_goal+0x44>
		count++;
     448:	80 91 28 01 	lds	r24, 0x0128
     44c:	90 91 29 01 	lds	r25, 0x0129
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	90 93 29 01 	sts	0x0129, r25
     456:	80 93 28 01 	sts	0x0128, r24
		return false;
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	08 95       	ret
	}
	else if(count == 0){
     45e:	20 91 28 01 	lds	r18, 0x0128
     462:	30 91 29 01 	lds	r19, 0x0129
     466:	21 15       	cp	r18, r1
     468:	31 05       	cpc	r19, r1
     46a:	29 f4       	brne	.+10     	; 0x476 <detect_goal+0x5c>
		Goal_reset_timer = 0;
     46c:	10 92 5c 01 	sts	0x015C, r1
     470:	10 92 5b 01 	sts	0x015B, r1
		return false;
     474:	08 95       	ret
	}

	else if((count > 0) &&(fel_antal == 0)){
     476:	12 16       	cp	r1, r18
     478:	13 06       	cpc	r1, r19
     47a:	84 f4       	brge	.+32     	; 0x49c <detect_goal+0x82>
     47c:	20 91 5f 01 	lds	r18, 0x015F
     480:	30 91 60 01 	lds	r19, 0x0160
     484:	23 2b       	or	r18, r19
     486:	51 f4       	brne	.+20     	; 0x49c <detect_goal+0x82>
		count = 0;
     488:	10 92 29 01 	sts	0x0129, r1
     48c:	10 92 28 01 	sts	0x0128, r1
		Goal_reset_timer = 0;
     490:	10 92 5c 01 	sts	0x015C, r1
     494:	10 92 5b 01 	sts	0x015B, r1
		return true;
     498:	81 e0       	ldi	r24, 0x01	; 1
     49a:	08 95       	ret
	}
	else if(counter_timer_line_goal >= goal_timer){																			// Timeout, tiden har passerat. Alltså inget mål utan bara en T korsning
     49c:	20 91 65 01 	lds	r18, 0x0165
     4a0:	30 91 66 01 	lds	r19, 0x0166
     4a4:	23 30       	cpi	r18, 0x03	; 3
     4a6:	31 05       	cpc	r19, r1
     4a8:	44 f0       	brlt	.+16     	; 0x4ba <detect_goal+0xa0>
		count = 0;
     4aa:	10 92 29 01 	sts	0x0129, r1
     4ae:	10 92 28 01 	sts	0x0128, r1
		//PORTD |= (1 << PD1);
		//PORTD &= ~(1 << PD1);
		Goal_reset_timer = 0;
     4b2:	10 92 5c 01 	sts	0x015C, r1
     4b6:	10 92 5b 01 	sts	0x015B, r1
	else{	// time out detta är inte mål
		time=0;
		count=0;
		return false;
	}*/
}
     4ba:	08 95       	ret

000004bc <detect_labyrint>:
bool detect_labyrint(){ //om robboten har kommmit in i en labyrint 
		#ifndef time
			static int time;
		#endif
		
	if(distans_left<30 && distans_right<30 && fel_antal==0){ // om det finns väggar på båda sidor     
     4bc:	80 91 a8 01 	lds	r24, 0x01A8
     4c0:	8e 31       	cpi	r24, 0x1E	; 30
     4c2:	68 f4       	brcc	.+26     	; 0x4de <detect_labyrint+0x22>
     4c4:	80 91 b0 01 	lds	r24, 0x01B0
     4c8:	8e 31       	cpi	r24, 0x1E	; 30
     4ca:	58 f4       	brcc	.+22     	; 0x4e2 <detect_labyrint+0x26>
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	20 91 5f 01 	lds	r18, 0x015F
     4d2:	30 91 60 01 	lds	r19, 0x0160
     4d6:	23 2b       	or	r18, r19
     4d8:	29 f0       	breq	.+10     	; 0x4e4 <detect_labyrint+0x28>
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	08 95       	ret
		}*/
		
	}
	else{ // det var ingen labyrint
		//time = 0;
		return false;
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	08 95       	ret
     4e2:	80 e0       	ldi	r24, 0x00	; 0
	}
     4e4:	08 95       	ret

000004e6 <stand_still>:
	PORTB &= ~(1 << PB1);
	
}

void stand_still(void){
	PORTB &= ~(1 << motor_dir_left);
     4e6:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     4e8:	2d 98       	cbi	0x05, 5	; 5
	motor_left = 0;
     4ea:	17 bc       	out	0x27, r1	; 39
	motor_right = 0;
     4ec:	18 bc       	out	0x28, r1	; 40
     4ee:	08 95       	ret

000004f0 <drive_forward>:
}

void drive_forward(void){
	PORTB &= ~(1 << motor_dir_left);
     4f0:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     4f2:	2d 98       	cbi	0x05, 5	; 5
	motor_left = laby_left_speed;
     4f4:	80 91 17 01 	lds	r24, 0x0117
     4f8:	87 bd       	out	0x27, r24	; 39
	motor_right = laby_right_speed;
     4fa:	80 91 15 01 	lds	r24, 0x0115
     4fe:	88 bd       	out	0x28, r24	; 40
     500:	08 95       	ret

00000502 <turn_left>:
}

void turn_left(void){
	PORTB &= ~(1 << motor_dir_right);
     502:	2d 98       	cbi	0x05, 5	; 5
	PORTB |= (1 << motor_dir_left);
     504:	2e 9a       	sbi	0x05, 6	; 5
	motor_left = 60;//80;//60left;
     506:	8c e3       	ldi	r24, 0x3C	; 60
     508:	87 bd       	out	0x27, r24	; 39
	motor_right = 55;//70;//55right;
     50a:	87 e3       	ldi	r24, 0x37	; 55
     50c:	88 bd       	out	0x28, r24	; 40
     50e:	08 95       	ret

00000510 <turn_right>:
}

void turn_right(void){
	PORTB |= (1 << motor_dir_right);
     510:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motor_dir_left);
     512:	2e 98       	cbi	0x05, 6	; 5
	motor_left = 57;//80;//57left;
     514:	89 e3       	ldi	r24, 0x39	; 57
     516:	87 bd       	out	0x27, r24	; 39
	motor_right = 52;//52right;
     518:	84 e3       	ldi	r24, 0x34	; 52
     51a:	88 bd       	out	0x28, r24	; 40
     51c:	08 95       	ret

0000051e <PD_for_lab>:
int previous_errors_right[10];
int error_count = 0;

bool first_time_flag = false;

void PD_for_lab(int distance_left, int distance_right, int distance_front){
     51e:	8f 92       	push	r8
     520:	9f 92       	push	r9
     522:	af 92       	push	r10
     524:	bf 92       	push	r11
     526:	cf 92       	push	r12
     528:	df 92       	push	r13
     52a:	ef 92       	push	r14
     52c:	ff 92       	push	r15
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
     536:	ec 01       	movw	r28, r24
     538:	c6 1b       	sub	r28, r22
     53a:	d7 0b       	sbc	r29, r23
     53c:	d0 93 ae 01 	sts	0x01AE, r29
     540:	c0 93 ad 01 	sts	0x01AD, r28
	
	if (first_time_flag)
     544:	80 91 4c 01 	lds	r24, 0x014C
     548:	88 23       	and	r24, r24
     54a:	a1 f0       	breq	.+40     	; 0x574 <PD_for_lab+0x56>
	{
		for(int i = 0; i < number_of_errors; i++)
     54c:	80 91 0d 01 	lds	r24, 0x010D
     550:	90 91 0e 01 	lds	r25, 0x010E
     554:	18 16       	cp	r1, r24
     556:	19 06       	cpc	r1, r25
     558:	5c f4       	brge	.+22     	; 0x570 <PD_for_lab+0x52>
     55a:	e9 e7       	ldi	r30, 0x79	; 121
     55c:	f1 e0       	ldi	r31, 0x01	; 1
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
			previous_errors_right[i] = current_error_lab;
     562:	c1 93       	st	Z+, r28
     564:	d1 93       	st	Z+, r29
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
	
	if (first_time_flag)
	{
		for(int i = 0; i < number_of_errors; i++)
     566:	2f 5f       	subi	r18, 0xFF	; 255
     568:	3f 4f       	sbci	r19, 0xFF	; 255
     56a:	28 17       	cp	r18, r24
     56c:	39 07       	cpc	r19, r25
     56e:	cc f3       	brlt	.-14     	; 0x562 <PD_for_lab+0x44>
			previous_errors_right[i] = current_error_lab;
			RGB_data = 0;
     570:	10 92 af 01 	sts	0x01AF, r1
	}
	
	first_time_flag = false;
     574:	10 92 4c 01 	sts	0x014C, r1
	
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
     578:	00 91 4d 01 	lds	r16, 0x014D
     57c:	10 91 4e 01 	lds	r17, 0x014E
     580:	00 0f       	add	r16, r16
     582:	11 1f       	adc	r17, r17
     584:	07 58       	subi	r16, 0x87	; 135
     586:	1e 4f       	sbci	r17, 0xFE	; 254
     588:	f8 01       	movw	r30, r16
     58a:	80 81       	ld	r24, Z
     58c:	91 81       	ldd	r25, Z+1	; 0x01
     58e:	be 01       	movw	r22, r28
     590:	68 1b       	sub	r22, r24
     592:	79 0b       	sbc	r23, r25
     594:	07 2e       	mov	r0, r23
     596:	00 0c       	add	r0, r0
     598:	88 0b       	sbc	r24, r24
     59a:	99 0b       	sbc	r25, r25
     59c:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     5a0:	6b 01       	movw	r12, r22
     5a2:	7c 01       	movw	r14, r24
     5a4:	60 93 4f 01 	sts	0x014F, r22
     5a8:	70 93 50 01 	sts	0x0150, r23
     5ac:	80 93 51 01 	sts	0x0151, r24
     5b0:	90 93 52 01 	sts	0x0152, r25
	/*if (derivate < 3 && derivate > -3)
		derivate = 0;*/
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
     5b4:	80 91 13 01 	lds	r24, 0x0113
     5b8:	90 91 14 01 	lds	r25, 0x0114
     5bc:	c8 9f       	mul	r28, r24
     5be:	b0 01       	movw	r22, r0
     5c0:	c9 9f       	mul	r28, r25
     5c2:	70 0d       	add	r23, r0
     5c4:	d8 9f       	mul	r29, r24
     5c6:	70 0d       	add	r23, r0
     5c8:	11 24       	eor	r1, r1
     5ca:	07 2e       	mov	r0, r23
     5cc:	00 0c       	add	r0, r0
     5ce:	88 0b       	sbc	r24, r24
     5d0:	99 0b       	sbc	r25, r25
     5d2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     5d6:	4b 01       	movw	r8, r22
     5d8:	5c 01       	movw	r10, r24
     5da:	60 91 11 01 	lds	r22, 0x0111
     5de:	70 91 12 01 	lds	r23, 0x0112
     5e2:	07 2e       	mov	r0, r23
     5e4:	00 0c       	add	r0, r0
     5e6:	88 0b       	sbc	r24, r24
     5e8:	99 0b       	sbc	r25, r25
     5ea:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     5ee:	9b 01       	movw	r18, r22
     5f0:	ac 01       	movw	r20, r24
     5f2:	c7 01       	movw	r24, r14
     5f4:	b6 01       	movw	r22, r12
     5f6:	0e 94 02 10 	call	0x2004	; 0x2004 <__mulsf3>
     5fa:	9b 01       	movw	r18, r22
     5fc:	ac 01       	movw	r20, r24
     5fe:	c5 01       	movw	r24, r10
     600:	b4 01       	movw	r22, r8
     602:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	30 e0       	ldi	r19, 0x00	; 0
     60a:	40 e2       	ldi	r20, 0x20	; 32
     60c:	51 e4       	ldi	r21, 0x41	; 65
     60e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__divsf3>
     612:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fixsfsi>
     616:	70 93 c8 01 	sts	0x01C8, r23
     61a:	60 93 c7 01 	sts	0x01C7, r22
	previous_errors_right[error_count] = current_error_lab;
     61e:	f8 01       	movw	r30, r16
     620:	d1 83       	std	Z+1, r29	; 0x01
     622:	c0 83       	st	Z, r28
	
	if(output_right >= 0){
     624:	77 23       	and	r23, r23
     626:	bc f0       	brlt	.+46     	; 0x656 <PD_for_lab+0x138>
		motor_right = laby_right_speed;
     628:	80 91 15 01 	lds	r24, 0x0115
     62c:	88 bd       	out	0x28, r24	; 40
		if(output_right > laby_left_speed)
     62e:	80 91 17 01 	lds	r24, 0x0117
     632:	90 91 18 01 	lds	r25, 0x0118
     636:	20 91 c7 01 	lds	r18, 0x01C7
     63a:	30 91 c8 01 	lds	r19, 0x01C8
     63e:	82 17       	cp	r24, r18
     640:	93 07       	cpc	r25, r19
     642:	24 f4       	brge	.+8      	; 0x64c <PD_for_lab+0x12e>
			output_right = laby_left_speed;
     644:	90 93 c8 01 	sts	0x01C8, r25
     648:	80 93 c7 01 	sts	0x01C7, r24
		motor_left = laby_left_speed - output_right;	
     64c:	90 91 c7 01 	lds	r25, 0x01C7
     650:	89 1b       	sub	r24, r25
     652:	87 bd       	out	0x27, r24	; 39
     654:	1a c0       	rjmp	.+52     	; 0x68a <PD_for_lab+0x16c>
	}
	else if(output_right < 0){
		motor_left = laby_left_speed;
     656:	80 91 17 01 	lds	r24, 0x0117
     65a:	87 bd       	out	0x27, r24	; 39
		if(output_right < -laby_right_speed)
     65c:	80 91 15 01 	lds	r24, 0x0115
     660:	90 91 16 01 	lds	r25, 0x0116
     664:	22 27       	eor	r18, r18
     666:	33 27       	eor	r19, r19
     668:	28 1b       	sub	r18, r24
     66a:	39 0b       	sbc	r19, r25
     66c:	40 91 c7 01 	lds	r20, 0x01C7
     670:	50 91 c8 01 	lds	r21, 0x01C8
     674:	42 17       	cp	r20, r18
     676:	53 07       	cpc	r21, r19
     678:	24 f4       	brge	.+8      	; 0x682 <PD_for_lab+0x164>
			output_right = -laby_right_speed;
     67a:	30 93 c8 01 	sts	0x01C8, r19
     67e:	20 93 c7 01 	sts	0x01C7, r18
		motor_right = laby_right_speed + output_right;	
     682:	90 91 c7 01 	lds	r25, 0x01C7
     686:	89 0f       	add	r24, r25
     688:	88 bd       	out	0x28, r24	; 40
	//if(error_count == 0)
	//	PORTD ^= (1 << PD0);
	
	//motor_left = left + output_left;
	//motor_right = right + output_right;
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	1f 91       	pop	r17
     690:	0f 91       	pop	r16
     692:	ff 90       	pop	r15
     694:	ef 90       	pop	r14
     696:	df 90       	pop	r13
     698:	cf 90       	pop	r12
     69a:	bf 90       	pop	r11
     69c:	af 90       	pop	r10
     69e:	9f 90       	pop	r9
     6a0:	8f 90       	pop	r8
     6a2:	08 95       	ret

000006a4 <drive_forward_left>:

short regulate_side = 0;



void drive_forward_left(int distance , int distance_front){
     6a4:	4f 92       	push	r4
     6a6:	5f 92       	push	r5
     6a8:	6f 92       	push	r6
     6aa:	7f 92       	push	r7
     6ac:	8f 92       	push	r8
     6ae:	9f 92       	push	r9
     6b0:	af 92       	push	r10
     6b2:	bf 92       	push	r11
     6b4:	ef 92       	push	r14
     6b6:	ff 92       	push	r15
     6b8:	0f 93       	push	r16
     6ba:	1f 93       	push	r17
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     6c0:	c0 91 0f 01 	lds	r28, 0x010F
     6c4:	d0 91 10 01 	lds	r29, 0x0110
     6c8:	c8 1b       	sub	r28, r24
     6ca:	d9 0b       	sbc	r29, r25
	
	if(first_time)
     6cc:	80 91 0c 01 	lds	r24, 0x010C
     6d0:	88 23       	and	r24, r24
     6d2:	89 f0       	breq	.+34     	; 0x6f6 <drive_forward_left+0x52>
		for(int i = 0 ; i < number_of_errors_sc; i++)
     6d4:	20 91 04 01 	lds	r18, 0x0104
     6d8:	30 91 05 01 	lds	r19, 0x0105
     6dc:	12 16       	cp	r1, r18
     6de:	13 06       	cpc	r1, r19
     6e0:	54 f4       	brge	.+20     	; 0x6f6 <drive_forward_left+0x52>
     6e2:	e9 ec       	ldi	r30, 0xC9	; 201
     6e4:	f1 e0       	ldi	r31, 0x01	; 1
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
			previous_errors[i] = current_error;
     6ea:	c1 93       	st	Z+, r28
     6ec:	d1 93       	st	Z+, r29

void drive_forward_left(int distance , int distance_front){
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
	
	if(first_time)
		for(int i = 0 ; i < number_of_errors_sc; i++)
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	82 17       	cp	r24, r18
     6f2:	93 07       	cpc	r25, r19
     6f4:	d4 f3       	brlt	.-12     	; 0x6ea <drive_forward_left+0x46>
			previous_errors[i] = current_error;
	
	first_time = false;
     6f6:	10 92 0c 01 	sts	0x010C, r1
	
	derivate = current_error - previous_errors[error_count];///10; //
     6fa:	00 91 4d 01 	lds	r16, 0x014D
     6fe:	10 91 4e 01 	lds	r17, 0x014E
     702:	c8 01       	movw	r24, r16
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	9c 01       	movw	r18, r24
     70a:	27 53       	subi	r18, 0x37	; 55
     70c:	3e 4f       	sbci	r19, 0xFE	; 254
     70e:	79 01       	movw	r14, r18
     710:	d9 01       	movw	r26, r18
     712:	8d 91       	ld	r24, X+
     714:	9c 91       	ld	r25, X
     716:	be 01       	movw	r22, r28
     718:	68 1b       	sub	r22, r24
     71a:	79 0b       	sbc	r23, r25
     71c:	07 2e       	mov	r0, r23
     71e:	00 0c       	add	r0, r0
     720:	88 0b       	sbc	r24, r24
     722:	99 0b       	sbc	r25, r25
     724:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     728:	4b 01       	movw	r8, r22
     72a:	5c 01       	movw	r10, r24
     72c:	60 93 4f 01 	sts	0x014F, r22
     730:	70 93 50 01 	sts	0x0150, r23
     734:	80 93 51 01 	sts	0x0151, r24
     738:	90 93 52 01 	sts	0x0152, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     73c:	80 91 0a 01 	lds	r24, 0x010A
     740:	90 91 0b 01 	lds	r25, 0x010B
     744:	c8 9f       	mul	r28, r24
     746:	b0 01       	movw	r22, r0
     748:	c9 9f       	mul	r28, r25
     74a:	70 0d       	add	r23, r0
     74c:	d8 9f       	mul	r29, r24
     74e:	70 0d       	add	r23, r0
     750:	11 24       	eor	r1, r1
     752:	07 2e       	mov	r0, r23
     754:	00 0c       	add	r0, r0
     756:	88 0b       	sbc	r24, r24
     758:	99 0b       	sbc	r25, r25
     75a:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     75e:	2b 01       	movw	r4, r22
     760:	3c 01       	movw	r6, r24
     762:	60 91 08 01 	lds	r22, 0x0108
     766:	70 91 09 01 	lds	r23, 0x0109
     76a:	07 2e       	mov	r0, r23
     76c:	00 0c       	add	r0, r0
     76e:	88 0b       	sbc	r24, r24
     770:	99 0b       	sbc	r25, r25
     772:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	c5 01       	movw	r24, r10
     77c:	b4 01       	movw	r22, r8
     77e:	0e 94 02 10 	call	0x2004	; 0x2004 <__mulsf3>
     782:	9b 01       	movw	r18, r22
     784:	ac 01       	movw	r20, r24
     786:	c3 01       	movw	r24, r6
     788:	b2 01       	movw	r22, r4
     78a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     78e:	20 e0       	ldi	r18, 0x00	; 0
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	40 e2       	ldi	r20, 0x20	; 32
     794:	51 e4       	ldi	r21, 0x41	; 65
     796:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__divsf3>
     79a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fixsfsi>
     79e:	fb 01       	movw	r30, r22
	previous_errors[error_count] = current_error;
     7a0:	d7 01       	movw	r26, r14
     7a2:	cd 93       	st	X+, r28
     7a4:	dc 93       	st	X, r29
	
	if(++error_count >= number_of_errors_sc)
     7a6:	0f 5f       	subi	r16, 0xFF	; 255
     7a8:	1f 4f       	sbci	r17, 0xFF	; 255
     7aa:	10 93 4e 01 	sts	0x014E, r17
     7ae:	00 93 4d 01 	sts	0x014D, r16
     7b2:	20 91 04 01 	lds	r18, 0x0104
     7b6:	30 91 05 01 	lds	r19, 0x0105
     7ba:	02 17       	cp	r16, r18
     7bc:	13 07       	cpc	r17, r19
     7be:	24 f0       	brlt	.+8      	; 0x7c8 <drive_forward_left+0x124>
		error_count=0;
     7c0:	10 92 4e 01 	sts	0x014E, r1
     7c4:	10 92 4d 01 	sts	0x014D, r1
	
	if(output <= (-laby_left_speed))
     7c8:	20 91 17 01 	lds	r18, 0x0117
     7cc:	30 91 18 01 	lds	r19, 0x0118
     7d0:	44 27       	eor	r20, r20
     7d2:	55 27       	eor	r21, r21
     7d4:	42 1b       	sub	r20, r18
     7d6:	53 0b       	sbc	r21, r19
     7d8:	4e 17       	cp	r20, r30
     7da:	5f 07       	cpc	r21, r31
     7dc:	4c f4       	brge	.+18     	; 0x7f0 <drive_forward_left+0x14c>
		output = -laby_left_speed;
	
	else if(output >= laby_right_speed)
     7de:	e0 91 15 01 	lds	r30, 0x0115
     7e2:	f0 91 16 01 	lds	r31, 0x0116
     7e6:	ab 01       	movw	r20, r22
     7e8:	e6 17       	cp	r30, r22
     7ea:	f7 07       	cpc	r31, r23
     7ec:	0c f4       	brge	.+2      	; 0x7f0 <drive_forward_left+0x14c>
     7ee:	af 01       	movw	r20, r30
		output=laby_right_speed;
	
	if(output <= 0){
     7f0:	14 16       	cp	r1, r20
     7f2:	15 06       	cpc	r1, r21
     7f4:	4c f0       	brlt	.+18     	; 0x808 <drive_forward_left+0x164>
		motor_right = laby_right_speed;
     7f6:	90 91 15 01 	lds	r25, 0x0115
     7fa:	98 bd       	out	0x28, r25	; 40
		motor_left = laby_left_speed + output;
     7fc:	90 91 17 01 	lds	r25, 0x0117
     800:	89 2f       	mov	r24, r25
     802:	84 0f       	add	r24, r20
     804:	87 bd       	out	0x27, r24	; 39
     806:	06 c0       	rjmp	.+12     	; 0x814 <drive_forward_left+0x170>
	}
	else{ 
		motor_left = laby_left_speed;
     808:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed - output;	
     80a:	90 91 15 01 	lds	r25, 0x0115
     80e:	89 2f       	mov	r24, r25
     810:	84 1b       	sub	r24, r20
     812:	88 bd       	out	0x28, r24	; 40
	}
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	bf 90       	pop	r11
     822:	af 90       	pop	r10
     824:	9f 90       	pop	r9
     826:	8f 90       	pop	r8
     828:	7f 90       	pop	r7
     82a:	6f 90       	pop	r6
     82c:	5f 90       	pop	r5
     82e:	4f 90       	pop	r4
     830:	08 95       	ret

00000832 <drive_forward_right>:



void drive_forward_right(int distance, int distance_front){
     832:	4f 92       	push	r4
     834:	5f 92       	push	r5
     836:	6f 92       	push	r6
     838:	7f 92       	push	r7
     83a:	8f 92       	push	r8
     83c:	9f 92       	push	r9
     83e:	af 92       	push	r10
     840:	bf 92       	push	r11
     842:	ef 92       	push	r14
     844:	ff 92       	push	r15
     846:	0f 93       	push	r16
     848:	1f 93       	push	r17
     84a:	cf 93       	push	r28
     84c:	df 93       	push	r29
	
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     84e:	c0 91 0f 01 	lds	r28, 0x010F
     852:	d0 91 10 01 	lds	r29, 0x0110
     856:	c8 1b       	sub	r28, r24
     858:	d9 0b       	sbc	r29, r25
	
	if(first_time)
     85a:	80 91 0c 01 	lds	r24, 0x010C
     85e:	88 23       	and	r24, r24
     860:	89 f0       	breq	.+34     	; 0x884 <drive_forward_right+0x52>
		for(int i = 0 ; i < number_of_errors_sc; i++)
     862:	20 91 04 01 	lds	r18, 0x0104
     866:	30 91 05 01 	lds	r19, 0x0105
     86a:	12 16       	cp	r1, r18
     86c:	13 06       	cpc	r1, r19
     86e:	54 f4       	brge	.+20     	; 0x884 <drive_forward_right+0x52>
     870:	e9 ec       	ldi	r30, 0xC9	; 201
     872:	f1 e0       	ldi	r31, 0x01	; 1
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
			previous_errors[i] = current_error;
     878:	c1 93       	st	Z+, r28
     87a:	d1 93       	st	Z+, r29
void drive_forward_right(int distance, int distance_front){
	
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
	
	if(first_time)
		for(int i = 0 ; i < number_of_errors_sc; i++)
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	82 17       	cp	r24, r18
     880:	93 07       	cpc	r25, r19
     882:	d4 f3       	brlt	.-12     	; 0x878 <drive_forward_right+0x46>
			previous_errors[i] = current_error;
	
	first_time = false;
     884:	10 92 0c 01 	sts	0x010C, r1
	
	derivate = current_error - previous_errors[error_count];///10; //
     888:	00 91 4d 01 	lds	r16, 0x014D
     88c:	10 91 4e 01 	lds	r17, 0x014E
     890:	c8 01       	movw	r24, r16
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	9c 01       	movw	r18, r24
     898:	27 53       	subi	r18, 0x37	; 55
     89a:	3e 4f       	sbci	r19, 0xFE	; 254
     89c:	79 01       	movw	r14, r18
     89e:	f9 01       	movw	r30, r18
     8a0:	80 81       	ld	r24, Z
     8a2:	91 81       	ldd	r25, Z+1	; 0x01
     8a4:	be 01       	movw	r22, r28
     8a6:	68 1b       	sub	r22, r24
     8a8:	79 0b       	sbc	r23, r25
     8aa:	07 2e       	mov	r0, r23
     8ac:	00 0c       	add	r0, r0
     8ae:	88 0b       	sbc	r24, r24
     8b0:	99 0b       	sbc	r25, r25
     8b2:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     8b6:	4b 01       	movw	r8, r22
     8b8:	5c 01       	movw	r10, r24
     8ba:	60 93 4f 01 	sts	0x014F, r22
     8be:	70 93 50 01 	sts	0x0150, r23
     8c2:	80 93 51 01 	sts	0x0151, r24
     8c6:	90 93 52 01 	sts	0x0152, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     8ca:	80 91 0a 01 	lds	r24, 0x010A
     8ce:	90 91 0b 01 	lds	r25, 0x010B
     8d2:	c8 9f       	mul	r28, r24
     8d4:	b0 01       	movw	r22, r0
     8d6:	c9 9f       	mul	r28, r25
     8d8:	70 0d       	add	r23, r0
     8da:	d8 9f       	mul	r29, r24
     8dc:	70 0d       	add	r23, r0
     8de:	11 24       	eor	r1, r1
     8e0:	07 2e       	mov	r0, r23
     8e2:	00 0c       	add	r0, r0
     8e4:	88 0b       	sbc	r24, r24
     8e6:	99 0b       	sbc	r25, r25
     8e8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     8ec:	2b 01       	movw	r4, r22
     8ee:	3c 01       	movw	r6, r24
     8f0:	60 91 08 01 	lds	r22, 0x0108
     8f4:	70 91 09 01 	lds	r23, 0x0109
     8f8:	07 2e       	mov	r0, r23
     8fa:	00 0c       	add	r0, r0
     8fc:	88 0b       	sbc	r24, r24
     8fe:	99 0b       	sbc	r25, r25
     900:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c5 01       	movw	r24, r10
     90a:	b4 01       	movw	r22, r8
     90c:	0e 94 02 10 	call	0x2004	; 0x2004 <__mulsf3>
     910:	9b 01       	movw	r18, r22
     912:	ac 01       	movw	r20, r24
     914:	c3 01       	movw	r24, r6
     916:	b2 01       	movw	r22, r4
     918:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	40 e2       	ldi	r20, 0x20	; 32
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <__divsf3>
     928:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fixsfsi>
     92c:	ab 01       	movw	r20, r22
	previous_errors[error_count] = current_error;
     92e:	f7 01       	movw	r30, r14
     930:	d1 83       	std	Z+1, r29	; 0x01
     932:	c0 83       	st	Z, r28

	if(++error_count >= number_of_errors_sc)
     934:	0f 5f       	subi	r16, 0xFF	; 255
     936:	1f 4f       	sbci	r17, 0xFF	; 255
     938:	10 93 4e 01 	sts	0x014E, r17
     93c:	00 93 4d 01 	sts	0x014D, r16
     940:	20 91 04 01 	lds	r18, 0x0104
     944:	30 91 05 01 	lds	r19, 0x0105
     948:	02 17       	cp	r16, r18
     94a:	13 07       	cpc	r17, r19
     94c:	24 f0       	brlt	.+8      	; 0x956 <drive_forward_right+0x124>
		error_count = 0;
     94e:	10 92 4e 01 	sts	0x014E, r1
     952:	10 92 4d 01 	sts	0x014D, r1
	
	if(output >= (laby_left_speed))
     956:	20 91 17 01 	lds	r18, 0x0117
     95a:	30 91 18 01 	lds	r19, 0x0118
     95e:	42 17       	cp	r20, r18
     960:	53 07       	cpc	r21, r19
     962:	64 f4       	brge	.+24     	; 0x97c <drive_forward_right+0x14a>
		output = laby_left_speed;
	
	else if(output <= -laby_right_speed)
     964:	40 91 15 01 	lds	r20, 0x0115
     968:	50 91 16 01 	lds	r21, 0x0116
     96c:	51 95       	neg	r21
     96e:	41 95       	neg	r20
     970:	51 09       	sbc	r21, r1
     972:	64 17       	cp	r22, r20
     974:	75 07       	cpc	r23, r21
     976:	1c f4       	brge	.+6      	; 0x97e <drive_forward_right+0x14c>
     978:	ba 01       	movw	r22, r20
     97a:	01 c0       	rjmp	.+2      	; 0x97e <drive_forward_right+0x14c>

	if(++error_count >= number_of_errors_sc)
		error_count = 0;
	
	if(output >= (laby_left_speed))
		output = laby_left_speed;
     97c:	b9 01       	movw	r22, r18
	
	else if(output <= -laby_right_speed)
		output = -laby_right_speed;
	
	if(output >= 0){
     97e:	77 23       	and	r23, r23
     980:	44 f0       	brlt	.+16     	; 0x992 <drive_forward_right+0x160>
		motor_right = laby_right_speed;
     982:	80 91 15 01 	lds	r24, 0x0115
     986:	88 bd       	out	0x28, r24	; 40
		motor_left = laby_left_speed - output;
     988:	80 91 17 01 	lds	r24, 0x0117
     98c:	86 1b       	sub	r24, r22
     98e:	87 bd       	out	0x27, r24	; 39
     990:	05 c0       	rjmp	.+10     	; 0x99c <drive_forward_right+0x16a>
	}
	else{
		motor_left = laby_left_speed;
     992:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed + output;
     994:	80 91 15 01 	lds	r24, 0x0115
     998:	68 0f       	add	r22, r24
     99a:	68 bd       	out	0x28, r22	; 40
		motor_left = 57;//80;//57left;
		motor_right = 52;//52right;
		_delay_ms(80);	
		stand_still();
	}*/
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	bf 90       	pop	r11
     9aa:	af 90       	pop	r10
     9ac:	9f 90       	pop	r9
     9ae:	8f 90       	pop	r8
     9b0:	7f 90       	pop	r7
     9b2:	6f 90       	pop	r6
     9b4:	5f 90       	pop	r5
     9b6:	4f 90       	pop	r4
     9b8:	08 95       	ret

000009ba <linje>:
float current_position = 0;



	 
void linje(void){
     9ba:	4f 92       	push	r4
     9bc:	5f 92       	push	r5
     9be:	6f 92       	push	r6
     9c0:	7f 92       	push	r7
     9c2:	8f 92       	push	r8
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
	cli();
     9d2:	f8 94       	cli
	int current_position_tmp = current_position;
     9d4:	60 91 2b 01 	lds	r22, 0x012B
     9d8:	70 91 2c 01 	lds	r23, 0x012C
     9dc:	80 91 2d 01 	lds	r24, 0x012D
     9e0:	90 91 2e 01 	lds	r25, 0x012E
     9e4:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fixsfsi>
	sei();
     9e8:	78 94       	sei
	
	current_error = setpoint - current_position_tmp;
     9ea:	20 91 39 01 	lds	r18, 0x0139
     9ee:	30 91 3a 01 	lds	r19, 0x013A
     9f2:	a9 01       	movw	r20, r18
     9f4:	46 1b       	sub	r20, r22
     9f6:	57 0b       	sbc	r21, r23
     9f8:	ba 01       	movw	r22, r20
     9fa:	07 2e       	mov	r0, r23
     9fc:	00 0c       	add	r0, r0
     9fe:	88 0b       	sbc	r24, r24
     a00:	99 0b       	sbc	r25, r25
     a02:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     a06:	6b 01       	movw	r12, r22
     a08:	7c 01       	movw	r14, r24
     a0a:	60 93 35 01 	sts	0x0135, r22
     a0e:	70 93 36 01 	sts	0x0136, r23
     a12:	80 93 37 01 	sts	0x0137, r24
     a16:	90 93 38 01 	sts	0x0138, r25
	derivate = (current_error -previous_error);					// Tror det var dt som saknades fÃ¶r derivatan
     a1a:	20 91 2f 01 	lds	r18, 0x012F
     a1e:	30 91 30 01 	lds	r19, 0x0130
     a22:	40 91 31 01 	lds	r20, 0x0131
     a26:	50 91 32 01 	lds	r21, 0x0132
     a2a:	0e 94 76 0e 	call	0x1cec	; 0x1cec <__subsf3>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
     a32:	60 93 4f 01 	sts	0x014F, r22
     a36:	70 93 50 01 	sts	0x0150, r23
     a3a:	80 93 51 01 	sts	0x0151, r24
     a3e:	90 93 52 01 	sts	0x0152, r25
	output = (p_constant * current_error + d_constant * derivate);
     a42:	60 91 02 01 	lds	r22, 0x0102
     a46:	70 91 03 01 	lds	r23, 0x0103
     a4a:	07 2e       	mov	r0, r23
     a4c:	00 0c       	add	r0, r0
     a4e:	88 0b       	sbc	r24, r24
     a50:	99 0b       	sbc	r25, r25
     a52:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     a56:	9b 01       	movw	r18, r22
     a58:	ac 01       	movw	r20, r24
     a5a:	c7 01       	movw	r24, r14
     a5c:	b6 01       	movw	r22, r12
     a5e:	0e 94 02 10 	call	0x2004	; 0x2004 <__mulsf3>
     a62:	2b 01       	movw	r4, r22
     a64:	3c 01       	movw	r6, r24
     a66:	60 91 00 01 	lds	r22, 0x0100
     a6a:	70 91 01 01 	lds	r23, 0x0101
     a6e:	07 2e       	mov	r0, r23
     a70:	00 0c       	add	r0, r0
     a72:	88 0b       	sbc	r24, r24
     a74:	99 0b       	sbc	r25, r25
     a76:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	c5 01       	movw	r24, r10
     a80:	b4 01       	movw	r22, r8
     a82:	0e 94 02 10 	call	0x2004	; 0x2004 <__mulsf3>
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	c3 01       	movw	r24, r6
     a8c:	b2 01       	movw	r22, r4
     a8e:	0e 94 77 0e 	call	0x1cee	; 0x1cee <__addsf3>
     a92:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <__fixsfsi>
     a96:	9b 01       	movw	r18, r22
     a98:	70 93 34 01 	sts	0x0134, r23
     a9c:	60 93 33 01 	sts	0x0133, r22
	previous_error = current_error;
     aa0:	c0 92 2f 01 	sts	0x012F, r12
     aa4:	d0 92 30 01 	sts	0x0130, r13
     aa8:	e0 92 31 01 	sts	0x0131, r14
     aac:	f0 92 32 01 	sts	0x0132, r15
//***********************************
//Reglering
//***********************************
		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     ab0:	40 91 5f 01 	lds	r20, 0x015F
     ab4:	50 91 60 01 	lds	r21, 0x0160
     ab8:	45 2b       	or	r20, r21
     aba:	e9 f4       	brne	.+58     	; 0xaf6 <linje+0x13c>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     abc:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= (1 << motor_dir_right);
     abe:	2d 9a       	sbi	0x05, 5	; 5
		motor_left = left/(2 * RGB_slow);
     ac0:	60 91 19 01 	lds	r22, 0x0119
     ac4:	70 91 1a 01 	lds	r23, 0x011A
     ac8:	66 0f       	add	r22, r22
     aca:	77 1f       	adc	r23, r23
     acc:	80 91 6d 01 	lds	r24, 0x016D
     ad0:	90 91 6e 01 	lds	r25, 0x016E
     ad4:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     ad8:	67 bd       	out	0x27, r22	; 39
		motor_right = right/(2 * RGB_slow);
     ada:	60 91 19 01 	lds	r22, 0x0119
     ade:	70 91 1a 01 	lds	r23, 0x011A
     ae2:	66 0f       	add	r22, r22
     ae4:	77 1f       	adc	r23, r23
     ae6:	80 91 6b 01 	lds	r24, 0x016B
     aea:	90 91 6c 01 	lds	r25, 0x016C
     aee:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     af2:	68 bd       	out	0x28, r22	; 40
     af4:	c3 c0       	rjmp	.+390    	; 0xc7c <linje+0x2c2>
	}
	else if(output < 0){							// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     af6:	77 23       	and	r23, r23
     af8:	0c f0       	brlt	.+2      	; 0xafc <linje+0x142>
     afa:	57 c0       	rjmp	.+174    	; 0xbaa <linje+0x1f0>
		if(abs(output) >= (right / RGB_slow)){					// FÃ¶r att unvika mÃ¤ttnad i regleringen
     afc:	9b 01       	movw	r18, r22
     afe:	77 23       	and	r23, r23
     b00:	24 f4       	brge	.+8      	; 0xb0a <linje+0x150>
     b02:	22 27       	eor	r18, r18
     b04:	33 27       	eor	r19, r19
     b06:	26 1b       	sub	r18, r22
     b08:	37 0b       	sbc	r19, r23
     b0a:	80 91 6b 01 	lds	r24, 0x016B
     b0e:	90 91 6c 01 	lds	r25, 0x016C
     b12:	60 91 19 01 	lds	r22, 0x0119
     b16:	70 91 1a 01 	lds	r23, 0x011A
     b1a:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     b1e:	26 17       	cp	r18, r22
     b20:	37 07       	cpc	r19, r23
     b22:	24 f1       	brlt	.+72     	; 0xb6c <linje+0x1b2>
			//PORTB |= (1 << motor_dir_left);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  
     b24:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   
     b26:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left / RGB_slow;
     b28:	80 91 6d 01 	lds	r24, 0x016D
     b2c:	90 91 6e 01 	lds	r25, 0x016E
     b30:	60 91 19 01 	lds	r22, 0x0119
     b34:	70 91 1a 01 	lds	r23, 0x011A
     b38:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     b3c:	67 bd       	out	0x27, r22	; 39
			motor_right = (abs(output)- right) / RGB_slow;
     b3e:	80 91 33 01 	lds	r24, 0x0133
     b42:	90 91 34 01 	lds	r25, 0x0134
     b46:	99 23       	and	r25, r25
     b48:	1c f4       	brge	.+6      	; 0xb50 <linje+0x196>
     b4a:	91 95       	neg	r25
     b4c:	81 95       	neg	r24
     b4e:	91 09       	sbc	r25, r1
     b50:	20 91 6b 01 	lds	r18, 0x016B
     b54:	30 91 6c 01 	lds	r19, 0x016C
     b58:	82 1b       	sub	r24, r18
     b5a:	93 0b       	sbc	r25, r19
     b5c:	60 91 19 01 	lds	r22, 0x0119
     b60:	70 91 1a 01 	lds	r23, 0x011A
     b64:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     b68:	68 bd       	out	0x28, r22	; 40
     b6a:	88 c0       	rjmp	.+272    	; 0xc7c <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     b6c:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     b6e:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left / RGB_slow;
     b70:	80 91 6d 01 	lds	r24, 0x016D
     b74:	90 91 6e 01 	lds	r25, 0x016E
     b78:	60 91 19 01 	lds	r22, 0x0119
     b7c:	70 91 1a 01 	lds	r23, 0x011A
     b80:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     b84:	67 bd       	out	0x27, r22	; 39
			motor_right = (right + output) / RGB_slow;
     b86:	20 91 6b 01 	lds	r18, 0x016B
     b8a:	30 91 6c 01 	lds	r19, 0x016C
     b8e:	80 91 33 01 	lds	r24, 0x0133
     b92:	90 91 34 01 	lds	r25, 0x0134
     b96:	82 0f       	add	r24, r18
     b98:	93 1f       	adc	r25, r19
     b9a:	60 91 19 01 	lds	r22, 0x0119
     b9e:	70 91 1a 01 	lds	r23, 0x011A
     ba2:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     ba6:	68 bd       	out	0x28, r22	; 40
     ba8:	69 c0       	rjmp	.+210    	; 0xc7c <linje+0x2c2>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     baa:	16 16       	cp	r1, r22
     bac:	17 06       	cpc	r1, r23
     bae:	0c f0       	brlt	.+2      	; 0xbb2 <linje+0x1f8>
     bb0:	4b c0       	rjmp	.+150    	; 0xc48 <linje+0x28e>
		if(output >= (left / RGB_slow)){							// FÃ¶r att unvika mÃ¤ttnad i regleringen
     bb2:	80 91 6d 01 	lds	r24, 0x016D
     bb6:	90 91 6e 01 	lds	r25, 0x016E
     bba:	60 91 19 01 	lds	r22, 0x0119
     bbe:	70 91 1a 01 	lds	r23, 0x011A
     bc2:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     bc6:	26 17       	cp	r18, r22
     bc8:	37 07       	cpc	r19, r23
     bca:	fc f0       	brlt	.+62     	; 0xc0a <linje+0x250>
			//PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_left);			// Set motor direction to backward  
     bcc:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   
     bce:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     bd0:	80 91 6b 01 	lds	r24, 0x016B
     bd4:	90 91 6c 01 	lds	r25, 0x016C
     bd8:	60 91 19 01 	lds	r22, 0x0119
     bdc:	70 91 1a 01 	lds	r23, 0x011A
     be0:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     be4:	68 bd       	out	0x28, r22	; 40
			motor_left = (output - left) / RGB_slow;
     be6:	80 91 33 01 	lds	r24, 0x0133
     bea:	90 91 34 01 	lds	r25, 0x0134
     bee:	20 91 6d 01 	lds	r18, 0x016D
     bf2:	30 91 6e 01 	lds	r19, 0x016E
     bf6:	82 1b       	sub	r24, r18
     bf8:	93 0b       	sbc	r25, r19
     bfa:	60 91 19 01 	lds	r22, 0x0119
     bfe:	70 91 1a 01 	lds	r23, 0x011A
     c02:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     c06:	67 bd       	out	0x27, r22	; 39
     c08:	39 c0       	rjmp	.+114    	; 0xc7c <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     c0a:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     c0c:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     c0e:	80 91 6b 01 	lds	r24, 0x016B
     c12:	90 91 6c 01 	lds	r25, 0x016C
     c16:	60 91 19 01 	lds	r22, 0x0119
     c1a:	70 91 1a 01 	lds	r23, 0x011A
     c1e:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     c22:	68 bd       	out	0x28, r22	; 40
			motor_left = (left - output) / RGB_slow;
     c24:	80 91 6d 01 	lds	r24, 0x016D
     c28:	90 91 6e 01 	lds	r25, 0x016E
     c2c:	20 91 33 01 	lds	r18, 0x0133
     c30:	30 91 34 01 	lds	r19, 0x0134
     c34:	82 1b       	sub	r24, r18
     c36:	93 0b       	sbc	r25, r19
     c38:	60 91 19 01 	lds	r22, 0x0119
     c3c:	70 91 1a 01 	lds	r23, 0x011A
     c40:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     c44:	67 bd       	out	0x27, r22	; 39
     c46:	1a c0       	rjmp	.+52     	; 0xc7c <linje+0x2c2>
		}
	}
	else if(output==0){
     c48:	67 2b       	or	r22, r23
     c4a:	c1 f4       	brne	.+48     	; 0xc7c <linje+0x2c2>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     c4c:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     c4e:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left / RGB_slow;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     c50:	80 91 6d 01 	lds	r24, 0x016D
     c54:	90 91 6e 01 	lds	r25, 0x016E
     c58:	60 91 19 01 	lds	r22, 0x0119
     c5c:	70 91 1a 01 	lds	r23, 0x011A
     c60:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     c64:	67 bd       	out	0x27, r22	; 39
		motor_right = right / RGB_slow;
     c66:	80 91 6b 01 	lds	r24, 0x016B
     c6a:	90 91 6c 01 	lds	r25, 0x016C
     c6e:	60 91 19 01 	lds	r22, 0x0119
     c72:	70 91 1a 01 	lds	r23, 0x011A
     c76:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
     c7a:	68 bd       	out	0x28, r22	; 40
	}
}
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	bf 90       	pop	r11
     c86:	af 90       	pop	r10
     c88:	9f 90       	pop	r9
     c8a:	8f 90       	pop	r8
     c8c:	7f 90       	pop	r7
     c8e:	6f 90       	pop	r6
     c90:	5f 90       	pop	r5
     c92:	4f 90       	pop	r4
     c94:	08 95       	ret

00000c96 <linje_main>:
int RGB_slow = 1;
int RGB_force = 0;

void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	RGB_slow = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	90 93 1a 01 	sts	0x011A, r25
     c9e:	80 93 19 01 	sts	0x0119, r24
	/*if(distans_fram<34){
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
		PORTD |= (1 << PD1);
		PORTD |= (1 << PD0);
	}
	else*/ if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     ca2:	80 91 af 01 	lds	r24, 0x01AF
     ca6:	81 50       	subi	r24, 0x01	; 1
     ca8:	83 30       	cpi	r24, 0x03	; 3
     caa:	c0 f4       	brcc	.+48     	; 0xcdc <linje_main+0x46>
		current_position=linje_RGBsveng();
     cac:	cd da       	rcall	.-2662   	; 0x248 <linje_RGBsveng>
     cae:	68 2f       	mov	r22, r24
     cb0:	88 0f       	add	r24, r24
     cb2:	77 0b       	sbc	r23, r23
     cb4:	88 0b       	sbc	r24, r24
     cb6:	99 0b       	sbc	r25, r25
     cb8:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     cbc:	60 93 2b 01 	sts	0x012B, r22
     cc0:	70 93 2c 01 	sts	0x012C, r23
     cc4:	80 93 2d 01 	sts	0x012D, r24
     cc8:	90 93 2e 01 	sts	0x012E, r25
		RGB_slow = 2;
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	90 93 1a 01 	sts	0x011A, r25
     cd4:	80 93 19 01 	sts	0x0119, r24
		linje();
     cd8:	70 ce       	rjmp	.-800    	; 0x9ba <linje>
     cda:	08 95       	ret
	}
	else if(detect_goal()){
     cdc:	9e db       	rcall	.-2244   	; 0x41a <detect_goal>
     cde:	88 23       	and	r24, r24
     ce0:	b1 f0       	breq	.+44     	; 0xd0e <linje_main+0x78>
		//kör rakt fram tills paserat mål förhoppnngsvis
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     ce2:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     ce4:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left;
     ce6:	80 91 6d 01 	lds	r24, 0x016D
     cea:	87 bd       	out	0x27, r24	; 39
		motor_right = right;
     cec:	80 91 6b 01 	lds	r24, 0x016B
     cf0:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cf2:	2f ef       	ldi	r18, 0xFF	; 255
     cf4:	8f ef       	ldi	r24, 0xFF	; 255
     cf6:	91 e1       	ldi	r25, 0x11	; 17
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	80 40       	sbci	r24, 0x00	; 0
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <linje_main+0x62>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <linje_main+0x6c>
     d02:	00 00       	nop
		_delay_ms(400);
		start=0;
     d04:	10 92 70 01 	sts	0x0170, r1
     d08:	10 92 6f 01 	sts	0x016F, r1
     d0c:	08 95       	ret
		//PORTD |= (1 << PD1);
		//signalera i mål och stanna
	}
	else if(detect_labyrint()){
     d0e:	d6 db       	rcall	.-2132   	; 0x4bc <detect_labyrint>
     d10:	88 23       	and	r24, r24
     d12:	29 f0       	breq	.+10     	; 0xd1e <linje_main+0x88>
		//PORTD |= (1 << PD0);
		//start = 0;
		regulator_mode=0; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
     d14:	10 92 1c 01 	sts	0x011C, r1
     d18:	10 92 1b 01 	sts	0x011B, r1
     d1c:	08 95       	ret
	}
	else{
		current_position=linje_get_error();
     d1e:	e7 d9       	rcall	.-3122   	; 0xee <linje_get_error>
     d20:	bc 01       	movw	r22, r24
     d22:	99 0f       	add	r25, r25
     d24:	88 0b       	sbc	r24, r24
     d26:	99 0b       	sbc	r25, r25
     d28:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__floatsisf>
     d2c:	60 93 2b 01 	sts	0x012B, r22
     d30:	70 93 2c 01 	sts	0x012C, r23
     d34:	80 93 2d 01 	sts	0x012D, r24
     d38:	90 93 2e 01 	sts	0x012E, r25
		linje();
     d3c:	3e ce       	rjmp	.-900    	; 0x9ba <linje>
     d3e:	08 95       	ret

00000d40 <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     d40:	84 b5       	in	r24, 0x24	; 36
     d42:	83 6a       	ori	r24, 0xA3	; 163
     d44:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     d46:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     d48:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     d4a:	85 b5       	in	r24, 0x25	; 37
     d4c:	83 60       	ori	r24, 0x03	; 3
     d4e:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     d50:	88 e7       	ldi	r24, 0x78	; 120
     d52:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     d54:	85 b1       	in	r24, 0x05	; 5
     d56:	15 b8       	out	0x05, r1	; 5
     d58:	08 95       	ret

00000d5a <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     d5e:	e1 e8       	ldi	r30, 0x81	; 129
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8d 60       	ori	r24, 0x0D	; 13
     d66:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     d68:	80 ea       	ldi	r24, 0xA0	; 160
     d6a:	95 e0       	ldi	r25, 0x05	; 5
     d6c:	90 93 89 00 	sts	0x0089, r25
     d70:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     d74:	ef e6       	ldi	r30, 0x6F	; 111
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     d7e:	b1 9a       	sbi	0x16, 1	; 22
     d80:	08 95       	ret

00000d82 <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     d82:	1f 92       	push	r1
     d84:	0f 92       	push	r0
     d86:	0f b6       	in	r0, 0x3f	; 63
     d88:	0f 92       	push	r0
     d8a:	11 24       	eor	r1, r1
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
	//regler_ready=1;
	if(turn_delay < 10)
     d90:	80 91 1d 01 	lds	r24, 0x011D
     d94:	90 91 1e 01 	lds	r25, 0x011E
     d98:	8a 30       	cpi	r24, 0x0A	; 10
     d9a:	91 05       	cpc	r25, r1
     d9c:	2c f4       	brge	.+10     	; 0xda8 <__vector_13+0x26>
		turn_delay++;
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	90 93 1e 01 	sts	0x011E, r25
     da4:	80 93 1d 01 	sts	0x011D, r24
	
	updaterad_labyrint = true;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 62 01 	sts	0x0162, r24
	counter_timer_line_lab++;
     dae:	80 91 67 01 	lds	r24, 0x0167
     db2:	90 91 68 01 	lds	r25, 0x0168
     db6:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_lab >= 50){
     db8:	82 33       	cpi	r24, 0x32	; 50
     dba:	91 05       	cpc	r25, r1
     dbc:	2c f4       	brge	.+10     	; 0xdc8 <__vector_13+0x46>
	//regler_ready=1;
	if(turn_delay < 10)
		turn_delay++;
	
	updaterad_labyrint = true;
	counter_timer_line_lab++;
     dbe:	90 93 68 01 	sts	0x0168, r25
     dc2:	80 93 67 01 	sts	0x0167, r24
     dc6:	06 c0       	rjmp	.+12     	; 0xdd4 <__vector_13+0x52>
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
     dc8:	82 e3       	ldi	r24, 0x32	; 50
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	90 93 68 01 	sts	0x0168, r25
     dd0:	80 93 67 01 	sts	0x0167, r24
	}
	counter_timer_line_RGB++;
     dd4:	80 91 69 01 	lds	r24, 0x0169
     dd8:	90 91 6a 01 	lds	r25, 0x016A
     ddc:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_RGB >= 50){			
     dde:	82 33       	cpi	r24, 0x32	; 50
     de0:	91 05       	cpc	r25, r1
     de2:	2c f4       	brge	.+10     	; 0xdee <__vector_13+0x6c>
	updaterad_labyrint = true;
	counter_timer_line_lab++;
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
	}
	counter_timer_line_RGB++;
     de4:	90 93 6a 01 	sts	0x016A, r25
     de8:	80 93 69 01 	sts	0x0169, r24
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <__vector_13+0x78>
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
     dee:	82 e3       	ldi	r24, 0x32	; 50
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	90 93 6a 01 	sts	0x016A, r25
     df6:	80 93 69 01 	sts	0x0169, r24
	}
	counter_timer_line_goal++;
     dfa:	80 91 65 01 	lds	r24, 0x0165
     dfe:	90 91 66 01 	lds	r25, 0x0166
     e02:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_goal >= 50)
     e04:	82 33       	cpi	r24, 0x32	; 50
     e06:	91 05       	cpc	r25, r1
     e08:	2c f4       	brge	.+10     	; 0xe14 <__vector_13+0x92>
	}
	counter_timer_line_RGB++;
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
	}
	counter_timer_line_goal++;
     e0a:	90 93 66 01 	sts	0x0166, r25
     e0e:	80 93 65 01 	sts	0x0165, r24
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <__vector_13+0x9e>
	if(counter_timer_line_goal >= 50)
		counter_timer_line_goal = 50;
     e14:	82 e3       	ldi	r24, 0x32	; 50
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 66 01 	sts	0x0166, r25
     e1c:	80 93 65 01 	sts	0x0165, r24
		
	//count_waypoint++;			//räknare för att köra ur svängar i labyrinter
}
     e20:	9f 91       	pop	r25
     e22:	8f 91       	pop	r24
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     e2e:	8d b3       	in	r24, 0x1d	; 29
     e30:	86 60       	ori	r24, 0x06	; 6
     e32:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     e34:	e9 e6       	ldi	r30, 0x69	; 105
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 62       	ori	r24, 0x28	; 40
     e3c:	80 83       	st	Z, r24
     e3e:	08 95       	ret

00000e40 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
	if(drive_mode==1){
     e4e:	80 91 71 01 	lds	r24, 0x0171
     e52:	90 91 72 01 	lds	r25, 0x0172
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	39 f4       	brne	.+14     	; 0xe68 <__vector_2+0x28>
		drive_mode=0;
     e5a:	10 92 72 01 	sts	0x0172, r1
     e5e:	10 92 71 01 	sts	0x0171, r1
		PORTD |= (1 << PD1);
     e62:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     e64:	58 98       	cbi	0x0b, 0	; 11
     e66:	0c c0       	rjmp	.+24     	; 0xe80 <__vector_2+0x40>
	}
	else{
		start=0;
     e68:	10 92 70 01 	sts	0x0170, r1
     e6c:	10 92 6f 01 	sts	0x016F, r1
		drive_mode=1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 72 01 	sts	0x0172, r25
     e78:	80 93 71 01 	sts	0x0171, r24
		PORTD |= (1 << PD0);
     e7c:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     e7e:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     e80:	e1 9a       	sbi	0x1c, 1	; 28
}
     e82:	9f 91       	pop	r25
     e84:	8f 91       	pop	r24
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     e90:	1f 92       	push	r1
     e92:	0f 92       	push	r0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	0f 92       	push	r0
     e98:	11 24       	eor	r1, r1
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
	if(start==0){
     e9e:	80 91 6f 01 	lds	r24, 0x016F
     ea2:	90 91 70 01 	lds	r25, 0x0170
     ea6:	89 2b       	or	r24, r25
     ea8:	39 f4       	brne	.+14     	; 0xeb8 <__vector_3+0x28>
		start=1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	90 93 70 01 	sts	0x0170, r25
     eb2:	80 93 6f 01 	sts	0x016F, r24
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <__vector_3+0x30>
	}
	else{
		start=0;
     eb8:	10 92 70 01 	sts	0x0170, r1
     ebc:	10 92 6f 01 	sts	0x016F, r1
	}
	EIFR |= (1<< INTF2);
     ec0:	e2 9a       	sbi	0x1c, 2	; 28
}
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     ed0:	88 23       	and	r24, r24
     ed2:	69 f0       	breq	.+26     	; 0xeee <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     ed4:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     ed6:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     ed8:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     eda:	e9 e6       	ldi	r30, 0x69	; 105
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	83 60       	ori	r24, 0x03	; 3
     ee2:	80 83       	st	Z, r24
		TWBR = 0x10;
     ee4:	80 e1       	ldi	r24, 0x10	; 16
     ee6:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     eea:	10 92 b9 00 	sts	0x00B9, r1
     eee:	08 95       	ret

00000ef0 <i2c_send>:
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     f08:	eb 01       	movw	r28, r22
     f0a:	08 81       	ld	r16, Y
     f0c:	02 95       	swap	r16
     f0e:	0f 70       	andi	r16, 0x0F	; 15
     f10:	10 e0       	ldi	r17, 0x00	; 0
     f12:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     f14:	68 94       	set
     f16:	ee 24       	eor	r14, r14
     f18:	e3 f8       	bld	r14, 3
     f1a:	f1 2c       	mov	r15, r1
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     f1c:	40 e0       	ldi	r20, 0x00	; 0
     f1e:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     f20:	ec eb       	ldi	r30, 0xBC	; 188
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	0f 2e       	mov	r0, r31
     f26:	f4 ea       	ldi	r31, 0xA4	; 164
     f28:	df 2e       	mov	r13, r31
     f2a:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     f2c:	a9 eb       	ldi	r26, 0xB9	; 185
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     f30:	8e 7f       	andi	r24, 0xFE	; 254
     f32:	c8 2e       	mov	r12, r24
     f34:	6b eb       	ldi	r22, 0xBB	; 187
     f36:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     f38:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     f3a:	68 94       	set
     f3c:	aa 24       	eor	r10, r10
     f3e:	a4 f8       	bld	r10, 4
     f40:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     f42:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     f44:	90 81       	ld	r25, Z
     f46:	99 23       	and	r25, r25
     f48:	ec f7       	brge	.-6      	; 0xf44 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     f4a:	2c 91       	ld	r18, X
     f4c:	28 7f       	andi	r18, 0xF8	; 248
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	2e 15       	cp	r18, r14
     f52:	3f 05       	cpc	r19, r15
     f54:	69 f5       	brne	.+90     	; 0xfb0 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     f56:	eb 01       	movw	r28, r22
     f58:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     f5a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
     f5c:	90 81       	ld	r25, Z
     f5e:	99 23       	and	r25, r25
     f60:	ec f7       	brge	.-6      	; 0xf5c <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
     f62:	9c 91       	ld	r25, X
     f64:	98 7f       	andi	r25, 0xF8	; 248
     f66:	98 31       	cpi	r25, 0x18	; 24
     f68:	29 f0       	breq	.+10     	; 0xf74 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     f6a:	84 e9       	ldi	r24, 0x94	; 148
     f6c:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     f70:	80 e0       	ldi	r24, 0x00	; 0
     f72:	1f c0       	rjmp	.+62     	; 0xfb2 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
     f74:	e4 01       	movw	r28, r8
     f76:	99 91       	ld	r25, Y+
     f78:	4e 01       	movw	r8, r28
     f7a:	eb 01       	movw	r28, r22
     f7c:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
     f7e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
     f80:	90 81       	ld	r25, Z
     f82:	99 23       	and	r25, r25
     f84:	ec f7       	brge	.-6      	; 0xf80 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
     f86:	9c 91       	ld	r25, X
     f88:	98 7f       	andi	r25, 0xF8	; 248
     f8a:	98 32       	cpi	r25, 0x28	; 40
     f8c:	29 f0       	breq	.+10     	; 0xf98 <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     f8e:	84 e9       	ldi	r24, 0x94	; 148
     f90:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0d c0       	rjmp	.+26     	; 0xfb2 <i2c_send+0xc2>
	}
	counter++;
     f98:	4f 5f       	subi	r20, 0xFF	; 255
     f9a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     f9c:	ea 2c       	mov	r14, r10
     f9e:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
     fa0:	04 17       	cp	r16, r20
     fa2:	15 07       	cpc	r17, r21
     fa4:	74 f6       	brge	.-100    	; 0xf42 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     fa6:	84 e9       	ldi	r24, 0x94	; 148
     fa8:	80 93 bc 00 	sts	0x00BC, r24
	return true;
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
     fb0:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	af 90       	pop	r10
     fc6:	9f 90       	pop	r9
     fc8:	8f 90       	pop	r8
     fca:	08 95       	ret

00000fcc <req_gyro_turn>:
int gyro_left = 0;
int gyro_right = 0;
int laby_left_speed = 100;
int laby_right_speed = 93;

void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	1f 92       	push	r1
     fd2:	cd b7       	in	r28, 0x3d	; 61
     fd4:	de b7       	in	r29, 0x3e	; 62
	byte data[1] = { 0x07 };
     fd6:	87 e0       	ldi	r24, 0x07	; 7
     fd8:	89 83       	std	Y+1, r24	; 0x01
	i2c_send(0x06, data);
     fda:	be 01       	movw	r22, r28
     fdc:	6f 5f       	subi	r22, 0xFF	; 255
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	86 e0       	ldi	r24, 0x06	; 6
     fe2:	86 df       	rcall	.-244    	; 0xef0 <i2c_send>
	turning = true;
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	80 93 61 01 	sts	0x0161, r24
	turn_delay = 0;
     fea:	10 92 1e 01 	sts	0x011E, r1
     fee:	10 92 1d 01 	sts	0x011D, r1
	while(turn_delay < 2){
		PORTB |= (1 << PB1);
     ff2:	29 9a       	sbi	0x05, 1	; 5
void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
	byte data[1] = { 0x07 };
	i2c_send(0x06, data);
	turning = true;
	turn_delay = 0;
	while(turn_delay < 2){
     ff4:	80 91 1d 01 	lds	r24, 0x011D
     ff8:	90 91 1e 01 	lds	r25, 0x011E
     ffc:	02 97       	sbiw	r24, 0x02	; 2
     ffe:	cc f3       	brlt	.-14     	; 0xff2 <req_gyro_turn+0x26>
		PORTB |= (1 << PB1);
	}
	PORTB &= ~(1 << PB1);
    1000:	29 98       	cbi	0x05, 1	; 5
	
}
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <manual_drive>:
//Funktioner fÃ¶r att styra robot fÃ¶r hÃ¶ger/vÃ¤nster eller framÃ¥t
//--------------------------------------------------------------

void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
    100a:	20 91 55 01 	lds	r18, 0x0155
    100e:	30 91 56 01 	lds	r19, 0x0156
    1012:	21 30       	cpi	r18, 0x01	; 1
    1014:	31 05       	cpc	r19, r1
    1016:	49 f4       	brne	.+18     	; 0x102a <manual_drive+0x20>
				req_gyro_turn();											// Request gyroturn
				turn_left();												// Turn motors on for left spin						
				gyro_left = 1;												
			}
			else if(gyro_left == 1){					// 90 turn done
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
    1018:	10 92 58 01 	sts	0x0158, r1
    101c:	10 92 57 01 	sts	0x0157, r1
				gyro_left = 0;
    1020:	10 92 56 01 	sts	0x0156, r1
    1024:	10 92 55 01 	sts	0x0155, r1
    1028:	08 95       	ret
void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
			manual_function = 6;
		}
		else if(gyro_right == 1){
    102a:	80 91 53 01 	lds	r24, 0x0153
    102e:	90 91 54 01 	lds	r25, 0x0154
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	71 f4       	brne	.+28     	; 0x1052 <manual_drive+0x48>
			manual_function = 5;	
    1036:	85 e0       	ldi	r24, 0x05	; 5
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	90 93 58 01 	sts	0x0158, r25
    103e:	80 93 57 01 	sts	0x0157, r24
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    1042:	80 91 53 01 	lds	r24, 0x0153
    1046:	90 91 54 01 	lds	r25, 0x0154
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	09 f0       	breq	.+2      	; 0x1050 <manual_drive+0x46>
    104e:	5a c0       	rjmp	.+180    	; 0x1104 <manual_drive+0xfa>
    1050:	50 c0       	rjmp	.+160    	; 0x10f2 <manual_drive+0xe8>
		}
		else if(gyro_right == 1){
			manual_function = 5;	
		}
		//*******************************
		if(manual_function == 0){											// Stand still = dont dare to move
    1052:	80 91 57 01 	lds	r24, 0x0157
    1056:	90 91 58 01 	lds	r25, 0x0158
    105a:	00 97       	sbiw	r24, 0x00	; 0
    105c:	29 f4       	brne	.+10     	; 0x1068 <manual_drive+0x5e>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    105e:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1060:	2d 98       	cbi	0x05, 5	; 5
			motor_left = 0;
    1062:	17 bc       	out	0x27, r1	; 39
			motor_right = 0;
    1064:	18 bc       	out	0x28, r1	; 40
    1066:	08 95       	ret
		}
		else if(manual_function == 1){										// Forward
    1068:	81 30       	cpi	r24, 0x01	; 1
    106a:	91 05       	cpc	r25, r1
    106c:	49 f4       	brne	.+18     	; 0x1080 <manual_drive+0x76>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    106e:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1070:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    1072:	80 91 6d 01 	lds	r24, 0x016D
    1076:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    1078:	80 91 6b 01 	lds	r24, 0x016B
    107c:	88 bd       	out	0x28, r24	; 40
    107e:	08 95       	ret
		}
		else if(manual_function == 2){										// Backward
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	91 05       	cpc	r25, r1
    1084:	59 f4       	brne	.+22     	; 0x109c <manual_drive+0x92>
			PORTB |= (1 << motor_dir_left) | (1 << motor_dir_right);		// Set motor direction to backward
    1086:	85 b1       	in	r24, 0x05	; 5
    1088:	80 66       	ori	r24, 0x60	; 96
    108a:	85 b9       	out	0x05, r24	; 5
			motor_left = left-13;											// -n for adjusting so the motors "speed" are the same :D :D  ***Change depends on speed :D***
    108c:	80 91 6d 01 	lds	r24, 0x016D
    1090:	8d 50       	subi	r24, 0x0D	; 13
    1092:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    1094:	80 91 6b 01 	lds	r24, 0x016B
    1098:	88 bd       	out	0x28, r24	; 40
    109a:	08 95       	ret
		}
		else if(manual_function == 3){										// Rightforward
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	89 f4       	brne	.+34     	; 0x10c4 <manual_drive+0xba>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10a2:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10a4:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    10a6:	80 91 6d 01 	lds	r24, 0x016D
    10aa:	87 bd       	out	0x27, r24	; 39
			motor_right = (right - (right/3));								// Speed value minus one third of the speedvalue
    10ac:	20 91 6b 01 	lds	r18, 0x016B
    10b0:	90 91 6c 01 	lds	r25, 0x016C
    10b4:	82 2f       	mov	r24, r18
    10b6:	63 e0       	ldi	r22, 0x03	; 3
    10b8:	70 e0       	ldi	r23, 0x00	; 0
    10ba:	0e 94 65 10 	call	0x20ca	; 0x20ca <__divmodhi4>
    10be:	26 1b       	sub	r18, r22
    10c0:	28 bd       	out	0x28, r18	; 40
    10c2:	08 95       	ret
		}
		else if(manual_function == 4){										// Leftforward
    10c4:	84 30       	cpi	r24, 0x04	; 4
    10c6:	91 05       	cpc	r25, r1
    10c8:	81 f4       	brne	.+32     	; 0x10ea <manual_drive+0xe0>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10ca:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10cc:	2d 98       	cbi	0x05, 5	; 5
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
    10ce:	20 91 6d 01 	lds	r18, 0x016D
    10d2:	90 91 6e 01 	lds	r25, 0x016E
    10d6:	82 2f       	mov	r24, r18
    10d8:	63 e0       	ldi	r22, 0x03	; 3
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	f6 d7       	rcall	.+4076   	; 0x20ca <__divmodhi4>
    10de:	26 1b       	sub	r18, r22
    10e0:	27 bd       	out	0x27, r18	; 39
			motor_right = right;
    10e2:	80 91 6b 01 	lds	r24, 0x016B
    10e6:	88 bd       	out	0x28, r24	; 40
    10e8:	08 95       	ret
		}
		else if(manual_function == 5){										// Spin right
    10ea:	85 30       	cpi	r24, 0x05	; 5
    10ec:	91 05       	cpc	r25, r1
    10ee:	a9 f4       	brne	.+42     	; 0x111a <manual_drive+0x110>
    10f0:	26 c0       	rjmp	.+76     	; 0x113e <manual_drive+0x134>
			if(gyro_right == 0){											// Only once when pressed
				req_gyro_turn();											// Request gyroturn
    10f2:	6c df       	rcall	.-296    	; 0xfcc <req_gyro_turn>
				turn_right();												// Turn motors on for left spin	
    10f4:	0d da       	rcall	.-3046   	; 0x510 <turn_right>
				gyro_right = 1; 
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	90 93 54 01 	sts	0x0154, r25
    10fe:	80 93 53 01 	sts	0x0153, r24
    1102:	08 95       	ret
			}
			else if(gyro_right == 1){				// 90 turn done
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	09 f5       	brne	.+66     	; 0x114a <manual_drive+0x140>
				manual_function = 0;										// kan behÃ¶vas nollstÃ¤llning av funktion (probably not)
    1108:	10 92 58 01 	sts	0x0158, r1
    110c:	10 92 57 01 	sts	0x0157, r1
				gyro_right = 0;												
    1110:	10 92 54 01 	sts	0x0154, r1
    1114:	10 92 53 01 	sts	0x0153, r1
    1118:	08 95       	ret
			}
		}
		else if(manual_function == 6){										// Spin left
    111a:	06 97       	sbiw	r24, 0x06	; 6
    111c:	59 f4       	brne	.+22     	; 0x1134 <manual_drive+0x12a>
			if(gyro_left == 0){												// Only once when pressed
    111e:	23 2b       	or	r18, r19
    1120:	a1 f4       	brne	.+40     	; 0x114a <manual_drive+0x140>
				req_gyro_turn();											// Request gyroturn
    1122:	54 df       	rcall	.-344    	; 0xfcc <req_gyro_turn>
				turn_left();												// Turn motors on for left spin						
    1124:	ee d9       	rcall	.-3108   	; 0x502 <turn_left>
				gyro_left = 1;												
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	90 93 56 01 	sts	0x0156, r25
    112e:	80 93 55 01 	sts	0x0155, r24
    1132:	08 95       	ret
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
				gyro_left = 0;
			}
		}
		else{
			manual_function=0;												// why not :D 
    1134:	10 92 58 01 	sts	0x0158, r1
    1138:	10 92 57 01 	sts	0x0157, r1
    113c:	08 95       	ret
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    113e:	80 91 53 01 	lds	r24, 0x0153
    1142:	90 91 54 01 	lds	r25, 0x0154
    1146:	89 2b       	or	r24, r25
    1148:	a1 f2       	breq	.-88     	; 0x10f2 <manual_drive+0xe8>
    114a:	08 95       	ret

0000114c <waypoint_lab>:

//-------------------------------------
//Funktioner som kommer styra roboten vid specialfall som tillexempel t-korsning eller en vanlig sväng
//-------------------------------------
void waypoint_lab(int distance_left,int distance_right,int distance_front,int st_value){ //t-korsning 
    114c:	fc 01       	movw	r30, r24
    114e:	db 01       	movw	r26, r22
	//PORTD ^= ( 1 << PD1 );
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    1150:	90 91 4a 01 	lds	r25, 0x014A
    1154:	91 11       	cpse	r25, r1
    1156:	5d c0       	rjmp	.+186    	; 0x1212 <waypoint_lab+0xc6>
    1158:	80 91 06 01 	lds	r24, 0x0106
    115c:	90 91 07 01 	lds	r25, 0x0107
    1160:	84 17       	cp	r24, r20
    1162:	95 07       	cpc	r25, r21
    1164:	24 f4       	brge	.+8      	; 0x116e <waypoint_lab+0x22>
		drive_forward();
    1166:	c4 d9       	rcall	.-3192   	; 0x4f0 <drive_forward>
		turn_done = false;
    1168:	10 92 49 01 	sts	0x0149, r1
    116c:	08 95       	ret
	}
	
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		ongoing_turn = true;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 4a 01 	sts	0x014A, r24
		start_turn = true;
    1174:	80 93 4b 01 	sts	0x014B, r24
		turn_done = false;
    1178:	10 92 49 01 	sts	0x0149, r1
		stand_still();
    117c:	b4 c9       	rjmp	.-3224   	; 0x4e6 <stand_still>
    117e:	08 95       	ret
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
		
		if(RGB_data == 3){					//RGB_data="blå" alltså sväng vänster vänster=blå
    1180:	80 91 af 01 	lds	r24, 0x01AF
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	49 f4       	brne	.+18     	; 0x119a <waypoint_lab+0x4e>
			req_gyro_turn();
    1188:	21 df       	rcall	.-446    	; 0xfcc <req_gyro_turn>
			turn_left();
    118a:	bb d9       	rcall	.-3210   	; 0x502 <turn_left>
			regulate_side = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	90 93 42 01 	sts	0x0142, r25
    1194:	80 93 41 01 	sts	0x0141, r24
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <waypoint_lab+0x5e>
		}
		else {
			req_gyro_turn();
    119a:	18 df       	rcall	.-464    	; 0xfcc <req_gyro_turn>
			turn_right();
    119c:	b9 d9       	rcall	.-3214   	; 0x510 <turn_right>
			regulate_side = 2;					//RGB_data="röd" alltså sväng höger
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	90 93 42 01 	sts	0x0142, r25
    11a6:	80 93 41 01 	sts	0x0141, r24
		}
		start_turn = false;					//Säger att svängen har inledits för att inte gå in i den här if-satsen igen
    11aa:	10 92 4b 01 	sts	0x014B, r1
		first_time = true;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 0c 01 	sts	0x010C, r24
    11b4:	08 95       	ret

	}
	
	else if(ongoing_turn && !turning && (distance_left > st_value || distance_right > st_value)){	//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    11b6:	80 91 61 01 	lds	r24, 0x0161
    11ba:	81 11       	cpse	r24, r1
    11bc:	17 c0       	rjmp	.+46     	; 0x11ec <waypoint_lab+0xa0>
    11be:	2e 17       	cp	r18, r30
    11c0:	3f 07       	cpc	r19, r31
    11c2:	1c f0       	brlt	.+6      	; 0x11ca <waypoint_lab+0x7e>
    11c4:	2a 17       	cp	r18, r26
    11c6:	3b 07       	cpc	r19, r27
    11c8:	4c f5       	brge	.+82     	; 0x121c <waypoint_lab+0xd0>
		turn_done = true;
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	80 93 49 01 	sts	0x0149, r24
		//count_waypoint = 0;
		//drive_forward(); // Byt till att reglera mot vägg
		
		if(regulate_side == 1)
    11d0:	80 91 41 01 	lds	r24, 0x0141
    11d4:	90 91 42 01 	lds	r25, 0x0142
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	21 f4       	brne	.+8      	; 0x11e4 <waypoint_lab+0x98>
			drive_forward_right(distance_right, distance_front);
    11dc:	ba 01       	movw	r22, r20
    11de:	cd 01       	movw	r24, r26
    11e0:	28 cb       	rjmp	.-2480   	; 0x832 <drive_forward_right>
    11e2:	08 95       	ret
		else
			drive_forward_left(distance_left, distance_front);
    11e4:	ba 01       	movw	r22, r20
    11e6:	cf 01       	movw	r24, r30
    11e8:	5d ca       	rjmp	.-2886   	; 0x6a4 <drive_forward_left>
    11ea:	08 95       	ret
	}
	
	else if(ongoing_turn && turn_done && distance_right <= st_value && distance_left <= st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    11ec:	80 91 49 01 	lds	r24, 0x0149
    11f0:	88 23       	and	r24, r24
    11f2:	c1 f0       	breq	.+48     	; 0x1224 <waypoint_lab+0xd8>
    11f4:	2a 17       	cp	r18, r26
    11f6:	3b 07       	cpc	r19, r27
    11f8:	ac f0       	brlt	.+42     	; 0x1224 <waypoint_lab+0xd8>
    11fa:	2e 17       	cp	r18, r30
    11fc:	3f 07       	cpc	r19, r31
    11fe:	94 f0       	brlt	.+36     	; 0x1224 <waypoint_lab+0xd8>
		waypoint = false;	
    1200:	10 92 40 01 	sts	0x0140, r1
		RGB_data = 0;					
    1204:	10 92 af 01 	sts	0x01AF, r1
		ongoing_turn = false;
    1208:	10 92 4a 01 	sts	0x014A, r1
		prepare_special_case = false;
    120c:	10 92 47 01 	sts	0x0147, r1
    1210:	08 95       	ret
		start_turn = true;
		turn_done = false;
		stand_still();
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
    1212:	80 91 4b 01 	lds	r24, 0x014B
    1216:	81 11       	cpse	r24, r1
    1218:	b3 cf       	rjmp	.-154    	; 0x1180 <waypoint_lab+0x34>
    121a:	cd cf       	rjmp	.-102    	; 0x11b6 <waypoint_lab+0x6a>
			drive_forward_right(distance_right, distance_front);
		else
			drive_forward_left(distance_left, distance_front);
	}
	
	else if(ongoing_turn && turn_done && distance_right <= st_value && distance_left <= st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    121c:	80 91 49 01 	lds	r24, 0x0149
    1220:	81 11       	cpse	r24, r1
    1222:	ee cf       	rjmp	.-36     	; 0x1200 <waypoint_lab+0xb4>
    1224:	08 95       	ret

00001226 <oneway_turn_lab>:
		ongoing_turn = false;
		prepare_special_case = false;
	}
}

void oneway_turn_lab(int distance_left,int distance_right,int distance_front,int st_value){//roboten kommer fram till en enkel kurva antingen till höger eller vänster
    1226:	0f 93       	push	r16
    1228:	1f 93       	push	r17
    122a:	cf 93       	push	r28
    122c:	df 93       	push	r29
    122e:	ec 01       	movw	r28, r24
    1230:	8b 01       	movw	r16, r22
	PORTD ^= ( 1 << PD0 );
    1232:	8b b1       	in	r24, 0x0b	; 11
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	98 27       	eor	r25, r24
    1238:	9b b9       	out	0x0b, r25	; 11
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    123a:	80 91 4a 01 	lds	r24, 0x014A
    123e:	81 11       	cpse	r24, r1
    1240:	14 c0       	rjmp	.+40     	; 0x126a <oneway_turn_lab+0x44>
    1242:	80 91 06 01 	lds	r24, 0x0106
    1246:	90 91 07 01 	lds	r25, 0x0107
    124a:	84 17       	cp	r24, r20
    124c:	95 07       	cpc	r25, r21
    124e:	24 f4       	brge	.+8      	; 0x1258 <oneway_turn_lab+0x32>
		drive_forward();
    1250:	4f d9       	rcall	.-3426   	; 0x4f0 <drive_forward>
		turn_done = false;
    1252:	10 92 49 01 	sts	0x0149, r1
    1256:	51 c0       	rjmp	.+162    	; 0x12fa <oneway_turn_lab+0xd4>
	}
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		turn_done = false;
    1258:	10 92 49 01 	sts	0x0149, r1
		ongoing_turn = true;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 4a 01 	sts	0x014A, r24
		start_turn = true;
    1262:	80 93 4b 01 	sts	0x014B, r24
		stand_still();
    1266:	3f d9       	rcall	.-3458   	; 0x4e6 <stand_still>
    1268:	48 c0       	rjmp	.+144    	; 0x12fa <oneway_turn_lab+0xd4>
	}
	else if(start_turn){	
    126a:	80 91 4b 01 	lds	r24, 0x014B
    126e:	88 23       	and	r24, r24
    1270:	e9 f0       	breq	.+58     	; 0x12ac <oneway_turn_lab+0x86>
		start_turn = false;									//Roboten är inne i kurvan och redo o svänga 
    1272:	10 92 4b 01 	sts	0x014B, r1
		if(distance_left > st_value){						//Kollar avstånd till höger och vänster för att -												//se vilket håll det ska svängas och inleder sedan sväng
    1276:	2c 17       	cp	r18, r28
    1278:	3d 07       	cpc	r19, r29
    127a:	4c f4       	brge	.+18     	; 0x128e <oneway_turn_lab+0x68>
			req_gyro_turn();
    127c:	a7 de       	rcall	.-690    	; 0xfcc <req_gyro_turn>
			turn_left();
    127e:	41 d9       	rcall	.-3454   	; 0x502 <turn_left>
			regulate_side = 1;
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	90 93 42 01 	sts	0x0142, r25
    1288:	80 93 41 01 	sts	0x0141, r24
    128c:	0b c0       	rjmp	.+22     	; 0x12a4 <oneway_turn_lab+0x7e>
		}
		else if(distance_right > st_value){
    128e:	26 17       	cp	r18, r22
    1290:	37 07       	cpc	r19, r23
    1292:	44 f4       	brge	.+16     	; 0x12a4 <oneway_turn_lab+0x7e>
			req_gyro_turn();
    1294:	9b de       	rcall	.-714    	; 0xfcc <req_gyro_turn>
			turn_right();
    1296:	3c d9       	rcall	.-3464   	; 0x510 <turn_right>
			regulate_side = 2;
    1298:	82 e0       	ldi	r24, 0x02	; 2
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	90 93 42 01 	sts	0x0142, r25
    12a0:	80 93 41 01 	sts	0x0141, r24
		}
		
		first_time = true;						
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 0c 01 	sts	0x010C, r24
    12aa:	27 c0       	rjmp	.+78     	; 0x12fa <oneway_turn_lab+0xd4>
		//previous_right = 0;
		//previous_left = 0;
		//return;
	}
	
	else if(ongoing_turn && !turn_done && (distance_left > st_value || distance_right > st_value)){					//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    12ac:	80 91 49 01 	lds	r24, 0x0149
    12b0:	81 11       	cpse	r24, r1
    12b2:	23 c0       	rjmp	.+70     	; 0x12fa <oneway_turn_lab+0xd4>
    12b4:	2c 17       	cp	r18, r28
    12b6:	3d 07       	cpc	r19, r29
    12b8:	1c f0       	brlt	.+6      	; 0x12c0 <oneway_turn_lab+0x9a>
    12ba:	26 17       	cp	r18, r22
    12bc:	37 07       	cpc	r19, r23
    12be:	74 f4       	brge	.+28     	; 0x12dc <oneway_turn_lab+0xb6>
		//count_waypoint = 0; //oneway_turn
		//gyro_turn = 0;
		//drive_forward();
		//drive_forward();
		
		if(regulate_side == 1)
    12c0:	80 91 41 01 	lds	r24, 0x0141
    12c4:	90 91 42 01 	lds	r25, 0x0142
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	21 f4       	brne	.+8      	; 0x12d4 <oneway_turn_lab+0xae>
			drive_forward_right(distance_right, distance_front);
    12cc:	ba 01       	movw	r22, r20
    12ce:	c8 01       	movw	r24, r16
    12d0:	b0 da       	rcall	.-2720   	; 0x832 <drive_forward_right>
    12d2:	13 c0       	rjmp	.+38     	; 0x12fa <oneway_turn_lab+0xd4>
		else 
			drive_forward_left(distance_left, distance_front);	
    12d4:	ba 01       	movw	r22, r20
    12d6:	ce 01       	movw	r24, r28
    12d8:	e5 d9       	rcall	.-3126   	; 0x6a4 <drive_forward_left>
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <oneway_turn_lab+0xd4>
		//drive_forward(); // Byt till left eller right beroende på riktning
	}
	
	else if(!turn_done && distance_left < st_value && distance_right < st_value /*&& previous_left < st_value && previous_right < st_value*/){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    12dc:	c2 17       	cp	r28, r18
    12de:	d3 07       	cpc	r29, r19
    12e0:	64 f4       	brge	.+24     	; 0x12fa <oneway_turn_lab+0xd4>
    12e2:	62 17       	cp	r22, r18
    12e4:	73 07       	cpc	r23, r19
    12e6:	4c f4       	brge	.+18     	; 0x12fa <oneway_turn_lab+0xd4>
		turn_done = true;
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	80 93 49 01 	sts	0x0149, r24
		oneway_turn = false;
    12ee:	10 92 3f 01 	sts	0x013F, r1
		ongoing_turn = false;
    12f2:	10 92 4a 01 	sts	0x014A, r1
		//PORTD ^= (1 << PD0);
		prepare_special_case = false;
    12f6:	10 92 47 01 	sts	0x0147, r1
	}
	previous_right = distance_right;
    12fa:	10 93 46 01 	sts	0x0146, r17
    12fe:	00 93 45 01 	sts	0x0145, r16
	previous_left = distance_left;
    1302:	d0 93 44 01 	sts	0x0144, r29
    1306:	c0 93 43 01 	sts	0x0143, r28
}
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	08 95       	ret

00001314 <twoway_turn_left_lab>:


//Måste testas
void twoway_turn_left_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram	
    1314:	0f 93       	push	r16
    1316:	1f 93       	push	r17
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	ec 01       	movw	r28, r24
    131e:	8b 01       	movw	r16, r22
	PORTD |= (1 << PD1);
    1320:	59 9a       	sbi	0x0b, 1	; 11
	if(!ongoing_turn /*&& ++count_waypoint <= 1*/){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1322:	80 91 4a 01 	lds	r24, 0x014A
    1326:	81 11       	cpse	r24, r1
    1328:	0b c0       	rjmp	.+22     	; 0x1340 <twoway_turn_left_lab+0x2c>
		ongoing_turn = true;
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	80 93 4a 01 	sts	0x014A, r24
		start_turn = true;
    1330:	80 93 4b 01 	sts	0x014B, r24
		stand_still();
    1334:	d8 d8       	rcall	.-3664   	; 0x4e6 <stand_still>
		turn_done = false;
    1336:	10 92 49 01 	sts	0x0149, r1
		first_time = false;
    133a:	10 92 0c 01 	sts	0x010C, r1
    133e:	80 c0       	rjmp	.+256    	; 0x1440 <twoway_turn_left_lab+0x12c>
		//count_waypoint = 0;
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1340:	80 91 4b 01 	lds	r24, 0x014B
    1344:	88 23       	and	r24, r24
    1346:	e1 f0       	breq	.+56     	; 0x1380 <twoway_turn_left_lab+0x6c>
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    1348:	10 92 4b 01 	sts	0x014B, r1
		if(RGB_data != 3){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    134c:	80 91 af 01 	lds	r24, 0x01AF
    1350:	83 30       	cpi	r24, 0x03	; 3
    1352:	59 f0       	breq	.+22     	; 0x136a <twoway_turn_left_lab+0x56>
			//drive_forward();
			
			first_time = true;
    1354:	c1 e0       	ldi	r28, 0x01	; 1
    1356:	c0 93 0c 01 	sts	0x010C, r28
			drive_forward_right(distance_right, distance_front);
    135a:	ba 01       	movw	r22, r20
    135c:	c8 01       	movw	r24, r16
    135e:	69 da       	rcall	.-2862   	; 0x832 <drive_forward_right>
			turn_done = true;
    1360:	c0 93 49 01 	sts	0x0149, r28
			regler_against_wall = true;
    1364:	c0 93 48 01 	sts	0x0148, r28
    1368:	02 c0       	rjmp	.+4      	; 0x136e <twoway_turn_left_lab+0x5a>
			}
		else {						//RGB säger att roboten ska svänga vänster så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    136a:	30 de       	rcall	.-928    	; 0xfcc <req_gyro_turn>
			turn_left();
    136c:	ca d8       	rcall	.-3692   	; 0x502 <turn_left>
		}
			
		previous_right = 0;
    136e:	10 92 46 01 	sts	0x0146, r1
    1372:	10 92 45 01 	sts	0x0145, r1
		previous_left = 0;
    1376:	10 92 44 01 	sts	0x0144, r1
    137a:	10 92 43 01 	sts	0x0143, r1
		return;
    137e:	6f c0       	rjmp	.+222    	; 0x145e <twoway_turn_left_lab+0x14a>
	}
	
	// Rakt fram11
	else if(regler_against_wall && (distance_left > st_value )){
    1380:	80 91 48 01 	lds	r24, 0x0148
    1384:	88 23       	and	r24, r24
    1386:	41 f0       	breq	.+16     	; 0x1398 <twoway_turn_left_lab+0x84>
    1388:	2c 17       	cp	r18, r28
    138a:	3d 07       	cpc	r19, r29
    138c:	0c f0       	brlt	.+2      	; 0x1390 <twoway_turn_left_lab+0x7c>
    138e:	61 c0       	rjmp	.+194    	; 0x1452 <twoway_turn_left_lab+0x13e>
		//drive_forward();
		drive_forward_right(distance_right, distance_front);
    1390:	ba 01       	movw	r22, r20
    1392:	c8 01       	movw	r24, r16
    1394:	4e da       	rcall	.-2916   	; 0x832 <drive_forward_right>
    1396:	54 c0       	rjmp	.+168    	; 0x1440 <twoway_turn_left_lab+0x12c>
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    1398:	80 91 af 01 	lds	r24, 0x01AF
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	19 f1       	breq	.+70     	; 0x13e6 <twoway_turn_left_lab+0xd2>
    13a0:	2c 17       	cp	r18, r28
    13a2:	3d 07       	cpc	r19, r29
    13a4:	4c f1       	brlt	.+82     	; 0x13f8 <twoway_turn_left_lab+0xe4>
    13a6:	20 17       	cp	r18, r16
    13a8:	31 07       	cpc	r19, r17
    13aa:	34 f1       	brlt	.+76     	; 0x13f8 <twoway_turn_left_lab+0xe4>
    13ac:	80 91 43 01 	lds	r24, 0x0143
    13b0:	90 91 44 01 	lds	r25, 0x0144
    13b4:	82 17       	cp	r24, r18
    13b6:	93 07       	cpc	r25, r19
    13b8:	fc f4       	brge	.+62     	; 0x13f8 <twoway_turn_left_lab+0xe4>
    13ba:	80 91 45 01 	lds	r24, 0x0145
    13be:	90 91 46 01 	lds	r25, 0x0146
    13c2:	82 17       	cp	r24, r18
    13c4:	93 07       	cpc	r25, r19
    13c6:	c4 f4       	brge	.+48     	; 0x13f8 <twoway_turn_left_lab+0xe4>
		twoway_turn_left = false;
    13c8:	10 92 3e 01 	sts	0x013E, r1
		first_time = true;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    13d2:	10 92 4a 01 	sts	0x014A, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    13d6:	10 92 af 01 	sts	0x01AF, r1
		regler_against_wall = false;
    13da:	10 92 48 01 	sts	0x0148, r1
		PORTD &= ~(1 << PD1);
    13de:	59 98       	cbi	0x0b, 1	; 11
		prepare_special_case = false;
    13e0:	10 92 47 01 	sts	0x0147, r1
    13e4:	2d c0       	rjmp	.+90     	; 0x1440 <twoway_turn_left_lab+0x12c>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data == 3 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    13e6:	80 91 49 01 	lds	r24, 0x0149
    13ea:	81 11       	cpse	r24, r1
    13ec:	09 c0       	rjmp	.+18     	; 0x1400 <twoway_turn_left_lab+0xec>
		turn_done = true;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 49 01 	sts	0x0149, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    13f4:	7d d8       	rcall	.-3846   	; 0x4f0 <drive_forward>
    13f6:	24 c0       	rjmp	.+72     	; 0x1440 <twoway_turn_left_lab+0x12c>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    13f8:	80 91 49 01 	lds	r24, 0x0149
    13fc:	88 23       	and	r24, r24
    13fe:	01 f1       	breq	.+64     	; 0x1440 <twoway_turn_left_lab+0x12c>
    1400:	c2 17       	cp	r28, r18
    1402:	d3 07       	cpc	r29, r19
    1404:	ec f4       	brge	.+58     	; 0x1440 <twoway_turn_left_lab+0x12c>
    1406:	02 17       	cp	r16, r18
    1408:	13 07       	cpc	r17, r19
    140a:	d4 f4       	brge	.+52     	; 0x1440 <twoway_turn_left_lab+0x12c>
    140c:	80 91 43 01 	lds	r24, 0x0143
    1410:	90 91 44 01 	lds	r25, 0x0144
    1414:	82 17       	cp	r24, r18
    1416:	93 07       	cpc	r25, r19
    1418:	9c f4       	brge	.+38     	; 0x1440 <twoway_turn_left_lab+0x12c>
    141a:	80 91 45 01 	lds	r24, 0x0145
    141e:	90 91 46 01 	lds	r25, 0x0146
    1422:	82 17       	cp	r24, r18
    1424:	93 07       	cpc	r25, r19
    1426:	64 f4       	brge	.+24     	; 0x1440 <twoway_turn_left_lab+0x12c>
		twoway_turn_left = false;
    1428:	10 92 3e 01 	sts	0x013E, r1
		PORTD &= ~(1 << PD1);
    142c:	59 98       	cbi	0x0b, 1	; 11
		ongoing_turn = false;
    142e:	10 92 4a 01 	sts	0x014A, r1
		first_time = true;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    1438:	10 92 47 01 	sts	0x0147, r1
		RGB_data = 0;
    143c:	10 92 af 01 	sts	0x01AF, r1
	}
	previous_right = distance_right;
    1440:	10 93 46 01 	sts	0x0146, r17
    1444:	00 93 45 01 	sts	0x0145, r16
	previous_left = distance_left;	
    1448:	d0 93 44 01 	sts	0x0144, r29
    144c:	c0 93 43 01 	sts	0x0143, r28
    1450:	06 c0       	rjmp	.+12     	; 0x145e <twoway_turn_left_lab+0x14a>
	else if(regler_against_wall && (distance_left > st_value )){
		//drive_forward();
		drive_forward_right(distance_right, distance_front);
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    1452:	80 91 af 01 	lds	r24, 0x01AF
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	09 f0       	breq	.+2      	; 0x145c <twoway_turn_left_lab+0x148>
    145a:	a5 cf       	rjmp	.-182    	; 0x13a6 <twoway_turn_left_lab+0x92>
    145c:	c4 cf       	rjmp	.-120    	; 0x13e6 <twoway_turn_left_lab+0xd2>
		prepare_special_case = false;
		RGB_data = 0;
	}
	previous_right = distance_right;
	previous_left = distance_left;	
}
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret

00001468 <twoway_turn_right_lab>:


//INTE KLAR + måste testas
void twoway_turn_right_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
    1472:	8b 01       	movw	r16, r22
	if(!ongoing_turn /*&& ++count_waypoint <= 1*/){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1474:	80 91 4a 01 	lds	r24, 0x014A
    1478:	81 11       	cpse	r24, r1
    147a:	0b c0       	rjmp	.+22     	; 0x1492 <twoway_turn_right_lab+0x2a>
		ongoing_turn = true;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 4a 01 	sts	0x014A, r24
		start_turn = true;
    1482:	80 93 4b 01 	sts	0x014B, r24
		stand_still();
    1486:	2f d8       	rcall	.-4002   	; 0x4e6 <stand_still>
		turn_done = false;
    1488:	10 92 49 01 	sts	0x0149, r1
		first_time = false;
    148c:	10 92 0c 01 	sts	0x010C, r1
    1490:	60 c0       	rjmp	.+192    	; 0x1552 <twoway_turn_right_lab+0xea>
		//count_waypoint = 0;
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1492:	80 91 4b 01 	lds	r24, 0x014B
    1496:	88 23       	and	r24, r24
    1498:	e9 f0       	breq	.+58     	; 0x14d4 <twoway_turn_right_lab+0x6c>
		if(RGB_data == 2 || RGB_data == 3 ){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    149a:	80 91 af 01 	lds	r24, 0x01AF
    149e:	82 50       	subi	r24, 0x02	; 2
    14a0:	82 30       	cpi	r24, 0x02	; 2
    14a2:	58 f4       	brcc	.+22     	; 0x14ba <twoway_turn_right_lab+0x52>
			first_time = true;
    14a4:	11 e0       	ldi	r17, 0x01	; 1
    14a6:	10 93 0c 01 	sts	0x010C, r17
			drive_forward_left(distance_left, distance_front);
    14aa:	ba 01       	movw	r22, r20
    14ac:	ce 01       	movw	r24, r28
    14ae:	fa d8       	rcall	.-3596   	; 0x6a4 <drive_forward_left>
			//drive_forward();
			turn_done = true;
    14b0:	10 93 49 01 	sts	0x0149, r17
			regler_against_wall = true;
    14b4:	10 93 48 01 	sts	0x0148, r17
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <twoway_turn_right_lab+0x56>
		}
		else {						//RGB säger att roboten ska svänga höger så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    14ba:	88 dd       	rcall	.-1264   	; 0xfcc <req_gyro_turn>
			turn_right();
    14bc:	29 d8       	rcall	.-4014   	; 0x510 <turn_right>
		}	
		previous_right = 0;
    14be:	10 92 46 01 	sts	0x0146, r1
    14c2:	10 92 45 01 	sts	0x0145, r1
		previous_left = 0;
    14c6:	10 92 44 01 	sts	0x0144, r1
    14ca:	10 92 43 01 	sts	0x0143, r1
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    14ce:	10 92 4b 01 	sts	0x014B, r1
		return;
    14d2:	4d c0       	rjmp	.+154    	; 0x156e <twoway_turn_right_lab+0x106>
	}
	
	// Rakt fram
	else if(regler_against_wall && (distance_right > st_value )){
    14d4:	80 91 48 01 	lds	r24, 0x0148
    14d8:	88 23       	and	r24, r24
    14da:	39 f0       	breq	.+14     	; 0x14ea <twoway_turn_right_lab+0x82>
    14dc:	26 17       	cp	r18, r22
    14de:	37 07       	cpc	r19, r23
    14e0:	24 f4       	brge	.+8      	; 0x14ea <twoway_turn_right_lab+0x82>
		//drive_forward();
		drive_forward_left(distance_left, distance_front);
    14e2:	ba 01       	movw	r22, r20
    14e4:	ce 01       	movw	r24, r28
    14e6:	de d8       	rcall	.-3652   	; 0x6a4 <drive_forward_left>
    14e8:	34 c0       	rjmp	.+104    	; 0x1552 <twoway_turn_right_lab+0xea>
	}
	
	else if(RGB_data == 2 && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    14ea:	80 91 af 01 	lds	r24, 0x01AF
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	b9 f4       	brne	.+46     	; 0x1520 <twoway_turn_right_lab+0xb8>
    14f2:	c2 17       	cp	r28, r18
    14f4:	d3 07       	cpc	r29, r19
    14f6:	6c f5       	brge	.+90     	; 0x1552 <twoway_turn_right_lab+0xea>
    14f8:	02 17       	cp	r16, r18
    14fa:	13 07       	cpc	r17, r19
    14fc:	54 f5       	brge	.+84     	; 0x1552 <twoway_turn_right_lab+0xea>
    14fe:	24 17       	cp	r18, r20
    1500:	35 07       	cpc	r19, r21
    1502:	84 f5       	brge	.+96     	; 0x1564 <twoway_turn_right_lab+0xfc>
		twoway_turn_right = false;
    1504:	10 92 3d 01 	sts	0x013D, r1
		first_time = true;
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    150e:	10 92 4a 01 	sts	0x014A, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    1512:	10 92 af 01 	sts	0x01AF, r1
		regler_against_wall = false;
    1516:	10 92 48 01 	sts	0x0148, r1
		prepare_special_case = false;
    151a:	10 92 47 01 	sts	0x0147, r1
    151e:	19 c0       	rjmp	.+50     	; 0x1552 <twoway_turn_right_lab+0xea>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    1520:	80 91 49 01 	lds	r24, 0x0149
    1524:	81 11       	cpse	r24, r1
    1526:	06 c0       	rjmp	.+12     	; 0x1534 <twoway_turn_right_lab+0xcc>
		turn_done = true;
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 49 01 	sts	0x0149, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    152e:	0e 94 78 02 	call	0x4f0	; 0x4f0 <drive_forward>
    1532:	0f c0       	rjmp	.+30     	; 0x1552 <twoway_turn_right_lab+0xea>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1534:	c2 17       	cp	r28, r18
    1536:	d3 07       	cpc	r29, r19
    1538:	64 f4       	brge	.+24     	; 0x1552 <twoway_turn_right_lab+0xea>
    153a:	02 17       	cp	r16, r18
    153c:	13 07       	cpc	r17, r19
    153e:	4c f4       	brge	.+18     	; 0x1552 <twoway_turn_right_lab+0xea>
		twoway_turn_right = false;
    1540:	10 92 3d 01 	sts	0x013D, r1
		ongoing_turn = false;
    1544:	10 92 4a 01 	sts	0x014A, r1
		first_time = true;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    154e:	10 92 47 01 	sts	0x0147, r1
	}
	previous_right = distance_right;
    1552:	10 93 46 01 	sts	0x0146, r17
    1556:	00 93 45 01 	sts	0x0145, r16
	previous_left = distance_left;
    155a:	d0 93 44 01 	sts	0x0144, r29
    155e:	c0 93 43 01 	sts	0x0143, r28
    1562:	05 c0       	rjmp	.+10     	; 0x156e <twoway_turn_right_lab+0x106>
		turn_done = true;
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1564:	80 91 49 01 	lds	r24, 0x0149
    1568:	88 23       	and	r24, r24
    156a:	99 f3       	breq	.-26     	; 0x1552 <twoway_turn_right_lab+0xea>
    156c:	e9 cf       	rjmp	.-46     	; 0x1540 <twoway_turn_right_lab+0xd8>
		first_time = true;
		prepare_special_case = false;
	}
	previous_right = distance_right;
	previous_left = distance_left;
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	1f 91       	pop	r17
    1574:	0f 91       	pop	r16
    1576:	08 95       	ret

00001578 <labyreg>:
int sensor_front;
int sensor_left;
int sensor_right;
int tejp_counter = 0;
                 
void labyreg(){
    1578:	cf 93       	push	r28
	cli();
    157a:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
    157c:	40 91 a2 01 	lds	r20, 0x01A2
    1580:	50 e0       	ldi	r21, 0x00	; 0
	int sensor_right_tmp = distans_right;
    1582:	60 91 b0 01 	lds	r22, 0x01B0
    1586:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
    1588:	80 91 a8 01 	lds	r24, 0x01A8
    158c:	90 e0       	ldi	r25, 0x00	; 0
	sei();
    158e:	78 94       	sei
	int st_value_front = 40;
	/*if(true)      //testplats för reglering
		drive_forward_right(sensor_right_tmp, sensor_front_tmp);
	
	else*/ 
	if(Reflex_data != 0 || Reflex_data2 != 0){
    1590:	20 91 9c 01 	lds	r18, 0x019C
    1594:	30 91 9d 01 	lds	r19, 0x019D
    1598:	23 2b       	or	r18, r19
    159a:	31 f4       	brne	.+12     	; 0x15a8 <labyreg+0x30>
    159c:	20 91 c5 01 	lds	r18, 0x01C5
    15a0:	30 91 c6 01 	lds	r19, 0x01C6
    15a4:	23 2b       	or	r18, r19
    15a6:	a1 f0       	breq	.+40     	; 0x15d0 <labyreg+0x58>
		tejp_counter++;
    15a8:	20 91 3b 01 	lds	r18, 0x013B
    15ac:	30 91 3c 01 	lds	r19, 0x013C
    15b0:	2f 5f       	subi	r18, 0xFF	; 255
    15b2:	3f 4f       	sbci	r19, 0xFF	; 255
    15b4:	30 93 3c 01 	sts	0x013C, r19
    15b8:	20 93 3b 01 	sts	0x013B, r18
		if(tejp_counter >= 3)
    15bc:	23 30       	cpi	r18, 0x03	; 3
    15be:	31 05       	cpc	r19, r1
    15c0:	5c f0       	brlt	.+22     	; 0x15d8 <labyreg+0x60>
			regulator_mode = 1;
    15c2:	21 e0       	ldi	r18, 0x01	; 1
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	30 93 1c 01 	sts	0x011C, r19
    15ca:	20 93 1b 01 	sts	0x011B, r18
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <labyreg+0x60>
	}
	
	else if(Reflex_data == 0 && Reflex_data2 == 0)
		tejp_counter = 0;
    15d0:	10 92 3c 01 	sts	0x013C, r1
    15d4:	10 92 3b 01 	sts	0x013B, r1

	if(waypoint){
    15d8:	20 91 40 01 	lds	r18, 0x0140
    15dc:	22 23       	and	r18, r18
    15de:	21 f0       	breq	.+8      	; 0x15e8 <labyreg+0x70>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    15e0:	28 e2       	ldi	r18, 0x28	; 40
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	b3 dd       	rcall	.-1178   	; 0x114c <waypoint_lab>
		return;	
    15e6:	c6 c0       	rjmp	.+396    	; 0x1774 <labyreg+0x1fc>
	}
	else if(oneway_turn){
    15e8:	20 91 3f 01 	lds	r18, 0x013F
    15ec:	22 23       	and	r18, r18
    15ee:	21 f0       	breq	.+8      	; 0x15f8 <labyreg+0x80>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    15f0:	28 e2       	ldi	r18, 0x28	; 40
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	18 de       	rcall	.-976    	; 0x1226 <oneway_turn_lab>
		return;
    15f6:	be c0       	rjmp	.+380    	; 0x1774 <labyreg+0x1fc>
	}
	else if(twoway_turn_left){
    15f8:	20 91 3e 01 	lds	r18, 0x013E
    15fc:	22 23       	and	r18, r18
    15fe:	21 f0       	breq	.+8      	; 0x1608 <labyreg+0x90>
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1600:	28 e2       	ldi	r18, 0x28	; 40
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	87 de       	rcall	.-754    	; 0x1314 <twoway_turn_left_lab>
		return;
    1606:	b6 c0       	rjmp	.+364    	; 0x1774 <labyreg+0x1fc>
	}
	else if(twoway_turn_right){
    1608:	20 91 3d 01 	lds	r18, 0x013D
    160c:	22 23       	and	r18, r18
    160e:	21 f0       	breq	.+8      	; 0x1618 <labyreg+0xa0>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1610:	28 e2       	ldi	r18, 0x28	; 40
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	29 df       	rcall	.-430    	; 0x1468 <twoway_turn_right_lab>
		return;
    1616:	ae c0       	rjmp	.+348    	; 0x1774 <labyreg+0x1fc>
	}	
	
	else if(count_waypoint < 4){
    1618:	20 91 1f 01 	lds	r18, 0x011F
    161c:	30 91 20 01 	lds	r19, 0x0120
    1620:	24 30       	cpi	r18, 0x04	; 4
    1622:	31 05       	cpc	r19, r1
    1624:	ac f4       	brge	.+42     	; 0x1650 <labyreg+0xd8>
		count_waypoint++;
		if(sensor_front_tmp <= 35)
    1626:	44 32       	cpi	r20, 0x24	; 36
    1628:	51 05       	cpc	r21, r1
    162a:	3c f0       	brlt	.+14     	; 0x163a <labyreg+0xc2>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
		return;
	}	
	
	else if(count_waypoint < 4){
		count_waypoint++;
    162c:	2f 5f       	subi	r18, 0xFF	; 255
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	30 93 20 01 	sts	0x0120, r19
    1634:	20 93 1f 01 	sts	0x011F, r18
    1638:	06 c0       	rjmp	.+12     	; 0x1646 <labyreg+0xce>
		if(sensor_front_tmp <= 35)
			count_waypoint = 4;
    163a:	84 e0       	ldi	r24, 0x04	; 4
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	90 93 20 01 	sts	0x0120, r25
    1642:	80 93 1f 01 	sts	0x011F, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1646:	81 e3       	ldi	r24, 0x31	; 49
    1648:	8a 95       	dec	r24
    164a:	f1 f7       	brne	.-4      	; 0x1648 <labyreg+0xd0>
    164c:	00 00       	nop
    164e:	92 c0       	rjmp	.+292    	; 0x1774 <labyreg+0x1fc>
		_delay_us(10);
	}
	//återvändsgränd
	else if(sensor_left_tmp < st_value && sensor_front_tmp <= 35 && sensor_right_tmp < st_value){
    1650:	88 32       	cpi	r24, 0x28	; 40
    1652:	91 05       	cpc	r25, r1
    1654:	c4 f4       	brge	.+48     	; 0x1686 <labyreg+0x10e>
    1656:	44 32       	cpi	r20, 0x24	; 36
    1658:	51 05       	cpc	r21, r1
    165a:	74 f4       	brge	.+28     	; 0x1678 <labyreg+0x100>
    165c:	68 32       	cpi	r22, 0x28	; 40
    165e:	71 05       	cpc	r23, r1
    1660:	0c f0       	brlt	.+2      	; 0x1664 <labyreg+0xec>
    1662:	75 c0       	rjmp	.+234    	; 0x174e <labyreg+0x1d6>
		req_gyro_turn();
    1664:	b3 dc       	rcall	.-1690   	; 0xfcc <req_gyro_turn>
		turn_right();//	output_right = -right;//motor_right = 0;
    1666:	0e 94 88 02 	call	0x510	; 0x510 <turn_right>
		PORTD ^= (1 << PD0);
    166a:	8b b1       	in	r24, 0x0b	; 11
    166c:	91 e0       	ldi	r25, 0x01	; 1
    166e:	89 27       	eor	r24, r25
    1670:	8b b9       	out	0x0b, r24	; 11
		first_time_flag = true;
    1672:	90 93 4c 01 	sts	0x014C, r25
    1676:	7e c0       	rjmp	.+252    	; 0x1774 <labyreg+0x1fc>
	}
	// Normalfall
	else if(sensor_left_tmp < st_value/* && sensor_front_tmp > 30*/ && sensor_right_tmp < st_value){
    1678:	68 32       	cpi	r22, 0x28	; 40
    167a:	71 05       	cpc	r23, r1
    167c:	0c f0       	brlt	.+2      	; 0x1680 <labyreg+0x108>
    167e:	67 c0       	rjmp	.+206    	; 0x174e <labyreg+0x1d6>
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
    1680:	0e 94 8f 02 	call	0x51e	; 0x51e <PD_for_lab>
    1684:	77 c0       	rjmp	.+238    	; 0x1774 <labyreg+0x1fc>
	}
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case /*sensor_front_tmp >= st_value_front*/){
    1686:	20 91 47 01 	lds	r18, 0x0147
    168a:	21 11       	cpse	r18, r1
    168c:	0c c0       	rjmp	.+24     	; 0x16a6 <labyreg+0x12e>
		prepare_special_case = true;
    168e:	c1 e0       	ldi	r28, 0x01	; 1
    1690:	c0 93 47 01 	sts	0x0147, r28
		count_waypoint = 0;
    1694:	10 92 20 01 	sts	0x0120, r1
    1698:	10 92 1f 01 	sts	0x011F, r1
		if(!sensor_front_tmp <= 35)
			drive_forward();
    169c:	0e 94 78 02 	call	0x4f0	; 0x4f0 <drive_forward>
		first_time_flag = true;
    16a0:	c0 93 4c 01 	sts	0x014C, r28
    16a4:	67 c0       	rjmp	.+206    	; 0x1774 <labyreg+0x1fc>
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
    16a6:	88 32       	cpi	r24, 0x28	; 40
    16a8:	91 05       	cpc	r25, r1
    16aa:	0c f0       	brlt	.+2      	; 0x16ae <labyreg+0x136>
    16ac:	59 c0       	rjmp	.+178    	; 0x1760 <labyreg+0x1e8>
    16ae:	48 32       	cpi	r20, 0x28	; 40
    16b0:	51 05       	cpc	r21, r1
    16b2:	0c f0       	brlt	.+2      	; 0x16b6 <labyreg+0x13e>
    16b4:	51 c0       	rjmp	.+162    	; 0x1758 <labyreg+0x1e0>
    16b6:	69 32       	cpi	r22, 0x29	; 41
    16b8:	71 05       	cpc	r23, r1
    16ba:	0c f4       	brge	.+2      	; 0x16be <labyreg+0x146>
    16bc:	40 c0       	rjmp	.+128    	; 0x173e <labyreg+0x1c6>
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <labyreg+0x154>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    16c0:	48 32       	cpi	r20, 0x28	; 40
    16c2:	51 05       	cpc	r21, r1
    16c4:	c4 f4       	brge	.+48     	; 0x16f6 <labyreg+0x17e>
    16c6:	68 32       	cpi	r22, 0x28	; 40
    16c8:	71 05       	cpc	r23, r1
    16ca:	4c f4       	brge	.+18     	; 0x16de <labyreg+0x166>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16cc:	28 e2       	ldi	r18, 0x28	; 40
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	aa dd       	rcall	.-1196   	; 0x1226 <oneway_turn_lab>
		oneway_turn = true;
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	80 93 3f 01 	sts	0x013F, r24
		first_time_flag = true;
    16d8:	80 93 4c 01 	sts	0x014C, r24
    16dc:	4b c0       	rjmp	.+150    	; 0x1774 <labyreg+0x1fc>
	}
	
	//t-korsning rakt framifrån
	else if((sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value))	{	
    16de:	69 32       	cpi	r22, 0x29	; 41
    16e0:	71 05       	cpc	r23, r1
    16e2:	4c f0       	brlt	.+18     	; 0x16f6 <labyreg+0x17e>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16e4:	28 e2       	ldi	r18, 0x28	; 40
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	31 dd       	rcall	.-1438   	; 0x114c <waypoint_lab>
		waypoint = true;
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	80 93 40 01 	sts	0x0140, r24
		//PORTD |= (1 << PD1);
		first_time_flag = true;
    16f0:	80 93 4c 01 	sts	0x014C, r24
    16f4:	3f c0       	rjmp	.+126    	; 0x1774 <labyreg+0x1fc>
	}
	
	// T-korsning där roboten kan köra framåt eller åt vänster
	else if(sensor_left_tmp > st_value && sensor_front_tmp > st_value_front && sensor_right_tmp < st_value){
    16f6:	49 32       	cpi	r20, 0x29	; 41
    16f8:	51 05       	cpc	r21, r1
    16fa:	f4 f0       	brlt	.+60     	; 0x1738 <labyreg+0x1c0>
    16fc:	68 32       	cpi	r22, 0x28	; 40
    16fe:	71 05       	cpc	r23, r1
    1700:	14 f5       	brge	.+68     	; 0x1746 <labyreg+0x1ce>
		twoway_turn_left = true;
    1702:	c1 e0       	ldi	r28, 0x01	; 1
    1704:	c0 93 3e 01 	sts	0x013E, r28
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1708:	28 e2       	ldi	r18, 0x28	; 40
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	03 de       	rcall	.-1018   	; 0x1314 <twoway_turn_left_lab>
		first_time_flag = true;
    170e:	c0 93 4c 01 	sts	0x014C, r28
    1712:	30 c0       	rjmp	.+96     	; 0x1774 <labyreg+0x1fc>
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    1714:	88 32       	cpi	r24, 0x28	; 40
    1716:	91 05       	cpc	r25, r1
    1718:	7c f4       	brge	.+30     	; 0x1738 <labyreg+0x1c0>
    171a:	49 32       	cpi	r20, 0x29	; 41
    171c:	51 05       	cpc	r21, r1
    171e:	64 f0       	brlt	.+24     	; 0x1738 <labyreg+0x1c0>
    1720:	69 32       	cpi	r22, 0x29	; 41
    1722:	71 05       	cpc	r23, r1
    1724:	4c f0       	brlt	.+18     	; 0x1738 <labyreg+0x1c0>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1726:	28 e2       	ldi	r18, 0x28	; 40
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	9e de       	rcall	.-708    	; 0x1468 <twoway_turn_right_lab>
		twoway_turn_right = true;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 3d 01 	sts	0x013D, r24
		first_time_flag = true;
    1732:	80 93 4c 01 	sts	0x014C, r24
    1736:	1e c0       	rjmp	.+60     	; 0x1774 <labyreg+0x1fc>
	}
	else{
		stand_still();
    1738:	0e 94 73 02 	call	0x4e6	; 0x4e6 <stand_still>
    173c:	1b c0       	rjmp	.+54     	; 0x1774 <labyreg+0x1fc>
		first_time_flag = true;
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    173e:	89 32       	cpi	r24, 0x29	; 41
    1740:	91 05       	cpc	r25, r1
    1742:	9c f4       	brge	.+38     	; 0x176a <labyreg+0x1f2>
    1744:	ea cf       	rjmp	.-44     	; 0x171a <labyreg+0x1a2>
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
		first_time_flag = true;
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    1746:	88 32       	cpi	r24, 0x28	; 40
    1748:	91 05       	cpc	r25, r1
    174a:	54 f3       	brlt	.-44     	; 0x1720 <labyreg+0x1a8>
    174c:	f5 cf       	rjmp	.-22     	; 0x1738 <labyreg+0x1c0>
	else if(sensor_left_tmp < st_value/* && sensor_front_tmp > 30*/ && sensor_right_tmp < st_value){
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
	}
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case /*sensor_front_tmp >= st_value_front*/){
    174e:	20 91 47 01 	lds	r18, 0x0147
    1752:	21 11       	cpse	r18, r1
    1754:	ac cf       	rjmp	.-168    	; 0x16ae <labyreg+0x136>
    1756:	9b cf       	rjmp	.-202    	; 0x168e <labyreg+0x116>
		first_time_flag = true;
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    1758:	89 32       	cpi	r24, 0x29	; 41
    175a:	91 05       	cpc	r25, r1
    175c:	64 f6       	brge	.-104    	; 0x16f6 <labyreg+0x17e>
    175e:	da cf       	rjmp	.-76     	; 0x1714 <labyreg+0x19c>
    1760:	89 32       	cpi	r24, 0x29	; 41
    1762:	91 05       	cpc	r25, r1
    1764:	0c f0       	brlt	.+2      	; 0x1768 <labyreg+0x1f0>
    1766:	ac cf       	rjmp	.-168    	; 0x16c0 <labyreg+0x148>
    1768:	e7 cf       	rjmp	.-50     	; 0x1738 <labyreg+0x1c0>
    176a:	68 32       	cpi	r22, 0x28	; 40
    176c:	71 05       	cpc	r23, r1
    176e:	0c f0       	brlt	.+2      	; 0x1772 <labyreg+0x1fa>
    1770:	c2 cf       	rjmp	.-124    	; 0x16f6 <labyreg+0x17e>
    1772:	ac cf       	rjmp	.-168    	; 0x16cc <labyreg+0x154>
		//motor_left = 0;
		//motor_right = 0;
		//PORTD ^= (1 << PD1);
		//stand_still();
	}
}
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <regulator>:
		//motor_right = 60;
		//PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
		//PORTB |= (1 << motor_dir_left);									// Set motor direction to backward
//	}

	if((regulator_mode == 1) && (regler_ready_linje == 1)){
    1778:	80 91 1b 01 	lds	r24, 0x011B
    177c:	90 91 1c 01 	lds	r25, 0x011C
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	91 05       	cpc	r25, r1
    1784:	61 f4       	brne	.+24     	; 0x179e <regulator+0x26>
    1786:	80 91 63 01 	lds	r24, 0x0163
    178a:	90 91 64 01 	lds	r25, 0x0164
    178e:	01 97       	sbiw	r24, 0x01	; 1
    1790:	b9 f4       	brne	.+46     	; 0x17c0 <regulator+0x48>
		/*left=150;//180;				// kanske rÃ¤cker med en variable fÃ¶r bÃ¥da om bÃ¥da kÃ¶r exakt lika fort
		right=140;//170;
		motor_left=left;
		motor_right=right;*/
		linje_main();
    1792:	81 da       	rcall	.-2814   	; 0xc96 <linje_main>
		regler_ready_linje = 0;
    1794:	10 92 64 01 	sts	0x0164, r1
    1798:	10 92 63 01 	sts	0x0163, r1
    179c:	08 95       	ret
	}

	else if(regulator_mode == 0){	
    179e:	89 2b       	or	r24, r25
    17a0:	79 f4       	brne	.+30     	; 0x17c0 <regulator+0x48>
		
		PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    17a2:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_left);	
    17a4:	2e 98       	cbi	0x05, 6	; 5

		if(updaterad_labyrint == true && turn_delay >= 10){
    17a6:	80 91 62 01 	lds	r24, 0x0162
    17aa:	88 23       	and	r24, r24
    17ac:	49 f0       	breq	.+18     	; 0x17c0 <regulator+0x48>
    17ae:	80 91 1d 01 	lds	r24, 0x011D
    17b2:	90 91 1e 01 	lds	r25, 0x011E
    17b6:	0a 97       	sbiw	r24, 0x0a	; 10
    17b8:	1c f0       	brlt	.+6      	; 0x17c0 <regulator+0x48>
		
			updaterad_labyrint = false;
    17ba:	10 92 62 01 	sts	0x0162, r1
			labyreg();//kalla pÃ¥ labyrint funktion
    17be:	dc ce       	rjmp	.-584    	; 0x1578 <labyreg>
    17c0:	08 95       	ret

000017c2 <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
    17c2:	ec eb       	ldi	r30, 0xBC	; 188
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	90 81       	ld	r25, Z
    17c8:	94 6a       	ori	r25, 0xA4	; 164
    17ca:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
    17cc:	90 81       	ld	r25, Z
    17ce:	99 23       	and	r25, r25
    17d0:	ec f7       	brge	.-6      	; 0x17cc <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
    17d2:	90 91 b9 00 	lds	r25, 0x00B9
    17d6:	98 7f       	andi	r25, 0xF8	; 248
    17d8:	98 30       	cpi	r25, 0x08	; 8
    17da:	29 f0       	breq	.+10     	; 0x17e6 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    17dc:	84 e9       	ldi	r24, 0x94	; 148
    17de:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
    17e6:	81 60       	ori	r24, 0x01	; 1
    17e8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    17ec:	84 e8       	ldi	r24, 0x84	; 132
    17ee:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
    17f2:	ec eb       	ldi	r30, 0xBC	; 188
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	80 81       	ld	r24, Z
    17f8:	88 23       	and	r24, r24
    17fa:	ec f7       	brge	.-6      	; 0x17f6 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
    17fc:	80 91 b9 00 	lds	r24, 0x00B9
    1800:	88 7f       	andi	r24, 0xF8	; 248
    1802:	80 34       	cpi	r24, 0x40	; 64
    1804:	29 f0       	breq	.+10     	; 0x1810 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1806:	84 e9       	ldi	r24, 0x94	; 148
    1808:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
    1810:	ec eb       	ldi	r30, 0xBC	; 188
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	84 68       	ori	r24, 0x84	; 132
    1818:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    181a:	80 81       	ld	r24, Z
    181c:	88 23       	and	r24, r24
    181e:	ec f7       	brge	.-6      	; 0x181a <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data = TWDR; //ta emot data 
    1820:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1824:	94 e9       	ldi	r25, 0x94	; 148
    1826:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
    182a:	08 95       	ret

0000182c <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
    182c:	20 91 24 01 	lds	r18, 0x0124
    1830:	30 91 25 01 	lds	r19, 0x0125
    1834:	21 15       	cp	r18, r1
    1836:	31 05       	cpc	r19, r1
    1838:	89 f4       	brne	.+34     	; 0x185c <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
    183a:	28 2f       	mov	r18, r24
    183c:	22 95       	swap	r18
    183e:	2f 70       	andi	r18, 0x0F	; 15
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	30 93 23 01 	sts	0x0123, r19
    1846:	20 93 22 01 	sts	0x0122, r18
		i2c_data[counter] = data;
    184a:	80 93 8d 01 	sts	0x018D, r24
		counter++;
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	90 93 25 01 	sts	0x0125, r25
    1856:	80 93 24 01 	sts	0x0124, r24
    185a:	18 c0       	rjmp	.+48     	; 0x188c <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
    185c:	40 91 22 01 	lds	r20, 0x0122
    1860:	50 91 23 01 	lds	r21, 0x0123
    1864:	4f 5f       	subi	r20, 0xFF	; 255
    1866:	5f 4f       	sbci	r21, 0xFF	; 255
    1868:	24 17       	cp	r18, r20
    186a:	35 07       	cpc	r19, r21
    186c:	5c f4       	brge	.+22     	; 0x1884 <i2c_store_data+0x58>
		i2c_data[counter] = data;
    186e:	f9 01       	movw	r30, r18
    1870:	e3 57       	subi	r30, 0x73	; 115
    1872:	fe 4f       	sbci	r31, 0xFE	; 254
    1874:	80 83       	st	Z, r24
		counter++;
    1876:	2f 5f       	subi	r18, 0xFF	; 255
    1878:	3f 4f       	sbci	r19, 0xFF	; 255
    187a:	30 93 25 01 	sts	0x0125, r19
    187e:	20 93 24 01 	sts	0x0124, r18
    1882:	04 c0       	rjmp	.+8      	; 0x188c <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
    1884:	f9 01       	movw	r30, r18
    1886:	e3 57       	subi	r30, 0x73	; 115
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
    188c:	80 91 22 01 	lds	r24, 0x0122
    1890:	90 91 23 01 	lds	r25, 0x0123
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	20 91 24 01 	lds	r18, 0x0124
    189a:	30 91 25 01 	lds	r19, 0x0125
    189e:	28 17       	cp	r18, r24
    18a0:	39 07       	cpc	r19, r25
    18a2:	44 f0       	brlt	.+16     	; 0x18b4 <i2c_store_data+0x88>
		i2c_newdata = true;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	80 93 2a 01 	sts	0x012A, r24
		counter = 0;
    18aa:	10 92 25 01 	sts	0x0125, r1
    18ae:	10 92 24 01 	sts	0x0124, r1
		EIMSK &= ~(1<<INT0);
    18b2:	e8 98       	cbi	0x1d, 0	; 29
    18b4:	08 95       	ret

000018b6 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	0b b6       	in	r0, 0x3b	; 59
    18c2:	0f 92       	push	r0
    18c4:	2f 93       	push	r18
    18c6:	3f 93       	push	r19
    18c8:	4f 93       	push	r20
    18ca:	5f 93       	push	r21
    18cc:	6f 93       	push	r22
    18ce:	7f 93       	push	r23
    18d0:	8f 93       	push	r24
    18d2:	9f 93       	push	r25
    18d4:	af 93       	push	r26
    18d6:	bf 93       	push	r27
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
    18dc:	85 e0       	ldi	r24, 0x05	; 5
    18de:	8a 95       	dec	r24
    18e0:	f1 f7       	brne	.-4      	; 0x18de <__vector_1+0x28>
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
    18e2:	36 9b       	sbis	0x06, 6	; 6
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <__vector_1+0x38>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	6c df       	rcall	.-296    	; 0x17c2 <i2c_recive>
    18ea:	a0 df       	rcall	.-192    	; 0x182c <i2c_store_data>
    18ec:	05 c0       	rjmp	.+10     	; 0x18f8 <__vector_1+0x42>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
    18ee:	37 9b       	sbis	0x06, 7	; 6
    18f0:	03 c0       	rjmp	.+6      	; 0x18f8 <__vector_1+0x42>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
    18f2:	86 e0       	ldi	r24, 0x06	; 6
    18f4:	66 df       	rcall	.-308    	; 0x17c2 <i2c_recive>
    18f6:	9a df       	rcall	.-204    	; 0x182c <i2c_store_data>
	}
}
    18f8:	ff 91       	pop	r31
    18fa:	ef 91       	pop	r30
    18fc:	bf 91       	pop	r27
    18fe:	af 91       	pop	r26
    1900:	9f 91       	pop	r25
    1902:	8f 91       	pop	r24
    1904:	7f 91       	pop	r23
    1906:	6f 91       	pop	r22
    1908:	5f 91       	pop	r21
    190a:	4f 91       	pop	r20
    190c:	3f 91       	pop	r19
    190e:	2f 91       	pop	r18
    1910:	0f 90       	pop	r0
    1912:	0b be       	out	0x3b, r0	; 59
    1914:	0f 90       	pop	r0
    1916:	0f be       	out	0x3f, r0	; 63
    1918:	0f 90       	pop	r0
    191a:	1f 90       	pop	r1
    191c:	18 95       	reti

0000191e <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
    191e:	80 91 2a 01 	lds	r24, 0x012A
    1922:	88 23       	and	r24, r24
    1924:	09 f4       	brne	.+2      	; 0x1928 <i2c_handel_data+0xa>
    1926:	a9 c1       	rjmp	.+850    	; 0x1c7a <i2c_handel_data+0x35c>
	{
		i2c_newdata=false;
    1928:	10 92 2a 01 	sts	0x012A, r1
		if(!((i2c_data[0]>>3)&0x01)){
    192c:	80 91 8d 01 	lds	r24, 0x018D
    1930:	83 fd       	sbrc	r24, 3
    1932:	0a c0       	rjmp	.+20     	; 0x1948 <i2c_handel_data+0x2a>
    1934:	81 e5       	ldi	r24, 0x51	; 81
    1936:	94 e0       	ldi	r25, 0x04	; 4
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <i2c_handel_data+0x1a>
    193c:	00 c0       	rjmp	.+0      	; 0x193e <i2c_handel_data+0x20>
    193e:	00 00       	nop
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
    1940:	6d e8       	ldi	r22, 0x8D	; 141
    1942:	71 e0       	ldi	r23, 0x01	; 1
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	d4 da       	rcall	.-2648   	; 0xef0 <i2c_send>
		}
		
		switch (i2c_data[0] & 0x0f){
    1948:	80 91 8d 01 	lds	r24, 0x018D
    194c:	e8 2f       	mov	r30, r24
    194e:	ef 70       	andi	r30, 0x0F	; 15
    1950:	8e 2f       	mov	r24, r30
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	fc 01       	movw	r30, r24
    1956:	ea 5b       	subi	r30, 0xBA	; 186
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	ca c3       	rjmp	.+1940   	; 0x20f0 <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
    195c:	80 91 8e 01 	lds	r24, 0x018E
    1960:	80 93 ac 01 	sts	0x01AC, r24
				break;
    1964:	70 c1       	rjmp	.+736    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x01 ://avståndssensorer  plockar fram medianen av dom senaste 3 värdena ser krongligt ut men är bara hitta mittenvärdet och lägg det i distans_xxx
				//distans_right = i2c_data[3];
				//distans_fram = i2c_data[2];
				//distans_left = i2c_data[1];
				distans_right_median[0] = i2c_data[3];
    1966:	80 91 90 01 	lds	r24, 0x0190
    196a:	e9 ea       	ldi	r30, 0xA9	; 169
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	80 83       	st	Z, r24
				if((distans_right_median[0]<distans_right_median[1] && distans_right_median[0]>distans_right_median[2])||(distans_right_median[0]>distans_right_median[1] && distans_right_median[0]<distans_right_median[2]))
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	89 17       	cp	r24, r25
    1974:	08 f0       	brcs	.+2      	; 0x1978 <i2c_handel_data+0x5a>
    1976:	6d c1       	rjmp	.+730    	; 0x1c52 <i2c_handel_data+0x334>
    1978:	20 91 ab 01 	lds	r18, 0x01AB
    197c:	28 17       	cp	r18, r24
    197e:	28 f0       	brcs	.+10     	; 0x198a <i2c_handel_data+0x6c>
    1980:	64 c1       	rjmp	.+712    	; 0x1c4a <i2c_handel_data+0x32c>
    1982:	20 91 ab 01 	lds	r18, 0x01AB
    1986:	82 17       	cp	r24, r18
    1988:	18 f4       	brcc	.+6      	; 0x1990 <i2c_handel_data+0x72>
					distans_right=distans_right_median[0];
    198a:	80 93 b0 01 	sts	0x01B0, r24
    198e:	0f c0       	rjmp	.+30     	; 0x19ae <i2c_handel_data+0x90>
				else if((distans_right_median[1]<distans_right_median[0] && distans_right_median[1]>distans_right_median[2])||(distans_right_median[1]>distans_right_median[0] && distans_right_median[1]<distans_right_median[2]))
    1990:	29 17       	cp	r18, r25
    1992:	30 f0       	brcs	.+12     	; 0x19a0 <i2c_handel_data+0x82>
    1994:	89 17       	cp	r24, r25
    1996:	38 f4       	brcc	.+14     	; 0x19a6 <i2c_handel_data+0x88>
    1998:	20 91 ab 01 	lds	r18, 0x01AB
    199c:	92 17       	cp	r25, r18
    199e:	18 f4       	brcc	.+6      	; 0x19a6 <i2c_handel_data+0x88>
					distans_right=distans_right_median[1];
    19a0:	90 93 b0 01 	sts	0x01B0, r25
    19a4:	04 c0       	rjmp	.+8      	; 0x19ae <i2c_handel_data+0x90>
				else
					distans_right=distans_right_median[2];
    19a6:	20 91 ab 01 	lds	r18, 0x01AB
    19aa:	20 93 b0 01 	sts	0x01B0, r18
				distans_right_median[2]=distans_right_median[1];
    19ae:	e9 ea       	ldi	r30, 0xA9	; 169
    19b0:	f1 e0       	ldi	r31, 0x01	; 1
    19b2:	92 83       	std	Z+2, r25	; 0x02
				distans_right_median[1]=distans_right_median[0];
    19b4:	81 83       	std	Z+1, r24	; 0x01
		
				distans_fram_median[0] = i2c_data[2];
    19b6:	80 91 8f 01 	lds	r24, 0x018F
    19ba:	e5 ea       	ldi	r30, 0xA5	; 165
    19bc:	f1 e0       	ldi	r31, 0x01	; 1
    19be:	80 83       	st	Z, r24
				if((distans_fram_median[0]<distans_fram_median[1] && distans_fram_median[0]>distans_fram_median[2])||(distans_fram_median[0]>distans_fram_median[1] && distans_fram_median[0]<distans_fram_median[2]))
    19c0:	91 81       	ldd	r25, Z+1	; 0x01
    19c2:	89 17       	cp	r24, r25
    19c4:	08 f0       	brcs	.+2      	; 0x19c8 <i2c_handel_data+0xaa>
    19c6:	4d c1       	rjmp	.+666    	; 0x1c62 <i2c_handel_data+0x344>
    19c8:	20 91 a7 01 	lds	r18, 0x01A7
    19cc:	28 17       	cp	r18, r24
    19ce:	28 f0       	brcs	.+10     	; 0x19da <i2c_handel_data+0xbc>
    19d0:	44 c1       	rjmp	.+648    	; 0x1c5a <i2c_handel_data+0x33c>
    19d2:	20 91 a7 01 	lds	r18, 0x01A7
    19d6:	82 17       	cp	r24, r18
    19d8:	18 f4       	brcc	.+6      	; 0x19e0 <i2c_handel_data+0xc2>
					distans_fram=distans_fram_median[0];
    19da:	80 93 a2 01 	sts	0x01A2, r24
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <i2c_handel_data+0xe0>
				else if((distans_fram_median[1]<distans_fram_median[0] && distans_fram_median[1]>distans_fram_median[2])||(distans_fram_median[1]>distans_fram_median[0] && distans_fram_median[1]<distans_fram_median[2]))
    19e0:	29 17       	cp	r18, r25
    19e2:	30 f0       	brcs	.+12     	; 0x19f0 <i2c_handel_data+0xd2>
    19e4:	89 17       	cp	r24, r25
    19e6:	38 f4       	brcc	.+14     	; 0x19f6 <i2c_handel_data+0xd8>
    19e8:	20 91 a7 01 	lds	r18, 0x01A7
    19ec:	92 17       	cp	r25, r18
    19ee:	18 f4       	brcc	.+6      	; 0x19f6 <i2c_handel_data+0xd8>
					distans_fram=distans_fram_median[1];
    19f0:	90 93 a2 01 	sts	0x01A2, r25
    19f4:	04 c0       	rjmp	.+8      	; 0x19fe <i2c_handel_data+0xe0>
				else
					distans_fram=distans_fram_median[2];
    19f6:	20 91 a7 01 	lds	r18, 0x01A7
    19fa:	20 93 a2 01 	sts	0x01A2, r18
				distans_fram_median[2]=distans_fram_median[1];
    19fe:	e5 ea       	ldi	r30, 0xA5	; 165
    1a00:	f1 e0       	ldi	r31, 0x01	; 1
    1a02:	92 83       	std	Z+2, r25	; 0x02
				distans_fram_median[1]=distans_fram_median[0];
    1a04:	81 83       	std	Z+1, r24	; 0x01
				
				distans_left_median[0] = i2c_data[1];
    1a06:	80 91 8e 01 	lds	r24, 0x018E
    1a0a:	e3 e7       	ldi	r30, 0x73	; 115
    1a0c:	f1 e0       	ldi	r31, 0x01	; 1
    1a0e:	80 83       	st	Z, r24
				if((distans_left_median[0]<distans_left_median[1] && distans_left_median[0]>distans_left_median[2])||(distans_left_median[0]>distans_left_median[1] && distans_left_median[0]<distans_left_median[2]))
    1a10:	91 81       	ldd	r25, Z+1	; 0x01
    1a12:	89 17       	cp	r24, r25
    1a14:	08 f0       	brcs	.+2      	; 0x1a18 <i2c_handel_data+0xfa>
    1a16:	29 c1       	rjmp	.+594    	; 0x1c6a <i2c_handel_data+0x34c>
    1a18:	20 91 75 01 	lds	r18, 0x0175
    1a1c:	28 17       	cp	r18, r24
    1a1e:	28 f0       	brcs	.+10     	; 0x1a2a <i2c_handel_data+0x10c>
    1a20:	28 c1       	rjmp	.+592    	; 0x1c72 <i2c_handel_data+0x354>
    1a22:	20 91 75 01 	lds	r18, 0x0175
    1a26:	82 17       	cp	r24, r18
    1a28:	18 f4       	brcc	.+6      	; 0x1a30 <i2c_handel_data+0x112>
					distans_left=distans_left_median[0];
    1a2a:	80 93 a8 01 	sts	0x01A8, r24
    1a2e:	0f c0       	rjmp	.+30     	; 0x1a4e <i2c_handel_data+0x130>
				else if((distans_left_median[1]<distans_left_median[0] && distans_left_median[1]>distans_left_median[2])||(distans_left_median[1]>distans_left_median[0] && distans_left_median[1]<distans_left_median[2]))
    1a30:	29 17       	cp	r18, r25
    1a32:	30 f0       	brcs	.+12     	; 0x1a40 <i2c_handel_data+0x122>
    1a34:	89 17       	cp	r24, r25
    1a36:	38 f4       	brcc	.+14     	; 0x1a46 <i2c_handel_data+0x128>
    1a38:	20 91 75 01 	lds	r18, 0x0175
    1a3c:	92 17       	cp	r25, r18
    1a3e:	18 f4       	brcc	.+6      	; 0x1a46 <i2c_handel_data+0x128>
					distans_left=distans_left_median[1];
    1a40:	90 93 a8 01 	sts	0x01A8, r25
    1a44:	04 c0       	rjmp	.+8      	; 0x1a4e <i2c_handel_data+0x130>
				else
					distans_left=distans_left_median[2];
    1a46:	20 91 75 01 	lds	r18, 0x0175
    1a4a:	20 93 a8 01 	sts	0x01A8, r18
				distans_left_median[2]=distans_left_median[1];
    1a4e:	e3 e7       	ldi	r30, 0x73	; 115
    1a50:	f1 e0       	ldi	r31, 0x01	; 1
    1a52:	92 83       	std	Z+2, r25	; 0x02
				distans_left_median[1]=distans_left_median[0];
    1a54:	81 83       	std	Z+1, r24	; 0x01
				//updaterad_labyrint = true;
				break;
    1a56:	f7 c0       	rjmp	.+494    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x02 :// refelxsensor data
				regler_ready_linje = 1;					// Ny data har lästs in då uppdaterar vi regleringen
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	90 93 64 01 	sts	0x0164, r25
    1a60:	80 93 63 01 	sts	0x0163, r24
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
    1a64:	ed e8       	ldi	r30, 0x8D	; 141
    1a66:	f1 e0       	ldi	r31, 0x01	; 1
    1a68:	82 81       	ldd	r24, Z+2	; 0x02
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	88 27       	eor	r24, r24
    1a70:	21 81       	ldd	r18, Z+1	; 0x01
    1a72:	82 0f       	add	r24, r18
    1a74:	91 1d       	adc	r25, r1
    1a76:	90 93 9d 01 	sts	0x019D, r25
    1a7a:	80 93 9c 01 	sts	0x019C, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
    1a7e:	83 81       	ldd	r24, Z+3	; 0x03
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	90 93 c6 01 	sts	0x01C6, r25
    1a86:	80 93 c5 01 	sts	0x01C5, r24
				break;
    1a8a:	dd c0       	rjmp	.+442    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x03 :
				RGB_data=1;//"röd";"
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	80 93 af 01 	sts	0x01AF, r24
				break;
    1a92:	d9 c0       	rjmp	.+434    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x04 :
				RGB_data=2;//"grön";
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	80 93 af 01 	sts	0x01AF, r24
				break;		
    1a9a:	d5 c0       	rjmp	.+426    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x05 :
				RGB_data=3;//"blå";
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	80 93 af 01 	sts	0x01AF, r24
				break;
    1aa2:	d1 c0       	rjmp	.+418    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x06 : // gyro klart
				gyro_90 = true;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	80 93 78 01 	sts	0x0178, r24
				turning = false;
    1aaa:	10 92 61 01 	sts	0x0161, r1
				motor_right = 0;
    1aae:	18 bc       	out	0x28, r1	; 40
				motor_left = 0;
    1ab0:	17 bc       	out	0x27, r1	; 39
				updaterad_labyrint = false;
    1ab2:	10 92 62 01 	sts	0x0162, r1
				turn_delay = 0;
    1ab6:	10 92 1e 01 	sts	0x011E, r1
    1aba:	10 92 1d 01 	sts	0x011D, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1abe:	9f ef       	ldi	r25, 0xFF	; 255
    1ac0:	2f e7       	ldi	r18, 0x7F	; 127
    1ac2:	86 e1       	ldi	r24, 0x16	; 22
    1ac4:	91 50       	subi	r25, 0x01	; 1
    1ac6:	20 40       	sbci	r18, 0x00	; 0
    1ac8:	80 40       	sbci	r24, 0x00	; 0
    1aca:	e1 f7       	brne	.-8      	; 0x1ac4 <i2c_handel_data+0x1a6>
    1acc:	00 c0       	rjmp	.+0      	; 0x1ace <i2c_handel_data+0x1b0>
    1ace:	00 00       	nop
    1ad0:	ba c0       	rjmp	.+372    	; 0x1c46 <i2c_handel_data+0x328>
				break;
			case 0x07 :// gyro data
				// Kod vi skickar till sensor
				break;
			case 0x08 : // manuel stå still
				manual_function=0;
    1ad2:	10 92 58 01 	sts	0x0158, r1
    1ad6:	10 92 57 01 	sts	0x0157, r1
				break;
    1ada:	b5 c0       	rjmp	.+362    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	90 93 58 01 	sts	0x0158, r25
    1ae4:	80 93 57 01 	sts	0x0157, r24
				break;
    1ae8:	ae c0       	rjmp	.+348    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
    1aea:	82 e0       	ldi	r24, 0x02	; 2
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	90 93 58 01 	sts	0x0158, r25
    1af2:	80 93 57 01 	sts	0x0157, r24
				break;
    1af6:	a7 c0       	rjmp	.+334    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x0b ://manuel vänster fram
				manual_function=4;
    1af8:	84 e0       	ldi	r24, 0x04	; 4
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	90 93 58 01 	sts	0x0158, r25
    1b00:	80 93 57 01 	sts	0x0157, r24
				break;
    1b04:	a0 c0       	rjmp	.+320    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x0c ://manuel höger fram
				manual_function=3;
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	90 93 58 01 	sts	0x0158, r25
    1b0e:	80 93 57 01 	sts	0x0157, r24
				break;
    1b12:	99 c0       	rjmp	.+306    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
    1b14:	86 e0       	ldi	r24, 0x06	; 6
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	90 93 58 01 	sts	0x0158, r25
    1b1c:	80 93 57 01 	sts	0x0157, r24
				break;
    1b20:	92 c0       	rjmp	.+292    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
    1b22:	85 e0       	ldi	r24, 0x05	; 5
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	90 93 58 01 	sts	0x0158, r25
    1b2a:	80 93 57 01 	sts	0x0157, r24
				break;
    1b2e:	8b c0       	rjmp	.+278    	; 0x1c46 <i2c_handel_data+0x328>
			case 0x0f :	// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
    1b30:	80 91 8e 01 	lds	r24, 0x018E
    1b34:	80 3f       	cpi	r24, 0xF0	; 240
    1b36:	09 f5       	brne	.+66     	; 0x1b7a <i2c_handel_data+0x25c>
					if(start==1){
    1b38:	80 91 6f 01 	lds	r24, 0x016F
    1b3c:	90 91 70 01 	lds	r25, 0x0170
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	29 f4       	brne	.+10     	; 0x1b4e <i2c_handel_data+0x230>
						start=0;
    1b44:	10 92 70 01 	sts	0x0170, r1
    1b48:	10 92 6f 01 	sts	0x016F, r1
    1b4c:	7c c0       	rjmp	.+248    	; 0x1c46 <i2c_handel_data+0x328>
    1b4e:	e9 e7       	ldi	r30, 0x79	; 121
    1b50:	f1 e0       	ldi	r31, 0x01	; 1
    1b52:	a1 eb       	ldi	r26, 0xB1	; 177
    1b54:	b1 e0       	ldi	r27, 0x01	; 1
    1b56:	83 e8       	ldi	r24, 0x83	; 131
    1b58:	91 e0       	ldi	r25, 0x01	; 1
					}
					else{
						for(int i = 0; i < 5; i++){						
							previous_errors_right[i] = 0;
    1b5a:	11 92       	st	Z+, r1
    1b5c:	11 92       	st	Z+, r1
							previous_errors_left[i] = 0;
    1b5e:	1d 92       	st	X+, r1
    1b60:	1d 92       	st	X+, r1
				if(i2c_data[1]==0xf0){
					if(start==1){
						start=0;
					}
					else{
						for(int i = 0; i < 5; i++){						
    1b62:	e8 17       	cp	r30, r24
    1b64:	f9 07       	cpc	r31, r25
    1b66:	c9 f7       	brne	.-14     	; 0x1b5a <i2c_handel_data+0x23c>
							previous_errors_right[i] = 0;
							previous_errors_left[i] = 0;
						}
						start=1;
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	90 93 70 01 	sts	0x0170, r25
    1b70:	80 93 6f 01 	sts	0x016F, r24
						RGB_data = 0;
    1b74:	10 92 af 01 	sts	0x01AF, r1
    1b78:	66 c0       	rjmp	.+204    	; 0x1c46 <i2c_handel_data+0x328>
						  
					}
				}
				else if(i2c_data[1]==0x0f){
    1b7a:	8f 30       	cpi	r24, 0x0F	; 15
    1b7c:	f1 f4       	brne	.+60     	; 0x1bba <i2c_handel_data+0x29c>
					if(drive_mode==1){
    1b7e:	80 91 71 01 	lds	r24, 0x0171
    1b82:	90 91 72 01 	lds	r25, 0x0172
    1b86:	01 97       	sbiw	r24, 0x01	; 1
    1b88:	59 f4       	brne	.+22     	; 0x1ba0 <i2c_handel_data+0x282>
						PORTD |= (1 << PD1);
    1b8a:	59 9a       	sbi	0x0b, 1	; 11
						PORTD &= ~(1 << PD0);
    1b8c:	58 98       	cbi	0x0b, 0	; 11
						drive_mode=0;
    1b8e:	10 92 72 01 	sts	0x0172, r1
    1b92:	10 92 71 01 	sts	0x0171, r1
						start=0;
    1b96:	10 92 70 01 	sts	0x0170, r1
    1b9a:	10 92 6f 01 	sts	0x016F, r1
    1b9e:	53 c0       	rjmp	.+166    	; 0x1c46 <i2c_handel_data+0x328>
					}
					else{
						PORTD |= (1 << PD0);
    1ba0:	58 9a       	sbi	0x0b, 0	; 11
						PORTD &= ~(1 << PD1);
    1ba2:	59 98       	cbi	0x0b, 1	; 11
						drive_mode=1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	90 93 72 01 	sts	0x0172, r25
    1bac:	80 93 71 01 	sts	0x0171, r24
						start=0;
    1bb0:	10 92 70 01 	sts	0x0170, r1
    1bb4:	10 92 6f 01 	sts	0x016F, r1
    1bb8:	46 c0       	rjmp	.+140    	; 0x1c46 <i2c_handel_data+0x328>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
    1bba:	81 11       	cpse	r24, r1
    1bbc:	1b c0       	rjmp	.+54     	; 0x1bf4 <i2c_handel_data+0x2d6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bbe:	96 e3       	ldi	r25, 0x36	; 54
    1bc0:	9a 95       	dec	r25
    1bc2:	f1 f7       	brne	.-4      	; 0x1bc0 <i2c_handel_data+0x2a2>
    1bc4:	00 00       	nop
					_delay_us(11);
					d_constant = i2c_data[2] ;
    1bc6:	ed e8       	ldi	r30, 0x8D	; 141
    1bc8:	f1 e0       	ldi	r31, 0x01	; 1
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	90 93 01 01 	sts	0x0101, r25
    1bd2:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3] ;
    1bd6:	23 81       	ldd	r18, Z+3	; 0x03
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	30 93 03 01 	sts	0x0103, r19
    1bde:	20 93 02 01 	sts	0x0102, r18
					if(d_constant == 180)
    1be2:	84 3b       	cpi	r24, 0xB4	; 180
    1be4:	91 05       	cpc	r25, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <i2c_handel_data+0x2cc>
					PORTD |= (1 << PD1);
    1be8:	59 9a       	sbi	0x0b, 1	; 11
    1bea:	26 e3       	ldi	r18, 0x36	; 54
    1bec:	2a 95       	dec	r18
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <i2c_handel_data+0x2ce>
    1bf0:	00 00       	nop
    1bf2:	29 c0       	rjmp	.+82     	; 0x1c46 <i2c_handel_data+0x328>
					_delay_us(11);
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
    1bf4:	81 30       	cpi	r24, 0x01	; 1
    1bf6:	b9 f4       	brne	.+46     	; 0x1c26 <i2c_handel_data+0x308>
    1bf8:	81 e3       	ldi	r24, 0x31	; 49
    1bfa:	8a 95       	dec	r24
    1bfc:	f1 f7       	brne	.-4      	; 0x1bfa <i2c_handel_data+0x2dc>
    1bfe:	00 00       	nop

					_delay_us(10);
					d_constant_lab = i2c_data[3] ;
    1c00:	ed e8       	ldi	r30, 0x8D	; 141
    1c02:	f1 e0       	ldi	r31, 0x01	; 1
    1c04:	83 81       	ldd	r24, Z+3	; 0x03
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	90 93 12 01 	sts	0x0112, r25
    1c0c:	80 93 11 01 	sts	0x0111, r24
					p_constant_lab = i2c_data[2] ;
    1c10:	82 81       	ldd	r24, Z+2	; 0x02
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	90 93 14 01 	sts	0x0114, r25
    1c18:	80 93 13 01 	sts	0x0113, r24
    1c1c:	91 e3       	ldi	r25, 0x31	; 49
    1c1e:	9a 95       	dec	r25
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <i2c_handel_data+0x300>
    1c22:	00 00       	nop
    1c24:	10 c0       	rjmp	.+32     	; 0x1c46 <i2c_handel_data+0x328>
					//p_wall = i2c_data[2] ;
					//d_wall = i2c_data[3] ;
					_delay_us(10);
	}
				else if(i2c_data[1]==0x02){
    1c26:	82 30       	cpi	r24, 0x02	; 2
    1c28:	71 f4       	brne	.+28     	; 0x1c46 <i2c_handel_data+0x328>
					left = i2c_data[2] & 0xff;
    1c2a:	ed e8       	ldi	r30, 0x8D	; 141
    1c2c:	f1 e0       	ldi	r31, 0x01	; 1
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	90 93 6e 01 	sts	0x016E, r25
    1c36:	80 93 6d 01 	sts	0x016D, r24
					right = i2c_data[3] & 0xff;
    1c3a:	83 81       	ldd	r24, Z+3	; 0x03
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	90 93 6c 01 	sts	0x016C, r25
    1c42:	80 93 6b 01 	sts	0x016B, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
    1c46:	e8 9a       	sbi	0x1d, 0	; 29
    1c48:	08 95       	ret
			case 0x01 ://avståndssensorer  plockar fram medianen av dom senaste 3 värdena ser krongligt ut men är bara hitta mittenvärdet och lägg det i distans_xxx
				//distans_right = i2c_data[3];
				//distans_fram = i2c_data[2];
				//distans_left = i2c_data[1];
				distans_right_median[0] = i2c_data[3];
				if((distans_right_median[0]<distans_right_median[1] && distans_right_median[0]>distans_right_median[2])||(distans_right_median[0]>distans_right_median[1] && distans_right_median[0]<distans_right_median[2]))
    1c4a:	98 17       	cp	r25, r24
    1c4c:	08 f4       	brcc	.+2      	; 0x1c50 <i2c_handel_data+0x332>
    1c4e:	99 ce       	rjmp	.-718    	; 0x1982 <i2c_handel_data+0x64>
    1c50:	a3 ce       	rjmp	.-698    	; 0x1998 <i2c_handel_data+0x7a>
    1c52:	98 17       	cp	r25, r24
    1c54:	08 f4       	brcc	.+2      	; 0x1c58 <i2c_handel_data+0x33a>
    1c56:	95 ce       	rjmp	.-726    	; 0x1982 <i2c_handel_data+0x64>
    1c58:	a6 ce       	rjmp	.-692    	; 0x19a6 <i2c_handel_data+0x88>
					distans_right=distans_right_median[2];
				distans_right_median[2]=distans_right_median[1];
				distans_right_median[1]=distans_right_median[0];
		
				distans_fram_median[0] = i2c_data[2];
				if((distans_fram_median[0]<distans_fram_median[1] && distans_fram_median[0]>distans_fram_median[2])||(distans_fram_median[0]>distans_fram_median[1] && distans_fram_median[0]<distans_fram_median[2]))
    1c5a:	98 17       	cp	r25, r24
    1c5c:	08 f4       	brcc	.+2      	; 0x1c60 <i2c_handel_data+0x342>
    1c5e:	b9 ce       	rjmp	.-654    	; 0x19d2 <i2c_handel_data+0xb4>
    1c60:	c3 ce       	rjmp	.-634    	; 0x19e8 <i2c_handel_data+0xca>
    1c62:	98 17       	cp	r25, r24
    1c64:	08 f4       	brcc	.+2      	; 0x1c68 <i2c_handel_data+0x34a>
    1c66:	b5 ce       	rjmp	.-662    	; 0x19d2 <i2c_handel_data+0xb4>
    1c68:	c6 ce       	rjmp	.-628    	; 0x19f6 <i2c_handel_data+0xd8>
					distans_fram=distans_fram_median[2];
				distans_fram_median[2]=distans_fram_median[1];
				distans_fram_median[1]=distans_fram_median[0];
				
				distans_left_median[0] = i2c_data[1];
				if((distans_left_median[0]<distans_left_median[1] && distans_left_median[0]>distans_left_median[2])||(distans_left_median[0]>distans_left_median[1] && distans_left_median[0]<distans_left_median[2]))
    1c6a:	98 17       	cp	r25, r24
    1c6c:	08 f4       	brcc	.+2      	; 0x1c70 <i2c_handel_data+0x352>
    1c6e:	d9 ce       	rjmp	.-590    	; 0x1a22 <i2c_handel_data+0x104>
    1c70:	ea ce       	rjmp	.-556    	; 0x1a46 <i2c_handel_data+0x128>
    1c72:	98 17       	cp	r25, r24
    1c74:	08 f4       	brcc	.+2      	; 0x1c78 <i2c_handel_data+0x35a>
    1c76:	d5 ce       	rjmp	.-598    	; 0x1a22 <i2c_handel_data+0x104>
    1c78:	df ce       	rjmp	.-578    	; 0x1a38 <i2c_handel_data+0x11a>
    1c7a:	08 95       	ret

00001c7c <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
    1c7c:	d8 d8       	rcall	.-3664   	; 0xe2e <interrupt_init>
	board_init();
    1c7e:	0e 94 76 00 	call	0xec	; 0xec <board_init>
	initengine();
    1c82:	5e d8       	rcall	.-3908   	; 0xd40 <initengine>
	timerinit();
    1c84:	6a d8       	rcall	.-3884   	; 0xd5a <timerinit>
	i2c_setup(1);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	23 d9       	rcall	.-3514   	; 0xed0 <i2c_setup>
	sei();
    1c8a:	78 94       	sei
	//***********Set motors speed value here *****************
	left=180;				// kanske räcker med en variable för båda om båda kör exakt lika fort
    1c8c:	84 eb       	ldi	r24, 0xB4	; 180
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	90 93 6e 01 	sts	0x016E, r25
    1c94:	80 93 6d 01 	sts	0x016D, r24
	right=170;
    1c98:	8a ea       	ldi	r24, 0xAA	; 170
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	90 93 6c 01 	sts	0x016C, r25
    1ca0:	80 93 6b 01 	sts	0x016B, r24
	//********************************************************
	motor_left=left;
    1ca4:	84 eb       	ldi	r24, 0xB4	; 180
    1ca6:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
    1ca8:	80 91 6b 01 	lds	r24, 0x016B
    1cac:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
    1cae:	37 de       	rcall	.-914    	; 0x191e <i2c_handel_data>
		if(turning)
    1cb0:	80 91 61 01 	lds	r24, 0x0161
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	fb cf       	rjmp	.-10     	; 0x1cae <main+0x32>
			;
		else if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
    1cb8:	80 91 71 01 	lds	r24, 0x0171
    1cbc:	90 91 72 01 	lds	r25, 0x0172
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	91 05       	cpc	r25, r1
    1cc4:	71 f4       	brne	.+28     	; 0x1ce2 <main+0x66>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			//if((gyro_left == 1)|| (gyro_right == 1)){
			//	drive_mode = 0;
			//}
			if(start == 1){
    1cc6:	80 91 6f 01 	lds	r24, 0x016F
    1cca:	90 91 70 01 	lds	r25, 0x0170
    1cce:	81 30       	cpi	r24, 0x01	; 1
    1cd0:	91 05       	cpc	r25, r1
    1cd2:	11 f4       	brne	.+4      	; 0x1cd8 <main+0x5c>
				regulator();	
    1cd4:	51 dd       	rcall	.-1374   	; 0x1778 <regulator>
    1cd6:	eb cf       	rjmp	.-42     	; 0x1cae <main+0x32>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
    1cd8:	89 2b       	or	r24, r25
    1cda:	49 f7       	brne	.-46     	; 0x1cae <main+0x32>
				motor_left=0;
    1cdc:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
    1cde:	18 bc       	out	0x28, r1	; 40
    1ce0:	e6 cf       	rjmp	.-52     	; 0x1cae <main+0x32>
			}
		}
		else if(drive_mode==0){										// Drivemode is manual
    1ce2:	89 2b       	or	r24, r25
    1ce4:	21 f7       	brne	.-56     	; 0x1cae <main+0x32>
			PORTD |= (1 << PD1);
    1ce6:	59 9a       	sbi	0x0b, 1	; 11
			manual_drive();
    1ce8:	90 d9       	rcall	.-3296   	; 0x100a <manual_drive>
    1cea:	e1 cf       	rjmp	.-62     	; 0x1cae <main+0x32>

00001cec <__subsf3>:
    1cec:	50 58       	subi	r21, 0x80	; 128

00001cee <__addsf3>:
    1cee:	bb 27       	eor	r27, r27
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	0e d0       	rcall	.+28     	; 0x1d10 <__addsf3x>
    1cf4:	4d c1       	rjmp	.+666    	; 0x1f90 <__fp_round>
    1cf6:	3e d1       	rcall	.+636    	; 0x1f74 <__fp_pscA>
    1cf8:	30 f0       	brcs	.+12     	; 0x1d06 <__addsf3+0x18>
    1cfa:	43 d1       	rcall	.+646    	; 0x1f82 <__fp_pscB>
    1cfc:	20 f0       	brcs	.+8      	; 0x1d06 <__addsf3+0x18>
    1cfe:	31 f4       	brne	.+12     	; 0x1d0c <__addsf3+0x1e>
    1d00:	9f 3f       	cpi	r25, 0xFF	; 255
    1d02:	11 f4       	brne	.+4      	; 0x1d08 <__addsf3+0x1a>
    1d04:	1e f4       	brtc	.+6      	; 0x1d0c <__addsf3+0x1e>
    1d06:	33 c1       	rjmp	.+614    	; 0x1f6e <__fp_nan>
    1d08:	0e f4       	brtc	.+2      	; 0x1d0c <__addsf3+0x1e>
    1d0a:	e0 95       	com	r30
    1d0c:	e7 fb       	bst	r30, 7
    1d0e:	29 c1       	rjmp	.+594    	; 0x1f62 <__fp_inf>

00001d10 <__addsf3x>:
    1d10:	e9 2f       	mov	r30, r25
    1d12:	4f d1       	rcall	.+670    	; 0x1fb2 <__fp_split3>
    1d14:	80 f3       	brcs	.-32     	; 0x1cf6 <__addsf3+0x8>
    1d16:	ba 17       	cp	r27, r26
    1d18:	62 07       	cpc	r22, r18
    1d1a:	73 07       	cpc	r23, r19
    1d1c:	84 07       	cpc	r24, r20
    1d1e:	95 07       	cpc	r25, r21
    1d20:	18 f0       	brcs	.+6      	; 0x1d28 <__addsf3x+0x18>
    1d22:	71 f4       	brne	.+28     	; 0x1d40 <__addsf3x+0x30>
    1d24:	9e f5       	brtc	.+102    	; 0x1d8c <__addsf3x+0x7c>
    1d26:	67 c1       	rjmp	.+718    	; 0x1ff6 <__fp_zero>
    1d28:	0e f4       	brtc	.+2      	; 0x1d2c <__addsf3x+0x1c>
    1d2a:	e0 95       	com	r30
    1d2c:	0b 2e       	mov	r0, r27
    1d2e:	ba 2f       	mov	r27, r26
    1d30:	a0 2d       	mov	r26, r0
    1d32:	0b 01       	movw	r0, r22
    1d34:	b9 01       	movw	r22, r18
    1d36:	90 01       	movw	r18, r0
    1d38:	0c 01       	movw	r0, r24
    1d3a:	ca 01       	movw	r24, r20
    1d3c:	a0 01       	movw	r20, r0
    1d3e:	11 24       	eor	r1, r1
    1d40:	ff 27       	eor	r31, r31
    1d42:	59 1b       	sub	r21, r25
    1d44:	99 f0       	breq	.+38     	; 0x1d6c <__addsf3x+0x5c>
    1d46:	59 3f       	cpi	r21, 0xF9	; 249
    1d48:	50 f4       	brcc	.+20     	; 0x1d5e <__addsf3x+0x4e>
    1d4a:	50 3e       	cpi	r21, 0xE0	; 224
    1d4c:	68 f1       	brcs	.+90     	; 0x1da8 <__addsf3x+0x98>
    1d4e:	1a 16       	cp	r1, r26
    1d50:	f0 40       	sbci	r31, 0x00	; 0
    1d52:	a2 2f       	mov	r26, r18
    1d54:	23 2f       	mov	r18, r19
    1d56:	34 2f       	mov	r19, r20
    1d58:	44 27       	eor	r20, r20
    1d5a:	58 5f       	subi	r21, 0xF8	; 248
    1d5c:	f3 cf       	rjmp	.-26     	; 0x1d44 <__addsf3x+0x34>
    1d5e:	46 95       	lsr	r20
    1d60:	37 95       	ror	r19
    1d62:	27 95       	ror	r18
    1d64:	a7 95       	ror	r26
    1d66:	f0 40       	sbci	r31, 0x00	; 0
    1d68:	53 95       	inc	r21
    1d6a:	c9 f7       	brne	.-14     	; 0x1d5e <__addsf3x+0x4e>
    1d6c:	7e f4       	brtc	.+30     	; 0x1d8c <__addsf3x+0x7c>
    1d6e:	1f 16       	cp	r1, r31
    1d70:	ba 0b       	sbc	r27, r26
    1d72:	62 0b       	sbc	r22, r18
    1d74:	73 0b       	sbc	r23, r19
    1d76:	84 0b       	sbc	r24, r20
    1d78:	ba f0       	brmi	.+46     	; 0x1da8 <__addsf3x+0x98>
    1d7a:	91 50       	subi	r25, 0x01	; 1
    1d7c:	a1 f0       	breq	.+40     	; 0x1da6 <__addsf3x+0x96>
    1d7e:	ff 0f       	add	r31, r31
    1d80:	bb 1f       	adc	r27, r27
    1d82:	66 1f       	adc	r22, r22
    1d84:	77 1f       	adc	r23, r23
    1d86:	88 1f       	adc	r24, r24
    1d88:	c2 f7       	brpl	.-16     	; 0x1d7a <__addsf3x+0x6a>
    1d8a:	0e c0       	rjmp	.+28     	; 0x1da8 <__addsf3x+0x98>
    1d8c:	ba 0f       	add	r27, r26
    1d8e:	62 1f       	adc	r22, r18
    1d90:	73 1f       	adc	r23, r19
    1d92:	84 1f       	adc	r24, r20
    1d94:	48 f4       	brcc	.+18     	; 0x1da8 <__addsf3x+0x98>
    1d96:	87 95       	ror	r24
    1d98:	77 95       	ror	r23
    1d9a:	67 95       	ror	r22
    1d9c:	b7 95       	ror	r27
    1d9e:	f7 95       	ror	r31
    1da0:	9e 3f       	cpi	r25, 0xFE	; 254
    1da2:	08 f0       	brcs	.+2      	; 0x1da6 <__addsf3x+0x96>
    1da4:	b3 cf       	rjmp	.-154    	; 0x1d0c <__addsf3+0x1e>
    1da6:	93 95       	inc	r25
    1da8:	88 0f       	add	r24, r24
    1daa:	08 f0       	brcs	.+2      	; 0x1dae <__addsf3x+0x9e>
    1dac:	99 27       	eor	r25, r25
    1dae:	ee 0f       	add	r30, r30
    1db0:	97 95       	ror	r25
    1db2:	87 95       	ror	r24
    1db4:	08 95       	ret

00001db6 <__divsf3>:
    1db6:	0c d0       	rcall	.+24     	; 0x1dd0 <__divsf3x>
    1db8:	eb c0       	rjmp	.+470    	; 0x1f90 <__fp_round>
    1dba:	e3 d0       	rcall	.+454    	; 0x1f82 <__fp_pscB>
    1dbc:	40 f0       	brcs	.+16     	; 0x1dce <__divsf3+0x18>
    1dbe:	da d0       	rcall	.+436    	; 0x1f74 <__fp_pscA>
    1dc0:	30 f0       	brcs	.+12     	; 0x1dce <__divsf3+0x18>
    1dc2:	21 f4       	brne	.+8      	; 0x1dcc <__divsf3+0x16>
    1dc4:	5f 3f       	cpi	r21, 0xFF	; 255
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <__divsf3+0x18>
    1dc8:	cc c0       	rjmp	.+408    	; 0x1f62 <__fp_inf>
    1dca:	51 11       	cpse	r21, r1
    1dcc:	15 c1       	rjmp	.+554    	; 0x1ff8 <__fp_szero>
    1dce:	cf c0       	rjmp	.+414    	; 0x1f6e <__fp_nan>

00001dd0 <__divsf3x>:
    1dd0:	f0 d0       	rcall	.+480    	; 0x1fb2 <__fp_split3>
    1dd2:	98 f3       	brcs	.-26     	; 0x1dba <__divsf3+0x4>

00001dd4 <__divsf3_pse>:
    1dd4:	99 23       	and	r25, r25
    1dd6:	c9 f3       	breq	.-14     	; 0x1dca <__divsf3+0x14>
    1dd8:	55 23       	and	r21, r21
    1dda:	b1 f3       	breq	.-20     	; 0x1dc8 <__divsf3+0x12>
    1ddc:	95 1b       	sub	r25, r21
    1dde:	55 0b       	sbc	r21, r21
    1de0:	bb 27       	eor	r27, r27
    1de2:	aa 27       	eor	r26, r26
    1de4:	62 17       	cp	r22, r18
    1de6:	73 07       	cpc	r23, r19
    1de8:	84 07       	cpc	r24, r20
    1dea:	38 f0       	brcs	.+14     	; 0x1dfa <__divsf3_pse+0x26>
    1dec:	9f 5f       	subi	r25, 0xFF	; 255
    1dee:	5f 4f       	sbci	r21, 0xFF	; 255
    1df0:	22 0f       	add	r18, r18
    1df2:	33 1f       	adc	r19, r19
    1df4:	44 1f       	adc	r20, r20
    1df6:	aa 1f       	adc	r26, r26
    1df8:	a9 f3       	breq	.-22     	; 0x1de4 <__divsf3_pse+0x10>
    1dfa:	33 d0       	rcall	.+102    	; 0x1e62 <__divsf3_pse+0x8e>
    1dfc:	0e 2e       	mov	r0, r30
    1dfe:	3a f0       	brmi	.+14     	; 0x1e0e <__divsf3_pse+0x3a>
    1e00:	e0 e8       	ldi	r30, 0x80	; 128
    1e02:	30 d0       	rcall	.+96     	; 0x1e64 <__divsf3_pse+0x90>
    1e04:	91 50       	subi	r25, 0x01	; 1
    1e06:	50 40       	sbci	r21, 0x00	; 0
    1e08:	e6 95       	lsr	r30
    1e0a:	00 1c       	adc	r0, r0
    1e0c:	ca f7       	brpl	.-14     	; 0x1e00 <__divsf3_pse+0x2c>
    1e0e:	29 d0       	rcall	.+82     	; 0x1e62 <__divsf3_pse+0x8e>
    1e10:	fe 2f       	mov	r31, r30
    1e12:	27 d0       	rcall	.+78     	; 0x1e62 <__divsf3_pse+0x8e>
    1e14:	66 0f       	add	r22, r22
    1e16:	77 1f       	adc	r23, r23
    1e18:	88 1f       	adc	r24, r24
    1e1a:	bb 1f       	adc	r27, r27
    1e1c:	26 17       	cp	r18, r22
    1e1e:	37 07       	cpc	r19, r23
    1e20:	48 07       	cpc	r20, r24
    1e22:	ab 07       	cpc	r26, r27
    1e24:	b0 e8       	ldi	r27, 0x80	; 128
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <__divsf3_pse+0x56>
    1e28:	bb 0b       	sbc	r27, r27
    1e2a:	80 2d       	mov	r24, r0
    1e2c:	bf 01       	movw	r22, r30
    1e2e:	ff 27       	eor	r31, r31
    1e30:	93 58       	subi	r25, 0x83	; 131
    1e32:	5f 4f       	sbci	r21, 0xFF	; 255
    1e34:	2a f0       	brmi	.+10     	; 0x1e40 <__divsf3_pse+0x6c>
    1e36:	9e 3f       	cpi	r25, 0xFE	; 254
    1e38:	51 05       	cpc	r21, r1
    1e3a:	68 f0       	brcs	.+26     	; 0x1e56 <__divsf3_pse+0x82>
    1e3c:	92 c0       	rjmp	.+292    	; 0x1f62 <__fp_inf>
    1e3e:	dc c0       	rjmp	.+440    	; 0x1ff8 <__fp_szero>
    1e40:	5f 3f       	cpi	r21, 0xFF	; 255
    1e42:	ec f3       	brlt	.-6      	; 0x1e3e <__divsf3_pse+0x6a>
    1e44:	98 3e       	cpi	r25, 0xE8	; 232
    1e46:	dc f3       	brlt	.-10     	; 0x1e3e <__divsf3_pse+0x6a>
    1e48:	86 95       	lsr	r24
    1e4a:	77 95       	ror	r23
    1e4c:	67 95       	ror	r22
    1e4e:	b7 95       	ror	r27
    1e50:	f7 95       	ror	r31
    1e52:	9f 5f       	subi	r25, 0xFF	; 255
    1e54:	c9 f7       	brne	.-14     	; 0x1e48 <__divsf3_pse+0x74>
    1e56:	88 0f       	add	r24, r24
    1e58:	91 1d       	adc	r25, r1
    1e5a:	96 95       	lsr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	97 f9       	bld	r25, 7
    1e60:	08 95       	ret
    1e62:	e1 e0       	ldi	r30, 0x01	; 1
    1e64:	66 0f       	add	r22, r22
    1e66:	77 1f       	adc	r23, r23
    1e68:	88 1f       	adc	r24, r24
    1e6a:	bb 1f       	adc	r27, r27
    1e6c:	62 17       	cp	r22, r18
    1e6e:	73 07       	cpc	r23, r19
    1e70:	84 07       	cpc	r24, r20
    1e72:	ba 07       	cpc	r27, r26
    1e74:	20 f0       	brcs	.+8      	; 0x1e7e <__divsf3_pse+0xaa>
    1e76:	62 1b       	sub	r22, r18
    1e78:	73 0b       	sbc	r23, r19
    1e7a:	84 0b       	sbc	r24, r20
    1e7c:	ba 0b       	sbc	r27, r26
    1e7e:	ee 1f       	adc	r30, r30
    1e80:	88 f7       	brcc	.-30     	; 0x1e64 <__divsf3_pse+0x90>
    1e82:	e0 95       	com	r30
    1e84:	08 95       	ret

00001e86 <__fixsfsi>:
    1e86:	04 d0       	rcall	.+8      	; 0x1e90 <__fixunssfsi>
    1e88:	68 94       	set
    1e8a:	b1 11       	cpse	r27, r1
    1e8c:	b5 c0       	rjmp	.+362    	; 0x1ff8 <__fp_szero>
    1e8e:	08 95       	ret

00001e90 <__fixunssfsi>:
    1e90:	98 d0       	rcall	.+304    	; 0x1fc2 <__fp_splitA>
    1e92:	88 f0       	brcs	.+34     	; 0x1eb6 <__fixunssfsi+0x26>
    1e94:	9f 57       	subi	r25, 0x7F	; 127
    1e96:	90 f0       	brcs	.+36     	; 0x1ebc <__fixunssfsi+0x2c>
    1e98:	b9 2f       	mov	r27, r25
    1e9a:	99 27       	eor	r25, r25
    1e9c:	b7 51       	subi	r27, 0x17	; 23
    1e9e:	a0 f0       	brcs	.+40     	; 0x1ec8 <__fixunssfsi+0x38>
    1ea0:	d1 f0       	breq	.+52     	; 0x1ed6 <__fixunssfsi+0x46>
    1ea2:	66 0f       	add	r22, r22
    1ea4:	77 1f       	adc	r23, r23
    1ea6:	88 1f       	adc	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	1a f0       	brmi	.+6      	; 0x1eb2 <__fixunssfsi+0x22>
    1eac:	ba 95       	dec	r27
    1eae:	c9 f7       	brne	.-14     	; 0x1ea2 <__fixunssfsi+0x12>
    1eb0:	12 c0       	rjmp	.+36     	; 0x1ed6 <__fixunssfsi+0x46>
    1eb2:	b1 30       	cpi	r27, 0x01	; 1
    1eb4:	81 f0       	breq	.+32     	; 0x1ed6 <__fixunssfsi+0x46>
    1eb6:	9f d0       	rcall	.+318    	; 0x1ff6 <__fp_zero>
    1eb8:	b1 e0       	ldi	r27, 0x01	; 1
    1eba:	08 95       	ret
    1ebc:	9c c0       	rjmp	.+312    	; 0x1ff6 <__fp_zero>
    1ebe:	67 2f       	mov	r22, r23
    1ec0:	78 2f       	mov	r23, r24
    1ec2:	88 27       	eor	r24, r24
    1ec4:	b8 5f       	subi	r27, 0xF8	; 248
    1ec6:	39 f0       	breq	.+14     	; 0x1ed6 <__fixunssfsi+0x46>
    1ec8:	b9 3f       	cpi	r27, 0xF9	; 249
    1eca:	cc f3       	brlt	.-14     	; 0x1ebe <__fixunssfsi+0x2e>
    1ecc:	86 95       	lsr	r24
    1ece:	77 95       	ror	r23
    1ed0:	67 95       	ror	r22
    1ed2:	b3 95       	inc	r27
    1ed4:	d9 f7       	brne	.-10     	; 0x1ecc <__fixunssfsi+0x3c>
    1ed6:	3e f4       	brtc	.+14     	; 0x1ee6 <__fixunssfsi+0x56>
    1ed8:	90 95       	com	r25
    1eda:	80 95       	com	r24
    1edc:	70 95       	com	r23
    1ede:	61 95       	neg	r22
    1ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee6:	08 95       	ret

00001ee8 <__floatunsisf>:
    1ee8:	e8 94       	clt
    1eea:	09 c0       	rjmp	.+18     	; 0x1efe <__floatsisf+0x12>

00001eec <__floatsisf>:
    1eec:	97 fb       	bst	r25, 7
    1eee:	3e f4       	brtc	.+14     	; 0x1efe <__floatsisf+0x12>
    1ef0:	90 95       	com	r25
    1ef2:	80 95       	com	r24
    1ef4:	70 95       	com	r23
    1ef6:	61 95       	neg	r22
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	8f 4f       	sbci	r24, 0xFF	; 255
    1efc:	9f 4f       	sbci	r25, 0xFF	; 255
    1efe:	99 23       	and	r25, r25
    1f00:	a9 f0       	breq	.+42     	; 0x1f2c <__floatsisf+0x40>
    1f02:	f9 2f       	mov	r31, r25
    1f04:	96 e9       	ldi	r25, 0x96	; 150
    1f06:	bb 27       	eor	r27, r27
    1f08:	93 95       	inc	r25
    1f0a:	f6 95       	lsr	r31
    1f0c:	87 95       	ror	r24
    1f0e:	77 95       	ror	r23
    1f10:	67 95       	ror	r22
    1f12:	b7 95       	ror	r27
    1f14:	f1 11       	cpse	r31, r1
    1f16:	f8 cf       	rjmp	.-16     	; 0x1f08 <__floatsisf+0x1c>
    1f18:	fa f4       	brpl	.+62     	; 0x1f58 <__floatsisf+0x6c>
    1f1a:	bb 0f       	add	r27, r27
    1f1c:	11 f4       	brne	.+4      	; 0x1f22 <__floatsisf+0x36>
    1f1e:	60 ff       	sbrs	r22, 0
    1f20:	1b c0       	rjmp	.+54     	; 0x1f58 <__floatsisf+0x6c>
    1f22:	6f 5f       	subi	r22, 0xFF	; 255
    1f24:	7f 4f       	sbci	r23, 0xFF	; 255
    1f26:	8f 4f       	sbci	r24, 0xFF	; 255
    1f28:	9f 4f       	sbci	r25, 0xFF	; 255
    1f2a:	16 c0       	rjmp	.+44     	; 0x1f58 <__floatsisf+0x6c>
    1f2c:	88 23       	and	r24, r24
    1f2e:	11 f0       	breq	.+4      	; 0x1f34 <__floatsisf+0x48>
    1f30:	96 e9       	ldi	r25, 0x96	; 150
    1f32:	11 c0       	rjmp	.+34     	; 0x1f56 <__floatsisf+0x6a>
    1f34:	77 23       	and	r23, r23
    1f36:	21 f0       	breq	.+8      	; 0x1f40 <__floatsisf+0x54>
    1f38:	9e e8       	ldi	r25, 0x8E	; 142
    1f3a:	87 2f       	mov	r24, r23
    1f3c:	76 2f       	mov	r23, r22
    1f3e:	05 c0       	rjmp	.+10     	; 0x1f4a <__floatsisf+0x5e>
    1f40:	66 23       	and	r22, r22
    1f42:	71 f0       	breq	.+28     	; 0x1f60 <__floatsisf+0x74>
    1f44:	96 e8       	ldi	r25, 0x86	; 134
    1f46:	86 2f       	mov	r24, r22
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	2a f0       	brmi	.+10     	; 0x1f58 <__floatsisf+0x6c>
    1f4e:	9a 95       	dec	r25
    1f50:	66 0f       	add	r22, r22
    1f52:	77 1f       	adc	r23, r23
    1f54:	88 1f       	adc	r24, r24
    1f56:	da f7       	brpl	.-10     	; 0x1f4e <__floatsisf+0x62>
    1f58:	88 0f       	add	r24, r24
    1f5a:	96 95       	lsr	r25
    1f5c:	87 95       	ror	r24
    1f5e:	97 f9       	bld	r25, 7
    1f60:	08 95       	ret

00001f62 <__fp_inf>:
    1f62:	97 f9       	bld	r25, 7
    1f64:	9f 67       	ori	r25, 0x7F	; 127
    1f66:	80 e8       	ldi	r24, 0x80	; 128
    1f68:	70 e0       	ldi	r23, 0x00	; 0
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	08 95       	ret

00001f6e <__fp_nan>:
    1f6e:	9f ef       	ldi	r25, 0xFF	; 255
    1f70:	80 ec       	ldi	r24, 0xC0	; 192
    1f72:	08 95       	ret

00001f74 <__fp_pscA>:
    1f74:	00 24       	eor	r0, r0
    1f76:	0a 94       	dec	r0
    1f78:	16 16       	cp	r1, r22
    1f7a:	17 06       	cpc	r1, r23
    1f7c:	18 06       	cpc	r1, r24
    1f7e:	09 06       	cpc	r0, r25
    1f80:	08 95       	ret

00001f82 <__fp_pscB>:
    1f82:	00 24       	eor	r0, r0
    1f84:	0a 94       	dec	r0
    1f86:	12 16       	cp	r1, r18
    1f88:	13 06       	cpc	r1, r19
    1f8a:	14 06       	cpc	r1, r20
    1f8c:	05 06       	cpc	r0, r21
    1f8e:	08 95       	ret

00001f90 <__fp_round>:
    1f90:	09 2e       	mov	r0, r25
    1f92:	03 94       	inc	r0
    1f94:	00 0c       	add	r0, r0
    1f96:	11 f4       	brne	.+4      	; 0x1f9c <__fp_round+0xc>
    1f98:	88 23       	and	r24, r24
    1f9a:	52 f0       	brmi	.+20     	; 0x1fb0 <__fp_round+0x20>
    1f9c:	bb 0f       	add	r27, r27
    1f9e:	40 f4       	brcc	.+16     	; 0x1fb0 <__fp_round+0x20>
    1fa0:	bf 2b       	or	r27, r31
    1fa2:	11 f4       	brne	.+4      	; 0x1fa8 <__fp_round+0x18>
    1fa4:	60 ff       	sbrs	r22, 0
    1fa6:	04 c0       	rjmp	.+8      	; 0x1fb0 <__fp_round+0x20>
    1fa8:	6f 5f       	subi	r22, 0xFF	; 255
    1faa:	7f 4f       	sbci	r23, 0xFF	; 255
    1fac:	8f 4f       	sbci	r24, 0xFF	; 255
    1fae:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb0:	08 95       	ret

00001fb2 <__fp_split3>:
    1fb2:	57 fd       	sbrc	r21, 7
    1fb4:	90 58       	subi	r25, 0x80	; 128
    1fb6:	44 0f       	add	r20, r20
    1fb8:	55 1f       	adc	r21, r21
    1fba:	59 f0       	breq	.+22     	; 0x1fd2 <__fp_splitA+0x10>
    1fbc:	5f 3f       	cpi	r21, 0xFF	; 255
    1fbe:	71 f0       	breq	.+28     	; 0x1fdc <__fp_splitA+0x1a>
    1fc0:	47 95       	ror	r20

00001fc2 <__fp_splitA>:
    1fc2:	88 0f       	add	r24, r24
    1fc4:	97 fb       	bst	r25, 7
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	61 f0       	breq	.+24     	; 0x1fe2 <__fp_splitA+0x20>
    1fca:	9f 3f       	cpi	r25, 0xFF	; 255
    1fcc:	79 f0       	breq	.+30     	; 0x1fec <__fp_splitA+0x2a>
    1fce:	87 95       	ror	r24
    1fd0:	08 95       	ret
    1fd2:	12 16       	cp	r1, r18
    1fd4:	13 06       	cpc	r1, r19
    1fd6:	14 06       	cpc	r1, r20
    1fd8:	55 1f       	adc	r21, r21
    1fda:	f2 cf       	rjmp	.-28     	; 0x1fc0 <__fp_split3+0xe>
    1fdc:	46 95       	lsr	r20
    1fde:	f1 df       	rcall	.-30     	; 0x1fc2 <__fp_splitA>
    1fe0:	08 c0       	rjmp	.+16     	; 0x1ff2 <__fp_splitA+0x30>
    1fe2:	16 16       	cp	r1, r22
    1fe4:	17 06       	cpc	r1, r23
    1fe6:	18 06       	cpc	r1, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	f1 cf       	rjmp	.-30     	; 0x1fce <__fp_splitA+0xc>
    1fec:	86 95       	lsr	r24
    1fee:	71 05       	cpc	r23, r1
    1ff0:	61 05       	cpc	r22, r1
    1ff2:	08 94       	sec
    1ff4:	08 95       	ret

00001ff6 <__fp_zero>:
    1ff6:	e8 94       	clt

00001ff8 <__fp_szero>:
    1ff8:	bb 27       	eor	r27, r27
    1ffa:	66 27       	eor	r22, r22
    1ffc:	77 27       	eor	r23, r23
    1ffe:	cb 01       	movw	r24, r22
    2000:	97 f9       	bld	r25, 7
    2002:	08 95       	ret

00002004 <__mulsf3>:
    2004:	0b d0       	rcall	.+22     	; 0x201c <__mulsf3x>
    2006:	c4 cf       	rjmp	.-120    	; 0x1f90 <__fp_round>
    2008:	b5 df       	rcall	.-150    	; 0x1f74 <__fp_pscA>
    200a:	28 f0       	brcs	.+10     	; 0x2016 <__mulsf3+0x12>
    200c:	ba df       	rcall	.-140    	; 0x1f82 <__fp_pscB>
    200e:	18 f0       	brcs	.+6      	; 0x2016 <__mulsf3+0x12>
    2010:	95 23       	and	r25, r21
    2012:	09 f0       	breq	.+2      	; 0x2016 <__mulsf3+0x12>
    2014:	a6 cf       	rjmp	.-180    	; 0x1f62 <__fp_inf>
    2016:	ab cf       	rjmp	.-170    	; 0x1f6e <__fp_nan>
    2018:	11 24       	eor	r1, r1
    201a:	ee cf       	rjmp	.-36     	; 0x1ff8 <__fp_szero>

0000201c <__mulsf3x>:
    201c:	ca df       	rcall	.-108    	; 0x1fb2 <__fp_split3>
    201e:	a0 f3       	brcs	.-24     	; 0x2008 <__mulsf3+0x4>

00002020 <__mulsf3_pse>:
    2020:	95 9f       	mul	r25, r21
    2022:	d1 f3       	breq	.-12     	; 0x2018 <__mulsf3+0x14>
    2024:	95 0f       	add	r25, r21
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	55 1f       	adc	r21, r21
    202a:	62 9f       	mul	r22, r18
    202c:	f0 01       	movw	r30, r0
    202e:	72 9f       	mul	r23, r18
    2030:	bb 27       	eor	r27, r27
    2032:	f0 0d       	add	r31, r0
    2034:	b1 1d       	adc	r27, r1
    2036:	63 9f       	mul	r22, r19
    2038:	aa 27       	eor	r26, r26
    203a:	f0 0d       	add	r31, r0
    203c:	b1 1d       	adc	r27, r1
    203e:	aa 1f       	adc	r26, r26
    2040:	64 9f       	mul	r22, r20
    2042:	66 27       	eor	r22, r22
    2044:	b0 0d       	add	r27, r0
    2046:	a1 1d       	adc	r26, r1
    2048:	66 1f       	adc	r22, r22
    204a:	82 9f       	mul	r24, r18
    204c:	22 27       	eor	r18, r18
    204e:	b0 0d       	add	r27, r0
    2050:	a1 1d       	adc	r26, r1
    2052:	62 1f       	adc	r22, r18
    2054:	73 9f       	mul	r23, r19
    2056:	b0 0d       	add	r27, r0
    2058:	a1 1d       	adc	r26, r1
    205a:	62 1f       	adc	r22, r18
    205c:	83 9f       	mul	r24, r19
    205e:	a0 0d       	add	r26, r0
    2060:	61 1d       	adc	r22, r1
    2062:	22 1f       	adc	r18, r18
    2064:	74 9f       	mul	r23, r20
    2066:	33 27       	eor	r19, r19
    2068:	a0 0d       	add	r26, r0
    206a:	61 1d       	adc	r22, r1
    206c:	23 1f       	adc	r18, r19
    206e:	84 9f       	mul	r24, r20
    2070:	60 0d       	add	r22, r0
    2072:	21 1d       	adc	r18, r1
    2074:	82 2f       	mov	r24, r18
    2076:	76 2f       	mov	r23, r22
    2078:	6a 2f       	mov	r22, r26
    207a:	11 24       	eor	r1, r1
    207c:	9f 57       	subi	r25, 0x7F	; 127
    207e:	50 40       	sbci	r21, 0x00	; 0
    2080:	8a f0       	brmi	.+34     	; 0x20a4 <__mulsf3_pse+0x84>
    2082:	e1 f0       	breq	.+56     	; 0x20bc <__mulsf3_pse+0x9c>
    2084:	88 23       	and	r24, r24
    2086:	4a f0       	brmi	.+18     	; 0x209a <__mulsf3_pse+0x7a>
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	bb 1f       	adc	r27, r27
    208e:	66 1f       	adc	r22, r22
    2090:	77 1f       	adc	r23, r23
    2092:	88 1f       	adc	r24, r24
    2094:	91 50       	subi	r25, 0x01	; 1
    2096:	50 40       	sbci	r21, 0x00	; 0
    2098:	a9 f7       	brne	.-22     	; 0x2084 <__mulsf3_pse+0x64>
    209a:	9e 3f       	cpi	r25, 0xFE	; 254
    209c:	51 05       	cpc	r21, r1
    209e:	70 f0       	brcs	.+28     	; 0x20bc <__mulsf3_pse+0x9c>
    20a0:	60 cf       	rjmp	.-320    	; 0x1f62 <__fp_inf>
    20a2:	aa cf       	rjmp	.-172    	; 0x1ff8 <__fp_szero>
    20a4:	5f 3f       	cpi	r21, 0xFF	; 255
    20a6:	ec f3       	brlt	.-6      	; 0x20a2 <__mulsf3_pse+0x82>
    20a8:	98 3e       	cpi	r25, 0xE8	; 232
    20aa:	dc f3       	brlt	.-10     	; 0x20a2 <__mulsf3_pse+0x82>
    20ac:	86 95       	lsr	r24
    20ae:	77 95       	ror	r23
    20b0:	67 95       	ror	r22
    20b2:	b7 95       	ror	r27
    20b4:	f7 95       	ror	r31
    20b6:	e7 95       	ror	r30
    20b8:	9f 5f       	subi	r25, 0xFF	; 255
    20ba:	c1 f7       	brne	.-16     	; 0x20ac <__mulsf3_pse+0x8c>
    20bc:	fe 2b       	or	r31, r30
    20be:	88 0f       	add	r24, r24
    20c0:	91 1d       	adc	r25, r1
    20c2:	96 95       	lsr	r25
    20c4:	87 95       	ror	r24
    20c6:	97 f9       	bld	r25, 7
    20c8:	08 95       	ret

000020ca <__divmodhi4>:
    20ca:	97 fb       	bst	r25, 7
    20cc:	07 2e       	mov	r0, r23
    20ce:	16 f4       	brtc	.+4      	; 0x20d4 <__divmodhi4+0xa>
    20d0:	00 94       	com	r0
    20d2:	06 d0       	rcall	.+12     	; 0x20e0 <__divmodhi4_neg1>
    20d4:	77 fd       	sbrc	r23, 7
    20d6:	08 d0       	rcall	.+16     	; 0x20e8 <__divmodhi4_neg2>
    20d8:	14 d0       	rcall	.+40     	; 0x2102 <__udivmodhi4>
    20da:	07 fc       	sbrc	r0, 7
    20dc:	05 d0       	rcall	.+10     	; 0x20e8 <__divmodhi4_neg2>
    20de:	3e f4       	brtc	.+14     	; 0x20ee <__divmodhi4_exit>

000020e0 <__divmodhi4_neg1>:
    20e0:	90 95       	com	r25
    20e2:	81 95       	neg	r24
    20e4:	9f 4f       	sbci	r25, 0xFF	; 255
    20e6:	08 95       	ret

000020e8 <__divmodhi4_neg2>:
    20e8:	70 95       	com	r23
    20ea:	61 95       	neg	r22
    20ec:	7f 4f       	sbci	r23, 0xFF	; 255

000020ee <__divmodhi4_exit>:
    20ee:	08 95       	ret

000020f0 <__tablejump2__>:
    20f0:	ee 0f       	add	r30, r30
    20f2:	ff 1f       	adc	r31, r31
    20f4:	00 24       	eor	r0, r0
    20f6:	00 1c       	adc	r0, r0
    20f8:	0b be       	out	0x3b, r0	; 59
    20fa:	07 90       	elpm	r0, Z+
    20fc:	f6 91       	elpm	r31, Z
    20fe:	e0 2d       	mov	r30, r0
    2100:	09 94       	ijmp

00002102 <__udivmodhi4>:
    2102:	aa 1b       	sub	r26, r26
    2104:	bb 1b       	sub	r27, r27
    2106:	51 e1       	ldi	r21, 0x11	; 17
    2108:	07 c0       	rjmp	.+14     	; 0x2118 <__udivmodhi4_ep>

0000210a <__udivmodhi4_loop>:
    210a:	aa 1f       	adc	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	a6 17       	cp	r26, r22
    2110:	b7 07       	cpc	r27, r23
    2112:	10 f0       	brcs	.+4      	; 0x2118 <__udivmodhi4_ep>
    2114:	a6 1b       	sub	r26, r22
    2116:	b7 0b       	sbc	r27, r23

00002118 <__udivmodhi4_ep>:
    2118:	88 1f       	adc	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	5a 95       	dec	r21
    211e:	a9 f7       	brne	.-22     	; 0x210a <__udivmodhi4_loop>
    2120:	80 95       	com	r24
    2122:	90 95       	com	r25
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	08 95       	ret

0000212a <_exit>:
    212a:	f8 94       	cli

0000212c <__stop_program>:
    212c:	ff cf       	rjmp	.-2      	; 0x212c <__stop_program>
