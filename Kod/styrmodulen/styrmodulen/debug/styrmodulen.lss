
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000013a6  0000143a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ffc  0080010c  0080010c  00001446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000014b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e0f  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000335  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016e2  00000000  00000000  0000273c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00003e20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001074c  00000000  00000000  0000422c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ae  00000000  00000000  00014978  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00015c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  00015d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	53 c6       	rjmp	.+3238   	; 0xcac <__vector_1>
       6:	00 00       	nop
       8:	11 c5       	rjmp	.+2594   	; 0xa2c <__vector_2>
       a:	00 00       	nop
       c:	37 c5       	rjmp	.+2670   	; 0xa7c <__vector_3>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	c2 c4       	rjmp	.+2436   	; 0x9ba <__vector_13>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a4 06       	cpc	r10, r20
      8e:	a9 06       	cpc	r10, r25
      90:	b5 06       	cpc	r11, r21
      92:	c9 06       	cpc	r12, r25
      94:	cd 06       	cpc	r12, r29
      96:	d1 06       	cpc	r13, r17
      98:	6c 07       	cpc	r22, r28
      9a:	d5 06       	cpc	r13, r21
      9c:	d9 06       	cpc	r13, r25
      9e:	de 06       	cpc	r13, r30
      a0:	e5 06       	cpc	r14, r21
      a2:	ec 06       	cpc	r14, r28
      a4:	f3 06       	cpc	r15, r19
      a6:	fa 06       	cpc	r15, r26
      a8:	01 07       	cpc	r16, r17
      aa:	08 07       	cpc	r16, r24

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e6 ea       	ldi	r30, 0xA6	; 166
      c0:	f3 e1       	ldi	r31, 0x13	; 19
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ac 30       	cpi	r26, 0x0C	; 12
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e1       	ldi	r18, 0x11	; 17
      d4:	ac e0       	ldi	r26, 0x0C	; 12
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a8 30       	cpi	r26, 0x08	; 8
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	fc d6       	rcall	.+3576   	; 0xedc <main>
      e4:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
      ea:	08 95       	ret

000000ec <linje_get_error>:
	}
	
	else if(turn_done && count_waypoint >= 5){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
		twoway_turn_right = false;
		ongoing_turn = false;
		first_time = true;
      ec:	2f 92       	push	r2
      ee:	3f 92       	push	r3
      f0:	4f 92       	push	r4
      f2:	5f 92       	push	r5
      f4:	6f 92       	push	r6
      f6:	7f 92       	push	r7
      f8:	8f 92       	push	r8
      fa:	9f 92       	push	r9
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	10 92 30 01 	sts	0x0130, r1
     114:	10 92 2f 01 	sts	0x012F, r1
     118:	f8 94       	cli
     11a:	80 90 23 09 	lds	r8, 0x0923
     11e:	90 90 24 09 	lds	r9, 0x0924
     122:	20 90 02 11 	lds	r2, 0x1102
     126:	30 90 03 11 	lds	r3, 0x1103
     12a:	78 94       	sei
     12c:	c0 90 2f 01 	lds	r12, 0x012F
     130:	d0 90 30 01 	lds	r13, 0x0130
     134:	05 e0       	ldi	r16, 0x05	; 5
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c0 e0       	ldi	r28, 0x00	; 0
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	41 2c       	mov	r4, r1
     13e:	51 2c       	mov	r5, r1
     140:	32 01       	movw	r6, r4
     142:	0f 2e       	mov	r0, r31
     144:	f5 e0       	ldi	r31, 0x05	; 5
     146:	af 2e       	mov	r10, r31
     148:	b1 2c       	mov	r11, r1
     14a:	f0 2d       	mov	r31, r0
     14c:	c5 01       	movw	r24, r10
     14e:	80 1b       	sub	r24, r16
     150:	91 0b       	sbc	r25, r17
     152:	08 97       	sbiw	r24, 0x08	; 8
     154:	04 f5       	brge	.+64     	; 0x196 <linje_get_error+0xaa>
     156:	74 01       	movw	r14, r8
     158:	0c 2e       	mov	r0, r28
     15a:	02 c0       	rjmp	.+4      	; 0x160 <linje_get_error+0x74>
     15c:	f5 94       	asr	r15
     15e:	e7 94       	ror	r14
     160:	0a 94       	dec	r0
     162:	e2 f7       	brpl	.-8      	; 0x15c <linje_get_error+0x70>
     164:	83 e0       	ldi	r24, 0x03	; 3
     166:	e8 22       	and	r14, r24
     168:	ff 24       	eor	r15, r15
     16a:	0e 9d       	mul	r16, r14
     16c:	b0 01       	movw	r22, r0
     16e:	0f 9d       	mul	r16, r15
     170:	70 0d       	add	r23, r0
     172:	1e 9d       	mul	r17, r14
     174:	70 0d       	add	r23, r0
     176:	11 24       	eor	r1, r1
     178:	07 2e       	mov	r0, r23
     17a:	00 0c       	add	r0, r0
     17c:	88 0b       	sbc	r24, r24
     17e:	99 0b       	sbc	r25, r25
     180:	f1 d7       	rcall	.+4066   	; 0x1164 <__floatsisf>
     182:	9b 01       	movw	r18, r22
     184:	ac 01       	movw	r20, r24
     186:	c3 01       	movw	r24, r6
     188:	b2 01       	movw	r22, r4
     18a:	ed d6       	rcall	.+3546   	; 0xf66 <__addsf3>
     18c:	2b 01       	movw	r4, r22
     18e:	3c 01       	movw	r6, r24
     190:	ce 0c       	add	r12, r14
     192:	df 1c       	adc	r13, r15
     194:	20 c0       	rjmp	.+64     	; 0x1d6 <linje_get_error+0xea>
     196:	ce 01       	movw	r24, r28
     198:	40 97       	sbiw	r24, 0x10	; 16
     19a:	71 01       	movw	r14, r2
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <linje_get_error+0xb6>
     19e:	f5 94       	asr	r15
     1a0:	e7 94       	ror	r14
     1a2:	8a 95       	dec	r24
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <linje_get_error+0xb2>
     1a6:	83 e0       	ldi	r24, 0x03	; 3
     1a8:	e8 22       	and	r14, r24
     1aa:	ff 24       	eor	r15, r15
     1ac:	0e 9d       	mul	r16, r14
     1ae:	b0 01       	movw	r22, r0
     1b0:	0f 9d       	mul	r16, r15
     1b2:	70 0d       	add	r23, r0
     1b4:	1e 9d       	mul	r17, r14
     1b6:	70 0d       	add	r23, r0
     1b8:	11 24       	eor	r1, r1
     1ba:	07 2e       	mov	r0, r23
     1bc:	00 0c       	add	r0, r0
     1be:	88 0b       	sbc	r24, r24
     1c0:	99 0b       	sbc	r25, r25
     1c2:	d0 d7       	rcall	.+4000   	; 0x1164 <__floatsisf>
     1c4:	9b 01       	movw	r18, r22
     1c6:	ac 01       	movw	r20, r24
     1c8:	c3 01       	movw	r24, r6
     1ca:	b2 01       	movw	r22, r4
     1cc:	cc d6       	rcall	.+3480   	; 0xf66 <__addsf3>
     1ce:	2b 01       	movw	r4, r22
     1d0:	3c 01       	movw	r6, r24
     1d2:	ce 0c       	add	r12, r14
     1d4:	df 1c       	adc	r13, r15
     1d6:	22 96       	adiw	r28, 0x02	; 2
     1d8:	01 50       	subi	r16, 0x01	; 1
     1da:	11 09       	sbc	r17, r1
     1dc:	c6 31       	cpi	r28, 0x16	; 22
     1de:	d1 05       	cpc	r29, r1
     1e0:	09 f0       	breq	.+2      	; 0x1e4 <linje_get_error+0xf8>
     1e2:	b4 cf       	rjmp	.-152    	; 0x14c <linje_get_error+0x60>
     1e4:	d0 92 30 01 	sts	0x0130, r13
     1e8:	c0 92 2f 01 	sts	0x012F, r12
     1ec:	c1 14       	cp	r12, r1
     1ee:	d1 04       	cpc	r13, r1
     1f0:	59 f0       	breq	.+22     	; 0x208 <linje_get_error+0x11c>
     1f2:	b6 01       	movw	r22, r12
     1f4:	dd 0c       	add	r13, r13
     1f6:	88 0b       	sbc	r24, r24
     1f8:	99 0b       	sbc	r25, r25
     1fa:	b4 d7       	rcall	.+3944   	; 0x1164 <__floatsisf>
     1fc:	9b 01       	movw	r18, r22
     1fe:	ac 01       	movw	r20, r24
     200:	c3 01       	movw	r24, r6
     202:	b2 01       	movw	r22, r4
     204:	14 d7       	rcall	.+3624   	; 0x102e <__divsf3>
     206:	03 c0       	rjmp	.+6      	; 0x20e <linje_get_error+0x122>
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	cb 01       	movw	r24, r22
     20e:	77 d7       	rcall	.+3822   	; 0x10fe <__fixsfsi>
     210:	cb 01       	movw	r24, r22
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	1f 91       	pop	r17
     218:	0f 91       	pop	r16
     21a:	ff 90       	pop	r15
     21c:	ef 90       	pop	r14
     21e:	df 90       	pop	r13
     220:	cf 90       	pop	r12
     222:	bf 90       	pop	r11
     224:	af 90       	pop	r10
     226:	9f 90       	pop	r9
     228:	8f 90       	pop	r8
     22a:	7f 90       	pop	r7
     22c:	6f 90       	pop	r6
     22e:	5f 90       	pop	r5
     230:	4f 90       	pop	r4
     232:	3f 90       	pop	r3
     234:	2f 90       	pop	r2
     236:	08 95       	ret

00000238 <linje_RGBsveng>:
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	f8 94       	cli
     23e:	20 91 23 09 	lds	r18, 0x0923
     242:	30 91 24 09 	lds	r19, 0x0924
     246:	40 91 02 11 	lds	r20, 0x1102
     24a:	50 91 03 11 	lds	r21, 0x1103
     24e:	78 94       	sei
     250:	80 91 14 01 	lds	r24, 0x0114
     254:	90 91 15 01 	lds	r25, 0x0115
     258:	85 31       	cpi	r24, 0x15	; 21
     25a:	91 05       	cpc	r25, r1
     25c:	3c f0       	brlt	.+14     	; 0x26c <linje_RGBsveng+0x34>
     25e:	10 92 30 09 	sts	0x0930, r1
     262:	10 92 15 01 	sts	0x0115, r1
     266:	10 92 14 01 	sts	0x0114, r1
     26a:	75 c0       	rjmp	.+234    	; 0x356 <linje_RGBsveng+0x11e>
     26c:	01 96       	adiw	r24, 0x01	; 1
     26e:	90 93 15 01 	sts	0x0115, r25
     272:	80 93 14 01 	sts	0x0114, r24
     276:	6f c0       	rjmp	.+222    	; 0x356 <linje_RGBsveng+0x11e>
     278:	a0 ef       	ldi	r26, 0xF0	; 240
     27a:	bf ef       	ldi	r27, 0xFF	; 255
     27c:	6b ef       	ldi	r22, 0xFB	; 251
     27e:	e0 e0       	ldi	r30, 0x00	; 0
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 e0       	ldi	r24, 0x00	; 0
     284:	81 11       	cpse	r24, r1
     286:	1f c0       	rjmp	.+62     	; 0x2c6 <linje_RGBsveng+0x8e>
     288:	e8 30       	cpi	r30, 0x08	; 8
     28a:	f1 05       	cpc	r31, r1
     28c:	84 f4       	brge	.+32     	; 0x2ae <linje_RGBsveng+0x76>
     28e:	cf 01       	movw	r24, r30
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	e9 01       	movw	r28, r18
     296:	02 c0       	rjmp	.+4      	; 0x29c <linje_RGBsveng+0x64>
     298:	d5 95       	asr	r29
     29a:	c7 95       	ror	r28
     29c:	8a 95       	dec	r24
     29e:	e2 f7       	brpl	.-8      	; 0x298 <linje_RGBsveng+0x60>
     2a0:	ce 01       	movw	r24, r28
     2a2:	86 95       	lsr	r24
     2a4:	81 70       	andi	r24, 0x01	; 1
     2a6:	68 9f       	mul	r22, r24
     2a8:	80 2d       	mov	r24, r0
     2aa:	11 24       	eor	r1, r1
     2ac:	0c c0       	rjmp	.+24     	; 0x2c6 <linje_RGBsveng+0x8e>
     2ae:	ca 01       	movw	r24, r20
     2b0:	0a 2e       	mov	r0, r26
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <linje_RGBsveng+0x80>
     2b4:	95 95       	asr	r25
     2b6:	87 95       	ror	r24
     2b8:	0a 94       	dec	r0
     2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <linje_RGBsveng+0x7c>
     2bc:	86 95       	lsr	r24
     2be:	81 70       	andi	r24, 0x01	; 1
     2c0:	68 9f       	mul	r22, r24
     2c2:	80 2d       	mov	r24, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	31 96       	adiw	r30, 0x01	; 1
     2c8:	6f 5f       	subi	r22, 0xFF	; 255
     2ca:	12 96       	adiw	r26, 0x02	; 2
     2cc:	66 30       	cpi	r22, 0x06	; 6
     2ce:	d1 f6       	brne	.-76     	; 0x284 <linje_RGBsveng+0x4c>
     2d0:	48 c0       	rjmp	.+144    	; 0x362 <linje_RGBsveng+0x12a>
     2d2:	82 30       	cpi	r24, 0x02	; 2
     2d4:	69 f4       	brne	.+26     	; 0x2f0 <linje_RGBsveng+0xb8>
     2d6:	20 7f       	andi	r18, 0xF0	; 240
     2d8:	30 93 24 09 	sts	0x0924, r19
     2dc:	20 93 23 09 	sts	0x0923, r18
     2e0:	43 70       	andi	r20, 0x03	; 3
     2e2:	55 27       	eor	r21, r21
     2e4:	50 93 03 11 	sts	0x1103, r21
     2e8:	40 93 02 11 	sts	0x1102, r20
     2ec:	ff de       	rcall	.-514    	; 0xec <linje_get_error>
     2ee:	39 c0       	rjmp	.+114    	; 0x362 <linje_RGBsveng+0x12a>
     2f0:	83 30       	cpi	r24, 0x03	; 3
     2f2:	79 f5       	brne	.+94     	; 0x352 <linje_RGBsveng+0x11a>
     2f4:	a6 e0       	ldi	r26, 0x06	; 6
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e6 e0       	ldi	r30, 0x06	; 6
     2fa:	6b e0       	ldi	r22, 0x0B	; 11
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	81 11       	cpse	r24, r1
     302:	1f c0       	rjmp	.+62     	; 0x342 <linje_RGBsveng+0x10a>
     304:	68 30       	cpi	r22, 0x08	; 8
     306:	71 05       	cpc	r23, r1
     308:	84 f4       	brge	.+32     	; 0x32a <linje_RGBsveng+0xf2>
     30a:	cb 01       	movw	r24, r22
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	e9 01       	movw	r28, r18
     312:	02 c0       	rjmp	.+4      	; 0x318 <linje_RGBsveng+0xe0>
     314:	d5 95       	asr	r29
     316:	c7 95       	ror	r28
     318:	8a 95       	dec	r24
     31a:	e2 f7       	brpl	.-8      	; 0x314 <linje_RGBsveng+0xdc>
     31c:	ce 01       	movw	r24, r28
     31e:	86 95       	lsr	r24
     320:	81 70       	andi	r24, 0x01	; 1
     322:	e8 9f       	mul	r30, r24
     324:	80 2d       	mov	r24, r0
     326:	11 24       	eor	r1, r1
     328:	0c c0       	rjmp	.+24     	; 0x342 <linje_RGBsveng+0x10a>
     32a:	ca 01       	movw	r24, r20
     32c:	0a 2e       	mov	r0, r26
     32e:	02 c0       	rjmp	.+4      	; 0x334 <linje_RGBsveng+0xfc>
     330:	95 95       	asr	r25
     332:	87 95       	ror	r24
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <linje_RGBsveng+0xf8>
     338:	86 95       	lsr	r24
     33a:	81 70       	andi	r24, 0x01	; 1
     33c:	e8 9f       	mul	r30, r24
     33e:	80 2d       	mov	r24, r0
     340:	11 24       	eor	r1, r1
     342:	61 50       	subi	r22, 0x01	; 1
     344:	71 09       	sbc	r23, r1
     346:	e1 50       	subi	r30, 0x01	; 1
     348:	12 97       	sbiw	r26, 0x02	; 2
     34a:	61 15       	cp	r22, r1
     34c:	71 05       	cpc	r23, r1
     34e:	c1 f6       	brne	.-80     	; 0x300 <linje_RGBsveng+0xc8>
     350:	08 c0       	rjmp	.+16     	; 0x362 <linje_RGBsveng+0x12a>
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	06 c0       	rjmp	.+12     	; 0x362 <linje_RGBsveng+0x12a>
     356:	80 91 30 09 	lds	r24, 0x0930
     35a:	81 30       	cpi	r24, 0x01	; 1
     35c:	09 f0       	breq	.+2      	; 0x360 <linje_RGBsveng+0x128>
     35e:	b9 cf       	rjmp	.-142    	; 0x2d2 <linje_RGBsveng+0x9a>
     360:	8b cf       	rjmp	.-234    	; 0x278 <linje_RGBsveng+0x40>
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	08 95       	ret

00000368 <detect_goal>:
     368:	80 91 33 01 	lds	r24, 0x0133
     36c:	90 91 34 01 	lds	r25, 0x0134
     370:	44 97       	sbiw	r24, 0x14	; 20
     372:	34 f0       	brlt	.+12     	; 0x380 <detect_goal+0x18>
     374:	10 92 13 01 	sts	0x0113, r1
     378:	10 92 12 01 	sts	0x0112, r1
     37c:	80 e0       	ldi	r24, 0x00	; 0
     37e:	08 95       	ret
     380:	08 95       	ret

00000382 <detect_labyrint>:
     382:	80 91 2c 09 	lds	r24, 0x092C
     386:	89 31       	cpi	r24, 0x19	; 25
     388:	70 f4       	brcc	.+28     	; 0x3a6 <detect_labyrint+0x24>
     38a:	80 91 10 01 	lds	r24, 0x0110
     38e:	90 91 11 01 	lds	r25, 0x0111
     392:	85 31       	cpi	r24, 0x15	; 21
     394:	91 05       	cpc	r25, r1
     396:	6c f4       	brge	.+26     	; 0x3b2 <detect_labyrint+0x30>
     398:	01 96       	adiw	r24, 0x01	; 1
     39a:	90 93 11 01 	sts	0x0111, r25
     39e:	80 93 10 01 	sts	0x0110, r24
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	08 95       	ret
     3a6:	10 92 11 01 	sts	0x0111, r1
     3aa:	10 92 10 01 	sts	0x0110, r1
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	08 95       	ret
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	08 95       	ret

000003b6 <manual_drive>:
     3b6:	80 91 2d 01 	lds	r24, 0x012D
     3ba:	90 91 2e 01 	lds	r25, 0x012E
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	29 f4       	brne	.+10     	; 0x3cc <manual_drive+0x16>
     3c2:	2e 98       	cbi	0x05, 6	; 5
     3c4:	2d 98       	cbi	0x05, 5	; 5
     3c6:	17 bc       	out	0x27, r1	; 39
     3c8:	18 bc       	out	0x28, r1	; 40
     3ca:	08 95       	ret
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	91 05       	cpc	r25, r1
     3d0:	49 f4       	brne	.+18     	; 0x3e4 <manual_drive+0x2e>
     3d2:	2e 98       	cbi	0x05, 6	; 5
     3d4:	2d 98       	cbi	0x05, 5	; 5
     3d6:	80 91 3b 01 	lds	r24, 0x013B
     3da:	87 bd       	out	0x27, r24	; 39
     3dc:	80 91 39 01 	lds	r24, 0x0139
     3e0:	88 bd       	out	0x28, r24	; 40
     3e2:	08 95       	ret
     3e4:	82 30       	cpi	r24, 0x02	; 2
     3e6:	91 05       	cpc	r25, r1
     3e8:	59 f4       	brne	.+22     	; 0x400 <manual_drive+0x4a>
     3ea:	85 b1       	in	r24, 0x05	; 5
     3ec:	80 66       	ori	r24, 0x60	; 96
     3ee:	85 b9       	out	0x05, r24	; 5
     3f0:	80 91 3b 01 	lds	r24, 0x013B
     3f4:	8d 50       	subi	r24, 0x0D	; 13
     3f6:	87 bd       	out	0x27, r24	; 39
     3f8:	80 91 39 01 	lds	r24, 0x0139
     3fc:	88 bd       	out	0x28, r24	; 40
     3fe:	08 95       	ret
     400:	83 30       	cpi	r24, 0x03	; 3
     402:	91 05       	cpc	r25, r1
     404:	81 f4       	brne	.+32     	; 0x426 <manual_drive+0x70>
     406:	2e 98       	cbi	0x05, 6	; 5
     408:	2d 98       	cbi	0x05, 5	; 5
     40a:	80 91 3b 01 	lds	r24, 0x013B
     40e:	87 bd       	out	0x27, r24	; 39
     410:	20 91 39 01 	lds	r18, 0x0139
     414:	90 91 3a 01 	lds	r25, 0x013A
     418:	82 2f       	mov	r24, r18
     41a:	63 e0       	ldi	r22, 0x03	; 3
     41c:	70 e0       	ldi	r23, 0x00	; 0
     41e:	91 d7       	rcall	.+3874   	; 0x1342 <__divmodhi4>
     420:	26 1b       	sub	r18, r22
     422:	28 bd       	out	0x28, r18	; 40
     424:	08 95       	ret
     426:	84 30       	cpi	r24, 0x04	; 4
     428:	91 05       	cpc	r25, r1
     42a:	81 f4       	brne	.+32     	; 0x44c <manual_drive+0x96>
     42c:	2e 98       	cbi	0x05, 6	; 5
     42e:	2d 98       	cbi	0x05, 5	; 5
     430:	20 91 3b 01 	lds	r18, 0x013B
     434:	90 91 3c 01 	lds	r25, 0x013C
     438:	82 2f       	mov	r24, r18
     43a:	63 e0       	ldi	r22, 0x03	; 3
     43c:	70 e0       	ldi	r23, 0x00	; 0
     43e:	81 d7       	rcall	.+3842   	; 0x1342 <__divmodhi4>
     440:	26 1b       	sub	r18, r22
     442:	27 bd       	out	0x27, r18	; 39
     444:	80 91 39 01 	lds	r24, 0x0139
     448:	88 bd       	out	0x28, r24	; 40
     44a:	08 95       	ret
     44c:	85 30       	cpi	r24, 0x05	; 5
     44e:	91 05       	cpc	r25, r1
     450:	49 f4       	brne	.+18     	; 0x464 <manual_drive+0xae>
     452:	2e 98       	cbi	0x05, 6	; 5
     454:	2d 9a       	sbi	0x05, 5	; 5
     456:	80 91 3b 01 	lds	r24, 0x013B
     45a:	87 bd       	out	0x27, r24	; 39
     45c:	80 91 39 01 	lds	r24, 0x0139
     460:	88 bd       	out	0x28, r24	; 40
     462:	08 95       	ret
     464:	06 97       	sbiw	r24, 0x06	; 6
     466:	49 f4       	brne	.+18     	; 0x47a <manual_drive+0xc4>
     468:	2d 98       	cbi	0x05, 5	; 5
     46a:	2e 9a       	sbi	0x05, 6	; 5
     46c:	80 91 3b 01 	lds	r24, 0x013B
     470:	87 bd       	out	0x27, r24	; 39
     472:	80 91 39 01 	lds	r24, 0x0139
     476:	88 bd       	out	0x28, r24	; 40
     478:	08 95       	ret
     47a:	10 92 2e 01 	sts	0x012E, r1
     47e:	10 92 2d 01 	sts	0x012D, r1
     482:	08 95       	ret

00000484 <PD_for_lab>:
     484:	2f 92       	push	r2
     486:	3f 92       	push	r3
     488:	4f 92       	push	r4
     48a:	5f 92       	push	r5
     48c:	6f 92       	push	r6
     48e:	7f 92       	push	r7
     490:	8f 92       	push	r8
     492:	9f 92       	push	r9
     494:	af 92       	push	r10
     496:	bf 92       	push	r11
     498:	cf 92       	push	r12
     49a:	df 92       	push	r13
     49c:	ef 92       	push	r14
     49e:	ff 92       	push	r15
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	00 d0       	rcall	.+0      	; 0x4aa <PD_for_lab+0x26>
     4aa:	00 d0       	rcall	.+0      	; 0x4ac <PD_for_lab+0x28>
     4ac:	00 d0       	rcall	.+0      	; 0x4ae <PD_for_lab+0x2a>
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	6c 01       	movw	r12, r24
     4b4:	80 91 06 01 	lds	r24, 0x0106
     4b8:	90 91 07 01 	lds	r25, 0x0107
     4bc:	9e 83       	std	Y+6, r25	; 0x06
     4be:	8d 83       	std	Y+5, r24	; 0x05
     4c0:	8c 01       	movw	r16, r24
     4c2:	06 1b       	sub	r16, r22
     4c4:	17 0b       	sbc	r17, r23
     4c6:	e0 90 27 01 	lds	r14, 0x0127
     4ca:	f0 90 28 01 	lds	r15, 0x0128
     4ce:	20 90 0a 01 	lds	r2, 0x010A
     4d2:	30 90 0b 01 	lds	r3, 0x010B
     4d6:	60 91 08 01 	lds	r22, 0x0108
     4da:	70 91 09 01 	lds	r23, 0x0109
     4de:	07 2e       	mov	r0, r23
     4e0:	00 0c       	add	r0, r0
     4e2:	88 0b       	sbc	r24, r24
     4e4:	99 0b       	sbc	r25, r25
     4e6:	3e d6       	rcall	.+3196   	; 0x1164 <__floatsisf>
     4e8:	69 83       	std	Y+1, r22	; 0x01
     4ea:	7a 83       	std	Y+2, r23	; 0x02
     4ec:	8b 83       	std	Y+3, r24	; 0x03
     4ee:	9c 83       	std	Y+4, r25	; 0x04
     4f0:	02 9d       	mul	r16, r2
     4f2:	b0 01       	movw	r22, r0
     4f4:	03 9d       	mul	r16, r3
     4f6:	70 0d       	add	r23, r0
     4f8:	12 9d       	mul	r17, r2
     4fa:	70 0d       	add	r23, r0
     4fc:	11 24       	eor	r1, r1
     4fe:	07 2e       	mov	r0, r23
     500:	00 0c       	add	r0, r0
     502:	88 0b       	sbc	r24, r24
     504:	99 0b       	sbc	r25, r25
     506:	2e d6       	rcall	.+3164   	; 0x1164 <__floatsisf>
     508:	2b 01       	movw	r4, r22
     50a:	3c 01       	movw	r6, r24
     50c:	47 01       	movw	r8, r14
     50e:	88 0c       	add	r8, r8
     510:	99 1c       	adc	r9, r9
     512:	f4 01       	movw	r30, r8
     514:	ec 5b       	subi	r30, 0xBC	; 188
     516:	fe 4f       	sbci	r31, 0xFE	; 254
     518:	5f 01       	movw	r10, r30
     51a:	80 81       	ld	r24, Z
     51c:	91 81       	ldd	r25, Z+1	; 0x01
     51e:	b8 01       	movw	r22, r16
     520:	68 1b       	sub	r22, r24
     522:	79 0b       	sbc	r23, r25
     524:	07 2e       	mov	r0, r23
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	1b d6       	rcall	.+3126   	; 0x1164 <__floatsisf>
     52e:	29 81       	ldd	r18, Y+1	; 0x01
     530:	3a 81       	ldd	r19, Y+2	; 0x02
     532:	4b 81       	ldd	r20, Y+3	; 0x03
     534:	5c 81       	ldd	r21, Y+4	; 0x04
     536:	a2 d6       	rcall	.+3396   	; 0x127c <__mulsf3>
     538:	9b 01       	movw	r18, r22
     53a:	ac 01       	movw	r20, r24
     53c:	c3 01       	movw	r24, r6
     53e:	b2 01       	movw	r22, r4
     540:	12 d5       	rcall	.+2596   	; 0xf66 <__addsf3>
     542:	20 e0       	ldi	r18, 0x00	; 0
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	40 e2       	ldi	r20, 0x20	; 32
     548:	51 e4       	ldi	r21, 0x41	; 65
     54a:	71 d5       	rcall	.+2786   	; 0x102e <__divsf3>
     54c:	d8 d5       	rcall	.+2992   	; 0x10fe <__fixsfsi>
     54e:	70 93 05 11 	sts	0x1105, r23
     552:	60 93 04 11 	sts	0x1104, r22
     556:	f5 01       	movw	r30, r10
     558:	11 83       	std	Z+1, r17	; 0x01
     55a:	00 83       	st	Z, r16
     55c:	8d 81       	ldd	r24, Y+5	; 0x05
     55e:	9e 81       	ldd	r25, Y+6	; 0x06
     560:	8c 19       	sub	r24, r12
     562:	9d 09       	sbc	r25, r13
     564:	6c 01       	movw	r12, r24
     566:	90 93 2f 09 	sts	0x092F, r25
     56a:	80 93 2e 09 	sts	0x092E, r24
     56e:	84 01       	movw	r16, r8
     570:	0e 5c       	subi	r16, 0xCE	; 206
     572:	16 4f       	sbci	r17, 0xF6	; 246
     574:	f8 01       	movw	r30, r16
     576:	80 81       	ld	r24, Z
     578:	91 81       	ldd	r25, Z+1	; 0x01
     57a:	b6 01       	movw	r22, r12
     57c:	68 1b       	sub	r22, r24
     57e:	79 0b       	sbc	r23, r25
     580:	07 2e       	mov	r0, r23
     582:	00 0c       	add	r0, r0
     584:	88 0b       	sbc	r24, r24
     586:	99 0b       	sbc	r25, r25
     588:	ed d5       	rcall	.+3034   	; 0x1164 <__floatsisf>
     58a:	4b 01       	movw	r8, r22
     58c:	5c 01       	movw	r10, r24
     58e:	60 93 29 01 	sts	0x0129, r22
     592:	70 93 2a 01 	sts	0x012A, r23
     596:	80 93 2b 01 	sts	0x012B, r24
     59a:	90 93 2c 01 	sts	0x012C, r25
     59e:	2c 9c       	mul	r2, r12
     5a0:	b0 01       	movw	r22, r0
     5a2:	2d 9c       	mul	r2, r13
     5a4:	70 0d       	add	r23, r0
     5a6:	3c 9c       	mul	r3, r12
     5a8:	70 0d       	add	r23, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	07 2e       	mov	r0, r23
     5ae:	00 0c       	add	r0, r0
     5b0:	88 0b       	sbc	r24, r24
     5b2:	99 0b       	sbc	r25, r25
     5b4:	d7 d5       	rcall	.+2990   	; 0x1164 <__floatsisf>
     5b6:	2b 01       	movw	r4, r22
     5b8:	3c 01       	movw	r6, r24
     5ba:	a5 01       	movw	r20, r10
     5bc:	94 01       	movw	r18, r8
     5be:	69 81       	ldd	r22, Y+1	; 0x01
     5c0:	7a 81       	ldd	r23, Y+2	; 0x02
     5c2:	8b 81       	ldd	r24, Y+3	; 0x03
     5c4:	9c 81       	ldd	r25, Y+4	; 0x04
     5c6:	5a d6       	rcall	.+3252   	; 0x127c <__mulsf3>
     5c8:	9b 01       	movw	r18, r22
     5ca:	ac 01       	movw	r20, r24
     5cc:	c3 01       	movw	r24, r6
     5ce:	b2 01       	movw	r22, r4
     5d0:	ca d4       	rcall	.+2452   	; 0xf66 <__addsf3>
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e2       	ldi	r20, 0x20	; 32
     5d8:	51 e4       	ldi	r21, 0x41	; 65
     5da:	29 d5       	rcall	.+2642   	; 0x102e <__divsf3>
     5dc:	90 d5       	rcall	.+2848   	; 0x10fe <__fixsfsi>
     5de:	70 93 26 09 	sts	0x0926, r23
     5e2:	60 93 25 09 	sts	0x0925, r22
     5e6:	f8 01       	movw	r30, r16
     5e8:	d1 82       	std	Z+1, r13	; 0x01
     5ea:	c0 82       	st	Z, r12
     5ec:	f7 ee       	ldi	r31, 0xE7	; 231
     5ee:	ef 16       	cp	r14, r31
     5f0:	f3 e0       	ldi	r31, 0x03	; 3
     5f2:	ff 06       	cpc	r15, r31
     5f4:	21 f4       	brne	.+8      	; 0x5fe <PD_for_lab+0x17a>
     5f6:	9b b1       	in	r25, 0x0b	; 11
     5f8:	82 e0       	ldi	r24, 0x02	; 2
     5fa:	89 27       	eor	r24, r25
     5fc:	8b b9       	out	0x0b, r24	; 11
     5fe:	80 91 27 01 	lds	r24, 0x0127
     602:	90 91 28 01 	lds	r25, 0x0128
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	90 93 28 01 	sts	0x0128, r25
     60c:	80 93 27 01 	sts	0x0127, r24
     610:	20 91 04 01 	lds	r18, 0x0104
     614:	30 91 05 01 	lds	r19, 0x0105
     618:	82 17       	cp	r24, r18
     61a:	93 07       	cpc	r25, r19
     61c:	24 f0       	brlt	.+8      	; 0x626 <PD_for_lab+0x1a2>
     61e:	10 92 28 01 	sts	0x0128, r1
     622:	10 92 27 01 	sts	0x0127, r1
     626:	80 91 25 09 	lds	r24, 0x0925
     62a:	90 91 26 09 	lds	r25, 0x0926
     62e:	99 23       	and	r25, r25
     630:	2c f0       	brlt	.+10     	; 0x63c <PD_for_lab+0x1b8>
     632:	10 92 26 09 	sts	0x0926, r1
     636:	10 92 25 09 	sts	0x0925, r1
     63a:	11 c0       	rjmp	.+34     	; 0x65e <PD_for_lab+0x1da>
     63c:	27 b5       	in	r18, 0x27	; 39
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	31 95       	neg	r19
     642:	21 95       	neg	r18
     644:	31 09       	sbc	r19, r1
     646:	28 17       	cp	r18, r24
     648:	39 07       	cpc	r19, r25
     64a:	4c f0       	brlt	.+18     	; 0x65e <PD_for_lab+0x1da>
     64c:	87 b5       	in	r24, 0x27	; 39
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	91 95       	neg	r25
     652:	81 95       	neg	r24
     654:	91 09       	sbc	r25, r1
     656:	90 93 26 09 	sts	0x0926, r25
     65a:	80 93 25 09 	sts	0x0925, r24
     65e:	80 91 04 11 	lds	r24, 0x1104
     662:	90 91 05 11 	lds	r25, 0x1105
     666:	99 23       	and	r25, r25
     668:	2c f0       	brlt	.+10     	; 0x674 <PD_for_lab+0x1f0>
     66a:	10 92 05 11 	sts	0x1105, r1
     66e:	10 92 04 11 	sts	0x1104, r1
     672:	11 c0       	rjmp	.+34     	; 0x696 <PD_for_lab+0x212>
     674:	28 b5       	in	r18, 0x28	; 40
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	31 95       	neg	r19
     67a:	21 95       	neg	r18
     67c:	31 09       	sbc	r19, r1
     67e:	28 17       	cp	r18, r24
     680:	39 07       	cpc	r19, r25
     682:	4c f0       	brlt	.+18     	; 0x696 <PD_for_lab+0x212>
     684:	88 b5       	in	r24, 0x28	; 40
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	91 95       	neg	r25
     68a:	81 95       	neg	r24
     68c:	91 09       	sbc	r25, r1
     68e:	90 93 05 11 	sts	0x1105, r25
     692:	80 93 04 11 	sts	0x1104, r24
     696:	90 91 25 09 	lds	r25, 0x0925
     69a:	80 91 3b 01 	lds	r24, 0x013B
     69e:	89 0f       	add	r24, r25
     6a0:	87 bd       	out	0x27, r24	; 39
     6a2:	90 91 04 11 	lds	r25, 0x1104
     6a6:	80 91 39 01 	lds	r24, 0x0139
     6aa:	89 0f       	add	r24, r25
     6ac:	88 bd       	out	0x28, r24	; 40
     6ae:	26 96       	adiw	r28, 0x06	; 6
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	9f 90       	pop	r9
     6d0:	8f 90       	pop	r8
     6d2:	7f 90       	pop	r7
     6d4:	6f 90       	pop	r6
     6d6:	5f 90       	pop	r5
     6d8:	4f 90       	pop	r4
     6da:	3f 90       	pop	r3
     6dc:	2f 90       	pop	r2
     6de:	08 95       	ret

000006e0 <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
     6e0:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
	int sensor_right_tmp = distans_right;
     6e2:	60 91 31 09 	lds	r22, 0x0931
     6e6:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
     6e8:	80 91 2c 09 	lds	r24, 0x092C
     6ec:	90 e0       	ldi	r25, 0x00	; 0
	sei();
     6ee:	78 94       	sei
	
	int st_value = 40;
	// Normalfall
	/*if((sensor_left_tmp < st_value && sensor_front_tmp > st_value && sensor_right_tmp < st_value) &&
	(!oneway_turn && !waypoint && !twoway_turn_left && !twoway_turn_right))*/
		PD_for_lab(sensor_left_tmp,sensor_right_tmp);
     6f0:	c9 ce       	rjmp	.-622    	; 0x484 <PD_for_lab>
     6f2:	08 95       	ret

000006f4 <linje>:
float current_position = 0;



	 
void linje(void){
     6f4:	4f 92       	push	r4
     6f6:	5f 92       	push	r5
     6f8:	6f 92       	push	r6
     6fa:	7f 92       	push	r7
     6fc:	8f 92       	push	r8
     6fe:	9f 92       	push	r9
     700:	af 92       	push	r10
     702:	bf 92       	push	r11
     704:	cf 92       	push	r12
     706:	df 92       	push	r13
     708:	ef 92       	push	r14
     70a:	ff 92       	push	r15
	cli();
     70c:	f8 94       	cli
	int current_position_tmp = current_position;
     70e:	60 91 17 01 	lds	r22, 0x0117
     712:	70 91 18 01 	lds	r23, 0x0118
     716:	80 91 19 01 	lds	r24, 0x0119
     71a:	90 91 1a 01 	lds	r25, 0x011A
     71e:	ef d4       	rcall	.+2526   	; 0x10fe <__fixsfsi>
	sei();
     720:	78 94       	sei
	
	current_error = setpoint - current_position_tmp;
     722:	20 91 25 01 	lds	r18, 0x0125
     726:	30 91 26 01 	lds	r19, 0x0126
     72a:	a9 01       	movw	r20, r18
     72c:	46 1b       	sub	r20, r22
     72e:	57 0b       	sbc	r21, r23
     730:	ba 01       	movw	r22, r20
     732:	07 2e       	mov	r0, r23
     734:	00 0c       	add	r0, r0
     736:	88 0b       	sbc	r24, r24
     738:	99 0b       	sbc	r25, r25
     73a:	14 d5       	rcall	.+2600   	; 0x1164 <__floatsisf>
     73c:	6b 01       	movw	r12, r22
     73e:	7c 01       	movw	r14, r24
     740:	60 93 21 01 	sts	0x0121, r22
     744:	70 93 22 01 	sts	0x0122, r23
     748:	80 93 23 01 	sts	0x0123, r24
     74c:	90 93 24 01 	sts	0x0124, r25
	derivate = (current_error -previous_error);					// Tror det var dt som saknades fÃ¶r derivatan
     750:	20 91 1b 01 	lds	r18, 0x011B
     754:	30 91 1c 01 	lds	r19, 0x011C
     758:	40 91 1d 01 	lds	r20, 0x011D
     75c:	50 91 1e 01 	lds	r21, 0x011E
     760:	01 d4       	rcall	.+2050   	; 0xf64 <__subsf3>
     762:	4b 01       	movw	r8, r22
     764:	5c 01       	movw	r10, r24
     766:	60 93 29 01 	sts	0x0129, r22
     76a:	70 93 2a 01 	sts	0x012A, r23
     76e:	80 93 2b 01 	sts	0x012B, r24
     772:	90 93 2c 01 	sts	0x012C, r25
	output = (p_constant * current_error + d_constant * derivate);
     776:	60 91 02 01 	lds	r22, 0x0102
     77a:	70 91 03 01 	lds	r23, 0x0103
     77e:	07 2e       	mov	r0, r23
     780:	00 0c       	add	r0, r0
     782:	88 0b       	sbc	r24, r24
     784:	99 0b       	sbc	r25, r25
     786:	ee d4       	rcall	.+2524   	; 0x1164 <__floatsisf>
     788:	9b 01       	movw	r18, r22
     78a:	ac 01       	movw	r20, r24
     78c:	c7 01       	movw	r24, r14
     78e:	b6 01       	movw	r22, r12
     790:	75 d5       	rcall	.+2794   	; 0x127c <__mulsf3>
     792:	2b 01       	movw	r4, r22
     794:	3c 01       	movw	r6, r24
     796:	60 91 00 01 	lds	r22, 0x0100
     79a:	70 91 01 01 	lds	r23, 0x0101
     79e:	07 2e       	mov	r0, r23
     7a0:	00 0c       	add	r0, r0
     7a2:	88 0b       	sbc	r24, r24
     7a4:	99 0b       	sbc	r25, r25
     7a6:	de d4       	rcall	.+2492   	; 0x1164 <__floatsisf>
     7a8:	9b 01       	movw	r18, r22
     7aa:	ac 01       	movw	r20, r24
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	65 d5       	rcall	.+2762   	; 0x127c <__mulsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c3 01       	movw	r24, r6
     7b8:	b2 01       	movw	r22, r4
     7ba:	d5 d3       	rcall	.+1962   	; 0xf66 <__addsf3>
     7bc:	a0 d4       	rcall	.+2368   	; 0x10fe <__fixsfsi>
     7be:	9b 01       	movw	r18, r22
     7c0:	70 93 20 01 	sts	0x0120, r23
     7c4:	60 93 1f 01 	sts	0x011F, r22
	previous_error = current_error;
     7c8:	c0 92 1b 01 	sts	0x011B, r12
     7cc:	d0 92 1c 01 	sts	0x011C, r13
     7d0:	e0 92 1d 01 	sts	0x011D, r14
     7d4:	f0 92 1e 01 	sts	0x011E, r15
//***********************************
//Reglering
//***********************************		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     7d8:	40 91 2f 01 	lds	r20, 0x012F
     7dc:	50 91 30 01 	lds	r21, 0x0130
     7e0:	45 2b       	or	r20, r21
     7e2:	b9 f4       	brne	.+46     	; 0x812 <linje+0x11e>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     7e4:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= (1 << motor_dir_right);
     7e6:	2d 9a       	sbi	0x05, 5	; 5
		motor_left = left/2;
     7e8:	80 91 3b 01 	lds	r24, 0x013B
     7ec:	90 91 3c 01 	lds	r25, 0x013C
     7f0:	99 23       	and	r25, r25
     7f2:	0c f4       	brge	.+2      	; 0x7f6 <linje+0x102>
     7f4:	01 96       	adiw	r24, 0x01	; 1
     7f6:	95 95       	asr	r25
     7f8:	87 95       	ror	r24
     7fa:	87 bd       	out	0x27, r24	; 39
		motor_right = right/2;
     7fc:	80 91 39 01 	lds	r24, 0x0139
     800:	90 91 3a 01 	lds	r25, 0x013A
     804:	99 23       	and	r25, r25
     806:	0c f4       	brge	.+2      	; 0x80a <linje+0x116>
     808:	01 96       	adiw	r24, 0x01	; 1
     80a:	95 95       	asr	r25
     80c:	87 95       	ror	r24
     80e:	88 bd       	out	0x28, r24	; 40
     810:	5b c0       	rjmp	.+182    	; 0x8c8 <linje+0x1d4>
	}
	else if(output < 0){							// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     812:	77 23       	and	r23, r23
     814:	6c f5       	brge	.+90     	; 0x870 <linje+0x17c>
		if(abs(output) >= right){					// FÃ¶r att unvika mÃ¤ttnad i regleringen
     816:	9b 01       	movw	r18, r22
     818:	77 23       	and	r23, r23
     81a:	24 f4       	brge	.+8      	; 0x824 <linje+0x130>
     81c:	22 27       	eor	r18, r18
     81e:	33 27       	eor	r19, r19
     820:	26 1b       	sub	r18, r22
     822:	37 0b       	sbc	r19, r23
     824:	80 91 39 01 	lds	r24, 0x0139
     828:	90 91 3a 01 	lds	r25, 0x013A
     82c:	28 17       	cp	r18, r24
     82e:	39 07       	cpc	r19, r25
     830:	9c f0       	brlt	.+38     	; 0x858 <linje+0x164>
			//PORTB |= (1 << motor_dir_left);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  
     832:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   
     834:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left;
     836:	80 91 3b 01 	lds	r24, 0x013B
     83a:	87 bd       	out	0x27, r24	; 39
			motor_right = abs(output)- right;
     83c:	80 91 1f 01 	lds	r24, 0x011F
     840:	90 91 20 01 	lds	r25, 0x0120
     844:	99 23       	and	r25, r25
     846:	1c f4       	brge	.+6      	; 0x84e <linje+0x15a>
     848:	91 95       	neg	r25
     84a:	81 95       	neg	r24
     84c:	91 09       	sbc	r25, r1
     84e:	90 91 39 01 	lds	r25, 0x0139
     852:	89 1b       	sub	r24, r25
     854:	88 bd       	out	0x28, r24	; 40
     856:	38 c0       	rjmp	.+112    	; 0x8c8 <linje+0x1d4>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     858:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     85a:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
     85c:	80 91 3b 01 	lds	r24, 0x013B
     860:	87 bd       	out	0x27, r24	; 39
			motor_right = right + output;
     862:	90 91 1f 01 	lds	r25, 0x011F
     866:	80 91 39 01 	lds	r24, 0x0139
     86a:	89 0f       	add	r24, r25
     86c:	88 bd       	out	0x28, r24	; 40
     86e:	2c c0       	rjmp	.+88     	; 0x8c8 <linje+0x1d4>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     870:	16 16       	cp	r1, r22
     872:	17 06       	cpc	r1, r23
     874:	fc f4       	brge	.+62     	; 0x8b4 <linje+0x1c0>
		if(output >= left){							// FÃ¶r att unvika mÃ¤ttnad i regleringen
     876:	80 91 3b 01 	lds	r24, 0x013B
     87a:	90 91 3c 01 	lds	r25, 0x013C
     87e:	28 17       	cp	r18, r24
     880:	39 07       	cpc	r19, r25
     882:	64 f0       	brlt	.+24     	; 0x89c <linje+0x1a8>
			//PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_left);			// Set motor direction to backward  
     884:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   
     886:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right;
     888:	80 91 39 01 	lds	r24, 0x0139
     88c:	88 bd       	out	0x28, r24	; 40
			motor_left = output - left;
     88e:	80 91 1f 01 	lds	r24, 0x011F
     892:	90 91 3b 01 	lds	r25, 0x013B
     896:	89 1b       	sub	r24, r25
     898:	87 bd       	out	0x27, r24	; 39
     89a:	16 c0       	rjmp	.+44     	; 0x8c8 <linje+0x1d4>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     89c:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     89e:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right;
     8a0:	80 91 39 01 	lds	r24, 0x0139
     8a4:	88 bd       	out	0x28, r24	; 40
			motor_left = left - output;
     8a6:	80 91 3b 01 	lds	r24, 0x013B
     8aa:	90 91 1f 01 	lds	r25, 0x011F
     8ae:	89 1b       	sub	r24, r25
     8b0:	87 bd       	out	0x27, r24	; 39
     8b2:	0a c0       	rjmp	.+20     	; 0x8c8 <linje+0x1d4>
		}
	}
	else if(output==0){
     8b4:	67 2b       	or	r22, r23
     8b6:	41 f4       	brne	.+16     	; 0x8c8 <linje+0x1d4>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     8b8:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     8ba:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     8bc:	80 91 3b 01 	lds	r24, 0x013B
     8c0:	87 bd       	out	0x27, r24	; 39
		motor_right = right;
     8c2:	80 91 39 01 	lds	r24, 0x0139
     8c6:	88 bd       	out	0x28, r24	; 40
	}
}
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	8f 90       	pop	r8
     8d8:	7f 90       	pop	r7
     8da:	6f 90       	pop	r6
     8dc:	5f 90       	pop	r5
     8de:	4f 90       	pop	r4
     8e0:	08 95       	ret

000008e2 <linje_main>:
int fel_antal=0;


void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	if(distans_fram<10){
     8e2:	80 91 29 09 	lds	r24, 0x0929
     8e6:	8a 30       	cpi	r24, 0x0A	; 10
     8e8:	28 f4       	brcc	.+10     	; 0x8f4 <linje_main+0x12>
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
     8ea:	10 92 3e 01 	sts	0x013E, r1
     8ee:	10 92 3d 01 	sts	0x013D, r1
     8f2:	08 95       	ret
	}
	else if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     8f4:	80 91 30 09 	lds	r24, 0x0930
     8f8:	81 50       	subi	r24, 0x01	; 1
     8fa:	83 30       	cpi	r24, 0x03	; 3
     8fc:	88 f4       	brcc	.+34     	; 0x920 <linje_main+0x3e>
		current_position=linje_RGBsveng();
     8fe:	9c dc       	rcall	.-1736   	; 0x238 <linje_RGBsveng>
     900:	68 2f       	mov	r22, r24
     902:	88 0f       	add	r24, r24
     904:	77 0b       	sbc	r23, r23
     906:	88 0b       	sbc	r24, r24
     908:	99 0b       	sbc	r25, r25
     90a:	2c d4       	rcall	.+2136   	; 0x1164 <__floatsisf>
     90c:	60 93 17 01 	sts	0x0117, r22
     910:	70 93 18 01 	sts	0x0118, r23
     914:	80 93 19 01 	sts	0x0119, r24
     918:	90 93 1a 01 	sts	0x011A, r25
		linje();
     91c:	eb ce       	rjmp	.-554    	; 0x6f4 <linje>
     91e:	08 95       	ret
	}
	else if(detect_goal()==true){
     920:	23 dd       	rcall	.-1466   	; 0x368 <detect_goal>
     922:	88 23       	and	r24, r24
     924:	29 f0       	breq	.+10     	; 0x930 <linje_main+0x4e>
		start=0;
     926:	10 92 3e 01 	sts	0x013E, r1
     92a:	10 92 3d 01 	sts	0x013D, r1
     92e:	08 95       	ret
		//signalera i mål och stanna
	}
	else if(detect_labyrint()==true){
     930:	28 dd       	rcall	.-1456   	; 0x382 <detect_labyrint>
     932:	88 23       	and	r24, r24
     934:	39 f0       	breq	.+14     	; 0x944 <linje_main+0x62>
		regulator_mode=2; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	90 93 32 01 	sts	0x0132, r25
     93e:	80 93 31 01 	sts	0x0131, r24
     942:	08 95       	ret
	}
	else{
		current_position=linje_get_error();
     944:	d3 db       	rcall	.-2138   	; 0xec <linje_get_error>
     946:	bc 01       	movw	r22, r24
     948:	99 0f       	add	r25, r25
     94a:	88 0b       	sbc	r24, r24
     94c:	99 0b       	sbc	r25, r25
     94e:	0a d4       	rcall	.+2068   	; 0x1164 <__floatsisf>
     950:	60 93 17 01 	sts	0x0117, r22
     954:	70 93 18 01 	sts	0x0118, r23
     958:	80 93 19 01 	sts	0x0119, r24
     95c:	90 93 1a 01 	sts	0x011A, r25
		linje();
     960:	c9 ce       	rjmp	.-622    	; 0x6f4 <linje>
     962:	08 95       	ret

00000964 <regulator>:
ï»¿#include <avr/interrupt.h>
#include <avr/io.h>
#include "asf.h"

void regulator(){
	if(regulator_mode == 1){
     964:	80 91 31 01 	lds	r24, 0x0131
     968:	90 91 32 01 	lds	r25, 0x0132
     96c:	01 97       	sbiw	r24, 0x01	; 1
     96e:	11 f4       	brne	.+4      	; 0x974 <regulator+0x10>
		linje_main();
     970:	b8 cf       	rjmp	.-144    	; 0x8e2 <linje_main>
     972:	08 95       	ret
	}
	else
	{	
		labyreg();//kalla pÃ¥ labyrint funktion
     974:	b5 ce       	rjmp	.-662    	; 0x6e0 <labyreg>
     976:	08 95       	ret

00000978 <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     978:	84 b5       	in	r24, 0x24	; 36
     97a:	83 6a       	ori	r24, 0xA3	; 163
     97c:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     97e:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     980:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     982:	85 b5       	in	r24, 0x25	; 37
     984:	83 60       	ori	r24, 0x03	; 3
     986:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     988:	88 e7       	ldi	r24, 0x78	; 120
     98a:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     98c:	85 b1       	in	r24, 0x05	; 5
     98e:	15 b8       	out	0x05, r1	; 5
     990:	08 95       	ret

00000992 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     992:	83 e0       	ldi	r24, 0x03	; 3
     994:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     996:	e1 e8       	ldi	r30, 0x81	; 129
     998:	f0 e0       	ldi	r31, 0x00	; 0
     99a:	80 81       	ld	r24, Z
     99c:	8d 60       	ori	r24, 0x0D	; 13
     99e:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     9a0:	80 ea       	ldi	r24, 0xA0	; 160
     9a2:	95 e0       	ldi	r25, 0x05	; 5
     9a4:	90 93 89 00 	sts	0x0089, r25
     9a8:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     9ac:	ef e6       	ldi	r30, 0x6F	; 111
     9ae:	f0 e0       	ldi	r31, 0x00	; 0
     9b0:	80 81       	ld	r24, Z
     9b2:	82 60       	ori	r24, 0x02	; 2
     9b4:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     9b6:	b1 9a       	sbi	0x16, 1	; 22
     9b8:	08 95       	ret

000009ba <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     9ba:	1f 92       	push	r1
     9bc:	0f 92       	push	r0
     9be:	0f b6       	in	r0, 0x3f	; 63
     9c0:	0f 92       	push	r0
     9c2:	11 24       	eor	r1, r1
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
	regler_ready=1;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	90 93 38 01 	sts	0x0138, r25
     9d0:	80 93 37 01 	sts	0x0137, r24
	//if(counter_timer<10)
	//counter_timer++;
	counter_goal_line++;
     9d4:	80 91 33 01 	lds	r24, 0x0133
     9d8:	90 91 34 01 	lds	r25, 0x0134
     9dc:	01 96       	adiw	r24, 0x01	; 1
	if(counter_goal_line > 50){			
     9de:	83 33       	cpi	r24, 0x33	; 51
     9e0:	91 05       	cpc	r25, r1
     9e2:	2c f4       	brge	.+10     	; 0x9ee <__vector_13+0x34>
// -- Interrupt
ISR(TIMER1_COMPA_vect){
	regler_ready=1;
	//if(counter_timer<10)
	//counter_timer++;
	counter_goal_line++;
     9e4:	90 93 34 01 	sts	0x0134, r25
     9e8:	80 93 33 01 	sts	0x0133, r24
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <__vector_13+0x40>
	if(counter_goal_line > 50){			
		counter_goal_line = 50;			// för att undvika overflow
     9ee:	82 e3       	ldi	r24, 0x32	; 50
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	90 93 34 01 	sts	0x0134, r25
     9f6:	80 93 33 01 	sts	0x0133, r24
	}
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
     9fa:	80 91 35 01 	lds	r24, 0x0135
     9fe:	90 91 36 01 	lds	r25, 0x0136
     a02:	01 96       	adiw	r24, 0x01	; 1
     a04:	90 93 36 01 	sts	0x0136, r25
     a08:	80 93 35 01 	sts	0x0135, r24
}
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     a1a:	8d b3       	in	r24, 0x1d	; 29
     a1c:	86 60       	ori	r24, 0x06	; 6
     a1e:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     a20:	e9 e6       	ldi	r30, 0x69	; 105
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	80 81       	ld	r24, Z
     a26:	88 62       	ori	r24, 0x28	; 40
     a28:	80 83       	st	Z, r24
     a2a:	08 95       	ret

00000a2c <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	8f 93       	push	r24
     a38:	9f 93       	push	r25
	if(drive_mode==1){
     a3a:	80 91 3f 01 	lds	r24, 0x013F
     a3e:	90 91 40 01 	lds	r25, 0x0140
     a42:	01 97       	sbiw	r24, 0x01	; 1
     a44:	39 f4       	brne	.+14     	; 0xa54 <__vector_2+0x28>
		drive_mode=0;
     a46:	10 92 40 01 	sts	0x0140, r1
     a4a:	10 92 3f 01 	sts	0x013F, r1
		PORTD |= (1 << PD1);
     a4e:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     a50:	58 98       	cbi	0x0b, 0	; 11
     a52:	0c c0       	rjmp	.+24     	; 0xa6c <__vector_2+0x40>
	}
	else{
		start=0;
     a54:	10 92 3e 01 	sts	0x013E, r1
     a58:	10 92 3d 01 	sts	0x013D, r1
		drive_mode=1;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	90 93 40 01 	sts	0x0140, r25
     a64:	80 93 3f 01 	sts	0x013F, r24
		PORTD |= (1 << PD0);
     a68:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     a6a:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     a6c:	e1 9a       	sbi	0x1c, 1	; 28
}
     a6e:	9f 91       	pop	r25
     a70:	8f 91       	pop	r24
     a72:	0f 90       	pop	r0
     a74:	0f be       	out	0x3f, r0	; 63
     a76:	0f 90       	pop	r0
     a78:	1f 90       	pop	r1
     a7a:	18 95       	reti

00000a7c <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     a7c:	1f 92       	push	r1
     a7e:	0f 92       	push	r0
     a80:	0f b6       	in	r0, 0x3f	; 63
     a82:	0f 92       	push	r0
     a84:	11 24       	eor	r1, r1
     a86:	8f 93       	push	r24
     a88:	9f 93       	push	r25
	if(start==0){
     a8a:	80 91 3d 01 	lds	r24, 0x013D
     a8e:	90 91 3e 01 	lds	r25, 0x013E
     a92:	89 2b       	or	r24, r25
     a94:	39 f4       	brne	.+14     	; 0xaa4 <__vector_3+0x28>
		start=1;
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	90 93 3e 01 	sts	0x013E, r25
     a9e:	80 93 3d 01 	sts	0x013D, r24
     aa2:	04 c0       	rjmp	.+8      	; 0xaac <__vector_3+0x30>
	}
	else{
		start=0;
     aa4:	10 92 3e 01 	sts	0x013E, r1
     aa8:	10 92 3d 01 	sts	0x013D, r1
	}
	EIFR |= (1<< INTF2);
     aac:	e2 9a       	sbi	0x1c, 2	; 28
}
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	0f 90       	pop	r0
     ab4:	0f be       	out	0x3f, r0	; 63
     ab6:	0f 90       	pop	r0
     ab8:	1f 90       	pop	r1
     aba:	18 95       	reti

00000abc <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     abc:	88 23       	and	r24, r24
     abe:	69 f0       	breq	.+26     	; 0xada <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     ac0:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     ac2:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     ac4:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     ac6:	e9 e6       	ldi	r30, 0x69	; 105
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	83 60       	ori	r24, 0x03	; 3
     ace:	80 83       	st	Z, r24
		TWBR = 0x10;
     ad0:	80 e1       	ldi	r24, 0x10	; 16
     ad2:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     ad6:	10 92 b9 00 	sts	0x00B9, r1
     ada:	08 95       	ret

00000adc <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     adc:	8f 92       	push	r8
     ade:	9f 92       	push	r9
     ae0:	af 92       	push	r10
     ae2:	bf 92       	push	r11
     ae4:	cf 92       	push	r12
     ae6:	df 92       	push	r13
     ae8:	ef 92       	push	r14
     aea:	ff 92       	push	r15
     aec:	0f 93       	push	r16
     aee:	1f 93       	push	r17
     af0:	cf 93       	push	r28
     af2:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     af4:	eb 01       	movw	r28, r22
     af6:	08 81       	ld	r16, Y
     af8:	02 95       	swap	r16
     afa:	0f 70       	andi	r16, 0x0F	; 15
     afc:	10 e0       	ldi	r17, 0x00	; 0
     afe:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     b00:	68 94       	set
     b02:	ee 24       	eor	r14, r14
     b04:	e3 f8       	bld	r14, 3
     b06:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     b0c:	ec eb       	ldi	r30, 0xBC	; 188
     b0e:	f0 e0       	ldi	r31, 0x00	; 0
     b10:	0f 2e       	mov	r0, r31
     b12:	f4 ea       	ldi	r31, 0xA4	; 164
     b14:	df 2e       	mov	r13, r31
     b16:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     b18:	a9 eb       	ldi	r26, 0xB9	; 185
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     b1c:	8e 7f       	andi	r24, 0xFE	; 254
     b1e:	c8 2e       	mov	r12, r24
     b20:	6b eb       	ldi	r22, 0xBB	; 187
     b22:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     b24:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     b26:	68 94       	set
     b28:	aa 24       	eor	r10, r10
     b2a:	a4 f8       	bld	r10, 4
     b2c:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     b2e:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     b30:	90 81       	ld	r25, Z
     b32:	99 23       	and	r25, r25
     b34:	ec f7       	brge	.-6      	; 0xb30 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     b36:	2c 91       	ld	r18, X
     b38:	28 7f       	andi	r18, 0xF8	; 248
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	2e 15       	cp	r18, r14
     b3e:	3f 05       	cpc	r19, r15
     b40:	69 f5       	brne	.+90     	; 0xb9c <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     b42:	eb 01       	movw	r28, r22
     b44:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     b46:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
     b48:	90 81       	ld	r25, Z
     b4a:	99 23       	and	r25, r25
     b4c:	ec f7       	brge	.-6      	; 0xb48 <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
     b4e:	9c 91       	ld	r25, X
     b50:	98 7f       	andi	r25, 0xF8	; 248
     b52:	98 31       	cpi	r25, 0x18	; 24
     b54:	29 f0       	breq	.+10     	; 0xb60 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     b56:	84 e9       	ldi	r24, 0x94	; 148
     b58:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	1f c0       	rjmp	.+62     	; 0xb9e <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
     b60:	e4 01       	movw	r28, r8
     b62:	99 91       	ld	r25, Y+
     b64:	4e 01       	movw	r8, r28
     b66:	eb 01       	movw	r28, r22
     b68:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
     b6a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
     b6c:	90 81       	ld	r25, Z
     b6e:	99 23       	and	r25, r25
     b70:	ec f7       	brge	.-6      	; 0xb6c <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
     b72:	9c 91       	ld	r25, X
     b74:	98 7f       	andi	r25, 0xF8	; 248
     b76:	98 32       	cpi	r25, 0x28	; 40
     b78:	29 f0       	breq	.+10     	; 0xb84 <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     b7a:	84 e9       	ldi	r24, 0x94	; 148
     b7c:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0d c0       	rjmp	.+26     	; 0xb9e <i2c_send+0xc2>
	}
	counter++;
     b84:	4f 5f       	subi	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     b88:	ea 2c       	mov	r14, r10
     b8a:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
     b8c:	04 17       	cp	r16, r20
     b8e:	15 07       	cpc	r17, r21
     b90:	74 f6       	brge	.-100    	; 0xb2e <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     b92:	84 e9       	ldi	r24, 0x94	; 148
     b94:	80 93 bc 00 	sts	0x00BC, r24
	return true;
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	01 c0       	rjmp	.+2      	; 0xb9e <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
     b9c:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	1f 91       	pop	r17
     ba4:	0f 91       	pop	r16
     ba6:	ff 90       	pop	r15
     ba8:	ef 90       	pop	r14
     baa:	df 90       	pop	r13
     bac:	cf 90       	pop	r12
     bae:	bf 90       	pop	r11
     bb0:	af 90       	pop	r10
     bb2:	9f 90       	pop	r9
     bb4:	8f 90       	pop	r8
     bb6:	08 95       	ret

00000bb8 <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
     bb8:	ec eb       	ldi	r30, 0xBC	; 188
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	90 81       	ld	r25, Z
     bbe:	94 6a       	ori	r25, 0xA4	; 164
     bc0:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     bc2:	90 81       	ld	r25, Z
     bc4:	99 23       	and	r25, r25
     bc6:	ec f7       	brge	.-6      	; 0xbc2 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
     bc8:	90 91 b9 00 	lds	r25, 0x00B9
     bcc:	98 7f       	andi	r25, 0xF8	; 248
     bce:	98 30       	cpi	r25, 0x08	; 8
     bd0:	29 f0       	breq	.+10     	; 0xbdc <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     bd2:	84 e9       	ldi	r24, 0x94	; 148
     bd4:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     bd8:	80 e0       	ldi	r24, 0x00	; 0
     bda:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
     bdc:	81 60       	ori	r24, 0x01	; 1
     bde:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     be2:	84 e8       	ldi	r24, 0x84	; 132
     be4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
     be8:	ec eb       	ldi	r30, 0xBC	; 188
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	88 23       	and	r24, r24
     bf0:	ec f7       	brge	.-6      	; 0xbec <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
     bf2:	80 91 b9 00 	lds	r24, 0x00B9
     bf6:	88 7f       	andi	r24, 0xF8	; 248
     bf8:	80 34       	cpi	r24, 0x40	; 64
     bfa:	29 f0       	breq	.+10     	; 0xc06 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     bfc:	84 e9       	ldi	r24, 0x94	; 148
     bfe:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
     c06:	ec eb       	ldi	r30, 0xBC	; 188
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	84 68       	ori	r24, 0x84	; 132
     c0e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
     c10:	80 81       	ld	r24, Z
     c12:	88 23       	and	r24, r24
     c14:	ec f7       	brge	.-6      	; 0xc10 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR; //ta emot data 
     c16:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     c1a:	94 e9       	ldi	r25, 0x94	; 148
     c1c:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
     c20:	08 95       	ret

00000c22 <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
     c22:	20 91 0e 01 	lds	r18, 0x010E
     c26:	30 91 0f 01 	lds	r19, 0x010F
     c2a:	21 15       	cp	r18, r1
     c2c:	31 05       	cpc	r19, r1
     c2e:	89 f4       	brne	.+34     	; 0xc52 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
     c30:	28 2f       	mov	r18, r24
     c32:	22 95       	swap	r18
     c34:	2f 70       	andi	r18, 0x0F	; 15
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	30 93 0d 01 	sts	0x010D, r19
     c3c:	20 93 0c 01 	sts	0x010C, r18
		i2c_data[counter] = data;
     c40:	80 93 14 09 	sts	0x0914, r24
		counter++;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	90 93 0f 01 	sts	0x010F, r25
     c4c:	80 93 0e 01 	sts	0x010E, r24
     c50:	18 c0       	rjmp	.+48     	; 0xc82 <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
     c52:	40 91 0c 01 	lds	r20, 0x010C
     c56:	50 91 0d 01 	lds	r21, 0x010D
     c5a:	4f 5f       	subi	r20, 0xFF	; 255
     c5c:	5f 4f       	sbci	r21, 0xFF	; 255
     c5e:	24 17       	cp	r18, r20
     c60:	35 07       	cpc	r19, r21
     c62:	5c f4       	brge	.+22     	; 0xc7a <i2c_store_data+0x58>
		i2c_data[counter] = data;
     c64:	f9 01       	movw	r30, r18
     c66:	ec 5e       	subi	r30, 0xEC	; 236
     c68:	f6 4f       	sbci	r31, 0xF6	; 246
     c6a:	80 83       	st	Z, r24
		counter++;
     c6c:	2f 5f       	subi	r18, 0xFF	; 255
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	30 93 0f 01 	sts	0x010F, r19
     c74:	20 93 0e 01 	sts	0x010E, r18
     c78:	04 c0       	rjmp	.+8      	; 0xc82 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
     c7a:	f9 01       	movw	r30, r18
     c7c:	ec 5e       	subi	r30, 0xEC	; 236
     c7e:	f6 4f       	sbci	r31, 0xF6	; 246
     c80:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
     c82:	80 91 0c 01 	lds	r24, 0x010C
     c86:	90 91 0d 01 	lds	r25, 0x010D
     c8a:	01 96       	adiw	r24, 0x01	; 1
     c8c:	20 91 0e 01 	lds	r18, 0x010E
     c90:	30 91 0f 01 	lds	r19, 0x010F
     c94:	28 17       	cp	r18, r24
     c96:	39 07       	cpc	r19, r25
     c98:	44 f0       	brlt	.+16     	; 0xcaa <i2c_store_data+0x88>
		i2c_newdata = true;
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 16 01 	sts	0x0116, r24
		counter = 0;
     ca0:	10 92 0f 01 	sts	0x010F, r1
     ca4:	10 92 0e 01 	sts	0x010E, r1
		EIMSK &= ~(1<<INT0);
     ca8:	e8 98       	cbi	0x1d, 0	; 29
     caa:	08 95       	ret

00000cac <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	0b b6       	in	r0, 0x3b	; 59
     cb8:	0f 92       	push	r0
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	ef 93       	push	r30
     cd0:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cd2:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
     cd4:	36 9b       	sbis	0x06, 6	; 6
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
     cd8:	82 e0       	ldi	r24, 0x02	; 2
     cda:	6e df       	rcall	.-292    	; 0xbb8 <i2c_recive>
     cdc:	a2 df       	rcall	.-188    	; 0xc22 <i2c_store_data>
     cde:	05 c0       	rjmp	.+10     	; 0xcea <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
     ce0:	37 9b       	sbis	0x06, 7	; 6
     ce2:	03 c0       	rjmp	.+6      	; 0xcea <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
     ce4:	86 e0       	ldi	r24, 0x06	; 6
     ce6:	68 df       	rcall	.-304    	; 0xbb8 <i2c_recive>
     ce8:	9c df       	rcall	.-200    	; 0xc22 <i2c_store_data>
	}
}
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0b be       	out	0x3b, r0	; 59
     d06:	0f 90       	pop	r0
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	0f 90       	pop	r0
     d0c:	1f 90       	pop	r1
     d0e:	18 95       	reti

00000d10 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
     d10:	80 91 16 01 	lds	r24, 0x0116
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <i2c_handel_data+0xa>
     d18:	e0 c0       	rjmp	.+448    	; 0xeda <i2c_handel_data+0x1ca>
	{
		i2c_newdata=false;
     d1a:	10 92 16 01 	sts	0x0116, r1
		if(!((i2c_data[0]>>3)&0x01)){
     d1e:	80 91 14 09 	lds	r24, 0x0914
     d22:	83 fd       	sbrc	r24, 3
     d24:	07 c0       	rjmp	.+14     	; 0xd34 <i2c_handel_data+0x24>
     d26:	84 e6       	ldi	r24, 0x64	; 100
     d28:	8a 95       	dec	r24
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
     d2c:	64 e1       	ldi	r22, 0x14	; 20
     d2e:	79 e0       	ldi	r23, 0x09	; 9
     d30:	82 e0       	ldi	r24, 0x02	; 2
     d32:	d4 de       	rcall	.-600    	; 0xadc <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
     d34:	80 91 14 09 	lds	r24, 0x0914
     d38:	e8 2f       	mov	r30, r24
     d3a:	ef 70       	andi	r30, 0x0F	; 15
     d3c:	8e 2f       	mov	r24, r30
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	fc 01       	movw	r30, r24
     d42:	ea 5b       	subi	r30, 0xBA	; 186
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	10 c3       	rjmp	.+1568   	; 0x1368 <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
     d48:	80 91 15 09 	lds	r24, 0x0915
     d4c:	80 93 2d 09 	sts	0x092D, r24
				break;
     d50:	c3 c0       	rjmp	.+390    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x01 ://avståndssensorer
				distans_right=i2c_data[3];
     d52:	e4 e1       	ldi	r30, 0x14	; 20
     d54:	f9 e0       	ldi	r31, 0x09	; 9
     d56:	83 81       	ldd	r24, Z+3	; 0x03
     d58:	80 93 31 09 	sts	0x0931, r24
				distans_fram = i2c_data[2];;
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	80 93 29 09 	sts	0x0929, r24
				distans_left=i2c_data[1];
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	80 93 2c 09 	sts	0x092C, r24
				break;
     d68:	b7 c0       	rjmp	.+366    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x02 :// refelxsensor data
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
     d6a:	e4 e1       	ldi	r30, 0x14	; 20
     d6c:	f9 e0       	ldi	r31, 0x09	; 9
     d6e:	82 81       	ldd	r24, Z+2	; 0x02
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	98 2f       	mov	r25, r24
     d74:	88 27       	eor	r24, r24
     d76:	21 81       	ldd	r18, Z+1	; 0x01
     d78:	82 0f       	add	r24, r18
     d7a:	91 1d       	adc	r25, r1
     d7c:	90 93 24 09 	sts	0x0924, r25
     d80:	80 93 23 09 	sts	0x0923, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
     d84:	83 81       	ldd	r24, Z+3	; 0x03
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	90 93 03 11 	sts	0x1103, r25
     d8c:	80 93 02 11 	sts	0x1102, r24
				break;
     d90:	a3 c0       	rjmp	.+326    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x03 :
				RGB_data=1;//"röd";"
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	80 93 30 09 	sts	0x0930, r24
				break;
     d98:	9f c0       	rjmp	.+318    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x04 :
				RGB_data=2;//"grön";
     d9a:	82 e0       	ldi	r24, 0x02	; 2
     d9c:	80 93 30 09 	sts	0x0930, r24
				break;		
     da0:	9b c0       	rjmp	.+310    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x05 :
				RGB_data=3;//"blå";
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	80 93 30 09 	sts	0x0930, r24
				break;
     da8:	97 c0       	rjmp	.+302    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x06 :
			
				break;
			case 0x07 :// gyro data
				gyro_90=true;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 43 01 	sts	0x0143, r24
				break;
     db0:	93 c0       	rjmp	.+294    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x08 : // manuel stå still
				manual_function=0;
     db2:	10 92 2e 01 	sts	0x012E, r1
     db6:	10 92 2d 01 	sts	0x012D, r1
				break;
     dba:	8e c0       	rjmp	.+284    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	90 93 2e 01 	sts	0x012E, r25
     dc4:	80 93 2d 01 	sts	0x012D, r24
				break;
     dc8:	87 c0       	rjmp	.+270    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
     dca:	82 e0       	ldi	r24, 0x02	; 2
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	90 93 2e 01 	sts	0x012E, r25
     dd2:	80 93 2d 01 	sts	0x012D, r24
				break;
     dd6:	80 c0       	rjmp	.+256    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x0b ://manuel vänster fram
				manual_function=4;
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	90 93 2e 01 	sts	0x012E, r25
     de0:	80 93 2d 01 	sts	0x012D, r24
				break;
     de4:	79 c0       	rjmp	.+242    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x0c ://manuel höger fram
				manual_function=3;
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 2e 01 	sts	0x012E, r25
     dee:	80 93 2d 01 	sts	0x012D, r24
				break;
     df2:	72 c0       	rjmp	.+228    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
     df4:	86 e0       	ldi	r24, 0x06	; 6
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	90 93 2e 01 	sts	0x012E, r25
     dfc:	80 93 2d 01 	sts	0x012D, r24
				break;
     e00:	6b c0       	rjmp	.+214    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
     e02:	85 e0       	ldi	r24, 0x05	; 5
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	90 93 2e 01 	sts	0x012E, r25
     e0a:	80 93 2d 01 	sts	0x012D, r24
				break;
     e0e:	64 c0       	rjmp	.+200    	; 0xed8 <i2c_handel_data+0x1c8>
			case 0x0f :							// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
     e10:	80 91 15 09 	lds	r24, 0x0915
     e14:	80 3f       	cpi	r24, 0xF0	; 240
     e16:	91 f4       	brne	.+36     	; 0xe3c <i2c_handel_data+0x12c>
					if(start==1){
     e18:	80 91 3d 01 	lds	r24, 0x013D
     e1c:	90 91 3e 01 	lds	r25, 0x013E
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	29 f4       	brne	.+10     	; 0xe2e <i2c_handel_data+0x11e>
						start=0;
     e24:	10 92 3e 01 	sts	0x013E, r1
     e28:	10 92 3d 01 	sts	0x013D, r1
     e2c:	55 c0       	rjmp	.+170    	; 0xed8 <i2c_handel_data+0x1c8>
					}
					else{
						start=1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 3e 01 	sts	0x013E, r25
     e36:	80 93 3d 01 	sts	0x013D, r24
     e3a:	4e c0       	rjmp	.+156    	; 0xed8 <i2c_handel_data+0x1c8>
					}
				}
				else if(i2c_data[1]==0x0f){
     e3c:	8f 30       	cpi	r24, 0x0F	; 15
     e3e:	d1 f4       	brne	.+52     	; 0xe74 <i2c_handel_data+0x164>
					if(drive_mode==1){
     e40:	80 91 3f 01 	lds	r24, 0x013F
     e44:	90 91 40 01 	lds	r25, 0x0140
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	49 f4       	brne	.+18     	; 0xe5e <i2c_handel_data+0x14e>
						drive_mode=0;
     e4c:	10 92 40 01 	sts	0x0140, r1
     e50:	10 92 3f 01 	sts	0x013F, r1
						start=0;
     e54:	10 92 3e 01 	sts	0x013E, r1
     e58:	10 92 3d 01 	sts	0x013D, r1
     e5c:	3d c0       	rjmp	.+122    	; 0xed8 <i2c_handel_data+0x1c8>
					}
					else{
						drive_mode=1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	90 93 40 01 	sts	0x0140, r25
     e66:	80 93 3f 01 	sts	0x013F, r24
						start=0;
     e6a:	10 92 3e 01 	sts	0x013E, r1
     e6e:	10 92 3d 01 	sts	0x013D, r1
     e72:	32 c0       	rjmp	.+100    	; 0xed8 <i2c_handel_data+0x1c8>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
     e74:	81 11       	cpse	r24, r1
     e76:	0f c0       	rjmp	.+30     	; 0xe96 <i2c_handel_data+0x186>
					d_constant = i2c_data[2];
     e78:	e4 e1       	ldi	r30, 0x14	; 20
     e7a:	f9 e0       	ldi	r31, 0x09	; 9
     e7c:	82 81       	ldd	r24, Z+2	; 0x02
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	90 93 01 01 	sts	0x0101, r25
     e84:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3];
     e88:	83 81       	ldd	r24, Z+3	; 0x03
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	90 93 03 01 	sts	0x0103, r25
     e90:	80 93 02 01 	sts	0x0102, r24
     e94:	21 c0       	rjmp	.+66     	; 0xed8 <i2c_handel_data+0x1c8>
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
     e96:	81 30       	cpi	r24, 0x01	; 1
     e98:	79 f4       	brne	.+30     	; 0xeb8 <i2c_handel_data+0x1a8>
					d_constant_lab = i2c_data[2];
     e9a:	e4 e1       	ldi	r30, 0x14	; 20
     e9c:	f9 e0       	ldi	r31, 0x09	; 9
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	90 93 09 01 	sts	0x0109, r25
     ea6:	80 93 08 01 	sts	0x0108, r24
					p_constant_lab = i2c_data[3];
     eaa:	83 81       	ldd	r24, Z+3	; 0x03
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	90 93 0b 01 	sts	0x010B, r25
     eb2:	80 93 0a 01 	sts	0x010A, r24
     eb6:	10 c0       	rjmp	.+32     	; 0xed8 <i2c_handel_data+0x1c8>
				}
				else if(i2c_data[1]==0x02){
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	71 f4       	brne	.+28     	; 0xed8 <i2c_handel_data+0x1c8>
					left = i2c_data[2];
     ebc:	e4 e1       	ldi	r30, 0x14	; 20
     ebe:	f9 e0       	ldi	r31, 0x09	; 9
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 3c 01 	sts	0x013C, r25
     ec8:	80 93 3b 01 	sts	0x013B, r24
					right = i2c_data[3];
     ecc:	83 81       	ldd	r24, Z+3	; 0x03
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	90 93 3a 01 	sts	0x013A, r25
     ed4:	80 93 39 01 	sts	0x0139, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
     ed8:	e8 9a       	sbi	0x1d, 0	; 29
     eda:	08 95       	ret

00000edc <main>:



int main(void)
{
	interrupt_init();
     edc:	9e dd       	rcall	.-1220   	; 0xa1a <interrupt_init>
	board_init();
     ede:	05 d9       	rcall	.-3574   	; 0xea <board_init>
	initengine();
     ee0:	4b dd       	rcall	.-1386   	; 0x978 <initengine>
	timerinit();
     ee2:	57 dd       	rcall	.-1362   	; 0x992 <timerinit>
	i2c_setup(1);
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	ea dd       	rcall	.-1068   	; 0xabc <i2c_setup>
	sei();
     ee8:	78 94       	sei
	//***********Set motors speed value here *****************
	left=130;				// kanske räcker med en variable för båda om båda kör exakt lika fort
     eea:	82 e8       	ldi	r24, 0x82	; 130
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	90 93 3c 01 	sts	0x013C, r25
     ef2:	80 93 3b 01 	sts	0x013B, r24
	right=120;
     ef6:	88 e7       	ldi	r24, 0x78	; 120
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	90 93 3a 01 	sts	0x013A, r25
     efe:	80 93 39 01 	sts	0x0139, r24
	//********************************************************
	motor_left=left;
     f02:	82 e8       	ldi	r24, 0x82	; 130
     f04:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
     f06:	80 91 39 01 	lds	r24, 0x0139
     f0a:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
		RGB_data=3;	
     f0c:	c3 e0       	ldi	r28, 0x03	; 3
		if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			if(regler_ready == 1 && start == 1){
				regulator();
				regler_ready = 1;	
     f0e:	01 e0       	ldi	r16, 0x01	; 1
     f10:	10 e0       	ldi	r17, 0x00	; 0
	right=120;
	//********************************************************
	motor_left=left;
	motor_right=right;
	while(1){
		i2c_handel_data();  //test av fregulito
     f12:	fe de       	rcall	.-516    	; 0xd10 <i2c_handel_data>
		RGB_data=3;	
     f14:	c0 93 30 09 	sts	0x0930, r28
		if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
     f18:	80 91 3f 01 	lds	r24, 0x013F
     f1c:	90 91 40 01 	lds	r25, 0x0140
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	91 05       	cpc	r25, r1
     f24:	d9 f4       	brne	.+54     	; 0xf5c <main+0x80>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			if(regler_ready == 1 && start == 1){
     f26:	80 91 37 01 	lds	r24, 0x0137
     f2a:	90 91 38 01 	lds	r25, 0x0138
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	61 f4       	brne	.+24     	; 0xf4a <main+0x6e>
     f32:	80 91 3d 01 	lds	r24, 0x013D
     f36:	90 91 3e 01 	lds	r25, 0x013E
     f3a:	01 97       	sbiw	r24, 0x01	; 1
     f3c:	31 f4       	brne	.+12     	; 0xf4a <main+0x6e>
				regulator();
     f3e:	12 dd       	rcall	.-1500   	; 0x964 <regulator>
				regler_ready = 1;	
     f40:	10 93 38 01 	sts	0x0138, r17
     f44:	00 93 37 01 	sts	0x0137, r16
     f48:	e4 cf       	rjmp	.-56     	; 0xf12 <main+0x36>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
     f4a:	80 91 3d 01 	lds	r24, 0x013D
     f4e:	90 91 3e 01 	lds	r25, 0x013E
     f52:	89 2b       	or	r24, r25
     f54:	f1 f6       	brne	.-68     	; 0xf12 <main+0x36>
				motor_left=0;
     f56:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
     f58:	18 bc       	out	0x28, r1	; 40
     f5a:	db cf       	rjmp	.-74     	; 0xf12 <main+0x36>
				}
			}
		else if(drive_mode==0){										// Drivemode is manual
     f5c:	89 2b       	or	r24, r25
     f5e:	c9 f6       	brne	.-78     	; 0xf12 <main+0x36>
			manual_drive();
     f60:	2a da       	rcall	.-2988   	; 0x3b6 <manual_drive>
     f62:	d7 cf       	rjmp	.-82     	; 0xf12 <main+0x36>

00000f64 <__subsf3>:
     f64:	50 58       	subi	r21, 0x80	; 128

00000f66 <__addsf3>:
     f66:	bb 27       	eor	r27, r27
     f68:	aa 27       	eor	r26, r26
     f6a:	0e d0       	rcall	.+28     	; 0xf88 <__addsf3x>
     f6c:	4d c1       	rjmp	.+666    	; 0x1208 <__fp_round>
     f6e:	3e d1       	rcall	.+636    	; 0x11ec <__fp_pscA>
     f70:	30 f0       	brcs	.+12     	; 0xf7e <__addsf3+0x18>
     f72:	43 d1       	rcall	.+646    	; 0x11fa <__fp_pscB>
     f74:	20 f0       	brcs	.+8      	; 0xf7e <__addsf3+0x18>
     f76:	31 f4       	brne	.+12     	; 0xf84 <__addsf3+0x1e>
     f78:	9f 3f       	cpi	r25, 0xFF	; 255
     f7a:	11 f4       	brne	.+4      	; 0xf80 <__addsf3+0x1a>
     f7c:	1e f4       	brtc	.+6      	; 0xf84 <__addsf3+0x1e>
     f7e:	33 c1       	rjmp	.+614    	; 0x11e6 <__fp_nan>
     f80:	0e f4       	brtc	.+2      	; 0xf84 <__addsf3+0x1e>
     f82:	e0 95       	com	r30
     f84:	e7 fb       	bst	r30, 7
     f86:	29 c1       	rjmp	.+594    	; 0x11da <__fp_inf>

00000f88 <__addsf3x>:
     f88:	e9 2f       	mov	r30, r25
     f8a:	4f d1       	rcall	.+670    	; 0x122a <__fp_split3>
     f8c:	80 f3       	brcs	.-32     	; 0xf6e <__addsf3+0x8>
     f8e:	ba 17       	cp	r27, r26
     f90:	62 07       	cpc	r22, r18
     f92:	73 07       	cpc	r23, r19
     f94:	84 07       	cpc	r24, r20
     f96:	95 07       	cpc	r25, r21
     f98:	18 f0       	brcs	.+6      	; 0xfa0 <__addsf3x+0x18>
     f9a:	71 f4       	brne	.+28     	; 0xfb8 <__addsf3x+0x30>
     f9c:	9e f5       	brtc	.+102    	; 0x1004 <__addsf3x+0x7c>
     f9e:	67 c1       	rjmp	.+718    	; 0x126e <__fp_zero>
     fa0:	0e f4       	brtc	.+2      	; 0xfa4 <__addsf3x+0x1c>
     fa2:	e0 95       	com	r30
     fa4:	0b 2e       	mov	r0, r27
     fa6:	ba 2f       	mov	r27, r26
     fa8:	a0 2d       	mov	r26, r0
     faa:	0b 01       	movw	r0, r22
     fac:	b9 01       	movw	r22, r18
     fae:	90 01       	movw	r18, r0
     fb0:	0c 01       	movw	r0, r24
     fb2:	ca 01       	movw	r24, r20
     fb4:	a0 01       	movw	r20, r0
     fb6:	11 24       	eor	r1, r1
     fb8:	ff 27       	eor	r31, r31
     fba:	59 1b       	sub	r21, r25
     fbc:	99 f0       	breq	.+38     	; 0xfe4 <__addsf3x+0x5c>
     fbe:	59 3f       	cpi	r21, 0xF9	; 249
     fc0:	50 f4       	brcc	.+20     	; 0xfd6 <__addsf3x+0x4e>
     fc2:	50 3e       	cpi	r21, 0xE0	; 224
     fc4:	68 f1       	brcs	.+90     	; 0x1020 <__addsf3x+0x98>
     fc6:	1a 16       	cp	r1, r26
     fc8:	f0 40       	sbci	r31, 0x00	; 0
     fca:	a2 2f       	mov	r26, r18
     fcc:	23 2f       	mov	r18, r19
     fce:	34 2f       	mov	r19, r20
     fd0:	44 27       	eor	r20, r20
     fd2:	58 5f       	subi	r21, 0xF8	; 248
     fd4:	f3 cf       	rjmp	.-26     	; 0xfbc <__addsf3x+0x34>
     fd6:	46 95       	lsr	r20
     fd8:	37 95       	ror	r19
     fda:	27 95       	ror	r18
     fdc:	a7 95       	ror	r26
     fde:	f0 40       	sbci	r31, 0x00	; 0
     fe0:	53 95       	inc	r21
     fe2:	c9 f7       	brne	.-14     	; 0xfd6 <__addsf3x+0x4e>
     fe4:	7e f4       	brtc	.+30     	; 0x1004 <__addsf3x+0x7c>
     fe6:	1f 16       	cp	r1, r31
     fe8:	ba 0b       	sbc	r27, r26
     fea:	62 0b       	sbc	r22, r18
     fec:	73 0b       	sbc	r23, r19
     fee:	84 0b       	sbc	r24, r20
     ff0:	ba f0       	brmi	.+46     	; 0x1020 <__addsf3x+0x98>
     ff2:	91 50       	subi	r25, 0x01	; 1
     ff4:	a1 f0       	breq	.+40     	; 0x101e <__addsf3x+0x96>
     ff6:	ff 0f       	add	r31, r31
     ff8:	bb 1f       	adc	r27, r27
     ffa:	66 1f       	adc	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	c2 f7       	brpl	.-16     	; 0xff2 <__addsf3x+0x6a>
    1002:	0e c0       	rjmp	.+28     	; 0x1020 <__addsf3x+0x98>
    1004:	ba 0f       	add	r27, r26
    1006:	62 1f       	adc	r22, r18
    1008:	73 1f       	adc	r23, r19
    100a:	84 1f       	adc	r24, r20
    100c:	48 f4       	brcc	.+18     	; 0x1020 <__addsf3x+0x98>
    100e:	87 95       	ror	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	b7 95       	ror	r27
    1016:	f7 95       	ror	r31
    1018:	9e 3f       	cpi	r25, 0xFE	; 254
    101a:	08 f0       	brcs	.+2      	; 0x101e <__addsf3x+0x96>
    101c:	b3 cf       	rjmp	.-154    	; 0xf84 <__addsf3+0x1e>
    101e:	93 95       	inc	r25
    1020:	88 0f       	add	r24, r24
    1022:	08 f0       	brcs	.+2      	; 0x1026 <__addsf3x+0x9e>
    1024:	99 27       	eor	r25, r25
    1026:	ee 0f       	add	r30, r30
    1028:	97 95       	ror	r25
    102a:	87 95       	ror	r24
    102c:	08 95       	ret

0000102e <__divsf3>:
    102e:	0c d0       	rcall	.+24     	; 0x1048 <__divsf3x>
    1030:	eb c0       	rjmp	.+470    	; 0x1208 <__fp_round>
    1032:	e3 d0       	rcall	.+454    	; 0x11fa <__fp_pscB>
    1034:	40 f0       	brcs	.+16     	; 0x1046 <__divsf3+0x18>
    1036:	da d0       	rcall	.+436    	; 0x11ec <__fp_pscA>
    1038:	30 f0       	brcs	.+12     	; 0x1046 <__divsf3+0x18>
    103a:	21 f4       	brne	.+8      	; 0x1044 <__divsf3+0x16>
    103c:	5f 3f       	cpi	r21, 0xFF	; 255
    103e:	19 f0       	breq	.+6      	; 0x1046 <__divsf3+0x18>
    1040:	cc c0       	rjmp	.+408    	; 0x11da <__fp_inf>
    1042:	51 11       	cpse	r21, r1
    1044:	15 c1       	rjmp	.+554    	; 0x1270 <__fp_szero>
    1046:	cf c0       	rjmp	.+414    	; 0x11e6 <__fp_nan>

00001048 <__divsf3x>:
    1048:	f0 d0       	rcall	.+480    	; 0x122a <__fp_split3>
    104a:	98 f3       	brcs	.-26     	; 0x1032 <__divsf3+0x4>

0000104c <__divsf3_pse>:
    104c:	99 23       	and	r25, r25
    104e:	c9 f3       	breq	.-14     	; 0x1042 <__divsf3+0x14>
    1050:	55 23       	and	r21, r21
    1052:	b1 f3       	breq	.-20     	; 0x1040 <__divsf3+0x12>
    1054:	95 1b       	sub	r25, r21
    1056:	55 0b       	sbc	r21, r21
    1058:	bb 27       	eor	r27, r27
    105a:	aa 27       	eor	r26, r26
    105c:	62 17       	cp	r22, r18
    105e:	73 07       	cpc	r23, r19
    1060:	84 07       	cpc	r24, r20
    1062:	38 f0       	brcs	.+14     	; 0x1072 <__divsf3_pse+0x26>
    1064:	9f 5f       	subi	r25, 0xFF	; 255
    1066:	5f 4f       	sbci	r21, 0xFF	; 255
    1068:	22 0f       	add	r18, r18
    106a:	33 1f       	adc	r19, r19
    106c:	44 1f       	adc	r20, r20
    106e:	aa 1f       	adc	r26, r26
    1070:	a9 f3       	breq	.-22     	; 0x105c <__divsf3_pse+0x10>
    1072:	33 d0       	rcall	.+102    	; 0x10da <__divsf3_pse+0x8e>
    1074:	0e 2e       	mov	r0, r30
    1076:	3a f0       	brmi	.+14     	; 0x1086 <__divsf3_pse+0x3a>
    1078:	e0 e8       	ldi	r30, 0x80	; 128
    107a:	30 d0       	rcall	.+96     	; 0x10dc <__divsf3_pse+0x90>
    107c:	91 50       	subi	r25, 0x01	; 1
    107e:	50 40       	sbci	r21, 0x00	; 0
    1080:	e6 95       	lsr	r30
    1082:	00 1c       	adc	r0, r0
    1084:	ca f7       	brpl	.-14     	; 0x1078 <__divsf3_pse+0x2c>
    1086:	29 d0       	rcall	.+82     	; 0x10da <__divsf3_pse+0x8e>
    1088:	fe 2f       	mov	r31, r30
    108a:	27 d0       	rcall	.+78     	; 0x10da <__divsf3_pse+0x8e>
    108c:	66 0f       	add	r22, r22
    108e:	77 1f       	adc	r23, r23
    1090:	88 1f       	adc	r24, r24
    1092:	bb 1f       	adc	r27, r27
    1094:	26 17       	cp	r18, r22
    1096:	37 07       	cpc	r19, r23
    1098:	48 07       	cpc	r20, r24
    109a:	ab 07       	cpc	r26, r27
    109c:	b0 e8       	ldi	r27, 0x80	; 128
    109e:	09 f0       	breq	.+2      	; 0x10a2 <__divsf3_pse+0x56>
    10a0:	bb 0b       	sbc	r27, r27
    10a2:	80 2d       	mov	r24, r0
    10a4:	bf 01       	movw	r22, r30
    10a6:	ff 27       	eor	r31, r31
    10a8:	93 58       	subi	r25, 0x83	; 131
    10aa:	5f 4f       	sbci	r21, 0xFF	; 255
    10ac:	2a f0       	brmi	.+10     	; 0x10b8 <__divsf3_pse+0x6c>
    10ae:	9e 3f       	cpi	r25, 0xFE	; 254
    10b0:	51 05       	cpc	r21, r1
    10b2:	68 f0       	brcs	.+26     	; 0x10ce <__divsf3_pse+0x82>
    10b4:	92 c0       	rjmp	.+292    	; 0x11da <__fp_inf>
    10b6:	dc c0       	rjmp	.+440    	; 0x1270 <__fp_szero>
    10b8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ba:	ec f3       	brlt	.-6      	; 0x10b6 <__divsf3_pse+0x6a>
    10bc:	98 3e       	cpi	r25, 0xE8	; 232
    10be:	dc f3       	brlt	.-10     	; 0x10b6 <__divsf3_pse+0x6a>
    10c0:	86 95       	lsr	r24
    10c2:	77 95       	ror	r23
    10c4:	67 95       	ror	r22
    10c6:	b7 95       	ror	r27
    10c8:	f7 95       	ror	r31
    10ca:	9f 5f       	subi	r25, 0xFF	; 255
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <__divsf3_pse+0x74>
    10ce:	88 0f       	add	r24, r24
    10d0:	91 1d       	adc	r25, r1
    10d2:	96 95       	lsr	r25
    10d4:	87 95       	ror	r24
    10d6:	97 f9       	bld	r25, 7
    10d8:	08 95       	ret
    10da:	e1 e0       	ldi	r30, 0x01	; 1
    10dc:	66 0f       	add	r22, r22
    10de:	77 1f       	adc	r23, r23
    10e0:	88 1f       	adc	r24, r24
    10e2:	bb 1f       	adc	r27, r27
    10e4:	62 17       	cp	r22, r18
    10e6:	73 07       	cpc	r23, r19
    10e8:	84 07       	cpc	r24, r20
    10ea:	ba 07       	cpc	r27, r26
    10ec:	20 f0       	brcs	.+8      	; 0x10f6 <__divsf3_pse+0xaa>
    10ee:	62 1b       	sub	r22, r18
    10f0:	73 0b       	sbc	r23, r19
    10f2:	84 0b       	sbc	r24, r20
    10f4:	ba 0b       	sbc	r27, r26
    10f6:	ee 1f       	adc	r30, r30
    10f8:	88 f7       	brcc	.-30     	; 0x10dc <__divsf3_pse+0x90>
    10fa:	e0 95       	com	r30
    10fc:	08 95       	ret

000010fe <__fixsfsi>:
    10fe:	04 d0       	rcall	.+8      	; 0x1108 <__fixunssfsi>
    1100:	68 94       	set
    1102:	b1 11       	cpse	r27, r1
    1104:	b5 c0       	rjmp	.+362    	; 0x1270 <__fp_szero>
    1106:	08 95       	ret

00001108 <__fixunssfsi>:
    1108:	98 d0       	rcall	.+304    	; 0x123a <__fp_splitA>
    110a:	88 f0       	brcs	.+34     	; 0x112e <__fixunssfsi+0x26>
    110c:	9f 57       	subi	r25, 0x7F	; 127
    110e:	90 f0       	brcs	.+36     	; 0x1134 <__fixunssfsi+0x2c>
    1110:	b9 2f       	mov	r27, r25
    1112:	99 27       	eor	r25, r25
    1114:	b7 51       	subi	r27, 0x17	; 23
    1116:	a0 f0       	brcs	.+40     	; 0x1140 <__fixunssfsi+0x38>
    1118:	d1 f0       	breq	.+52     	; 0x114e <__fixunssfsi+0x46>
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	1a f0       	brmi	.+6      	; 0x112a <__fixunssfsi+0x22>
    1124:	ba 95       	dec	r27
    1126:	c9 f7       	brne	.-14     	; 0x111a <__fixunssfsi+0x12>
    1128:	12 c0       	rjmp	.+36     	; 0x114e <__fixunssfsi+0x46>
    112a:	b1 30       	cpi	r27, 0x01	; 1
    112c:	81 f0       	breq	.+32     	; 0x114e <__fixunssfsi+0x46>
    112e:	9f d0       	rcall	.+318    	; 0x126e <__fp_zero>
    1130:	b1 e0       	ldi	r27, 0x01	; 1
    1132:	08 95       	ret
    1134:	9c c0       	rjmp	.+312    	; 0x126e <__fp_zero>
    1136:	67 2f       	mov	r22, r23
    1138:	78 2f       	mov	r23, r24
    113a:	88 27       	eor	r24, r24
    113c:	b8 5f       	subi	r27, 0xF8	; 248
    113e:	39 f0       	breq	.+14     	; 0x114e <__fixunssfsi+0x46>
    1140:	b9 3f       	cpi	r27, 0xF9	; 249
    1142:	cc f3       	brlt	.-14     	; 0x1136 <__fixunssfsi+0x2e>
    1144:	86 95       	lsr	r24
    1146:	77 95       	ror	r23
    1148:	67 95       	ror	r22
    114a:	b3 95       	inc	r27
    114c:	d9 f7       	brne	.-10     	; 0x1144 <__fixunssfsi+0x3c>
    114e:	3e f4       	brtc	.+14     	; 0x115e <__fixunssfsi+0x56>
    1150:	90 95       	com	r25
    1152:	80 95       	com	r24
    1154:	70 95       	com	r23
    1156:	61 95       	neg	r22
    1158:	7f 4f       	sbci	r23, 0xFF	; 255
    115a:	8f 4f       	sbci	r24, 0xFF	; 255
    115c:	9f 4f       	sbci	r25, 0xFF	; 255
    115e:	08 95       	ret

00001160 <__floatunsisf>:
    1160:	e8 94       	clt
    1162:	09 c0       	rjmp	.+18     	; 0x1176 <__floatsisf+0x12>

00001164 <__floatsisf>:
    1164:	97 fb       	bst	r25, 7
    1166:	3e f4       	brtc	.+14     	; 0x1176 <__floatsisf+0x12>
    1168:	90 95       	com	r25
    116a:	80 95       	com	r24
    116c:	70 95       	com	r23
    116e:	61 95       	neg	r22
    1170:	7f 4f       	sbci	r23, 0xFF	; 255
    1172:	8f 4f       	sbci	r24, 0xFF	; 255
    1174:	9f 4f       	sbci	r25, 0xFF	; 255
    1176:	99 23       	and	r25, r25
    1178:	a9 f0       	breq	.+42     	; 0x11a4 <__floatsisf+0x40>
    117a:	f9 2f       	mov	r31, r25
    117c:	96 e9       	ldi	r25, 0x96	; 150
    117e:	bb 27       	eor	r27, r27
    1180:	93 95       	inc	r25
    1182:	f6 95       	lsr	r31
    1184:	87 95       	ror	r24
    1186:	77 95       	ror	r23
    1188:	67 95       	ror	r22
    118a:	b7 95       	ror	r27
    118c:	f1 11       	cpse	r31, r1
    118e:	f8 cf       	rjmp	.-16     	; 0x1180 <__floatsisf+0x1c>
    1190:	fa f4       	brpl	.+62     	; 0x11d0 <__floatsisf+0x6c>
    1192:	bb 0f       	add	r27, r27
    1194:	11 f4       	brne	.+4      	; 0x119a <__floatsisf+0x36>
    1196:	60 ff       	sbrs	r22, 0
    1198:	1b c0       	rjmp	.+54     	; 0x11d0 <__floatsisf+0x6c>
    119a:	6f 5f       	subi	r22, 0xFF	; 255
    119c:	7f 4f       	sbci	r23, 0xFF	; 255
    119e:	8f 4f       	sbci	r24, 0xFF	; 255
    11a0:	9f 4f       	sbci	r25, 0xFF	; 255
    11a2:	16 c0       	rjmp	.+44     	; 0x11d0 <__floatsisf+0x6c>
    11a4:	88 23       	and	r24, r24
    11a6:	11 f0       	breq	.+4      	; 0x11ac <__floatsisf+0x48>
    11a8:	96 e9       	ldi	r25, 0x96	; 150
    11aa:	11 c0       	rjmp	.+34     	; 0x11ce <__floatsisf+0x6a>
    11ac:	77 23       	and	r23, r23
    11ae:	21 f0       	breq	.+8      	; 0x11b8 <__floatsisf+0x54>
    11b0:	9e e8       	ldi	r25, 0x8E	; 142
    11b2:	87 2f       	mov	r24, r23
    11b4:	76 2f       	mov	r23, r22
    11b6:	05 c0       	rjmp	.+10     	; 0x11c2 <__floatsisf+0x5e>
    11b8:	66 23       	and	r22, r22
    11ba:	71 f0       	breq	.+28     	; 0x11d8 <__floatsisf+0x74>
    11bc:	96 e8       	ldi	r25, 0x86	; 134
    11be:	86 2f       	mov	r24, r22
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	2a f0       	brmi	.+10     	; 0x11d0 <__floatsisf+0x6c>
    11c6:	9a 95       	dec	r25
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	da f7       	brpl	.-10     	; 0x11c6 <__floatsisf+0x62>
    11d0:	88 0f       	add	r24, r24
    11d2:	96 95       	lsr	r25
    11d4:	87 95       	ror	r24
    11d6:	97 f9       	bld	r25, 7
    11d8:	08 95       	ret

000011da <__fp_inf>:
    11da:	97 f9       	bld	r25, 7
    11dc:	9f 67       	ori	r25, 0x7F	; 127
    11de:	80 e8       	ldi	r24, 0x80	; 128
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	08 95       	ret

000011e6 <__fp_nan>:
    11e6:	9f ef       	ldi	r25, 0xFF	; 255
    11e8:	80 ec       	ldi	r24, 0xC0	; 192
    11ea:	08 95       	ret

000011ec <__fp_pscA>:
    11ec:	00 24       	eor	r0, r0
    11ee:	0a 94       	dec	r0
    11f0:	16 16       	cp	r1, r22
    11f2:	17 06       	cpc	r1, r23
    11f4:	18 06       	cpc	r1, r24
    11f6:	09 06       	cpc	r0, r25
    11f8:	08 95       	ret

000011fa <__fp_pscB>:
    11fa:	00 24       	eor	r0, r0
    11fc:	0a 94       	dec	r0
    11fe:	12 16       	cp	r1, r18
    1200:	13 06       	cpc	r1, r19
    1202:	14 06       	cpc	r1, r20
    1204:	05 06       	cpc	r0, r21
    1206:	08 95       	ret

00001208 <__fp_round>:
    1208:	09 2e       	mov	r0, r25
    120a:	03 94       	inc	r0
    120c:	00 0c       	add	r0, r0
    120e:	11 f4       	brne	.+4      	; 0x1214 <__fp_round+0xc>
    1210:	88 23       	and	r24, r24
    1212:	52 f0       	brmi	.+20     	; 0x1228 <__fp_round+0x20>
    1214:	bb 0f       	add	r27, r27
    1216:	40 f4       	brcc	.+16     	; 0x1228 <__fp_round+0x20>
    1218:	bf 2b       	or	r27, r31
    121a:	11 f4       	brne	.+4      	; 0x1220 <__fp_round+0x18>
    121c:	60 ff       	sbrs	r22, 0
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <__fp_round+0x20>
    1220:	6f 5f       	subi	r22, 0xFF	; 255
    1222:	7f 4f       	sbci	r23, 0xFF	; 255
    1224:	8f 4f       	sbci	r24, 0xFF	; 255
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	08 95       	ret

0000122a <__fp_split3>:
    122a:	57 fd       	sbrc	r21, 7
    122c:	90 58       	subi	r25, 0x80	; 128
    122e:	44 0f       	add	r20, r20
    1230:	55 1f       	adc	r21, r21
    1232:	59 f0       	breq	.+22     	; 0x124a <__fp_splitA+0x10>
    1234:	5f 3f       	cpi	r21, 0xFF	; 255
    1236:	71 f0       	breq	.+28     	; 0x1254 <__fp_splitA+0x1a>
    1238:	47 95       	ror	r20

0000123a <__fp_splitA>:
    123a:	88 0f       	add	r24, r24
    123c:	97 fb       	bst	r25, 7
    123e:	99 1f       	adc	r25, r25
    1240:	61 f0       	breq	.+24     	; 0x125a <__fp_splitA+0x20>
    1242:	9f 3f       	cpi	r25, 0xFF	; 255
    1244:	79 f0       	breq	.+30     	; 0x1264 <__fp_splitA+0x2a>
    1246:	87 95       	ror	r24
    1248:	08 95       	ret
    124a:	12 16       	cp	r1, r18
    124c:	13 06       	cpc	r1, r19
    124e:	14 06       	cpc	r1, r20
    1250:	55 1f       	adc	r21, r21
    1252:	f2 cf       	rjmp	.-28     	; 0x1238 <__fp_split3+0xe>
    1254:	46 95       	lsr	r20
    1256:	f1 df       	rcall	.-30     	; 0x123a <__fp_splitA>
    1258:	08 c0       	rjmp	.+16     	; 0x126a <__fp_splitA+0x30>
    125a:	16 16       	cp	r1, r22
    125c:	17 06       	cpc	r1, r23
    125e:	18 06       	cpc	r1, r24
    1260:	99 1f       	adc	r25, r25
    1262:	f1 cf       	rjmp	.-30     	; 0x1246 <__fp_splitA+0xc>
    1264:	86 95       	lsr	r24
    1266:	71 05       	cpc	r23, r1
    1268:	61 05       	cpc	r22, r1
    126a:	08 94       	sec
    126c:	08 95       	ret

0000126e <__fp_zero>:
    126e:	e8 94       	clt

00001270 <__fp_szero>:
    1270:	bb 27       	eor	r27, r27
    1272:	66 27       	eor	r22, r22
    1274:	77 27       	eor	r23, r23
    1276:	cb 01       	movw	r24, r22
    1278:	97 f9       	bld	r25, 7
    127a:	08 95       	ret

0000127c <__mulsf3>:
    127c:	0b d0       	rcall	.+22     	; 0x1294 <__mulsf3x>
    127e:	c4 cf       	rjmp	.-120    	; 0x1208 <__fp_round>
    1280:	b5 df       	rcall	.-150    	; 0x11ec <__fp_pscA>
    1282:	28 f0       	brcs	.+10     	; 0x128e <__mulsf3+0x12>
    1284:	ba df       	rcall	.-140    	; 0x11fa <__fp_pscB>
    1286:	18 f0       	brcs	.+6      	; 0x128e <__mulsf3+0x12>
    1288:	95 23       	and	r25, r21
    128a:	09 f0       	breq	.+2      	; 0x128e <__mulsf3+0x12>
    128c:	a6 cf       	rjmp	.-180    	; 0x11da <__fp_inf>
    128e:	ab cf       	rjmp	.-170    	; 0x11e6 <__fp_nan>
    1290:	11 24       	eor	r1, r1
    1292:	ee cf       	rjmp	.-36     	; 0x1270 <__fp_szero>

00001294 <__mulsf3x>:
    1294:	ca df       	rcall	.-108    	; 0x122a <__fp_split3>
    1296:	a0 f3       	brcs	.-24     	; 0x1280 <__mulsf3+0x4>

00001298 <__mulsf3_pse>:
    1298:	95 9f       	mul	r25, r21
    129a:	d1 f3       	breq	.-12     	; 0x1290 <__mulsf3+0x14>
    129c:	95 0f       	add	r25, r21
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	55 1f       	adc	r21, r21
    12a2:	62 9f       	mul	r22, r18
    12a4:	f0 01       	movw	r30, r0
    12a6:	72 9f       	mul	r23, r18
    12a8:	bb 27       	eor	r27, r27
    12aa:	f0 0d       	add	r31, r0
    12ac:	b1 1d       	adc	r27, r1
    12ae:	63 9f       	mul	r22, r19
    12b0:	aa 27       	eor	r26, r26
    12b2:	f0 0d       	add	r31, r0
    12b4:	b1 1d       	adc	r27, r1
    12b6:	aa 1f       	adc	r26, r26
    12b8:	64 9f       	mul	r22, r20
    12ba:	66 27       	eor	r22, r22
    12bc:	b0 0d       	add	r27, r0
    12be:	a1 1d       	adc	r26, r1
    12c0:	66 1f       	adc	r22, r22
    12c2:	82 9f       	mul	r24, r18
    12c4:	22 27       	eor	r18, r18
    12c6:	b0 0d       	add	r27, r0
    12c8:	a1 1d       	adc	r26, r1
    12ca:	62 1f       	adc	r22, r18
    12cc:	73 9f       	mul	r23, r19
    12ce:	b0 0d       	add	r27, r0
    12d0:	a1 1d       	adc	r26, r1
    12d2:	62 1f       	adc	r22, r18
    12d4:	83 9f       	mul	r24, r19
    12d6:	a0 0d       	add	r26, r0
    12d8:	61 1d       	adc	r22, r1
    12da:	22 1f       	adc	r18, r18
    12dc:	74 9f       	mul	r23, r20
    12de:	33 27       	eor	r19, r19
    12e0:	a0 0d       	add	r26, r0
    12e2:	61 1d       	adc	r22, r1
    12e4:	23 1f       	adc	r18, r19
    12e6:	84 9f       	mul	r24, r20
    12e8:	60 0d       	add	r22, r0
    12ea:	21 1d       	adc	r18, r1
    12ec:	82 2f       	mov	r24, r18
    12ee:	76 2f       	mov	r23, r22
    12f0:	6a 2f       	mov	r22, r26
    12f2:	11 24       	eor	r1, r1
    12f4:	9f 57       	subi	r25, 0x7F	; 127
    12f6:	50 40       	sbci	r21, 0x00	; 0
    12f8:	8a f0       	brmi	.+34     	; 0x131c <__mulsf3_pse+0x84>
    12fa:	e1 f0       	breq	.+56     	; 0x1334 <__mulsf3_pse+0x9c>
    12fc:	88 23       	and	r24, r24
    12fe:	4a f0       	brmi	.+18     	; 0x1312 <__mulsf3_pse+0x7a>
    1300:	ee 0f       	add	r30, r30
    1302:	ff 1f       	adc	r31, r31
    1304:	bb 1f       	adc	r27, r27
    1306:	66 1f       	adc	r22, r22
    1308:	77 1f       	adc	r23, r23
    130a:	88 1f       	adc	r24, r24
    130c:	91 50       	subi	r25, 0x01	; 1
    130e:	50 40       	sbci	r21, 0x00	; 0
    1310:	a9 f7       	brne	.-22     	; 0x12fc <__mulsf3_pse+0x64>
    1312:	9e 3f       	cpi	r25, 0xFE	; 254
    1314:	51 05       	cpc	r21, r1
    1316:	70 f0       	brcs	.+28     	; 0x1334 <__mulsf3_pse+0x9c>
    1318:	60 cf       	rjmp	.-320    	; 0x11da <__fp_inf>
    131a:	aa cf       	rjmp	.-172    	; 0x1270 <__fp_szero>
    131c:	5f 3f       	cpi	r21, 0xFF	; 255
    131e:	ec f3       	brlt	.-6      	; 0x131a <__mulsf3_pse+0x82>
    1320:	98 3e       	cpi	r25, 0xE8	; 232
    1322:	dc f3       	brlt	.-10     	; 0x131a <__mulsf3_pse+0x82>
    1324:	86 95       	lsr	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	b7 95       	ror	r27
    132c:	f7 95       	ror	r31
    132e:	e7 95       	ror	r30
    1330:	9f 5f       	subi	r25, 0xFF	; 255
    1332:	c1 f7       	brne	.-16     	; 0x1324 <__mulsf3_pse+0x8c>
    1334:	fe 2b       	or	r31, r30
    1336:	88 0f       	add	r24, r24
    1338:	91 1d       	adc	r25, r1
    133a:	96 95       	lsr	r25
    133c:	87 95       	ror	r24
    133e:	97 f9       	bld	r25, 7
    1340:	08 95       	ret

00001342 <__divmodhi4>:
    1342:	97 fb       	bst	r25, 7
    1344:	07 2e       	mov	r0, r23
    1346:	16 f4       	brtc	.+4      	; 0x134c <__divmodhi4+0xa>
    1348:	00 94       	com	r0
    134a:	06 d0       	rcall	.+12     	; 0x1358 <__divmodhi4_neg1>
    134c:	77 fd       	sbrc	r23, 7
    134e:	08 d0       	rcall	.+16     	; 0x1360 <__divmodhi4_neg2>
    1350:	14 d0       	rcall	.+40     	; 0x137a <__udivmodhi4>
    1352:	07 fc       	sbrc	r0, 7
    1354:	05 d0       	rcall	.+10     	; 0x1360 <__divmodhi4_neg2>
    1356:	3e f4       	brtc	.+14     	; 0x1366 <__divmodhi4_exit>

00001358 <__divmodhi4_neg1>:
    1358:	90 95       	com	r25
    135a:	81 95       	neg	r24
    135c:	9f 4f       	sbci	r25, 0xFF	; 255
    135e:	08 95       	ret

00001360 <__divmodhi4_neg2>:
    1360:	70 95       	com	r23
    1362:	61 95       	neg	r22
    1364:	7f 4f       	sbci	r23, 0xFF	; 255

00001366 <__divmodhi4_exit>:
    1366:	08 95       	ret

00001368 <__tablejump2__>:
    1368:	ee 0f       	add	r30, r30
    136a:	ff 1f       	adc	r31, r31
    136c:	00 24       	eor	r0, r0
    136e:	00 1c       	adc	r0, r0
    1370:	0b be       	out	0x3b, r0	; 59
    1372:	07 90       	elpm	r0, Z+
    1374:	f6 91       	elpm	r31, Z
    1376:	e0 2d       	mov	r30, r0
    1378:	09 94       	ijmp

0000137a <__udivmodhi4>:
    137a:	aa 1b       	sub	r26, r26
    137c:	bb 1b       	sub	r27, r27
    137e:	51 e1       	ldi	r21, 0x11	; 17
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <__udivmodhi4_ep>

00001382 <__udivmodhi4_loop>:
    1382:	aa 1f       	adc	r26, r26
    1384:	bb 1f       	adc	r27, r27
    1386:	a6 17       	cp	r26, r22
    1388:	b7 07       	cpc	r27, r23
    138a:	10 f0       	brcs	.+4      	; 0x1390 <__udivmodhi4_ep>
    138c:	a6 1b       	sub	r26, r22
    138e:	b7 0b       	sbc	r27, r23

00001390 <__udivmodhi4_ep>:
    1390:	88 1f       	adc	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	5a 95       	dec	r21
    1396:	a9 f7       	brne	.-22     	; 0x1382 <__udivmodhi4_loop>
    1398:	80 95       	com	r24
    139a:	90 95       	com	r25
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	08 95       	ret

000013a2 <_exit>:
    13a2:	f8 94       	cli

000013a4 <__stop_program>:
    13a4:	ff cf       	rjmp	.-2      	; 0x13a4 <__stop_program>
