
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000abe  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  0080010a  0080010a  00000b5c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b71  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e3  00000000  00000000  00001865  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001307  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00002e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010632  00000000  00000000  00003148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006b1  00000000  00000000  0001377a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00013e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f0e  00000000  00000000  00013f7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	2e c4       	rjmp	.+2140   	; 0x862 <__vector_1>
   6:	00 00       	nop
   8:	ec c2       	rjmp	.+1496   	; 0x5e2 <__vector_2>
   a:	00 00       	nop
   c:	12 c3       	rjmp	.+1572   	; 0x632 <__vector_3>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	9c c2       	rjmp	.+1336   	; 0x56e <__vector_13>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	83 04       	cpc	r8, r3
  8e:	88 04       	cpc	r8, r8
  90:	9a 04       	cpc	r9, r10
  92:	a6 04       	cpc	r10, r6
  94:	aa 04       	cpc	r10, r10
  96:	ae 04       	cpc	r10, r14
  98:	ea 04       	cpc	r14, r10
  9a:	b2 04       	cpc	r11, r2
  9c:	b6 04       	cpc	r11, r6
  9e:	bb 04       	cpc	r11, r11
  a0:	c3 04       	cpc	r12, r3
  a2:	cb 04       	cpc	r12, r11
  a4:	d3 04       	cpc	r13, r3
  a6:	db 04       	cpc	r13, r11
  a8:	e3 04       	cpc	r14, r3

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	ee eb       	ldi	r30, 0xBE	; 190
  be:	fa e0       	ldi	r31, 0x0A	; 10
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	aa 30       	cpi	r26, 0x0A	; 10
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	aa e0       	ldi	r26, 0x0A	; 10
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	ab 35       	cpi	r26, 0x5B	; 91
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	7b d4       	rcall	.+2294   	; 0x9d8 <main>
  e2:	eb c4       	rjmp	.+2518   	; 0xaba <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  e6:	08 95       	ret

000000e8 <linje_get_error>:

void twoway_turn_lab(void){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
	if(!ongoing_turn ){    //---kör fram i korsningen för att prepa sväng
		sensor_front_tmp=sensor_front;
		drive_forward();
		turn_done=false;
  e8:	a0 91 4c 01 	lds	r26, 0x014C
  ec:	b0 91 4d 01 	lds	r27, 0x014D
  f0:	95 e0       	ldi	r25, 0x05	; 5
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	9d 01       	movw	r18, r26
  fe:	04 2e       	mov	r0, r20
 100:	02 c0       	rjmp	.+4      	; 0x106 <linje_get_error+0x1e>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <linje_get_error+0x1a>
 10a:	e2 2f       	mov	r30, r18
 10c:	e3 70       	andi	r30, 0x03	; 3
 10e:	e9 9f       	mul	r30, r25
 110:	80 0d       	add	r24, r0
 112:	11 24       	eor	r1, r1
 114:	23 70       	andi	r18, 0x03	; 3
 116:	33 27       	eor	r19, r19
 118:	62 0f       	add	r22, r18
 11a:	73 1f       	adc	r23, r19
 11c:	4e 5f       	subi	r20, 0xFE	; 254
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	91 50       	subi	r25, 0x01	; 1
 122:	46 31       	cpi	r20, 0x16	; 22
 124:	51 05       	cpc	r21, r1
 126:	51 f7       	brne	.-44     	; 0xfc <linje_get_error+0x14>
 128:	08 2e       	mov	r0, r24
 12a:	00 0c       	add	r0, r0
 12c:	99 0b       	sbc	r25, r25
 12e:	95 d4       	rcall	.+2346   	; 0xa5a <__divmodhi4>
 130:	86 2f       	mov	r24, r22
 132:	08 95       	ret

00000134 <manual_drive>:
 134:	80 91 26 01 	lds	r24, 0x0126
 138:	90 91 27 01 	lds	r25, 0x0127
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	29 f4       	brne	.+10     	; 0x14a <manual_drive+0x16>
 140:	2d 98       	cbi	0x05, 5	; 5
 142:	2e 98       	cbi	0x05, 6	; 5
 144:	17 bc       	out	0x27, r1	; 39
 146:	18 bc       	out	0x28, r1	; 40
 148:	08 95       	ret
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	49 f4       	brne	.+18     	; 0x162 <manual_drive+0x2e>
 150:	2d 98       	cbi	0x05, 5	; 5
 152:	2e 98       	cbi	0x05, 6	; 5
 154:	80 91 34 01 	lds	r24, 0x0134
 158:	87 bd       	out	0x27, r24	; 39
 15a:	80 91 32 01 	lds	r24, 0x0132
 15e:	88 bd       	out	0x28, r24	; 40
 160:	08 95       	ret
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	91 05       	cpc	r25, r1
 166:	59 f4       	brne	.+22     	; 0x17e <manual_drive+0x4a>
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 66       	ori	r24, 0x60	; 96
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	80 91 34 01 	lds	r24, 0x0134
 172:	8d 50       	subi	r24, 0x0D	; 13
 174:	87 bd       	out	0x27, r24	; 39
 176:	80 91 32 01 	lds	r24, 0x0132
 17a:	88 bd       	out	0x28, r24	; 40
 17c:	08 95       	ret
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	91 05       	cpc	r25, r1
 182:	81 f4       	brne	.+32     	; 0x1a4 <manual_drive+0x70>
 184:	2d 98       	cbi	0x05, 5	; 5
 186:	2e 98       	cbi	0x05, 6	; 5
 188:	80 91 34 01 	lds	r24, 0x0134
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	20 91 32 01 	lds	r18, 0x0132
 192:	90 91 33 01 	lds	r25, 0x0133
 196:	82 2f       	mov	r24, r18
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	5e d4       	rcall	.+2236   	; 0xa5a <__divmodhi4>
 19e:	26 1b       	sub	r18, r22
 1a0:	28 bd       	out	0x28, r18	; 40
 1a2:	08 95       	ret
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 05       	cpc	r25, r1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <manual_drive+0x96>
 1aa:	2d 98       	cbi	0x05, 5	; 5
 1ac:	2e 98       	cbi	0x05, 6	; 5
 1ae:	20 91 34 01 	lds	r18, 0x0134
 1b2:	90 91 35 01 	lds	r25, 0x0135
 1b6:	82 2f       	mov	r24, r18
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	4e d4       	rcall	.+2204   	; 0xa5a <__divmodhi4>
 1be:	26 1b       	sub	r18, r22
 1c0:	27 bd       	out	0x27, r18	; 39
 1c2:	80 91 32 01 	lds	r24, 0x0132
 1c6:	88 bd       	out	0x28, r24	; 40
 1c8:	08 95       	ret
 1ca:	85 30       	cpi	r24, 0x05	; 5
 1cc:	91 05       	cpc	r25, r1
 1ce:	49 f4       	brne	.+18     	; 0x1e2 <manual_drive+0xae>
 1d0:	2d 98       	cbi	0x05, 5	; 5
 1d2:	2e 9a       	sbi	0x05, 6	; 5
 1d4:	80 91 34 01 	lds	r24, 0x0134
 1d8:	87 bd       	out	0x27, r24	; 39
 1da:	80 91 32 01 	lds	r24, 0x0132
 1de:	88 bd       	out	0x28, r24	; 40
 1e0:	08 95       	ret
 1e2:	06 97       	sbiw	r24, 0x06	; 6
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <manual_drive+0xc4>
 1e6:	2e 98       	cbi	0x05, 6	; 5
 1e8:	2d 9a       	sbi	0x05, 5	; 5
 1ea:	80 91 34 01 	lds	r24, 0x0134
 1ee:	87 bd       	out	0x27, r24	; 39
 1f0:	80 91 32 01 	lds	r24, 0x0132
 1f4:	88 bd       	out	0x28, r24	; 40
 1f6:	08 95       	ret
 1f8:	10 92 27 01 	sts	0x0127, r1
 1fc:	10 92 26 01 	sts	0x0126, r1
 200:	08 95       	ret

00000202 <labyreg>:
 202:	f8 94       	cli
 204:	80 91 4e 01 	lds	r24, 0x014E
 208:	90 91 4f 01 	lds	r25, 0x014F
 20c:	20 91 3a 01 	lds	r18, 0x013A
 210:	30 91 3b 01 	lds	r19, 0x013B
 214:	78 94       	sei
 216:	82 1b       	sub	r24, r18
 218:	93 0b       	sbc	r25, r19
 21a:	90 93 58 01 	sts	0x0158, r25
 21e:	80 93 57 01 	sts	0x0157, r24
 222:	20 91 24 01 	lds	r18, 0x0124
 226:	30 91 25 01 	lds	r19, 0x0125
 22a:	ac 01       	movw	r20, r24
 22c:	42 1b       	sub	r20, r18
 22e:	53 0b       	sbc	r21, r19
 230:	50 93 23 01 	sts	0x0123, r21
 234:	40 93 22 01 	sts	0x0122, r20
 238:	20 91 08 01 	lds	r18, 0x0108
 23c:	30 91 09 01 	lds	r19, 0x0109
 240:	82 9f       	mul	r24, r18
 242:	b0 01       	movw	r22, r0
 244:	83 9f       	mul	r24, r19
 246:	70 0d       	add	r23, r0
 248:	92 9f       	mul	r25, r18
 24a:	70 0d       	add	r23, r0
 24c:	11 24       	eor	r1, r1
 24e:	e0 91 06 01 	lds	r30, 0x0106
 252:	f0 91 07 01 	lds	r31, 0x0107
 256:	4e 9f       	mul	r20, r30
 258:	90 01       	movw	r18, r0
 25a:	4f 9f       	mul	r20, r31
 25c:	30 0d       	add	r19, r0
 25e:	5e 9f       	mul	r21, r30
 260:	30 0d       	add	r19, r0
 262:	11 24       	eor	r1, r1
 264:	26 0f       	add	r18, r22
 266:	37 1f       	adc	r19, r23
 268:	30 93 55 01 	sts	0x0155, r19
 26c:	20 93 54 01 	sts	0x0154, r18
 270:	90 93 25 01 	sts	0x0125, r25
 274:	80 93 24 01 	sts	0x0124, r24
 278:	87 b5       	in	r24, 0x27	; 39
 27a:	86 95       	lsr	r24
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	28 17       	cp	r18, r24
 280:	39 07       	cpc	r19, r25
 282:	3c f0       	brlt	.+14     	; 0x292 <labyreg+0x90>
 284:	87 b5       	in	r24, 0x27	; 39
 286:	86 95       	lsr	r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 55 01 	sts	0x0155, r25
 28e:	80 93 54 01 	sts	0x0154, r24
 292:	88 b5       	in	r24, 0x28	; 40
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	91 95       	neg	r25
 298:	81 95       	neg	r24
 29a:	91 09       	sbc	r25, r1
 29c:	0a f4       	brpl	.+2      	; 0x2a0 <labyreg+0x9e>
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	20 91 54 01 	lds	r18, 0x0154
 2a8:	30 91 55 01 	lds	r19, 0x0155
 2ac:	82 17       	cp	r24, r18
 2ae:	93 07       	cpc	r25, r19
 2b0:	6c f0       	brlt	.+26     	; 0x2cc <labyreg+0xca>
 2b2:	88 b5       	in	r24, 0x28	; 40
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	91 95       	neg	r25
 2b8:	81 95       	neg	r24
 2ba:	91 09       	sbc	r25, r1
 2bc:	0a f4       	brpl	.+2      	; 0x2c0 <labyreg+0xbe>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	90 93 55 01 	sts	0x0155, r25
 2c8:	80 93 54 01 	sts	0x0154, r24
 2cc:	80 91 54 01 	lds	r24, 0x0154
 2d0:	90 91 55 01 	lds	r25, 0x0155
 2d4:	18 16       	cp	r1, r24
 2d6:	19 06       	cpc	r1, r25
 2d8:	44 f4       	brge	.+16     	; 0x2ea <labyreg+0xe8>
 2da:	90 91 34 01 	lds	r25, 0x0134
 2de:	98 1b       	sub	r25, r24
 2e0:	97 bd       	out	0x27, r25	; 39
 2e2:	80 91 32 01 	lds	r24, 0x0132
 2e6:	88 bd       	out	0x28, r24	; 40
 2e8:	08 95       	ret
 2ea:	99 23       	and	r25, r25
 2ec:	54 f4       	brge	.+20     	; 0x302 <labyreg+0x100>
 2ee:	80 91 34 01 	lds	r24, 0x0134
 2f2:	87 bd       	out	0x27, r24	; 39
 2f4:	90 91 54 01 	lds	r25, 0x0154
 2f8:	80 91 32 01 	lds	r24, 0x0132
 2fc:	89 0f       	add	r24, r25
 2fe:	88 bd       	out	0x28, r24	; 40
 300:	08 95       	ret
 302:	89 2b       	or	r24, r25
 304:	31 f4       	brne	.+12     	; 0x312 <labyreg+0x110>
 306:	80 91 34 01 	lds	r24, 0x0134
 30a:	87 bd       	out	0x27, r24	; 39
 30c:	80 91 32 01 	lds	r24, 0x0132
 310:	88 bd       	out	0x28, r24	; 40
 312:	08 95       	ret

00000314 <linje>:
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 17 01 	sts	0x0117, r25
 31c:	80 93 16 01 	sts	0x0116, r24
 320:	f8 94       	cli
 322:	80 91 18 01 	lds	r24, 0x0118
 326:	90 91 19 01 	lds	r25, 0x0119
 32a:	78 94       	sei
 32c:	20 91 20 01 	lds	r18, 0x0120
 330:	30 91 21 01 	lds	r19, 0x0121
 334:	28 1b       	sub	r18, r24
 336:	39 0b       	sbc	r19, r25
 338:	30 93 1f 01 	sts	0x011F, r19
 33c:	20 93 1e 01 	sts	0x011E, r18
 340:	80 91 1a 01 	lds	r24, 0x011A
 344:	90 91 1b 01 	lds	r25, 0x011B
 348:	a9 01       	movw	r20, r18
 34a:	48 1b       	sub	r20, r24
 34c:	59 0b       	sbc	r21, r25
 34e:	50 93 23 01 	sts	0x0123, r21
 352:	40 93 22 01 	sts	0x0122, r20
 356:	80 91 04 01 	lds	r24, 0x0104
 35a:	90 91 05 01 	lds	r25, 0x0105
 35e:	28 9f       	mul	r18, r24
 360:	b0 01       	movw	r22, r0
 362:	29 9f       	mul	r18, r25
 364:	70 0d       	add	r23, r0
 366:	38 9f       	mul	r19, r24
 368:	70 0d       	add	r23, r0
 36a:	11 24       	eor	r1, r1
 36c:	e0 91 02 01 	lds	r30, 0x0102
 370:	f0 91 03 01 	lds	r31, 0x0103
 374:	4e 9f       	mul	r20, r30
 376:	c0 01       	movw	r24, r0
 378:	4f 9f       	mul	r20, r31
 37a:	90 0d       	add	r25, r0
 37c:	5e 9f       	mul	r21, r30
 37e:	90 0d       	add	r25, r0
 380:	11 24       	eor	r1, r1
 382:	86 0f       	add	r24, r22
 384:	97 1f       	adc	r25, r23
 386:	60 91 16 01 	lds	r22, 0x0116
 38a:	70 91 17 01 	lds	r23, 0x0117
 38e:	65 d3       	rcall	.+1738   	; 0xa5a <__divmodhi4>
 390:	70 93 1d 01 	sts	0x011D, r23
 394:	60 93 1c 01 	sts	0x011C, r22
 398:	30 93 1b 01 	sts	0x011B, r19
 39c:	20 93 1a 01 	sts	0x011A, r18
 3a0:	77 23       	and	r23, r23
 3a2:	3c f4       	brge	.+14     	; 0x3b2 <linje+0x9e>
 3a4:	80 91 34 01 	lds	r24, 0x0134
 3a8:	68 0f       	add	r22, r24
 3aa:	67 bd       	out	0x27, r22	; 39
 3ac:	80 91 32 01 	lds	r24, 0x0132
 3b0:	88 bd       	out	0x28, r24	; 40
 3b2:	20 91 1c 01 	lds	r18, 0x011C
 3b6:	30 91 1d 01 	lds	r19, 0x011D
 3ba:	12 16       	cp	r1, r18
 3bc:	13 06       	cpc	r1, r19
 3be:	3c f4       	brge	.+14     	; 0x3ce <linje+0xba>
 3c0:	80 91 32 01 	lds	r24, 0x0132
 3c4:	82 1b       	sub	r24, r18
 3c6:	88 bd       	out	0x28, r24	; 40
 3c8:	80 91 34 01 	lds	r24, 0x0134
 3cc:	87 bd       	out	0x27, r24	; 39
 3ce:	80 91 1c 01 	lds	r24, 0x011C
 3d2:	90 91 1d 01 	lds	r25, 0x011D
 3d6:	99 23       	and	r25, r25
 3d8:	1c f4       	brge	.+6      	; 0x3e0 <linje+0xcc>
 3da:	91 95       	neg	r25
 3dc:	81 95       	neg	r24
 3de:	91 09       	sbc	r25, r1
 3e0:	84 30       	cpi	r24, 0x04	; 4
 3e2:	91 05       	cpc	r25, r1
 3e4:	bc f4       	brge	.+46     	; 0x414 <linje+0x100>
 3e6:	20 91 14 01 	lds	r18, 0x0114
 3ea:	30 91 15 01 	lds	r19, 0x0115
 3ee:	33 23       	and	r19, r19
 3f0:	1c f4       	brge	.+6      	; 0x3f8 <linje+0xe4>
 3f2:	31 95       	neg	r19
 3f4:	21 95       	neg	r18
 3f6:	31 09       	sbc	r19, r1
 3f8:	2d 30       	cpi	r18, 0x0D	; 13
 3fa:	31 05       	cpc	r19, r1
 3fc:	5c f4       	brge	.+22     	; 0x414 <linje+0x100>
 3fe:	24 30       	cpi	r18, 0x04	; 4
 400:	31 05       	cpc	r19, r1
 402:	14 f0       	brlt	.+4      	; 0x408 <linje+0xf4>
 404:	0d 97       	sbiw	r24, 0x0d	; 13
 406:	34 f4       	brge	.+12     	; 0x414 <linje+0x100>
 408:	80 91 34 01 	lds	r24, 0x0134
 40c:	87 bd       	out	0x27, r24	; 39
 40e:	80 91 32 01 	lds	r24, 0x0132
 412:	88 bd       	out	0x28, r24	; 40
 414:	80 91 1c 01 	lds	r24, 0x011C
 418:	90 91 1d 01 	lds	r25, 0x011D
 41c:	90 93 15 01 	sts	0x0115, r25
 420:	80 93 14 01 	sts	0x0114, r24
 424:	08 95       	ret

00000426 <linje_main>:
 426:	60 de       	rcall	.-832    	; 0xe8 <linje_get_error>
 428:	08 2e       	mov	r0, r24
 42a:	00 0c       	add	r0, r0
 42c:	99 0b       	sbc	r25, r25
 42e:	90 93 19 01 	sts	0x0119, r25
 432:	80 93 18 01 	sts	0x0118, r24
 436:	6e cf       	rjmp	.-292    	; 0x314 <linje>
 438:	08 95       	ret

0000043a <turn_left>:
 43a:	2e 98       	cbi	0x05, 6	; 5
 43c:	2d 9a       	sbi	0x05, 5	; 5
 43e:	80 91 34 01 	lds	r24, 0x0134
 442:	87 bd       	out	0x27, r24	; 39
 444:	80 91 32 01 	lds	r24, 0x0132
 448:	88 bd       	out	0x28, r24	; 40
 44a:	08 95       	ret

0000044c <turn_right>:
 44c:	2e 9a       	sbi	0x05, 6	; 5
 44e:	2d 98       	cbi	0x05, 5	; 5
 450:	80 91 34 01 	lds	r24, 0x0134
 454:	87 bd       	out	0x27, r24	; 39
 456:	80 91 32 01 	lds	r24, 0x0132
 45a:	88 bd       	out	0x28, r24	; 40
 45c:	08 95       	ret

0000045e <drive_forward>:
 45e:	2d 98       	cbi	0x05, 5	; 5
 460:	80 91 34 01 	lds	r24, 0x0134
 464:	87 bd       	out	0x27, r24	; 39
 466:	80 91 32 01 	lds	r24, 0x0132
 46a:	88 bd       	out	0x28, r24	; 40
 46c:	08 95       	ret

0000046e <oneway_turn_lab>:
 46e:	80 91 12 01 	lds	r24, 0x0112
 472:	81 11       	cpse	r24, r1
 474:	10 c0       	rjmp	.+32     	; 0x496 <oneway_turn_lab+0x28>
 476:	80 91 00 01 	lds	r24, 0x0100
 47a:	90 91 01 01 	lds	r25, 0x0101
 47e:	40 97       	sbiw	r24, 0x10	; 16
 480:	24 f0       	brlt	.+8      	; 0x48a <oneway_turn_lab+0x1c>
 482:	ed df       	rcall	.-38     	; 0x45e <drive_forward>
 484:	10 92 11 01 	sts	0x0111, r1
 488:	08 95       	ret
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	80 93 12 01 	sts	0x0112, r24
 490:	80 93 13 01 	sts	0x0113, r24
 494:	08 95       	ret
 496:	80 91 13 01 	lds	r24, 0x0113
 49a:	88 23       	and	r24, r24
 49c:	91 f0       	breq	.+36     	; 0x4c2 <oneway_turn_lab+0x54>
 49e:	80 91 3a 01 	lds	r24, 0x013A
 4a2:	90 91 3b 01 	lds	r25, 0x013B
 4a6:	ca 97       	sbiw	r24, 0x3a	; 58
 4a8:	14 f0       	brlt	.+4      	; 0x4ae <oneway_turn_lab+0x40>
 4aa:	c7 df       	rcall	.-114    	; 0x43a <turn_left>
 4ac:	07 c0       	rjmp	.+14     	; 0x4bc <oneway_turn_lab+0x4e>
 4ae:	80 91 4e 01 	lds	r24, 0x014E
 4b2:	90 91 4f 01 	lds	r25, 0x014F
 4b6:	ca 97       	sbiw	r24, 0x3a	; 58
 4b8:	0c f0       	brlt	.+2      	; 0x4bc <oneway_turn_lab+0x4e>
 4ba:	c8 df       	rcall	.-112    	; 0x44c <turn_right>
 4bc:	10 92 13 01 	sts	0x0113, r1
 4c0:	08 95       	ret
 4c2:	80 91 2e 01 	lds	r24, 0x012E
 4c6:	90 91 2f 01 	lds	r25, 0x012F
 4ca:	01 97       	sbiw	r24, 0x01	; 1
 4cc:	69 f4       	brne	.+26     	; 0x4e8 <oneway_turn_lab+0x7a>
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	80 93 11 01 	sts	0x0111, r24
 4d4:	10 92 2d 01 	sts	0x012D, r1
 4d8:	10 92 2c 01 	sts	0x012C, r1
 4dc:	10 92 2f 01 	sts	0x012F, r1
 4e0:	10 92 2e 01 	sts	0x012E, r1
 4e4:	bc cf       	rjmp	.-136    	; 0x45e <drive_forward>
 4e6:	08 95       	ret
 4e8:	80 91 11 01 	lds	r24, 0x0111
 4ec:	88 23       	and	r24, r24
 4ee:	61 f0       	breq	.+24     	; 0x508 <oneway_turn_lab+0x9a>
 4f0:	80 91 2c 01 	lds	r24, 0x012C
 4f4:	90 91 2d 01 	lds	r25, 0x012D
 4f8:	05 97       	sbiw	r24, 0x05	; 5
 4fa:	34 f0       	brlt	.+12     	; 0x508 <oneway_turn_lab+0x9a>
 4fc:	10 92 2b 01 	sts	0x012B, r1
 500:	10 92 2a 01 	sts	0x012A, r1
 504:	10 92 12 01 	sts	0x0112, r1
 508:	08 95       	ret

0000050a <regulator>:
 50a:	80 91 28 01 	lds	r24, 0x0128
 50e:	90 91 29 01 	lds	r25, 0x0129
 512:	01 97       	sbiw	r24, 0x01	; 1
 514:	11 f4       	brne	.+4      	; 0x51a <regulator+0x10>
 516:	87 cf       	rjmp	.-242    	; 0x426 <linje_main>
 518:	08 95       	ret
 51a:	80 91 2a 01 	lds	r24, 0x012A
 51e:	90 91 2b 01 	lds	r25, 0x012B
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	09 f4       	brne	.+2      	; 0x528 <regulator+0x1e>
 526:	a3 df       	rcall	.-186    	; 0x46e <oneway_turn_lab>
 528:	6c ce       	rjmp	.-808    	; 0x202 <labyreg>
 52a:	08 95       	ret

0000052c <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
 52c:	84 b5       	in	r24, 0x24	; 36
 52e:	83 6a       	ori	r24, 0xA3	; 163
 530:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
 532:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
 534:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
 536:	85 b5       	in	r24, 0x25	; 37
 538:	83 60       	ori	r24, 0x03	; 3
 53a:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
 53c:	88 e7       	ldi	r24, 0x78	; 120
 53e:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
 540:	85 b1       	in	r24, 0x05	; 5
 542:	15 b8       	out	0x05, r1	; 5
 544:	08 95       	ret

00000546 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
 546:	83 e0       	ldi	r24, 0x03	; 3
 548:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
 54a:	e1 e8       	ldi	r30, 0x81	; 129
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	8d 60       	ori	r24, 0x0D	; 13
 552:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
 554:	80 ea       	ldi	r24, 0xA0	; 160
 556:	95 e0       	ldi	r25, 0x05	; 5
 558:	90 93 89 00 	sts	0x0089, r25
 55c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 560:	ef e6       	ldi	r30, 0x6F	; 111
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	82 60       	ori	r24, 0x02	; 2
 568:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
 56a:	b1 9a       	sbi	0x16, 1	; 22
 56c:	08 95       	ret

0000056e <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	11 24       	eor	r1, r1
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	8f 93       	push	r24
 57e:	9f 93       	push	r25
	regler_ready=1;
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	90 93 31 01 	sts	0x0131, r25
 588:	80 93 30 01 	sts	0x0130, r24
	//if(counter_timer<10)
	//counter_timer++;
	count_arre++;				//array räknare
 58c:	80 91 0e 01 	lds	r24, 0x010E
 590:	90 91 0f 01 	lds	r25, 0x010F
 594:	01 96       	adiw	r24, 0x01	; 1
 596:	90 93 0f 01 	sts	0x010F, r25
 59a:	80 93 0e 01 	sts	0x010E, r24
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
 59e:	20 91 2c 01 	lds	r18, 0x012C
 5a2:	30 91 2d 01 	lds	r19, 0x012D
 5a6:	2f 5f       	subi	r18, 0xFF	; 255
 5a8:	3f 4f       	sbci	r19, 0xFF	; 255
 5aa:	30 93 2d 01 	sts	0x012D, r19
 5ae:	20 93 2c 01 	sts	0x012C, r18
	if(count_arre >= 29){
 5b2:	4d 97       	sbiw	r24, 0x1d	; 29
 5b4:	24 f0       	brlt	.+8      	; 0x5be <__vector_13+0x50>
		count_arre = 0;
 5b6:	10 92 0f 01 	sts	0x010F, r1
 5ba:	10 92 0e 01 	sts	0x010E, r1
	}
}
 5be:	9f 91       	pop	r25
 5c0:	8f 91       	pop	r24
 5c2:	3f 91       	pop	r19
 5c4:	2f 91       	pop	r18
 5c6:	0f 90       	pop	r0
 5c8:	0f be       	out	0x3f, r0	; 63
 5ca:	0f 90       	pop	r0
 5cc:	1f 90       	pop	r1
 5ce:	18 95       	reti

000005d0 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
 5d0:	8d b3       	in	r24, 0x1d	; 29
 5d2:	86 60       	ori	r24, 0x06	; 6
 5d4:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
 5d6:	e9 e6       	ldi	r30, 0x69	; 105
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	88 62       	ori	r24, 0x28	; 40
 5de:	80 83       	st	Z, r24
 5e0:	08 95       	ret

000005e2 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
 5e2:	1f 92       	push	r1
 5e4:	0f 92       	push	r0
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	0f 92       	push	r0
 5ea:	11 24       	eor	r1, r1
 5ec:	8f 93       	push	r24
 5ee:	9f 93       	push	r25
	if(drive_mode==1){
 5f0:	80 91 38 01 	lds	r24, 0x0138
 5f4:	90 91 39 01 	lds	r25, 0x0139
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	39 f4       	brne	.+14     	; 0x60a <__vector_2+0x28>
		drive_mode=0;
 5fc:	10 92 39 01 	sts	0x0139, r1
 600:	10 92 38 01 	sts	0x0138, r1
		PORTD |= (1 << PD1);
 604:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
 606:	58 98       	cbi	0x0b, 0	; 11
 608:	0c c0       	rjmp	.+24     	; 0x622 <__vector_2+0x40>
	}
	else{
		start=0;
 60a:	10 92 37 01 	sts	0x0137, r1
 60e:	10 92 36 01 	sts	0x0136, r1
		drive_mode=1;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	90 93 39 01 	sts	0x0139, r25
 61a:	80 93 38 01 	sts	0x0138, r24
		PORTD |= (1 << PD0);
 61e:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
 620:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
 622:	e1 9a       	sbi	0x1c, 1	; 28
}
 624:	9f 91       	pop	r25
 626:	8f 91       	pop	r24
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
 632:	1f 92       	push	r1
 634:	0f 92       	push	r0
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	0f 92       	push	r0
 63a:	11 24       	eor	r1, r1
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
	if(start==0){
 640:	80 91 36 01 	lds	r24, 0x0136
 644:	90 91 37 01 	lds	r25, 0x0137
 648:	89 2b       	or	r24, r25
 64a:	39 f4       	brne	.+14     	; 0x65a <__vector_3+0x28>
		start=1;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	90 93 37 01 	sts	0x0137, r25
 654:	80 93 36 01 	sts	0x0136, r24
 658:	04 c0       	rjmp	.+8      	; 0x662 <__vector_3+0x30>
	}
	else{
		start=0;
 65a:	10 92 37 01 	sts	0x0137, r1
 65e:	10 92 36 01 	sts	0x0136, r1
	}
	EIFR |= (1<< INTF2);
 662:	e2 9a       	sbi	0x1c, 2	; 28
}
 664:	9f 91       	pop	r25
 666:	8f 91       	pop	r24
 668:	0f 90       	pop	r0
 66a:	0f be       	out	0x3f, r0	; 63
 66c:	0f 90       	pop	r0
 66e:	1f 90       	pop	r1
 670:	18 95       	reti

00000672 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
 672:	88 23       	and	r24, r24
 674:	69 f0       	breq	.+26     	; 0x690 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
 676:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
 678:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
 67a:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
 67c:	e9 e6       	ldi	r30, 0x69	; 105
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	83 60       	ori	r24, 0x03	; 3
 684:	80 83       	st	Z, r24
		TWBR = 0x10;
 686:	80 e1       	ldi	r24, 0x10	; 16
 688:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 68c:	10 92 b9 00 	sts	0x00B9, r1
 690:	08 95       	ret

00000692 <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){
 692:	8f 92       	push	r8
 694:	9f 92       	push	r9
 696:	af 92       	push	r10
 698:	bf 92       	push	r11
 69a:	cf 92       	push	r12
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	0f 93       	push	r16
 6a4:	1f 93       	push	r17
 6a6:	cf 93       	push	r28
 6a8:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
 6aa:	eb 01       	movw	r28, r22
 6ac:	08 81       	ld	r16, Y
 6ae:	02 95       	swap	r16
 6b0:	0f 70       	andi	r16, 0x0F	; 15
 6b2:	10 e0       	ldi	r17, 0x00	; 0
 6b4:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
 6b6:	68 94       	set
 6b8:	ee 24       	eor	r14, r14
 6ba:	e3 f8       	bld	r14, 3
 6bc:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 6c2:	ec eb       	ldi	r30, 0xBC	; 188
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	0f 2e       	mov	r0, r31
 6c8:	f4 ea       	ldi	r31, 0xA4	; 164
 6ca:	df 2e       	mov	r13, r31
 6cc:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
 6ce:	a9 eb       	ldi	r26, 0xB9	; 185
 6d0:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 6d2:	8e 7f       	andi	r24, 0xFE	; 254
 6d4:	c8 2e       	mov	r12, r24
 6d6:	6b eb       	ldi	r22, 0xBB	; 187
 6d8:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 6da:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;
 6dc:	68 94       	set
 6de:	aa 24       	eor	r10, r10
 6e0:	a4 f8       	bld	r10, 4
 6e2:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 6e4:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 6e6:	90 81       	ld	r25, Z
 6e8:	99 23       	and	r25, r25
 6ea:	ec f7       	brge	.-6      	; 0x6e6 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status en start
 6ec:	2c 91       	ld	r18, X
 6ee:	28 7f       	andi	r18, 0xF8	; 248
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	2e 15       	cp	r18, r14
 6f4:	3f 05       	cpc	r19, r15
 6f6:	69 f5       	brne	.+90     	; 0x752 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 6f8:	eb 01       	movw	r28, r22
 6fa:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 6fc:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 6fe:	90 81       	ld	r25, Z
 700:	99 23       	and	r25, r25
 702:	ec f7       	brge	.-6      	; 0x6fe <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18)
 704:	9c 91       	ld	r25, X
 706:	98 7f       	andi	r25, 0xF8	; 248
 708:	98 31       	cpi	r25, 0x18	; 24
 70a:	29 f0       	breq	.+10     	; 0x716 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 70c:	84 e9       	ldi	r24, 0x94	; 148
 70e:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	1f c0       	rjmp	.+62     	; 0x754 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];
 716:	e4 01       	movw	r28, r8
 718:	99 91       	ld	r25, Y+
 71a:	4e 01       	movw	r8, r28
 71c:	eb 01       	movw	r28, r22
 71e:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
 720:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
 722:	90 81       	ld	r25, Z
 724:	99 23       	and	r25, r25
 726:	ec f7       	brge	.-6      	; 0x722 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
 728:	9c 91       	ld	r25, X
 72a:	98 7f       	andi	r25, 0xF8	; 248
 72c:	98 32       	cpi	r25, 0x28	; 40
 72e:	29 f0       	breq	.+10     	; 0x73a <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 730:	84 e9       	ldi	r24, 0x94	; 148
 732:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	0d c0       	rjmp	.+26     	; 0x754 <i2c_send+0xc2>
	}
	counter++;
 73a:	4f 5f       	subi	r20, 0xFF	; 255
 73c:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;
 73e:	ea 2c       	mov	r14, r10
 740:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);
 742:	04 17       	cp	r16, r20
 744:	15 07       	cpc	r17, r21
 746:	74 f6       	brge	.-100    	; 0x6e4 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 748:	84 e9       	ldi	r24, 0x94	; 148
 74a:	80 93 bc 00 	sts	0x00BC, r24
	return true;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	01 c0       	rjmp	.+2      	; 0x754 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
		return false;		
 752:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;
	}while (counter <= number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
 754:	df 91       	pop	r29
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	ff 90       	pop	r15
 75e:	ef 90       	pop	r14
 760:	df 90       	pop	r13
 762:	cf 90       	pop	r12
 764:	bf 90       	pop	r11
 766:	af 90       	pop	r10
 768:	9f 90       	pop	r9
 76a:	8f 90       	pop	r8
 76c:	08 95       	ret

0000076e <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 76e:	ec eb       	ldi	r30, 0xBC	; 188
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	90 81       	ld	r25, Z
 774:	94 6a       	ori	r25, 0xA4	; 164
 776:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 778:	90 81       	ld	r25, Z
 77a:	99 23       	and	r25, r25
 77c:	ec f7       	brge	.-6      	; 0x778 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
 77e:	90 91 b9 00 	lds	r25, 0x00B9
 782:	98 7f       	andi	r25, 0xF8	; 248
 784:	98 30       	cpi	r25, 0x08	; 8
 786:	29 f0       	breq	.+10     	; 0x792 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 788:	84 e9       	ldi	r24, 0x94	; 148
 78a:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	08 95       	ret
	}
	TWDR = prossesor | 0x01;
 792:	81 60       	ori	r24, 0x01	; 1
 794:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 798:	84 e8       	ldi	r24, 0x84	; 132
 79a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 79e:	ec eb       	ldi	r30, 0xBC	; 188
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	88 23       	and	r24, r24
 7a6:	ec f7       	brge	.-6      	; 0x7a2 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK)
 7a8:	80 91 b9 00 	lds	r24, 0x00B9
 7ac:	88 7f       	andi	r24, 0xF8	; 248
 7ae:	80 34       	cpi	r24, 0x40	; 64
 7b0:	29 f0       	breq	.+10     	; 0x7bc <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 7b2:	84 e9       	ldi	r24, 0x94	; 148
 7b4:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
 7bc:	ec eb       	ldi	r30, 0xBC	; 188
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	80 81       	ld	r24, Z
 7c2:	84 68       	ori	r24, 0x84	; 132
 7c4:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 7c6:	80 81       	ld	r24, Z
 7c8:	88 23       	and	r24, r24
 7ca:	ec f7       	brge	.-6      	; 0x7c6 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR;
 7cc:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 7d0:	94 e9       	ldi	r25, 0x94	; 148
 7d2:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 7d6:	08 95       	ret

000007d8 <i2c_store_data>:

void i2c_store_data(byte data)
{
	static int counter;
	static int size;
	if(counter == 0){
 7d8:	20 91 0c 01 	lds	r18, 0x010C
 7dc:	30 91 0d 01 	lds	r19, 0x010D
 7e0:	21 15       	cp	r18, r1
 7e2:	31 05       	cpc	r19, r1
 7e4:	89 f4       	brne	.+34     	; 0x808 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
 7e6:	28 2f       	mov	r18, r24
 7e8:	22 95       	swap	r18
 7ea:	2f 70       	andi	r18, 0x0F	; 15
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	30 93 0b 01 	sts	0x010B, r19
 7f2:	20 93 0a 01 	sts	0x010A, r18
		i2c_data[counter] = data;
 7f6:	80 93 3d 01 	sts	0x013D, r24
		counter++;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	90 93 0d 01 	sts	0x010D, r25
 802:	80 93 0c 01 	sts	0x010C, r24
 806:	18 c0       	rjmp	.+48     	; 0x838 <i2c_store_data+0x60>
	}
	else if(counter < size+1){
 808:	40 91 0a 01 	lds	r20, 0x010A
 80c:	50 91 0b 01 	lds	r21, 0x010B
 810:	4f 5f       	subi	r20, 0xFF	; 255
 812:	5f 4f       	sbci	r21, 0xFF	; 255
 814:	24 17       	cp	r18, r20
 816:	35 07       	cpc	r19, r21
 818:	5c f4       	brge	.+22     	; 0x830 <i2c_store_data+0x58>
		i2c_data[counter] = data;
 81a:	f9 01       	movw	r30, r18
 81c:	e3 5c       	subi	r30, 0xC3	; 195
 81e:	fe 4f       	sbci	r31, 0xFE	; 254
 820:	80 83       	st	Z, r24
		counter++;
 822:	2f 5f       	subi	r18, 0xFF	; 255
 824:	3f 4f       	sbci	r19, 0xFF	; 255
 826:	30 93 0d 01 	sts	0x010D, r19
 82a:	20 93 0c 01 	sts	0x010C, r18
 82e:	04 c0       	rjmp	.+8      	; 0x838 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
 830:	f9 01       	movw	r30, r18
 832:	e3 5c       	subi	r30, 0xC3	; 195
 834:	fe 4f       	sbci	r31, 0xFE	; 254
 836:	80 83       	st	Z, r24
	}
	if(counter>=size+1){
 838:	80 91 0a 01 	lds	r24, 0x010A
 83c:	90 91 0b 01 	lds	r25, 0x010B
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	20 91 0c 01 	lds	r18, 0x010C
 846:	30 91 0d 01 	lds	r19, 0x010D
 84a:	28 17       	cp	r18, r24
 84c:	39 07       	cpc	r19, r25
 84e:	44 f0       	brlt	.+16     	; 0x860 <i2c_store_data+0x88>
		i2c_newdata = true;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	80 93 10 01 	sts	0x0110, r24
		counter = 0;
 856:	10 92 0d 01 	sts	0x010D, r1
 85a:	10 92 0c 01 	sts	0x010C, r1
		EIMSK &= ~(1<<INT0);
 85e:	e8 98       	cbi	0x1d, 0	; 29
 860:	08 95       	ret

00000862 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)
{	
 862:	1f 92       	push	r1
 864:	0f 92       	push	r0
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	0f 92       	push	r0
 86a:	11 24       	eor	r1, r1
 86c:	0b b6       	in	r0, 0x3b	; 59
 86e:	0f 92       	push	r0
 870:	2f 93       	push	r18
 872:	3f 93       	push	r19
 874:	4f 93       	push	r20
 876:	5f 93       	push	r21
 878:	6f 93       	push	r22
 87a:	7f 93       	push	r23
 87c:	8f 93       	push	r24
 87e:	9f 93       	push	r25
 880:	af 93       	push	r26
 882:	bf 93       	push	r27
 884:	ef 93       	push	r30
 886:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 888:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
 88a:	36 9b       	sbis	0x06, 6	; 6
 88c:	04 c0       	rjmp	.+8      	; 0x896 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // processor 1
 88e:	82 e0       	ldi	r24, 0x02	; 2
 890:	6e df       	rcall	.-292    	; 0x76e <i2c_recive>
 892:	a2 df       	rcall	.-188    	; 0x7d8 <i2c_store_data>
 894:	05 c0       	rjmp	.+10     	; 0x8a0 <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  PINC&(1<< PC7)>0
 896:	37 9b       	sbis	0x06, 7	; 6
 898:	03 c0       	rjmp	.+6      	; 0x8a0 <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // processor 3
 89a:	86 e0       	ldi	r24, 0x06	; 6
 89c:	68 df       	rcall	.-304    	; 0x76e <i2c_recive>
 89e:	9c df       	rcall	.-200    	; 0x7d8 <i2c_store_data>
	}
}
 8a0:	ff 91       	pop	r31
 8a2:	ef 91       	pop	r30
 8a4:	bf 91       	pop	r27
 8a6:	af 91       	pop	r26
 8a8:	9f 91       	pop	r25
 8aa:	8f 91       	pop	r24
 8ac:	7f 91       	pop	r23
 8ae:	6f 91       	pop	r22
 8b0:	5f 91       	pop	r21
 8b2:	4f 91       	pop	r20
 8b4:	3f 91       	pop	r19
 8b6:	2f 91       	pop	r18
 8b8:	0f 90       	pop	r0
 8ba:	0b be       	out	0x3b, r0	; 59
 8bc:	0f 90       	pop	r0
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	0f 90       	pop	r0
 8c2:	1f 90       	pop	r1
 8c4:	18 95       	reti

000008c6 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){
	if(i2c_newdata==true)
 8c6:	80 91 10 01 	lds	r24, 0x0110
 8ca:	88 23       	and	r24, r24
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <i2c_handel_data+0xa>
 8ce:	83 c0       	rjmp	.+262    	; 0x9d6 <i2c_handel_data+0x110>
	{
		i2c_newdata=false;
 8d0:	10 92 10 01 	sts	0x0110, r1
		if(!((i2c_data[0]>>3)&0x01)){
 8d4:	80 91 3d 01 	lds	r24, 0x013D
 8d8:	83 fd       	sbrc	r24, 3
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <i2c_handel_data+0x24>
 8dc:	84 e6       	ldi	r24, 0x64	; 100
 8de:	8a 95       	dec	r24
 8e0:	f1 f7       	brne	.-4      	; 0x8de <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
 8e2:	6d e3       	ldi	r22, 0x3D	; 61
 8e4:	71 e0       	ldi	r23, 0x01	; 1
 8e6:	82 e0       	ldi	r24, 0x02	; 2
 8e8:	d4 de       	rcall	.-600    	; 0x692 <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
 8ea:	20 91 3d 01 	lds	r18, 0x013D
 8ee:	e2 2f       	mov	r30, r18
 8f0:	ef 70       	andi	r30, 0x0F	; 15
 8f2:	8e 2f       	mov	r24, r30
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	8f 30       	cpi	r24, 0x0F	; 15
 8f8:	91 05       	cpc	r25, r1
 8fa:	08 f0       	brcs	.+2      	; 0x8fe <i2c_handel_data+0x38>
 8fc:	6b c0       	rjmp	.+214    	; 0x9d4 <i2c_handel_data+0x10e>
 8fe:	fc 01       	movw	r30, r24
 900:	ea 5b       	subi	r30, 0xBA	; 186
 902:	ff 4f       	sbci	r31, 0xFF	; 255
 904:	bd c0       	rjmp	.+378    	; 0xa80 <__tablejump2__>
			case 0x00 :
				batteri=i2c_data[1],i2c_data[2];
 906:	80 91 3e 01 	lds	r24, 0x013E
 90a:	80 93 56 01 	sts	0x0156, r24
				break;
 90e:	62 c0       	rjmp	.+196    	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x01 :
				sensor_right=i2c_data[3];
 910:	ed e3       	ldi	r30, 0x3D	; 61
 912:	f1 e0       	ldi	r31, 0x01	; 1
 914:	83 81       	ldd	r24, Z+3	; 0x03
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	90 93 4f 01 	sts	0x014F, r25
 91c:	80 93 4e 01 	sts	0x014E, r24
				//distans_right=i2c_data[3];
				distans_fram=i2c_data[2];
 920:	82 81       	ldd	r24, Z+2	; 0x02
 922:	80 93 50 01 	sts	0x0150, r24
				sensor_left=i2c_data[1];
 926:	81 81       	ldd	r24, Z+1	; 0x01
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	90 93 3b 01 	sts	0x013B, r25
 92e:	80 93 3a 01 	sts	0x013A, r24
				//distans_left=i2c_data[1];
				break;
 932:	50 c0       	rjmp	.+160    	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x02 :
				Reflex_data=i2c_data[2]*0x10000+i2c_data[1]*0x100+i2c_data[0];
 934:	80 91 3e 01 	lds	r24, 0x013E
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	98 2f       	mov	r25, r24
 93c:	88 27       	eor	r24, r24
 93e:	82 0f       	add	r24, r18
 940:	91 1d       	adc	r25, r1
 942:	90 93 4d 01 	sts	0x014D, r25
 946:	80 93 4c 01 	sts	0x014C, r24
				break;
 94a:	44 c0       	rjmp	.+136    	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x03 :
				RGB_data=1;//"röd";"
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	80 93 59 01 	sts	0x0159, r24
				break;
 952:	40 c0       	rjmp	.+128    	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x04 :
				RGB_data=2;//"grön";
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	80 93 59 01 	sts	0x0159, r24
				break;		
 95a:	3c c0       	rjmp	.+120    	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x05 :
				RGB_data=3;//"blå";
 95c:	83 e0       	ldi	r24, 0x03	; 3
 95e:	80 93 59 01 	sts	0x0159, r24
				break;
 962:	38 c0       	rjmp	.+112    	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x06 :
			
				break;
			case 0x07 :
				gyro_90=true;
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	80 93 3c 01 	sts	0x013C, r24
				break;
 96a:	34 c0       	rjmp	.+104    	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x08 :
				manual_function=0;
 96c:	10 92 27 01 	sts	0x0127, r1
 970:	10 92 26 01 	sts	0x0126, r1
				break;
 974:	2f c0       	rjmp	.+94     	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x09 :
				manual_function=1;
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	90 93 27 01 	sts	0x0127, r25
 97e:	80 93 26 01 	sts	0x0126, r24
				
				PORTD |= (1 << PD0); // heej
 982:	58 9a       	sbi	0x0b, 0	; 11
				break;
 984:	27 c0       	rjmp	.+78     	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x0a :
			PORTD |= (1 << PD0); // heej
 986:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=2;
 988:	82 e0       	ldi	r24, 0x02	; 2
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	90 93 27 01 	sts	0x0127, r25
 990:	80 93 26 01 	sts	0x0126, r24
				
				break;
 994:	1f c0       	rjmp	.+62     	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x0b :
			PORTD |= (1 << PD0); // heej
 996:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=4;
 998:	84 e0       	ldi	r24, 0x04	; 4
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	90 93 27 01 	sts	0x0127, r25
 9a0:	80 93 26 01 	sts	0x0126, r24
				
				break;
 9a4:	17 c0       	rjmp	.+46     	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x0c :
			PORTD |= (1 << PD0); // heej
 9a6:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=3;
 9a8:	83 e0       	ldi	r24, 0x03	; 3
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	90 93 27 01 	sts	0x0127, r25
 9b0:	80 93 26 01 	sts	0x0126, r24
				
				break;
 9b4:	0f c0       	rjmp	.+30     	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x0d :
			PORTD |= (1 << PD0); // heej
 9b6:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=6;
 9b8:	86 e0       	ldi	r24, 0x06	; 6
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	90 93 27 01 	sts	0x0127, r25
 9c0:	80 93 26 01 	sts	0x0126, r24
				
				break;
 9c4:	07 c0       	rjmp	.+14     	; 0x9d4 <i2c_handel_data+0x10e>
			case 0x0e :
			PORTD |= (1 << PD0); // heej
 9c6:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=5;
 9c8:	85 e0       	ldi	r24, 0x05	; 5
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	90 93 27 01 	sts	0x0127, r25
 9d0:	80 93 26 01 	sts	0x0126, r24
						
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
 9d4:	e8 9a       	sbi	0x1d, 0	; 29
 9d6:	08 95       	ret

000009d8 <main>:
				5,  4,  3,  2, 0 };
//*********************************for test only

int main(void)
{
	interrupt_init();
 9d8:	fb dd       	rcall	.-1034   	; 0x5d0 <interrupt_init>
	board_init();
 9da:	85 db       	rcall	.-2294   	; 0xe6 <board_init>
	initengine();
 9dc:	a7 dd       	rcall	.-1202   	; 0x52c <initengine>
	timerinit();
 9de:	b3 dd       	rcall	.-1178   	; 0x546 <timerinit>
	i2c_setup(1);
 9e0:	81 e0       	ldi	r24, 0x01	; 1
 9e2:	47 de       	rcall	.-882    	; 0x672 <i2c_setup>
	sei();
 9e4:	78 94       	sei
	//***********Set motors speed value here *****************
	left=50;//100;				// kanske räcker med en variable för båda om båda kör exakt lika fort
 9e6:	82 e3       	ldi	r24, 0x32	; 50
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	90 93 35 01 	sts	0x0135, r25
 9ee:	80 93 34 01 	sts	0x0134, r24
	right=45;//93;
 9f2:	8d e2       	ldi	r24, 0x2D	; 45
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	90 93 33 01 	sts	0x0133, r25
 9fa:	80 93 32 01 	sts	0x0132, r24
	//********************************************************
	motor_left=left;      
 9fe:	82 e3       	ldi	r24, 0x32	; 50
 a00:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
 a02:	80 91 32 01 	lds	r24, 0x0132
 a06:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito	
 a08:	5e df       	rcall	.-324    	; 0x8c6 <i2c_handel_data>
			if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
 a0a:	80 91 38 01 	lds	r24, 0x0138
 a0e:	90 91 39 01 	lds	r25, 0x0139
 a12:	81 30       	cpi	r24, 0x01	; 1
 a14:	91 05       	cpc	r25, r1
 a16:	e9 f4       	brne	.+58     	; 0xa52 <main+0x7a>
				PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
 a18:	2d 98       	cbi	0x05, 5	; 5
				PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
 a1a:	2e 98       	cbi	0x05, 6	; 5
				//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
				if(regler_ready==1 && start == 1){
 a1c:	80 91 30 01 	lds	r24, 0x0130
 a20:	90 91 31 01 	lds	r25, 0x0131
 a24:	01 97       	sbiw	r24, 0x01	; 1
 a26:	61 f4       	brne	.+24     	; 0xa40 <main+0x68>
 a28:	80 91 36 01 	lds	r24, 0x0136
 a2c:	90 91 37 01 	lds	r25, 0x0137
 a30:	01 97       	sbiw	r24, 0x01	; 1
 a32:	31 f4       	brne	.+12     	; 0xa40 <main+0x68>
					regulator();
 a34:	6a dd       	rcall	.-1324   	; 0x50a <regulator>
					regler_ready=0;	
 a36:	10 92 31 01 	sts	0x0131, r1
 a3a:	10 92 30 01 	sts	0x0130, r1
 a3e:	e4 cf       	rjmp	.-56     	; 0xa08 <main+0x30>
				}
				else if(start == 0){					// if start is zero then turn off the auto, stops motors
 a40:	80 91 36 01 	lds	r24, 0x0136
 a44:	90 91 37 01 	lds	r25, 0x0137
 a48:	89 2b       	or	r24, r25
 a4a:	f1 f6       	brne	.-68     	; 0xa08 <main+0x30>
					motor_left=0;
 a4c:	17 bc       	out	0x27, r1	; 39
					motor_right=0;
 a4e:	18 bc       	out	0x28, r1	; 40
 a50:	db cf       	rjmp	.-74     	; 0xa08 <main+0x30>
				}
			}
			else if(drive_mode==0){										// Drivemode is manual
 a52:	89 2b       	or	r24, r25
 a54:	c9 f6       	brne	.-78     	; 0xa08 <main+0x30>
				manual_drive();
 a56:	6e db       	rcall	.-2340   	; 0x134 <manual_drive>
 a58:	d7 cf       	rjmp	.-82     	; 0xa08 <main+0x30>

00000a5a <__divmodhi4>:
 a5a:	97 fb       	bst	r25, 7
 a5c:	07 2e       	mov	r0, r23
 a5e:	16 f4       	brtc	.+4      	; 0xa64 <__divmodhi4+0xa>
 a60:	00 94       	com	r0
 a62:	06 d0       	rcall	.+12     	; 0xa70 <__divmodhi4_neg1>
 a64:	77 fd       	sbrc	r23, 7
 a66:	08 d0       	rcall	.+16     	; 0xa78 <__divmodhi4_neg2>
 a68:	14 d0       	rcall	.+40     	; 0xa92 <__udivmodhi4>
 a6a:	07 fc       	sbrc	r0, 7
 a6c:	05 d0       	rcall	.+10     	; 0xa78 <__divmodhi4_neg2>
 a6e:	3e f4       	brtc	.+14     	; 0xa7e <__divmodhi4_exit>

00000a70 <__divmodhi4_neg1>:
 a70:	90 95       	com	r25
 a72:	81 95       	neg	r24
 a74:	9f 4f       	sbci	r25, 0xFF	; 255
 a76:	08 95       	ret

00000a78 <__divmodhi4_neg2>:
 a78:	70 95       	com	r23
 a7a:	61 95       	neg	r22
 a7c:	7f 4f       	sbci	r23, 0xFF	; 255

00000a7e <__divmodhi4_exit>:
 a7e:	08 95       	ret

00000a80 <__tablejump2__>:
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	00 24       	eor	r0, r0
 a86:	00 1c       	adc	r0, r0
 a88:	0b be       	out	0x3b, r0	; 59
 a8a:	07 90       	elpm	r0, Z+
 a8c:	f6 91       	elpm	r31, Z
 a8e:	e0 2d       	mov	r30, r0
 a90:	09 94       	ijmp

00000a92 <__udivmodhi4>:
 a92:	aa 1b       	sub	r26, r26
 a94:	bb 1b       	sub	r27, r27
 a96:	51 e1       	ldi	r21, 0x11	; 17
 a98:	07 c0       	rjmp	.+14     	; 0xaa8 <__udivmodhi4_ep>

00000a9a <__udivmodhi4_loop>:
 a9a:	aa 1f       	adc	r26, r26
 a9c:	bb 1f       	adc	r27, r27
 a9e:	a6 17       	cp	r26, r22
 aa0:	b7 07       	cpc	r27, r23
 aa2:	10 f0       	brcs	.+4      	; 0xaa8 <__udivmodhi4_ep>
 aa4:	a6 1b       	sub	r26, r22
 aa6:	b7 0b       	sbc	r27, r23

00000aa8 <__udivmodhi4_ep>:
 aa8:	88 1f       	adc	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	5a 95       	dec	r21
 aae:	a9 f7       	brne	.-22     	; 0xa9a <__udivmodhi4_loop>
 ab0:	80 95       	com	r24
 ab2:	90 95       	com	r25
 ab4:	bc 01       	movw	r22, r24
 ab6:	cd 01       	movw	r24, r26
 ab8:	08 95       	ret

00000aba <_exit>:
 aba:	f8 94       	cli

00000abc <__stop_program>:
 abc:	ff cf       	rjmp	.-2      	; 0xabc <__stop_program>
