
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000170c  000017a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000170c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000078  00800110  00800110  000017b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001150  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ed  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a8f  00000000  00000000  00002dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004cc  00000000  00000000  0000483c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000108a2  00000000  00000000  00004d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000019cc  00000000  00000000  000155aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00016f76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  000170a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	fb c7       	rjmp	.+4086   	; 0xffc <__vector_1>
       6:	00 00       	nop
       8:	a1 c3       	rjmp	.+1858   	; 0x74c <__vector_2>
       a:	00 00       	nop
       c:	c7 c3       	rjmp	.+1934   	; 0x79c <__vector_3>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	2f c3       	rjmp	.+1630   	; 0x694 <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4c 08       	sbc	r4, r12
      8e:	51 08       	sbc	r5, r1
      90:	5d 08       	sbc	r5, r13
      92:	77 08       	sbc	r7, r7
      94:	7b 08       	sbc	r7, r11
      96:	7f 08       	sbc	r7, r15
      98:	83 08       	sbc	r8, r3
      9a:	2b 09       	sbc	r18, r11
      9c:	94 08       	sbc	r9, r4
      9e:	99 08       	sbc	r9, r9
      a0:	a0 08       	sbc	r10, r0
      a2:	a7 08       	sbc	r10, r7
      a4:	ae 08       	sbc	r10, r14
      a6:	b5 08       	sbc	r11, r5
      a8:	bc 08       	sbc	r11, r12
      aa:	c3 08       	sbc	r12, r3

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ec e0       	ldi	r30, 0x0C	; 12
      c0:	f7 e1       	ldi	r31, 0x17	; 23
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a0 31       	cpi	r26, 0x10	; 16
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a0 e1       	ldi	r26, 0x10	; 16
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a8 38       	cpi	r26, 0x88	; 136
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 2d 09 	call	0x125a	; 0x125a <main>
      e6:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
      ec:	08 95       	ret

000000ee <linje_get_error>:
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
	}
	
	else if(regler_against_wall && (distance_left > st_value )){
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	10 92 30 01 	sts	0x0130, r1
     116:	10 92 2f 01 	sts	0x012F, r1
     11a:	f8 94       	cli
     11c:	80 90 63 01 	lds	r8, 0x0163
     120:	90 90 64 01 	lds	r9, 0x0164
     124:	20 90 7c 01 	lds	r2, 0x017C
     128:	30 90 7d 01 	lds	r3, 0x017D
     12c:	78 94       	sei
     12e:	c0 90 2f 01 	lds	r12, 0x012F
     132:	d0 90 30 01 	lds	r13, 0x0130
     136:	05 e0       	ldi	r16, 0x05	; 5
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	d0 e0       	ldi	r29, 0x00	; 0
     13e:	41 2c       	mov	r4, r1
     140:	51 2c       	mov	r5, r1
     142:	32 01       	movw	r6, r4
     144:	0f 2e       	mov	r0, r31
     146:	f5 e0       	ldi	r31, 0x05	; 5
     148:	af 2e       	mov	r10, r31
     14a:	b1 2c       	mov	r11, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	c5 01       	movw	r24, r10
     150:	80 1b       	sub	r24, r16
     152:	91 0b       	sbc	r25, r17
     154:	08 97       	sbiw	r24, 0x08	; 8
     156:	14 f5       	brge	.+68     	; 0x19c <linje_get_error+0xae>
     158:	74 01       	movw	r14, r8
     15a:	0c 2e       	mov	r0, r28
     15c:	02 c0       	rjmp	.+4      	; 0x162 <linje_get_error+0x74>
     15e:	f5 94       	asr	r15
     160:	e7 94       	ror	r14
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <linje_get_error+0x70>
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	e8 22       	and	r14, r24
     16a:	ff 24       	eor	r15, r15
     16c:	0e 9d       	mul	r16, r14
     16e:	b0 01       	movw	r22, r0
     170:	0f 9d       	mul	r16, r15
     172:	70 0d       	add	r23, r0
     174:	1e 9d       	mul	r17, r14
     176:	70 0d       	add	r23, r0
     178:	11 24       	eor	r1, r1
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__floatsisf>
     186:	9b 01       	movw	r18, r22
     188:	ac 01       	movw	r20, r24
     18a:	c3 01       	movw	r24, r6
     18c:	b2 01       	movw	r22, r4
     18e:	0e 94 66 09 	call	0x12cc	; 0x12cc <__addsf3>
     192:	2b 01       	movw	r4, r22
     194:	3c 01       	movw	r6, r24
     196:	ce 0c       	add	r12, r14
     198:	df 1c       	adc	r13, r15
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <linje_get_error+0xf2>
     19c:	ce 01       	movw	r24, r28
     19e:	40 97       	sbiw	r24, 0x10	; 16
     1a0:	71 01       	movw	r14, r2
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <linje_get_error+0xba>
     1a4:	f5 94       	asr	r15
     1a6:	e7 94       	ror	r14
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <linje_get_error+0xb6>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	e8 22       	and	r14, r24
     1b0:	ff 24       	eor	r15, r15
     1b2:	0e 9d       	mul	r16, r14
     1b4:	b0 01       	movw	r22, r0
     1b6:	0f 9d       	mul	r16, r15
     1b8:	70 0d       	add	r23, r0
     1ba:	1e 9d       	mul	r17, r14
     1bc:	70 0d       	add	r23, r0
     1be:	11 24       	eor	r1, r1
     1c0:	07 2e       	mov	r0, r23
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__floatsisf>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 66 09 	call	0x12cc	; 0x12cc <__addsf3>
     1d8:	2b 01       	movw	r4, r22
     1da:	3c 01       	movw	r6, r24
     1dc:	ce 0c       	add	r12, r14
     1de:	df 1c       	adc	r13, r15
     1e0:	22 96       	adiw	r28, 0x02	; 2
     1e2:	01 50       	subi	r16, 0x01	; 1
     1e4:	11 09       	sbc	r17, r1
     1e6:	c6 31       	cpi	r28, 0x16	; 22
     1e8:	d1 05       	cpc	r29, r1
     1ea:	09 f0       	breq	.+2      	; 0x1ee <linje_get_error+0x100>
     1ec:	b0 cf       	rjmp	.-160    	; 0x14e <linje_get_error+0x60>
     1ee:	d0 92 30 01 	sts	0x0130, r13
     1f2:	c0 92 2f 01 	sts	0x012F, r12
     1f6:	c1 14       	cp	r12, r1
     1f8:	d1 04       	cpc	r13, r1
     1fa:	69 f0       	breq	.+26     	; 0x216 <linje_get_error+0x128>
     1fc:	b6 01       	movw	r22, r12
     1fe:	dd 0c       	add	r13, r13
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	0e 94 ca 09 	call	0x1394	; 0x1394 <__divsf3>
     214:	03 c0       	rjmp	.+6      	; 0x21c <linje_get_error+0x12e>
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22
     21c:	0e 94 32 0a 	call	0x1464	; 0x1464 <__fixsfsi>
     220:	cb 01       	movw	r24, r22
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
     232:	bf 90       	pop	r11
     234:	af 90       	pop	r10
     236:	9f 90       	pop	r9
     238:	8f 90       	pop	r8
     23a:	7f 90       	pop	r7
     23c:	6f 90       	pop	r6
     23e:	5f 90       	pop	r5
     240:	4f 90       	pop	r4
     242:	3f 90       	pop	r3
     244:	2f 90       	pop	r2
     246:	08 95       	ret

00000248 <linje_RGBsveng>:
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
     24c:	f8 94       	cli
     24e:	20 91 63 01 	lds	r18, 0x0163
     252:	30 91 64 01 	lds	r19, 0x0164
     256:	40 91 7c 01 	lds	r20, 0x017C
     25a:	50 91 7d 01 	lds	r21, 0x017D
     25e:	78 94       	sei
     260:	80 91 70 01 	lds	r24, 0x0170
     264:	88 23       	and	r24, r24
     266:	09 f4       	brne	.+2      	; 0x26a <linje_RGBsveng+0x22>
     268:	95 c0       	rjmp	.+298    	; 0x394 <linje_RGBsveng+0x14c>
     26a:	60 91 2d 01 	lds	r22, 0x012D
     26e:	70 91 2e 01 	lds	r23, 0x012E
     272:	67 2b       	or	r22, r23
     274:	61 f4       	brne	.+24     	; 0x28e <linje_RGBsveng+0x46>
     276:	10 92 3c 01 	sts	0x013C, r1
     27a:	10 92 3b 01 	sts	0x013B, r1
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	90 93 2e 01 	sts	0x012E, r25
     286:	80 93 2d 01 	sts	0x012D, r24
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	8a c0       	rjmp	.+276    	; 0x3a2 <linje_RGBsveng+0x15a>
     28e:	60 91 3b 01 	lds	r22, 0x013B
     292:	70 91 3c 01 	lds	r23, 0x013C
     296:	60 31       	cpi	r22, 0x10	; 16
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <linje_RGBsveng+0x56>
     29c:	6f c0       	rjmp	.+222    	; 0x37c <linje_RGBsveng+0x134>
     29e:	83 30       	cpi	r24, 0x03	; 3
     2a0:	69 f5       	brne	.+90     	; 0x2fc <linje_RGBsveng+0xb4>
     2a2:	a0 ef       	ldi	r26, 0xF0	; 240
     2a4:	bf ef       	ldi	r27, 0xFF	; 255
     2a6:	6b ef       	ldi	r22, 0xFB	; 251
     2a8:	e0 e0       	ldi	r30, 0x00	; 0
     2aa:	f0 e0       	ldi	r31, 0x00	; 0
     2ac:	80 e0       	ldi	r24, 0x00	; 0
     2ae:	81 11       	cpse	r24, r1
     2b0:	1f c0       	rjmp	.+62     	; 0x2f0 <linje_RGBsveng+0xa8>
     2b2:	e8 30       	cpi	r30, 0x08	; 8
     2b4:	f1 05       	cpc	r31, r1
     2b6:	84 f4       	brge	.+32     	; 0x2d8 <linje_RGBsveng+0x90>
     2b8:	cf 01       	movw	r24, r30
     2ba:	88 0f       	add	r24, r24
     2bc:	99 1f       	adc	r25, r25
     2be:	e9 01       	movw	r28, r18
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <linje_RGBsveng+0x7e>
     2c2:	d5 95       	asr	r29
     2c4:	c7 95       	ror	r28
     2c6:	8a 95       	dec	r24
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <linje_RGBsveng+0x7a>
     2ca:	ce 01       	movw	r24, r28
     2cc:	86 95       	lsr	r24
     2ce:	81 70       	andi	r24, 0x01	; 1
     2d0:	68 9f       	mul	r22, r24
     2d2:	80 2d       	mov	r24, r0
     2d4:	11 24       	eor	r1, r1
     2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <linje_RGBsveng+0xa8>
     2d8:	ca 01       	movw	r24, r20
     2da:	0a 2e       	mov	r0, r26
     2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <linje_RGBsveng+0x9a>
     2de:	95 95       	asr	r25
     2e0:	87 95       	ror	r24
     2e2:	0a 94       	dec	r0
     2e4:	e2 f7       	brpl	.-8      	; 0x2de <linje_RGBsveng+0x96>
     2e6:	86 95       	lsr	r24
     2e8:	81 70       	andi	r24, 0x01	; 1
     2ea:	68 9f       	mul	r22, r24
     2ec:	80 2d       	mov	r24, r0
     2ee:	11 24       	eor	r1, r1
     2f0:	31 96       	adiw	r30, 0x01	; 1
     2f2:	6f 5f       	subi	r22, 0xFF	; 255
     2f4:	12 96       	adiw	r26, 0x02	; 2
     2f6:	66 30       	cpi	r22, 0x06	; 6
     2f8:	d1 f6       	brne	.-76     	; 0x2ae <linje_RGBsveng+0x66>
     2fa:	53 c0       	rjmp	.+166    	; 0x3a2 <linje_RGBsveng+0x15a>
     2fc:	82 30       	cpi	r24, 0x02	; 2
     2fe:	69 f4       	brne	.+26     	; 0x31a <linje_RGBsveng+0xd2>
     300:	20 7f       	andi	r18, 0xF0	; 240
     302:	30 93 64 01 	sts	0x0164, r19
     306:	20 93 63 01 	sts	0x0163, r18
     30a:	43 70       	andi	r20, 0x03	; 3
     30c:	55 27       	eor	r21, r21
     30e:	50 93 7d 01 	sts	0x017D, r21
     312:	40 93 7c 01 	sts	0x017C, r20
     316:	eb de       	rcall	.-554    	; 0xee <linje_get_error>
     318:	44 c0       	rjmp	.+136    	; 0x3a2 <linje_RGBsveng+0x15a>
     31a:	81 30       	cpi	r24, 0x01	; 1
     31c:	b9 f5       	brne	.+110    	; 0x38c <linje_RGBsveng+0x144>
     31e:	a6 e0       	ldi	r26, 0x06	; 6
     320:	b0 e0       	ldi	r27, 0x00	; 0
     322:	e6 e0       	ldi	r30, 0x06	; 6
     324:	6b e0       	ldi	r22, 0x0B	; 11
     326:	70 e0       	ldi	r23, 0x00	; 0
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	81 11       	cpse	r24, r1
     32c:	1f c0       	rjmp	.+62     	; 0x36c <linje_RGBsveng+0x124>
     32e:	68 30       	cpi	r22, 0x08	; 8
     330:	71 05       	cpc	r23, r1
     332:	84 f4       	brge	.+32     	; 0x354 <linje_RGBsveng+0x10c>
     334:	cb 01       	movw	r24, r22
     336:	88 0f       	add	r24, r24
     338:	99 1f       	adc	r25, r25
     33a:	e9 01       	movw	r28, r18
     33c:	02 c0       	rjmp	.+4      	; 0x342 <linje_RGBsveng+0xfa>
     33e:	d5 95       	asr	r29
     340:	c7 95       	ror	r28
     342:	8a 95       	dec	r24
     344:	e2 f7       	brpl	.-8      	; 0x33e <linje_RGBsveng+0xf6>
     346:	ce 01       	movw	r24, r28
     348:	86 95       	lsr	r24
     34a:	81 70       	andi	r24, 0x01	; 1
     34c:	e8 9f       	mul	r30, r24
     34e:	80 2d       	mov	r24, r0
     350:	11 24       	eor	r1, r1
     352:	0c c0       	rjmp	.+24     	; 0x36c <linje_RGBsveng+0x124>
     354:	ca 01       	movw	r24, r20
     356:	0a 2e       	mov	r0, r26
     358:	02 c0       	rjmp	.+4      	; 0x35e <linje_RGBsveng+0x116>
     35a:	95 95       	asr	r25
     35c:	87 95       	ror	r24
     35e:	0a 94       	dec	r0
     360:	e2 f7       	brpl	.-8      	; 0x35a <linje_RGBsveng+0x112>
     362:	86 95       	lsr	r24
     364:	81 70       	andi	r24, 0x01	; 1
     366:	e8 9f       	mul	r30, r24
     368:	80 2d       	mov	r24, r0
     36a:	11 24       	eor	r1, r1
     36c:	61 50       	subi	r22, 0x01	; 1
     36e:	71 09       	sbc	r23, r1
     370:	e1 50       	subi	r30, 0x01	; 1
     372:	12 97       	sbiw	r26, 0x02	; 2
     374:	61 15       	cp	r22, r1
     376:	71 05       	cpc	r23, r1
     378:	c1 f6       	brne	.-80     	; 0x32a <linje_RGBsveng+0xe2>
     37a:	13 c0       	rjmp	.+38     	; 0x3a2 <linje_RGBsveng+0x15a>
     37c:	10 92 70 01 	sts	0x0170, r1
     380:	10 92 2e 01 	sts	0x012E, r1
     384:	10 92 2d 01 	sts	0x012D, r1
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	0b c0       	rjmp	.+22     	; 0x3a2 <linje_RGBsveng+0x15a>
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	09 c0       	rjmp	.+18     	; 0x3a2 <linje_RGBsveng+0x15a>
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	07 c0       	rjmp	.+14     	; 0x3a2 <linje_RGBsveng+0x15a>
     394:	80 91 3b 01 	lds	r24, 0x013B
     398:	90 91 3c 01 	lds	r25, 0x013C
     39c:	40 97       	sbiw	r24, 0x10	; 16
     39e:	c4 f3       	brlt	.-16     	; 0x390 <linje_RGBsveng+0x148>
     3a0:	ed cf       	rjmp	.-38     	; 0x37c <linje_RGBsveng+0x134>
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	08 95       	ret

000003a8 <sekvens_goal_detekted>:
     3a8:	a2 de       	rcall	.-700    	; 0xee <linje_get_error>
     3aa:	80 91 2f 01 	lds	r24, 0x012F
     3ae:	90 91 30 01 	lds	r25, 0x0130
     3b2:	4d 97       	sbiw	r24, 0x1d	; 29
     3b4:	1c f0       	brlt	.+6      	; 0x3bc <sekvens_goal_detekted+0x14>
     3b6:	59 9a       	sbi	0x0b, 1	; 11
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	08 95       	ret
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	08 95       	ret

000003c0 <detect_goal>:
     3c0:	f3 df       	rcall	.-26     	; 0x3a8 <sekvens_goal_detekted>
     3c2:	88 23       	and	r24, r24
     3c4:	91 f0       	breq	.+36     	; 0x3ea <detect_goal+0x2a>
     3c6:	80 91 14 01 	lds	r24, 0x0114
     3ca:	90 91 15 01 	lds	r25, 0x0115
     3ce:	89 2b       	or	r24, r25
     3d0:	61 f4       	brne	.+24     	; 0x3ea <detect_goal+0x2a>
     3d2:	10 92 38 01 	sts	0x0138, r1
     3d6:	10 92 37 01 	sts	0x0137, r1
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	90 93 15 01 	sts	0x0115, r25
     3e2:	80 93 14 01 	sts	0x0114, r24
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	08 95       	ret
     3ea:	de df       	rcall	.-68     	; 0x3a8 <sekvens_goal_detekted>
     3ec:	88 23       	and	r24, r24
     3ee:	a1 f0       	breq	.+40     	; 0x418 <detect_goal+0x58>
     3f0:	80 91 14 01 	lds	r24, 0x0114
     3f4:	90 91 15 01 	lds	r25, 0x0115
     3f8:	01 97       	sbiw	r24, 0x01	; 1
     3fa:	71 f4       	brne	.+28     	; 0x418 <detect_goal+0x58>
     3fc:	80 91 37 01 	lds	r24, 0x0137
     400:	90 91 38 01 	lds	r25, 0x0138
     404:	44 97       	sbiw	r24, 0x14	; 20
     406:	44 f4       	brge	.+16     	; 0x418 <detect_goal+0x58>
     408:	82 e0       	ldi	r24, 0x02	; 2
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	90 93 15 01 	sts	0x0115, r25
     410:	80 93 14 01 	sts	0x0114, r24
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	08 95       	ret
     418:	c7 df       	rcall	.-114    	; 0x3a8 <sekvens_goal_detekted>
     41a:	88 23       	and	r24, r24
     41c:	99 f0       	breq	.+38     	; 0x444 <detect_goal+0x84>
     41e:	20 91 14 01 	lds	r18, 0x0114
     422:	30 91 15 01 	lds	r19, 0x0115
     426:	22 30       	cpi	r18, 0x02	; 2
     428:	31 05       	cpc	r19, r1
     42a:	61 f4       	brne	.+24     	; 0x444 <detect_goal+0x84>
     42c:	20 91 37 01 	lds	r18, 0x0137
     430:	30 91 38 01 	lds	r19, 0x0138
     434:	24 31       	cpi	r18, 0x14	; 20
     436:	31 05       	cpc	r19, r1
     438:	5c f4       	brge	.+22     	; 0x450 <detect_goal+0x90>
     43a:	10 92 15 01 	sts	0x0115, r1
     43e:	10 92 14 01 	sts	0x0114, r1
     442:	08 95       	ret
     444:	80 91 37 01 	lds	r24, 0x0137
     448:	90 91 38 01 	lds	r25, 0x0138
     44c:	44 97       	sbiw	r24, 0x14	; 20
     44e:	34 f0       	brlt	.+12     	; 0x45c <detect_goal+0x9c>
     450:	10 92 15 01 	sts	0x0115, r1
     454:	10 92 14 01 	sts	0x0114, r1
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	08 95       	ret
     45c:	08 95       	ret

0000045e <linje_main>:
     45e:	80 91 70 01 	lds	r24, 0x0170
     462:	81 50       	subi	r24, 0x01	; 1
     464:	83 30       	cpi	r24, 0x03	; 3
     466:	88 f4       	brcc	.+34     	; 0x48a <linje_main+0x2c>
     468:	ef de       	rcall	.-546    	; 0x248 <linje_RGBsveng>
     46a:	68 2f       	mov	r22, r24
     46c:	88 0f       	add	r24, r24
     46e:	77 0b       	sbc	r23, r23
     470:	88 0b       	sbc	r24, r24
     472:	99 0b       	sbc	r25, r25
     474:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__floatsisf>
     478:	60 93 17 01 	sts	0x0117, r22
     47c:	70 93 18 01 	sts	0x0118, r23
     480:	80 93 19 01 	sts	0x0119, r24
     484:	90 93 1a 01 	sts	0x011A, r25
     488:	08 95       	ret
     48a:	9a df       	rcall	.-204    	; 0x3c0 <detect_goal>
     48c:	88 23       	and	r24, r24
     48e:	31 f0       	breq	.+12     	; 0x49c <linje_main+0x3e>
     490:	10 92 44 01 	sts	0x0144, r1
     494:	10 92 43 01 	sts	0x0143, r1
     498:	59 9a       	sbi	0x0b, 1	; 11
     49a:	08 95       	ret
     49c:	28 de       	rcall	.-944    	; 0xee <linje_get_error>
     49e:	bc 01       	movw	r22, r24
     4a0:	99 0f       	add	r25, r25
     4a2:	88 0b       	sbc	r24, r24
     4a4:	99 0b       	sbc	r25, r25
     4a6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__floatsisf>
     4aa:	60 93 17 01 	sts	0x0117, r22
     4ae:	70 93 18 01 	sts	0x0118, r23
     4b2:	80 93 19 01 	sts	0x0119, r24
     4b6:	90 93 1a 01 	sts	0x011A, r25
     4ba:	08 95       	ret

000004bc <turn_left>:
     4bc:	2d 98       	cbi	0x05, 5	; 5
     4be:	2e 9a       	sbi	0x05, 6	; 5
     4c0:	8c e3       	ldi	r24, 0x3C	; 60
     4c2:	87 bd       	out	0x27, r24	; 39
     4c4:	87 e3       	ldi	r24, 0x37	; 55
     4c6:	88 bd       	out	0x28, r24	; 40
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	80 93 31 01 	sts	0x0131, r24
     4ce:	08 95       	ret

000004d0 <turn_right>:
     4d0:	2d 9a       	sbi	0x05, 5	; 5
     4d2:	2e 98       	cbi	0x05, 6	; 5
     4d4:	8c e3       	ldi	r24, 0x3C	; 60
     4d6:	87 bd       	out	0x27, r24	; 39
     4d8:	87 e3       	ldi	r24, 0x37	; 55
     4da:	88 bd       	out	0x28, r24	; 40
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	80 93 31 01 	sts	0x0131, r24
     4e2:	08 95       	ret

000004e4 <drive_forward_left>:
     4e4:	4f 92       	push	r4
     4e6:	5f 92       	push	r5
     4e8:	6f 92       	push	r6
     4ea:	7f 92       	push	r7
     4ec:	8f 92       	push	r8
     4ee:	9f 92       	push	r9
     4f0:	af 92       	push	r10
     4f2:	bf 92       	push	r11
     4f4:	ef 92       	push	r14
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	00 91 09 01 	lds	r16, 0x0109
     504:	10 91 0a 01 	lds	r17, 0x010A
     508:	08 1b       	sub	r16, r24
     50a:	19 0b       	sbc	r17, r25
     50c:	c0 91 21 01 	lds	r28, 0x0121
     510:	d0 91 22 01 	lds	r29, 0x0122
     514:	ce 01       	movw	r24, r28
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	9c 01       	movw	r18, r24
     51c:	20 58       	subi	r18, 0x80	; 128
     51e:	3e 4f       	sbci	r19, 0xFE	; 254
     520:	79 01       	movw	r14, r18
     522:	d9 01       	movw	r26, r18
     524:	8d 91       	ld	r24, X+
     526:	9c 91       	ld	r25, X
     528:	b8 01       	movw	r22, r16
     52a:	68 1b       	sub	r22, r24
     52c:	79 0b       	sbc	r23, r25
     52e:	07 2e       	mov	r0, r23
     530:	00 0c       	add	r0, r0
     532:	88 0b       	sbc	r24, r24
     534:	99 0b       	sbc	r25, r25
     536:	c9 d7       	rcall	.+3986   	; 0x14ca <__floatsisf>
     538:	4b 01       	movw	r8, r22
     53a:	5c 01       	movw	r10, r24
     53c:	60 93 23 01 	sts	0x0123, r22
     540:	70 93 24 01 	sts	0x0124, r23
     544:	80 93 25 01 	sts	0x0125, r24
     548:	90 93 26 01 	sts	0x0126, r25
     54c:	80 91 0d 01 	lds	r24, 0x010D
     550:	90 91 0e 01 	lds	r25, 0x010E
     554:	08 9f       	mul	r16, r24
     556:	b0 01       	movw	r22, r0
     558:	09 9f       	mul	r16, r25
     55a:	70 0d       	add	r23, r0
     55c:	18 9f       	mul	r17, r24
     55e:	70 0d       	add	r23, r0
     560:	11 24       	eor	r1, r1
     562:	07 2e       	mov	r0, r23
     564:	00 0c       	add	r0, r0
     566:	88 0b       	sbc	r24, r24
     568:	99 0b       	sbc	r25, r25
     56a:	af d7       	rcall	.+3934   	; 0x14ca <__floatsisf>
     56c:	2b 01       	movw	r4, r22
     56e:	3c 01       	movw	r6, r24
     570:	60 91 0b 01 	lds	r22, 0x010B
     574:	70 91 0c 01 	lds	r23, 0x010C
     578:	07 2e       	mov	r0, r23
     57a:	00 0c       	add	r0, r0
     57c:	88 0b       	sbc	r24, r24
     57e:	99 0b       	sbc	r25, r25
     580:	a4 d7       	rcall	.+3912   	; 0x14ca <__floatsisf>
     582:	9b 01       	movw	r18, r22
     584:	ac 01       	movw	r20, r24
     586:	c5 01       	movw	r24, r10
     588:	b4 01       	movw	r22, r8
     58a:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <__mulsf3>
     58e:	9b 01       	movw	r18, r22
     590:	ac 01       	movw	r20, r24
     592:	c3 01       	movw	r24, r6
     594:	b2 01       	movw	r22, r4
     596:	9a d6       	rcall	.+3380   	; 0x12cc <__addsf3>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e2       	ldi	r20, 0x20	; 32
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	f9 d6       	rcall	.+3570   	; 0x1394 <__divsf3>
     5a2:	60 d7       	rcall	.+3776   	; 0x1464 <__fixsfsi>
     5a4:	fb 01       	movw	r30, r22
     5a6:	d7 01       	movw	r26, r14
     5a8:	0d 93       	st	X+, r16
     5aa:	1c 93       	st	X, r17
     5ac:	21 96       	adiw	r28, 0x01	; 1
     5ae:	d0 93 22 01 	sts	0x0122, r29
     5b2:	c0 93 21 01 	sts	0x0121, r28
     5b6:	20 91 07 01 	lds	r18, 0x0107
     5ba:	30 91 08 01 	lds	r19, 0x0108
     5be:	c2 17       	cp	r28, r18
     5c0:	d3 07       	cpc	r29, r19
     5c2:	24 f0       	brlt	.+8      	; 0x5cc <drive_forward_left+0xe8>
     5c4:	10 92 22 01 	sts	0x0122, r1
     5c8:	10 92 21 01 	sts	0x0121, r1
     5cc:	20 91 41 01 	lds	r18, 0x0141
     5d0:	30 91 42 01 	lds	r19, 0x0142
     5d4:	44 27       	eor	r20, r20
     5d6:	55 27       	eor	r21, r21
     5d8:	42 1b       	sub	r20, r18
     5da:	53 0b       	sbc	r21, r19
     5dc:	4e 17       	cp	r20, r30
     5de:	5f 07       	cpc	r21, r31
     5e0:	4c f4       	brge	.+18     	; 0x5f4 <drive_forward_left+0x110>
     5e2:	e0 91 3f 01 	lds	r30, 0x013F
     5e6:	f0 91 40 01 	lds	r31, 0x0140
     5ea:	ab 01       	movw	r20, r22
     5ec:	e6 17       	cp	r30, r22
     5ee:	f7 07       	cpc	r31, r23
     5f0:	0c f4       	brge	.+2      	; 0x5f4 <drive_forward_left+0x110>
     5f2:	af 01       	movw	r20, r30
     5f4:	14 16       	cp	r1, r20
     5f6:	15 06       	cpc	r1, r21
     5f8:	4c f0       	brlt	.+18     	; 0x60c <drive_forward_left+0x128>
     5fa:	90 91 3f 01 	lds	r25, 0x013F
     5fe:	98 bd       	out	0x28, r25	; 40
     600:	90 91 41 01 	lds	r25, 0x0141
     604:	89 2f       	mov	r24, r25
     606:	84 0f       	add	r24, r20
     608:	87 bd       	out	0x27, r24	; 39
     60a:	06 c0       	rjmp	.+12     	; 0x618 <drive_forward_left+0x134>
     60c:	27 bd       	out	0x27, r18	; 39
     60e:	90 91 3f 01 	lds	r25, 0x013F
     612:	89 2f       	mov	r24, r25
     614:	84 1b       	sub	r24, r20
     616:	88 bd       	out	0x28, r24	; 40
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	1f 91       	pop	r17
     61e:	0f 91       	pop	r16
     620:	ff 90       	pop	r15
     622:	ef 90       	pop	r14
     624:	bf 90       	pop	r11
     626:	af 90       	pop	r10
     628:	9f 90       	pop	r9
     62a:	8f 90       	pop	r8
     62c:	7f 90       	pop	r7
     62e:	6f 90       	pop	r6
     630:	5f 90       	pop	r5
     632:	4f 90       	pop	r4
     634:	08 95       	ret

00000636 <drive_forward>:
     636:	2e 98       	cbi	0x05, 6	; 5
     638:	2d 98       	cbi	0x05, 5	; 5
     63a:	80 91 41 01 	lds	r24, 0x0141
     63e:	87 bd       	out	0x27, r24	; 39
     640:	80 91 3f 01 	lds	r24, 0x013F
     644:	88 bd       	out	0x28, r24	; 40
     646:	08 95       	ret

00000648 <stand_still>:
     648:	2e 98       	cbi	0x05, 6	; 5
     64a:	2d 98       	cbi	0x05, 5	; 5
     64c:	17 bc       	out	0x27, r1	; 39
     64e:	18 bc       	out	0x28, r1	; 40
     650:	08 95       	ret

00000652 <initengine>:
     652:	84 b5       	in	r24, 0x24	; 36
     654:	83 6a       	ori	r24, 0xA3	; 163
     656:	84 bd       	out	0x24, r24	; 36
     658:	17 bc       	out	0x27, r1	; 39
     65a:	18 bc       	out	0x28, r1	; 40
     65c:	85 b5       	in	r24, 0x25	; 37
     65e:	83 60       	ori	r24, 0x03	; 3
     660:	85 bd       	out	0x25, r24	; 37
     662:	88 e7       	ldi	r24, 0x78	; 120
     664:	84 b9       	out	0x04, r24	; 4
     666:	85 b1       	in	r24, 0x05	; 5
     668:	15 b8       	out	0x05, r1	; 5
     66a:	08 95       	ret

0000066c <timerinit>:
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	8a b9       	out	0x0a, r24	; 10
     670:	e1 e8       	ldi	r30, 0x81	; 129
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	8d 60       	ori	r24, 0x0D	; 13
     678:	80 83       	st	Z, r24
     67a:	80 ea       	ldi	r24, 0xA0	; 160
     67c:	95 e0       	ldi	r25, 0x05	; 5
     67e:	90 93 89 00 	sts	0x0089, r25
     682:	80 93 88 00 	sts	0x0088, r24
     686:	ef e6       	ldi	r30, 0x6F	; 111
     688:	f0 e0       	ldi	r31, 0x00	; 0
     68a:	80 81       	ld	r24, Z
     68c:	82 60       	ori	r24, 0x02	; 2
     68e:	80 83       	st	Z, r24
     690:	b1 9a       	sbi	0x16, 1	; 22
     692:	08 95       	ret

00000694 <__vector_13>:
     694:	1f 92       	push	r1
     696:	0f 92       	push	r0
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	0f 92       	push	r0
     69c:	11 24       	eor	r1, r1
     69e:	8f 93       	push	r24
     6a0:	9f 93       	push	r25
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 32 01 	sts	0x0132, r24
     6a8:	80 91 39 01 	lds	r24, 0x0139
     6ac:	90 91 3a 01 	lds	r25, 0x013A
     6b0:	01 96       	adiw	r24, 0x01	; 1
     6b2:	82 33       	cpi	r24, 0x32	; 50
     6b4:	91 05       	cpc	r25, r1
     6b6:	2c f4       	brge	.+10     	; 0x6c2 <__vector_13+0x2e>
     6b8:	90 93 3a 01 	sts	0x013A, r25
     6bc:	80 93 39 01 	sts	0x0139, r24
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <__vector_13+0x3a>
     6c2:	82 e3       	ldi	r24, 0x32	; 50
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	90 93 3a 01 	sts	0x013A, r25
     6ca:	80 93 39 01 	sts	0x0139, r24
     6ce:	80 91 3b 01 	lds	r24, 0x013B
     6d2:	90 91 3c 01 	lds	r25, 0x013C
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	82 33       	cpi	r24, 0x32	; 50
     6da:	91 05       	cpc	r25, r1
     6dc:	2c f4       	brge	.+10     	; 0x6e8 <__vector_13+0x54>
     6de:	90 93 3c 01 	sts	0x013C, r25
     6e2:	80 93 3b 01 	sts	0x013B, r24
     6e6:	06 c0       	rjmp	.+12     	; 0x6f4 <__vector_13+0x60>
     6e8:	82 e3       	ldi	r24, 0x32	; 50
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 93 3c 01 	sts	0x013C, r25
     6f0:	80 93 3b 01 	sts	0x013B, r24
     6f4:	80 91 37 01 	lds	r24, 0x0137
     6f8:	90 91 38 01 	lds	r25, 0x0138
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	82 33       	cpi	r24, 0x32	; 50
     700:	91 05       	cpc	r25, r1
     702:	2c f4       	brge	.+10     	; 0x70e <__vector_13+0x7a>
     704:	90 93 38 01 	sts	0x0138, r25
     708:	80 93 37 01 	sts	0x0137, r24
     70c:	06 c0       	rjmp	.+12     	; 0x71a <__vector_13+0x86>
     70e:	82 e3       	ldi	r24, 0x32	; 50
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	90 93 38 01 	sts	0x0138, r25
     716:	80 93 37 01 	sts	0x0137, r24
     71a:	80 91 3d 01 	lds	r24, 0x013D
     71e:	90 91 3e 01 	lds	r25, 0x013E
     722:	01 96       	adiw	r24, 0x01	; 1
     724:	90 93 3e 01 	sts	0x013E, r25
     728:	80 93 3d 01 	sts	0x013D, r24
     72c:	9f 91       	pop	r25
     72e:	8f 91       	pop	r24
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <interrupt_init>:
     73a:	8d b3       	in	r24, 0x1d	; 29
     73c:	86 60       	ori	r24, 0x06	; 6
     73e:	8d bb       	out	0x1d, r24	; 29
     740:	e9 e6       	ldi	r30, 0x69	; 105
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	88 62       	ori	r24, 0x28	; 40
     748:	80 83       	st	Z, r24
     74a:	08 95       	ret

0000074c <__vector_2>:
     74c:	1f 92       	push	r1
     74e:	0f 92       	push	r0
     750:	0f b6       	in	r0, 0x3f	; 63
     752:	0f 92       	push	r0
     754:	11 24       	eor	r1, r1
     756:	8f 93       	push	r24
     758:	9f 93       	push	r25
     75a:	80 91 45 01 	lds	r24, 0x0145
     75e:	90 91 46 01 	lds	r25, 0x0146
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	39 f4       	brne	.+14     	; 0x774 <__vector_2+0x28>
     766:	10 92 46 01 	sts	0x0146, r1
     76a:	10 92 45 01 	sts	0x0145, r1
     76e:	59 9a       	sbi	0x0b, 1	; 11
     770:	58 98       	cbi	0x0b, 0	; 11
     772:	0c c0       	rjmp	.+24     	; 0x78c <__vector_2+0x40>
     774:	10 92 44 01 	sts	0x0144, r1
     778:	10 92 43 01 	sts	0x0143, r1
     77c:	81 e0       	ldi	r24, 0x01	; 1
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	90 93 46 01 	sts	0x0146, r25
     784:	80 93 45 01 	sts	0x0145, r24
     788:	58 9a       	sbi	0x0b, 0	; 11
     78a:	59 98       	cbi	0x0b, 1	; 11
     78c:	e1 9a       	sbi	0x1c, 1	; 28
     78e:	9f 91       	pop	r25
     790:	8f 91       	pop	r24
     792:	0f 90       	pop	r0
     794:	0f be       	out	0x3f, r0	; 63
     796:	0f 90       	pop	r0
     798:	1f 90       	pop	r1
     79a:	18 95       	reti

0000079c <__vector_3>:
     79c:	1f 92       	push	r1
     79e:	0f 92       	push	r0
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	0f 92       	push	r0
     7a4:	11 24       	eor	r1, r1
     7a6:	8f 93       	push	r24
     7a8:	9f 93       	push	r25
     7aa:	80 91 43 01 	lds	r24, 0x0143
     7ae:	90 91 44 01 	lds	r25, 0x0144
     7b2:	89 2b       	or	r24, r25
     7b4:	39 f4       	brne	.+14     	; 0x7c4 <__vector_3+0x28>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	90 93 44 01 	sts	0x0144, r25
     7be:	80 93 43 01 	sts	0x0143, r24
     7c2:	04 c0       	rjmp	.+8      	; 0x7cc <__vector_3+0x30>
     7c4:	10 92 44 01 	sts	0x0144, r1
     7c8:	10 92 43 01 	sts	0x0143, r1
     7cc:	e2 9a       	sbi	0x1c, 2	; 28
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	0f 90       	pop	r0
     7d4:	0f be       	out	0x3f, r0	; 63
     7d6:	0f 90       	pop	r0
     7d8:	1f 90       	pop	r1
     7da:	18 95       	reti

000007dc <i2c_setup>:
     7dc:	88 23       	and	r24, r24
     7de:	69 f0       	breq	.+26     	; 0x7fa <i2c_setup+0x1e>
     7e0:	3e 98       	cbi	0x07, 6	; 7
     7e2:	3f 98       	cbi	0x07, 7	; 7
     7e4:	e8 9a       	sbi	0x1d, 0	; 29
     7e6:	e9 e6       	ldi	r30, 0x69	; 105
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	83 60       	ori	r24, 0x03	; 3
     7ee:	80 83       	st	Z, r24
     7f0:	80 e1       	ldi	r24, 0x10	; 16
     7f2:	80 93 b8 00 	sts	0x00B8, r24
     7f6:	10 92 b9 00 	sts	0x00B9, r1
     7fa:	08 95       	ret

000007fc <i2c_send>:
     7fc:	8f 92       	push	r8
     7fe:	9f 92       	push	r9
     800:	af 92       	push	r10
     802:	bf 92       	push	r11
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	eb 01       	movw	r28, r22
     816:	08 81       	ld	r16, Y
     818:	02 95       	swap	r16
     81a:	0f 70       	andi	r16, 0x0F	; 15
     81c:	10 e0       	ldi	r17, 0x00	; 0
     81e:	4b 01       	movw	r8, r22
     820:	68 94       	set
     822:	ee 24       	eor	r14, r14
     824:	e3 f8       	bld	r14, 3
     826:	f1 2c       	mov	r15, r1
     828:	40 e0       	ldi	r20, 0x00	; 0
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	ec eb       	ldi	r30, 0xBC	; 188
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	0f 2e       	mov	r0, r31
     832:	f4 ea       	ldi	r31, 0xA4	; 164
     834:	df 2e       	mov	r13, r31
     836:	f0 2d       	mov	r31, r0
     838:	a9 eb       	ldi	r26, 0xB9	; 185
     83a:	b0 e0       	ldi	r27, 0x00	; 0
     83c:	8e 7f       	andi	r24, 0xFE	; 254
     83e:	c8 2e       	mov	r12, r24
     840:	6b eb       	ldi	r22, 0xBB	; 187
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	84 e8       	ldi	r24, 0x84	; 132
     846:	68 94       	set
     848:	aa 24       	eor	r10, r10
     84a:	a4 f8       	bld	r10, 4
     84c:	b1 2c       	mov	r11, r1
     84e:	d0 82       	st	Z, r13
     850:	90 81       	ld	r25, Z
     852:	99 23       	and	r25, r25
     854:	ec f7       	brge	.-6      	; 0x850 <i2c_send+0x54>
     856:	2c 91       	ld	r18, X
     858:	28 7f       	andi	r18, 0xF8	; 248
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	2e 15       	cp	r18, r14
     85e:	3f 05       	cpc	r19, r15
     860:	69 f5       	brne	.+90     	; 0x8bc <i2c_send+0xc0>
     862:	eb 01       	movw	r28, r22
     864:	c8 82       	st	Y, r12
     866:	80 83       	st	Z, r24
     868:	90 81       	ld	r25, Z
     86a:	99 23       	and	r25, r25
     86c:	ec f7       	brge	.-6      	; 0x868 <i2c_send+0x6c>
     86e:	9c 91       	ld	r25, X
     870:	98 7f       	andi	r25, 0xF8	; 248
     872:	98 31       	cpi	r25, 0x18	; 24
     874:	29 f0       	breq	.+10     	; 0x880 <i2c_send+0x84>
     876:	84 e9       	ldi	r24, 0x94	; 148
     878:	80 93 bc 00 	sts	0x00BC, r24
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	1f c0       	rjmp	.+62     	; 0x8be <i2c_send+0xc2>
     880:	e4 01       	movw	r28, r8
     882:	99 91       	ld	r25, Y+
     884:	4e 01       	movw	r8, r28
     886:	eb 01       	movw	r28, r22
     888:	98 83       	st	Y, r25
     88a:	80 83       	st	Z, r24
     88c:	90 81       	ld	r25, Z
     88e:	99 23       	and	r25, r25
     890:	ec f7       	brge	.-6      	; 0x88c <i2c_send+0x90>
     892:	9c 91       	ld	r25, X
     894:	98 7f       	andi	r25, 0xF8	; 248
     896:	98 32       	cpi	r25, 0x28	; 40
     898:	29 f0       	breq	.+10     	; 0x8a4 <i2c_send+0xa8>
     89a:	84 e9       	ldi	r24, 0x94	; 148
     89c:	80 93 bc 00 	sts	0x00BC, r24
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	0d c0       	rjmp	.+26     	; 0x8be <i2c_send+0xc2>
     8a4:	4f 5f       	subi	r20, 0xFF	; 255
     8a6:	5f 4f       	sbci	r21, 0xFF	; 255
     8a8:	ea 2c       	mov	r14, r10
     8aa:	fb 2c       	mov	r15, r11
     8ac:	04 17       	cp	r16, r20
     8ae:	15 07       	cpc	r17, r21
     8b0:	74 f6       	brge	.-100    	; 0x84e <i2c_send+0x52>
     8b2:	84 e9       	ldi	r24, 0x94	; 148
     8b4:	80 93 bc 00 	sts	0x00BC, r24
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	01 c0       	rjmp	.+2      	; 0x8be <i2c_send+0xc2>
     8bc:	80 e0       	ldi	r24, 0x00	; 0
     8be:	df 91       	pop	r29
     8c0:	cf 91       	pop	r28
     8c2:	1f 91       	pop	r17
     8c4:	0f 91       	pop	r16
     8c6:	ff 90       	pop	r15
     8c8:	ef 90       	pop	r14
     8ca:	df 90       	pop	r13
     8cc:	cf 90       	pop	r12
     8ce:	bf 90       	pop	r11
     8d0:	af 90       	pop	r10
     8d2:	9f 90       	pop	r9
     8d4:	8f 90       	pop	r8
     8d6:	08 95       	ret

000008d8 <req_gyro_turn>:
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
     8dc:	1f 92       	push	r1
     8de:	cd b7       	in	r28, 0x3d	; 61
     8e0:	de b7       	in	r29, 0x3e	; 62
     8e2:	87 e0       	ldi	r24, 0x07	; 7
     8e4:	89 83       	std	Y+1, r24	; 0x01
     8e6:	be 01       	movw	r22, r28
     8e8:	6f 5f       	subi	r22, 0xFF	; 255
     8ea:	7f 4f       	sbci	r23, 0xFF	; 255
     8ec:	86 e0       	ldi	r24, 0x06	; 6
     8ee:	86 df       	rcall	.-244    	; 0x7fc <i2c_send>
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 31 01 	sts	0x0131, r24
     8f6:	87 ea       	ldi	r24, 0xA7	; 167
     8f8:	91 e6       	ldi	r25, 0x61	; 97
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	f1 f7       	brne	.-4      	; 0x8fa <req_gyro_turn+0x22>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <req_gyro_turn+0x28>
     900:	00 00       	nop
     902:	0f 90       	pop	r0
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <manual_drive>:
     90a:	20 91 29 01 	lds	r18, 0x0129
     90e:	30 91 2a 01 	lds	r19, 0x012A
     912:	21 30       	cpi	r18, 0x01	; 1
     914:	31 05       	cpc	r19, r1
     916:	59 f4       	brne	.+22     	; 0x92e <manual_drive+0x24>
     918:	86 e0       	ldi	r24, 0x06	; 6
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 2c 01 	sts	0x012C, r25
     920:	80 93 2b 01 	sts	0x012B, r24
     924:	80 91 49 01 	lds	r24, 0x0149
     928:	81 11       	cpse	r24, r1
     92a:	8b c0       	rjmp	.+278    	; 0xa42 <manual_drive+0x138>
     92c:	08 95       	ret
     92e:	80 91 27 01 	lds	r24, 0x0127
     932:	90 91 28 01 	lds	r25, 0x0128
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	71 f4       	brne	.+28     	; 0x956 <manual_drive+0x4c>
     93a:	85 e0       	ldi	r24, 0x05	; 5
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	90 93 2c 01 	sts	0x012C, r25
     942:	80 93 2b 01 	sts	0x012B, r24
     946:	80 91 27 01 	lds	r24, 0x0127
     94a:	90 91 28 01 	lds	r25, 0x0128
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	09 f0       	breq	.+2      	; 0x954 <manual_drive+0x4a>
     952:	59 c0       	rjmp	.+178    	; 0xa06 <manual_drive+0xfc>
     954:	4f c0       	rjmp	.+158    	; 0x9f4 <manual_drive+0xea>
     956:	80 91 2b 01 	lds	r24, 0x012B
     95a:	90 91 2c 01 	lds	r25, 0x012C
     95e:	00 97       	sbiw	r24, 0x00	; 0
     960:	29 f4       	brne	.+10     	; 0x96c <manual_drive+0x62>
     962:	2e 98       	cbi	0x05, 6	; 5
     964:	2d 98       	cbi	0x05, 5	; 5
     966:	17 bc       	out	0x27, r1	; 39
     968:	18 bc       	out	0x28, r1	; 40
     96a:	08 95       	ret
     96c:	81 30       	cpi	r24, 0x01	; 1
     96e:	91 05       	cpc	r25, r1
     970:	49 f4       	brne	.+18     	; 0x984 <manual_drive+0x7a>
     972:	2e 98       	cbi	0x05, 6	; 5
     974:	2d 98       	cbi	0x05, 5	; 5
     976:	80 91 41 01 	lds	r24, 0x0141
     97a:	87 bd       	out	0x27, r24	; 39
     97c:	80 91 3f 01 	lds	r24, 0x013F
     980:	88 bd       	out	0x28, r24	; 40
     982:	08 95       	ret
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	91 05       	cpc	r25, r1
     988:	59 f4       	brne	.+22     	; 0x9a0 <manual_drive+0x96>
     98a:	85 b1       	in	r24, 0x05	; 5
     98c:	80 66       	ori	r24, 0x60	; 96
     98e:	85 b9       	out	0x05, r24	; 5
     990:	80 91 41 01 	lds	r24, 0x0141
     994:	8d 50       	subi	r24, 0x0D	; 13
     996:	87 bd       	out	0x27, r24	; 39
     998:	80 91 3f 01 	lds	r24, 0x013F
     99c:	88 bd       	out	0x28, r24	; 40
     99e:	08 95       	ret
     9a0:	83 30       	cpi	r24, 0x03	; 3
     9a2:	91 05       	cpc	r25, r1
     9a4:	81 f4       	brne	.+32     	; 0x9c6 <manual_drive+0xbc>
     9a6:	2e 98       	cbi	0x05, 6	; 5
     9a8:	2d 98       	cbi	0x05, 5	; 5
     9aa:	80 91 41 01 	lds	r24, 0x0141
     9ae:	87 bd       	out	0x27, r24	; 39
     9b0:	20 91 3f 01 	lds	r18, 0x013F
     9b4:	90 91 40 01 	lds	r25, 0x0140
     9b8:	82 2f       	mov	r24, r18
     9ba:	63 e0       	ldi	r22, 0x03	; 3
     9bc:	70 e0       	ldi	r23, 0x00	; 0
     9be:	74 d6       	rcall	.+3304   	; 0x16a8 <__divmodhi4>
     9c0:	26 1b       	sub	r18, r22
     9c2:	28 bd       	out	0x28, r18	; 40
     9c4:	08 95       	ret
     9c6:	84 30       	cpi	r24, 0x04	; 4
     9c8:	91 05       	cpc	r25, r1
     9ca:	81 f4       	brne	.+32     	; 0x9ec <manual_drive+0xe2>
     9cc:	2e 98       	cbi	0x05, 6	; 5
     9ce:	2d 98       	cbi	0x05, 5	; 5
     9d0:	20 91 41 01 	lds	r18, 0x0141
     9d4:	90 91 42 01 	lds	r25, 0x0142
     9d8:	82 2f       	mov	r24, r18
     9da:	63 e0       	ldi	r22, 0x03	; 3
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	64 d6       	rcall	.+3272   	; 0x16a8 <__divmodhi4>
     9e0:	26 1b       	sub	r18, r22
     9e2:	27 bd       	out	0x27, r18	; 39
     9e4:	80 91 3f 01 	lds	r24, 0x013F
     9e8:	88 bd       	out	0x28, r24	; 40
     9ea:	08 95       	ret
     9ec:	85 30       	cpi	r24, 0x05	; 5
     9ee:	91 05       	cpc	r25, r1
     9f0:	d9 f4       	brne	.+54     	; 0xa28 <manual_drive+0x11e>
     9f2:	37 c0       	rjmp	.+110    	; 0xa62 <manual_drive+0x158>
     9f4:	71 df       	rcall	.-286    	; 0x8d8 <req_gyro_turn>
     9f6:	6c dd       	rcall	.-1320   	; 0x4d0 <turn_right>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	90 93 28 01 	sts	0x0128, r25
     a00:	80 93 27 01 	sts	0x0127, r24
     a04:	08 95       	ret
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	99 f5       	brne	.+102    	; 0xa70 <manual_drive+0x166>
     a0a:	80 91 49 01 	lds	r24, 0x0149
     a0e:	88 23       	and	r24, r24
     a10:	79 f1       	breq	.+94     	; 0xa70 <manual_drive+0x166>
     a12:	10 92 2c 01 	sts	0x012C, r1
     a16:	10 92 2b 01 	sts	0x012B, r1
     a1a:	10 92 28 01 	sts	0x0128, r1
     a1e:	10 92 27 01 	sts	0x0127, r1
     a22:	10 92 49 01 	sts	0x0149, r1
     a26:	08 95       	ret
     a28:	06 97       	sbiw	r24, 0x06	; 6
     a2a:	b1 f4       	brne	.+44     	; 0xa58 <manual_drive+0x14e>
     a2c:	23 2b       	or	r18, r19
     a2e:	01 f5       	brne	.+64     	; 0xa70 <manual_drive+0x166>
     a30:	53 df       	rcall	.-346    	; 0x8d8 <req_gyro_turn>
     a32:	44 dd       	rcall	.-1400   	; 0x4bc <turn_left>
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	90 93 2a 01 	sts	0x012A, r25
     a3c:	80 93 29 01 	sts	0x0129, r24
     a40:	08 95       	ret
     a42:	10 92 2c 01 	sts	0x012C, r1
     a46:	10 92 2b 01 	sts	0x012B, r1
     a4a:	10 92 2a 01 	sts	0x012A, r1
     a4e:	10 92 29 01 	sts	0x0129, r1
     a52:	10 92 49 01 	sts	0x0149, r1
     a56:	08 95       	ret
     a58:	10 92 2c 01 	sts	0x012C, r1
     a5c:	10 92 2b 01 	sts	0x012B, r1
     a60:	08 95       	ret
     a62:	80 91 27 01 	lds	r24, 0x0127
     a66:	90 91 28 01 	lds	r25, 0x0128
     a6a:	89 2b       	or	r24, r25
     a6c:	09 f4       	brne	.+2      	; 0xa70 <manual_drive+0x166>
     a6e:	c2 cf       	rjmp	.-124    	; 0x9f4 <manual_drive+0xea>
     a70:	08 95       	ret

00000a72 <PD_for_lab>:
     a72:	2f 92       	push	r2
     a74:	3f 92       	push	r3
     a76:	4f 92       	push	r4
     a78:	5f 92       	push	r5
     a7a:	6f 92       	push	r6
     a7c:	7f 92       	push	r7
     a7e:	8f 92       	push	r8
     a80:	9f 92       	push	r9
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	cf 92       	push	r12
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	2a 97       	sbiw	r28, 0x0a	; 10
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	4c 01       	movw	r8, r24
     aa8:	3a 01       	movw	r6, r20
     aaa:	e0 90 09 01 	lds	r14, 0x0109
     aae:	f0 90 0a 01 	lds	r15, 0x010A
     ab2:	c7 01       	movw	r24, r14
     ab4:	86 1b       	sub	r24, r22
     ab6:	97 0b       	sbc	r25, r23
     ab8:	9a 87       	std	Y+10, r25	; 0x0a
     aba:	89 87       	std	Y+9, r24	; 0x09
     abc:	40 90 21 01 	lds	r4, 0x0121
     ac0:	50 90 22 01 	lds	r5, 0x0122
     ac4:	a0 90 0d 01 	lds	r10, 0x010D
     ac8:	b0 90 0e 01 	lds	r11, 0x010E
     acc:	60 91 0b 01 	lds	r22, 0x010B
     ad0:	70 91 0c 01 	lds	r23, 0x010C
     ad4:	07 2e       	mov	r0, r23
     ad6:	00 0c       	add	r0, r0
     ad8:	88 0b       	sbc	r24, r24
     ada:	99 0b       	sbc	r25, r25
     adc:	f6 d4       	rcall	.+2540   	; 0x14ca <__floatsisf>
     ade:	69 83       	std	Y+1, r22	; 0x01
     ae0:	7a 83       	std	Y+2, r23	; 0x02
     ae2:	8b 83       	std	Y+3, r24	; 0x03
     ae4:	9c 83       	std	Y+4, r25	; 0x04
     ae6:	e9 85       	ldd	r30, Y+9	; 0x09
     ae8:	fa 85       	ldd	r31, Y+10	; 0x0a
     aea:	ea 9d       	mul	r30, r10
     aec:	b0 01       	movw	r22, r0
     aee:	eb 9d       	mul	r30, r11
     af0:	70 0d       	add	r23, r0
     af2:	fa 9d       	mul	r31, r10
     af4:	70 0d       	add	r23, r0
     af6:	11 24       	eor	r1, r1
     af8:	07 2e       	mov	r0, r23
     afa:	00 0c       	add	r0, r0
     afc:	88 0b       	sbc	r24, r24
     afe:	99 0b       	sbc	r25, r25
     b00:	e4 d4       	rcall	.+2504   	; 0x14ca <__floatsisf>
     b02:	6d 83       	std	Y+5, r22	; 0x05
     b04:	7e 83       	std	Y+6, r23	; 0x06
     b06:	8f 83       	std	Y+7, r24	; 0x07
     b08:	98 87       	std	Y+8, r25	; 0x08
     b0a:	62 01       	movw	r12, r4
     b0c:	cc 0c       	add	r12, r12
     b0e:	dd 1c       	adc	r13, r13
     b10:	86 01       	movw	r16, r12
     b12:	06 5b       	subi	r16, 0xB6	; 182
     b14:	1e 4f       	sbci	r17, 0xFE	; 254
     b16:	f8 01       	movw	r30, r16
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	69 85       	ldd	r22, Y+9	; 0x09
     b1e:	7a 85       	ldd	r23, Y+10	; 0x0a
     b20:	68 1b       	sub	r22, r24
     b22:	79 0b       	sbc	r23, r25
     b24:	07 2e       	mov	r0, r23
     b26:	00 0c       	add	r0, r0
     b28:	88 0b       	sbc	r24, r24
     b2a:	99 0b       	sbc	r25, r25
     b2c:	ce d4       	rcall	.+2460   	; 0x14ca <__floatsisf>
     b2e:	29 81       	ldd	r18, Y+1	; 0x01
     b30:	3a 81       	ldd	r19, Y+2	; 0x02
     b32:	4b 81       	ldd	r20, Y+3	; 0x03
     b34:	5c 81       	ldd	r21, Y+4	; 0x04
     b36:	55 d5       	rcall	.+2730   	; 0x15e2 <__mulsf3>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	6d 81       	ldd	r22, Y+5	; 0x05
     b3e:	7e 81       	ldd	r23, Y+6	; 0x06
     b40:	8f 81       	ldd	r24, Y+7	; 0x07
     b42:	98 85       	ldd	r25, Y+8	; 0x08
     b44:	c3 d3       	rcall	.+1926   	; 0x12cc <__addsf3>
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e2       	ldi	r20, 0x20	; 32
     b4c:	51 e4       	ldi	r21, 0x41	; 65
     b4e:	22 d4       	rcall	.+2116   	; 0x1394 <__divsf3>
     b50:	89 d4       	rcall	.+2322   	; 0x1464 <__fixsfsi>
     b52:	1b 01       	movw	r2, r22
     b54:	70 93 7f 01 	sts	0x017F, r23
     b58:	60 93 7e 01 	sts	0x017E, r22
     b5c:	89 85       	ldd	r24, Y+9	; 0x09
     b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b60:	f8 01       	movw	r30, r16
     b62:	91 83       	std	Z+1, r25	; 0x01
     b64:	80 83       	st	Z, r24
     b66:	f7 01       	movw	r30, r14
     b68:	e8 19       	sub	r30, r8
     b6a:	f9 09       	sbc	r31, r9
     b6c:	fe 83       	std	Y+6, r31	; 0x06
     b6e:	ed 83       	std	Y+5, r30	; 0x05
     b70:	f0 93 6f 01 	sts	0x016F, r31
     b74:	e0 93 6e 01 	sts	0x016E, r30
     b78:	86 01       	movw	r16, r12
     b7a:	0e 58       	subi	r16, 0x8E	; 142
     b7c:	1e 4f       	sbci	r17, 0xFE	; 254
     b7e:	f8 01       	movw	r30, r16
     b80:	80 81       	ld	r24, Z
     b82:	91 81       	ldd	r25, Z+1	; 0x01
     b84:	6d 81       	ldd	r22, Y+5	; 0x05
     b86:	7e 81       	ldd	r23, Y+6	; 0x06
     b88:	68 1b       	sub	r22, r24
     b8a:	79 0b       	sbc	r23, r25
     b8c:	07 2e       	mov	r0, r23
     b8e:	00 0c       	add	r0, r0
     b90:	88 0b       	sbc	r24, r24
     b92:	99 0b       	sbc	r25, r25
     b94:	9a d4       	rcall	.+2356   	; 0x14ca <__floatsisf>
     b96:	6b 01       	movw	r12, r22
     b98:	7c 01       	movw	r14, r24
     b9a:	60 93 23 01 	sts	0x0123, r22
     b9e:	70 93 24 01 	sts	0x0124, r23
     ba2:	80 93 25 01 	sts	0x0125, r24
     ba6:	90 93 26 01 	sts	0x0126, r25
     baa:	8d 81       	ldd	r24, Y+5	; 0x05
     bac:	9e 81       	ldd	r25, Y+6	; 0x06
     bae:	a8 9e       	mul	r10, r24
     bb0:	b0 01       	movw	r22, r0
     bb2:	a9 9e       	mul	r10, r25
     bb4:	70 0d       	add	r23, r0
     bb6:	b8 9e       	mul	r11, r24
     bb8:	70 0d       	add	r23, r0
     bba:	11 24       	eor	r1, r1
     bbc:	07 2e       	mov	r0, r23
     bbe:	00 0c       	add	r0, r0
     bc0:	88 0b       	sbc	r24, r24
     bc2:	99 0b       	sbc	r25, r25
     bc4:	82 d4       	rcall	.+2308   	; 0x14ca <__floatsisf>
     bc6:	4b 01       	movw	r8, r22
     bc8:	5c 01       	movw	r10, r24
     bca:	a7 01       	movw	r20, r14
     bcc:	96 01       	movw	r18, r12
     bce:	69 81       	ldd	r22, Y+1	; 0x01
     bd0:	7a 81       	ldd	r23, Y+2	; 0x02
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	05 d5       	rcall	.+2570   	; 0x15e2 <__mulsf3>
     bd8:	9b 01       	movw	r18, r22
     bda:	ac 01       	movw	r20, r24
     bdc:	c5 01       	movw	r24, r10
     bde:	b4 01       	movw	r22, r8
     be0:	75 d3       	rcall	.+1770   	; 0x12cc <__addsf3>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	d4 d3       	rcall	.+1960   	; 0x1394 <__divsf3>
     bec:	3b d4       	rcall	.+2166   	; 0x1464 <__fixsfsi>
     bee:	9b 01       	movw	r18, r22
     bf0:	70 93 66 01 	sts	0x0166, r23
     bf4:	60 93 65 01 	sts	0x0165, r22
     bf8:	8d 81       	ldd	r24, Y+5	; 0x05
     bfa:	9e 81       	ldd	r25, Y+6	; 0x06
     bfc:	f8 01       	movw	r30, r16
     bfe:	91 83       	std	Z+1, r25	; 0x01
     c00:	80 83       	st	Z, r24
     c02:	c2 01       	movw	r24, r4
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	90 93 22 01 	sts	0x0122, r25
     c0a:	80 93 21 01 	sts	0x0121, r24
     c0e:	40 91 07 01 	lds	r20, 0x0107
     c12:	50 91 08 01 	lds	r21, 0x0108
     c16:	84 17       	cp	r24, r20
     c18:	95 07       	cpc	r25, r21
     c1a:	24 f0       	brlt	.+8      	; 0xc24 <PD_for_lab+0x1b2>
     c1c:	10 92 22 01 	sts	0x0122, r1
     c20:	10 92 21 01 	sts	0x0121, r1
     c24:	33 23       	and	r19, r19
     c26:	2c f0       	brlt	.+10     	; 0xc32 <PD_for_lab+0x1c0>
     c28:	10 92 66 01 	sts	0x0166, r1
     c2c:	10 92 65 01 	sts	0x0165, r1
     c30:	11 c0       	rjmp	.+34     	; 0xc54 <PD_for_lab+0x1e2>
     c32:	87 b5       	in	r24, 0x27	; 39
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	91 95       	neg	r25
     c38:	81 95       	neg	r24
     c3a:	91 09       	sbc	r25, r1
     c3c:	82 17       	cp	r24, r18
     c3e:	93 07       	cpc	r25, r19
     c40:	4c f0       	brlt	.+18     	; 0xc54 <PD_for_lab+0x1e2>
     c42:	87 b5       	in	r24, 0x27	; 39
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	91 95       	neg	r25
     c48:	81 95       	neg	r24
     c4a:	91 09       	sbc	r25, r1
     c4c:	90 93 66 01 	sts	0x0166, r25
     c50:	80 93 65 01 	sts	0x0165, r24
     c54:	33 20       	and	r3, r3
     c56:	2c f0       	brlt	.+10     	; 0xc62 <PD_for_lab+0x1f0>
     c58:	10 92 7f 01 	sts	0x017F, r1
     c5c:	10 92 7e 01 	sts	0x017E, r1
     c60:	11 c0       	rjmp	.+34     	; 0xc84 <PD_for_lab+0x212>
     c62:	88 b5       	in	r24, 0x28	; 40
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	91 95       	neg	r25
     c68:	81 95       	neg	r24
     c6a:	91 09       	sbc	r25, r1
     c6c:	82 15       	cp	r24, r2
     c6e:	93 05       	cpc	r25, r3
     c70:	4c f0       	brlt	.+18     	; 0xc84 <PD_for_lab+0x212>
     c72:	88 b5       	in	r24, 0x28	; 40
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	91 95       	neg	r25
     c78:	81 95       	neg	r24
     c7a:	91 09       	sbc	r25, r1
     c7c:	90 93 7f 01 	sts	0x017F, r25
     c80:	80 93 7e 01 	sts	0x017E, r24
     c84:	90 e2       	ldi	r25, 0x20	; 32
     c86:	69 16       	cp	r6, r25
     c88:	71 04       	cpc	r7, r1
     c8a:	1c f4       	brge	.+6      	; 0xc92 <PD_for_lab+0x220>
     c8c:	25 de       	rcall	.-950    	; 0x8d8 <req_gyro_turn>
     c8e:	20 dc       	rcall	.-1984   	; 0x4d0 <turn_right>
     c90:	0c c0       	rjmp	.+24     	; 0xcaa <PD_for_lab+0x238>
     c92:	90 91 65 01 	lds	r25, 0x0165
     c96:	80 91 41 01 	lds	r24, 0x0141
     c9a:	89 0f       	add	r24, r25
     c9c:	87 bd       	out	0x27, r24	; 39
     c9e:	90 91 7e 01 	lds	r25, 0x017E
     ca2:	80 91 3f 01 	lds	r24, 0x013F
     ca6:	89 0f       	add	r24, r25
     ca8:	88 bd       	out	0x28, r24	; 40
     caa:	2a 96       	adiw	r28, 0x0a	; 10
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	bf 90       	pop	r11
     cc8:	af 90       	pop	r10
     cca:	9f 90       	pop	r9
     ccc:	8f 90       	pop	r8
     cce:	7f 90       	pop	r7
     cd0:	6f 90       	pop	r6
     cd2:	5f 90       	pop	r5
     cd4:	4f 90       	pop	r4
     cd6:	3f 90       	pop	r3
     cd8:	2f 90       	pop	r2
     cda:	08 95       	ret

00000cdc <oneway_turn_lab>:
     cdc:	fc 01       	movw	r30, r24
     cde:	90 91 1f 01 	lds	r25, 0x011F
     ce2:	91 11       	cpse	r25, r1
     ce4:	12 c0       	rjmp	.+36     	; 0xd0a <oneway_turn_lab+0x2e>
     ce6:	80 91 04 01 	lds	r24, 0x0104
     cea:	90 91 05 01 	lds	r25, 0x0105
     cee:	84 17       	cp	r24, r20
     cf0:	95 07       	cpc	r25, r21
     cf2:	24 f4       	brge	.+8      	; 0xcfc <oneway_turn_lab+0x20>
     cf4:	a0 dc       	rcall	.-1728   	; 0x636 <drive_forward>
     cf6:	10 92 1e 01 	sts	0x011E, r1
     cfa:	08 95       	ret
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	80 93 1f 01 	sts	0x011F, r24
     d02:	80 93 20 01 	sts	0x0120, r24
     d06:	a0 cc       	rjmp	.-1728   	; 0x648 <stand_still>
     d08:	08 95       	ret
     d0a:	80 91 20 01 	lds	r24, 0x0120
     d0e:	88 23       	and	r24, r24
     d10:	71 f0       	breq	.+28     	; 0xd2e <oneway_turn_lab+0x52>
     d12:	2e 17       	cp	r18, r30
     d14:	3f 07       	cpc	r19, r31
     d16:	1c f4       	brge	.+6      	; 0xd1e <oneway_turn_lab+0x42>
     d18:	df dd       	rcall	.-1090   	; 0x8d8 <req_gyro_turn>
     d1a:	d0 db       	rcall	.-2144   	; 0x4bc <turn_left>
     d1c:	05 c0       	rjmp	.+10     	; 0xd28 <oneway_turn_lab+0x4c>
     d1e:	26 17       	cp	r18, r22
     d20:	37 07       	cpc	r19, r23
     d22:	14 f4       	brge	.+4      	; 0xd28 <oneway_turn_lab+0x4c>
     d24:	d9 dd       	rcall	.-1102   	; 0x8d8 <req_gyro_turn>
     d26:	d4 db       	rcall	.-2136   	; 0x4d0 <turn_right>
     d28:	10 92 20 01 	sts	0x0120, r1
     d2c:	08 95       	ret
     d2e:	80 91 1e 01 	lds	r24, 0x011E
     d32:	81 11       	cpse	r24, r1
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <oneway_turn_lab+0x64>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 93 1e 01 	sts	0x011E, r24
     d3c:	7c cc       	rjmp	.-1800   	; 0x636 <drive_forward>
     d3e:	08 95       	ret
     d40:	7f 97       	sbiw	r30, 0x1f	; 31
     d42:	3c f4       	brge	.+14     	; 0xd52 <oneway_turn_lab+0x76>
     d44:	6f 31       	cpi	r22, 0x1F	; 31
     d46:	71 05       	cpc	r23, r1
     d48:	24 f4       	brge	.+8      	; 0xd52 <oneway_turn_lab+0x76>
     d4a:	10 92 1c 01 	sts	0x011C, r1
     d4e:	10 92 1f 01 	sts	0x011F, r1
     d52:	08 95       	ret

00000d54 <twoway_turn_right_lab>:
	}
}


//INTE KLAR + måste testas
void twoway_turn_right_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
     d54:	dc 01       	movw	r26, r24
	
	if(first_time){    //---kör fram i korsningen för att prepa sväng
     d56:	90 91 06 01 	lds	r25, 0x0106
     d5a:	99 23       	and	r25, r25
     d5c:	51 f0       	breq	.+20     	; 0xd72 <twoway_turn_right_lab+0x1e>
		drive_forward();
     d5e:	6b dc       	rcall	.-1834   	; 0x636 <drive_forward>
		turn_done = false;
     d60:	10 92 1e 01 	sts	0x011E, r1
		first_time = false;
     d64:	10 92 06 01 	sts	0x0106, r1
		count_waypoint = 0;
     d68:	10 92 3e 01 	sts	0x013E, r1
     d6c:	10 92 3d 01 	sts	0x013D, r1
     d70:	08 95       	ret
	}
	else if(!ongoing_turn && ++count_waypoint <=1){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
     d72:	90 91 1f 01 	lds	r25, 0x011F
     d76:	91 11       	cpse	r25, r1
     d78:	12 c0       	rjmp	.+36     	; 0xd9e <twoway_turn_right_lab+0x4a>
     d7a:	e0 91 3d 01 	lds	r30, 0x013D
     d7e:	f0 91 3e 01 	lds	r31, 0x013E
     d82:	31 96       	adiw	r30, 0x01	; 1
     d84:	f0 93 3e 01 	sts	0x013E, r31
     d88:	e0 93 3d 01 	sts	0x013D, r30
     d8c:	32 97       	sbiw	r30, 0x02	; 2
     d8e:	3c f4       	brge	.+14     	; 0xd9e <twoway_turn_right_lab+0x4a>
		ongoing_turn = true;
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 1f 01 	sts	0x011F, r24
		start_turn = true;
     d96:	80 93 20 01 	sts	0x0120, r24
		stand_still();
     d9a:	56 cc       	rjmp	.-1876   	; 0x648 <stand_still>
     d9c:	08 95       	ret
	}
	
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
     d9e:	80 91 20 01 	lds	r24, 0x0120
     da2:	88 23       	and	r24, r24
     da4:	89 f0       	breq	.+34     	; 0xdc8 <twoway_turn_right_lab+0x74>
		
		if(RGB_data!=1){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
     da6:	80 91 70 01 	lds	r24, 0x0170
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	41 f0       	breq	.+16     	; 0xdbe <twoway_turn_right_lab+0x6a>
			drive_forward_left(distance_left);
     dae:	cd 01       	movw	r24, r26
     db0:	99 db       	rcall	.-2254   	; 0x4e4 <drive_forward_left>
			turn_done = true;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	80 93 1e 01 	sts	0x011E, r24
			regler_against_wall = true;
     db8:	80 93 1d 01 	sts	0x011D, r24
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <twoway_turn_right_lab+0x6e>
		}
		else {						//RGB säger att roboten ska svänga höger så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
     dbe:	8c dd       	rcall	.-1256   	; 0x8d8 <req_gyro_turn>
			turn_right();
     dc0:	87 db       	rcall	.-2290   	; 0x4d0 <turn_right>
		}
		
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
     dc2:	10 92 20 01 	sts	0x0120, r1
     dc6:	08 95       	ret
	}
	
	else if(RGB_data != 1 && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
     dc8:	80 91 70 01 	lds	r24, 0x0170
     dcc:	81 30       	cpi	r24, 0x01	; 1
     dce:	81 f0       	breq	.+32     	; 0xdf0 <twoway_turn_right_lab+0x9c>
     dd0:	a2 17       	cp	r26, r18
     dd2:	b3 07       	cpc	r27, r19
     dd4:	6c f4       	brge	.+26     	; 0xdf0 <twoway_turn_right_lab+0x9c>
     dd6:	62 17       	cp	r22, r18
     dd8:	73 07       	cpc	r23, r19
     dda:	54 f4       	brge	.+20     	; 0xdf0 <twoway_turn_right_lab+0x9c>
     ddc:	24 17       	cp	r18, r20
     dde:	35 07       	cpc	r19, r21
     de0:	3c f4       	brge	.+14     	; 0xdf0 <twoway_turn_right_lab+0x9c>
		twoway_turn_right = false;
     de2:	10 92 1b 01 	sts	0x011B, r1
		first_time = false;
     de6:	10 92 06 01 	sts	0x0106, r1
		ongoing_turn = false;
     dea:	10 92 1f 01 	sts	0x011F, r1
     dee:	08 95       	ret
	}
	
	//
	
	
	else if(regler_against_wall && (distance_right > st_value )){
     df0:	e0 91 1d 01 	lds	r30, 0x011D
     df4:	ee 23       	and	r30, r30
     df6:	31 f0       	breq	.+12     	; 0xe04 <twoway_turn_right_lab+0xb0>
     df8:	26 17       	cp	r18, r22
     dfa:	37 07       	cpc	r19, r23
     dfc:	1c f4       	brge	.+6      	; 0xe04 <twoway_turn_right_lab+0xb0>
		drive_forward_left(distance_left);
     dfe:	cd 01       	movw	r24, r26
     e00:	71 cb       	rjmp	.-2334   	; 0x4e4 <drive_forward_left>
     e02:	08 95       	ret
	}
	
	else if(ongoing_turn && RGB_data == 1 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
     e04:	99 23       	and	r25, r25
     e06:	69 f0       	breq	.+26     	; 0xe22 <twoway_turn_right_lab+0xce>
     e08:	81 30       	cpi	r24, 0x01	; 1
     e0a:	59 f4       	brne	.+22     	; 0xe22 <twoway_turn_right_lab+0xce>
     e0c:	80 91 1e 01 	lds	r24, 0x011E
     e10:	81 11       	cpse	r24, r1
     e12:	0b c0       	rjmp	.+22     	; 0xe2a <twoway_turn_right_lab+0xd6>
		turn_done = true;
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	80 93 1e 01 	sts	0x011E, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
     e1a:	10 92 70 01 	sts	0x0170, r1
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
     e1e:	0b cc       	rjmp	.-2026   	; 0x636 <drive_forward>
     e20:	08 95       	ret
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
     e22:	80 91 1e 01 	lds	r24, 0x011E
     e26:	88 23       	and	r24, r24
     e28:	91 f0       	breq	.+36     	; 0xe4e <twoway_turn_right_lab+0xfa>
     e2a:	a2 17       	cp	r26, r18
     e2c:	b3 07       	cpc	r27, r19
     e2e:	7c f4       	brge	.+30     	; 0xe4e <twoway_turn_right_lab+0xfa>
     e30:	62 17       	cp	r22, r18
     e32:	73 07       	cpc	r23, r19
     e34:	64 f4       	brge	.+24     	; 0xe4e <twoway_turn_right_lab+0xfa>
     e36:	24 17       	cp	r18, r20
     e38:	35 07       	cpc	r19, r21
     e3a:	4c f4       	brge	.+18     	; 0xe4e <twoway_turn_right_lab+0xfa>
		twoway_turn_right = false;
     e3c:	10 92 1b 01 	sts	0x011B, r1
		ongoing_turn = false;
     e40:	10 92 1f 01 	sts	0x011F, r1
		first_time = true;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 06 01 	sts	0x0106, r24
		regler_against_wall = false;
     e4a:	10 92 1d 01 	sts	0x011D, r1
     e4e:	08 95       	ret

00000e50 <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
     e50:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
     e52:	40 91 69 01 	lds	r20, 0x0169
     e56:	50 e0       	ldi	r21, 0x00	; 0
	int sensor_right_tmp = distans_right;
     e58:	60 91 71 01 	lds	r22, 0x0171
     e5c:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
     e5e:	80 91 6c 01 	lds	r24, 0x016C
     e62:	90 e0       	ldi	r25, 0x00	; 0
	sei();
     e64:	78 94       	sei
	/*
	if(waypoint){
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
		return;	
	}
	else*/ if(oneway_turn){
     e66:	20 91 1c 01 	lds	r18, 0x011C
     e6a:	22 23       	and	r18, r18
     e6c:	21 f0       	breq	.+8      	; 0xe76 <labyreg+0x26>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
     e6e:	28 e2       	ldi	r18, 0x28	; 40
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	34 cf       	rjmp	.-408    	; 0xcdc <oneway_turn_lab>
		return;
     e74:	08 95       	ret
	}/*
	else if(twoway_turn_left){
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
		return;
	}*/
	else if(twoway_turn_right){
     e76:	20 91 1b 01 	lds	r18, 0x011B
     e7a:	22 23       	and	r18, r18
     e7c:	21 f0       	breq	.+8      	; 0xe86 <labyreg+0x36>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
     e7e:	28 e2       	ldi	r18, 0x28	; 40
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	68 cf       	rjmp	.-304    	; 0xd54 <twoway_turn_right_lab>
		return;
     e84:	08 95       	ret
	}
	
	
	// Normalfall
	if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
     e86:	88 32       	cpi	r24, 0x28	; 40
     e88:	91 05       	cpc	r25, r1
     e8a:	64 f4       	brge	.+24     	; 0xea4 <labyreg+0x54>
     e8c:	68 32       	cpi	r22, 0x28	; 40
     e8e:	71 05       	cpc	r23, r1
     e90:	14 f4       	brge	.+4      	; 0xe96 <labyreg+0x46>
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
     e92:	ef cd       	rjmp	.-1058   	; 0xa72 <PD_for_lab>
     e94:	08 95       	ret
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < 60 && sensor_right_tmp > st_value) 
     e96:	4c 33       	cpi	r20, 0x3C	; 60
     e98:	51 05       	cpc	r21, r1
     e9a:	a4 f4       	brge	.+40     	; 0xec4 <labyreg+0x74>
     e9c:	69 32       	cpi	r22, 0x29	; 41
     e9e:	71 05       	cpc	r23, r1
     ea0:	8c f0       	brlt	.+34     	; 0xec4 <labyreg+0x74>
     ea2:	09 c0       	rjmp	.+18     	; 0xeb6 <labyreg+0x66>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < 60 && sensor_right_tmp < st_value)))	{
     ea4:	89 32       	cpi	r24, 0x29	; 41
     ea6:	91 05       	cpc	r25, r1
     ea8:	6c f0       	brlt	.+26     	; 0xec4 <labyreg+0x74>
     eaa:	4c 33       	cpi	r20, 0x3C	; 60
     eac:	51 05       	cpc	r21, r1
     eae:	54 f4       	brge	.+20     	; 0xec4 <labyreg+0x74>
     eb0:	68 32       	cpi	r22, 0x28	; 40
     eb2:	71 05       	cpc	r23, r1
     eb4:	3c f4       	brge	.+14     	; 0xec4 <labyreg+0x74>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
     eb6:	28 e2       	ldi	r18, 0x28	; 40
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	10 df       	rcall	.-480    	; 0xcdc <oneway_turn_lab>
		oneway_turn = true;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 1c 01 	sts	0x011C, r24
     ec2:	08 95       	ret
	/*else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value && sensor_right_tmp > st_value){
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
		twoway_turn_right = true;
	}*/
	else{
		motor_left = 0;
     ec4:	17 bc       	out	0x27, r1	; 39
		motor_right = 0;	
     ec6:	18 bc       	out	0x28, r1	; 40
     ec8:	08 95       	ret

00000eca <regulator>:
		//motor_left = 70;
		//motor_right = 60;
		//PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
		//PORTB |= (1 << motor_dir_left);									// Set motor direction to backward
//	}
	if((regulator_mode == 1) && (regler_ready_linje == 1)){
     eca:	80 91 35 01 	lds	r24, 0x0135
     ece:	90 91 36 01 	lds	r25, 0x0136
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	61 f4       	brne	.+24     	; 0xef0 <regulator+0x26>
     ed8:	80 91 33 01 	lds	r24, 0x0133
     edc:	90 91 34 01 	lds	r25, 0x0134
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	89 f4       	brne	.+34     	; 0xf06 <regulator+0x3c>
		linje_main();
     ee4:	bc da       	rcall	.-2696   	; 0x45e <linje_main>
		regler_ready_linje = 0;
     ee6:	10 92 34 01 	sts	0x0134, r1
     eea:	10 92 33 01 	sts	0x0133, r1
     eee:	08 95       	ret
	}

	else if(regulator_mode == 0){	
     ef0:	89 2b       	or	r24, r25
     ef2:	49 f4       	brne	.+18     	; 0xf06 <regulator+0x3c>
		
		PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
     ef4:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_left);	
     ef6:	2e 98       	cbi	0x05, 6	; 5
		if(updaterad_labyrint){
     ef8:	80 91 32 01 	lds	r24, 0x0132
     efc:	88 23       	and	r24, r24
     efe:	19 f0       	breq	.+6      	; 0xf06 <regulator+0x3c>
			updaterad_labyrint = false;
     f00:	10 92 32 01 	sts	0x0132, r1
			labyreg();//kalla pÃ¥ labyrint funktion
     f04:	a5 cf       	rjmp	.-182    	; 0xe50 <labyreg>
     f06:	08 95       	ret

00000f08 <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
     f08:	ec eb       	ldi	r30, 0xBC	; 188
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	90 81       	ld	r25, Z
     f0e:	94 6a       	ori	r25, 0xA4	; 164
     f10:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     f12:	90 81       	ld	r25, Z
     f14:	99 23       	and	r25, r25
     f16:	ec f7       	brge	.-6      	; 0xf12 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
     f18:	90 91 b9 00 	lds	r25, 0x00B9
     f1c:	98 7f       	andi	r25, 0xF8	; 248
     f1e:	98 30       	cpi	r25, 0x08	; 8
     f20:	29 f0       	breq	.+10     	; 0xf2c <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     f22:	84 e9       	ldi	r24, 0x94	; 148
     f24:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
     f2c:	81 60       	ori	r24, 0x01	; 1
     f2e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     f32:	84 e8       	ldi	r24, 0x84	; 132
     f34:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
     f38:	ec eb       	ldi	r30, 0xBC	; 188
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	88 23       	and	r24, r24
     f40:	ec f7       	brge	.-6      	; 0xf3c <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
     f42:	80 91 b9 00 	lds	r24, 0x00B9
     f46:	88 7f       	andi	r24, 0xF8	; 248
     f48:	80 34       	cpi	r24, 0x40	; 64
     f4a:	29 f0       	breq	.+10     	; 0xf56 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     f4c:	84 e9       	ldi	r24, 0x94	; 148
     f4e:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
     f56:	ec eb       	ldi	r30, 0xBC	; 188
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	84 68       	ori	r24, 0x84	; 132
     f5e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
     f60:	80 81       	ld	r24, Z
     f62:	88 23       	and	r24, r24
     f64:	ec f7       	brge	.-6      	; 0xf60 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data = TWDR; //ta emot data 
     f66:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     f6a:	94 e9       	ldi	r25, 0x94	; 148
     f6c:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
     f70:	08 95       	ret

00000f72 <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
     f72:	20 91 12 01 	lds	r18, 0x0112
     f76:	30 91 13 01 	lds	r19, 0x0113
     f7a:	21 15       	cp	r18, r1
     f7c:	31 05       	cpc	r19, r1
     f7e:	89 f4       	brne	.+34     	; 0xfa2 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
     f80:	28 2f       	mov	r18, r24
     f82:	22 95       	swap	r18
     f84:	2f 70       	andi	r18, 0x0F	; 15
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	30 93 11 01 	sts	0x0111, r19
     f8c:	20 93 10 01 	sts	0x0110, r18
		i2c_data[counter] = data;
     f90:	80 93 54 01 	sts	0x0154, r24
		counter++;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	90 93 13 01 	sts	0x0113, r25
     f9c:	80 93 12 01 	sts	0x0112, r24
     fa0:	18 c0       	rjmp	.+48     	; 0xfd2 <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
     fa2:	40 91 10 01 	lds	r20, 0x0110
     fa6:	50 91 11 01 	lds	r21, 0x0111
     faa:	4f 5f       	subi	r20, 0xFF	; 255
     fac:	5f 4f       	sbci	r21, 0xFF	; 255
     fae:	24 17       	cp	r18, r20
     fb0:	35 07       	cpc	r19, r21
     fb2:	5c f4       	brge	.+22     	; 0xfca <i2c_store_data+0x58>
		i2c_data[counter] = data;
     fb4:	f9 01       	movw	r30, r18
     fb6:	ec 5a       	subi	r30, 0xAC	; 172
     fb8:	fe 4f       	sbci	r31, 0xFE	; 254
     fba:	80 83       	st	Z, r24
		counter++;
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	30 93 13 01 	sts	0x0113, r19
     fc4:	20 93 12 01 	sts	0x0112, r18
     fc8:	04 c0       	rjmp	.+8      	; 0xfd2 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
     fca:	f9 01       	movw	r30, r18
     fcc:	ec 5a       	subi	r30, 0xAC	; 172
     fce:	fe 4f       	sbci	r31, 0xFE	; 254
     fd0:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
     fd2:	80 91 10 01 	lds	r24, 0x0110
     fd6:	90 91 11 01 	lds	r25, 0x0111
     fda:	01 96       	adiw	r24, 0x01	; 1
     fdc:	20 91 12 01 	lds	r18, 0x0112
     fe0:	30 91 13 01 	lds	r19, 0x0113
     fe4:	28 17       	cp	r18, r24
     fe6:	39 07       	cpc	r19, r25
     fe8:	44 f0       	brlt	.+16     	; 0xffa <i2c_store_data+0x88>
		i2c_newdata = true;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	80 93 16 01 	sts	0x0116, r24
		counter = 0;
     ff0:	10 92 13 01 	sts	0x0113, r1
     ff4:	10 92 12 01 	sts	0x0112, r1
		EIMSK &= ~(1<<INT0);
     ff8:	e8 98       	cbi	0x1d, 0	; 29
     ffa:	08 95       	ret

00000ffc <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
     ffc:	1f 92       	push	r1
     ffe:	0f 92       	push	r0
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	0f 92       	push	r0
    1004:	11 24       	eor	r1, r1
    1006:	0b b6       	in	r0, 0x3b	; 59
    1008:	0f 92       	push	r0
    100a:	2f 93       	push	r18
    100c:	3f 93       	push	r19
    100e:	4f 93       	push	r20
    1010:	5f 93       	push	r21
    1012:	6f 93       	push	r22
    1014:	7f 93       	push	r23
    1016:	8f 93       	push	r24
    1018:	9f 93       	push	r25
    101a:	af 93       	push	r26
    101c:	bf 93       	push	r27
    101e:	ef 93       	push	r30
    1020:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1022:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
    1024:	36 9b       	sbis	0x06, 6	; 6
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	6e df       	rcall	.-292    	; 0xf08 <i2c_recive>
    102c:	a2 df       	rcall	.-188    	; 0xf72 <i2c_store_data>
    102e:	05 c0       	rjmp	.+10     	; 0x103a <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
    1030:	37 9b       	sbis	0x06, 7	; 6
    1032:	03 c0       	rjmp	.+6      	; 0x103a <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	68 df       	rcall	.-304    	; 0xf08 <i2c_recive>
    1038:	9c df       	rcall	.-200    	; 0xf72 <i2c_store_data>
	}
}
    103a:	ff 91       	pop	r31
    103c:	ef 91       	pop	r30
    103e:	bf 91       	pop	r27
    1040:	af 91       	pop	r26
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	7f 91       	pop	r23
    1048:	6f 91       	pop	r22
    104a:	5f 91       	pop	r21
    104c:	4f 91       	pop	r20
    104e:	3f 91       	pop	r19
    1050:	2f 91       	pop	r18
    1052:	0f 90       	pop	r0
    1054:	0b be       	out	0x3b, r0	; 59
    1056:	0f 90       	pop	r0
    1058:	0f be       	out	0x3f, r0	; 63
    105a:	0f 90       	pop	r0
    105c:	1f 90       	pop	r1
    105e:	18 95       	reti

00001060 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
    1060:	80 91 16 01 	lds	r24, 0x0116
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <i2c_handel_data+0xa>
    1068:	f7 c0       	rjmp	.+494    	; 0x1258 <i2c_handel_data+0x1f8>
	{
		i2c_newdata=false;
    106a:	10 92 16 01 	sts	0x0116, r1
		if(!((i2c_data[0]>>3)&0x01)){
    106e:	80 91 54 01 	lds	r24, 0x0154
    1072:	83 fd       	sbrc	r24, 3
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <i2c_handel_data+0x24>
    1076:	24 e6       	ldi	r18, 0x64	; 100
    1078:	2a 95       	dec	r18
    107a:	f1 f7       	brne	.-4      	; 0x1078 <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
    107c:	64 e5       	ldi	r22, 0x54	; 84
    107e:	71 e0       	ldi	r23, 0x01	; 1
    1080:	82 e0       	ldi	r24, 0x02	; 2
    1082:	bc db       	rcall	.-2184   	; 0x7fc <i2c_send>
		}
		
		switch (i2c_data[0] & 0x0f){
    1084:	80 91 54 01 	lds	r24, 0x0154
    1088:	e8 2f       	mov	r30, r24
    108a:	ef 70       	andi	r30, 0x0F	; 15
    108c:	8e 2f       	mov	r24, r30
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	fc 01       	movw	r30, r24
    1092:	ea 5b       	subi	r30, 0xBA	; 186
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	1b c3       	rjmp	.+1590   	; 0x16ce <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
    1098:	80 91 55 01 	lds	r24, 0x0155
    109c:	80 93 6d 01 	sts	0x016D, r24
				break;
    10a0:	da c0       	rjmp	.+436    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x01 ://avståndssensorer
				distans_right = i2c_data[3];
    10a2:	e4 e5       	ldi	r30, 0x54	; 84
    10a4:	f1 e0       	ldi	r31, 0x01	; 1
    10a6:	83 81       	ldd	r24, Z+3	; 0x03
    10a8:	80 93 71 01 	sts	0x0171, r24
				distans_fram = i2c_data[2];;
    10ac:	82 81       	ldd	r24, Z+2	; 0x02
    10ae:	80 93 69 01 	sts	0x0169, r24
				distans_left = i2c_data[1];
    10b2:	81 81       	ldd	r24, Z+1	; 0x01
    10b4:	80 93 6c 01 	sts	0x016C, r24
				//updaterad_labyrint = true;
				break;
    10b8:	ce c0       	rjmp	.+412    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x02 :// refelxsensor data
				regler_ready_linje = 1;					// Ny data har lästs in då uppdaterar vi regleringen
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	90 93 34 01 	sts	0x0134, r25
    10c2:	80 93 33 01 	sts	0x0133, r24
				
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
    10c6:	e4 e5       	ldi	r30, 0x54	; 84
    10c8:	f1 e0       	ldi	r31, 0x01	; 1
    10ca:	82 81       	ldd	r24, Z+2	; 0x02
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	98 2f       	mov	r25, r24
    10d0:	88 27       	eor	r24, r24
    10d2:	21 81       	ldd	r18, Z+1	; 0x01
    10d4:	82 0f       	add	r24, r18
    10d6:	91 1d       	adc	r25, r1
    10d8:	90 93 64 01 	sts	0x0164, r25
    10dc:	80 93 63 01 	sts	0x0163, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
    10e0:	83 81       	ldd	r24, Z+3	; 0x03
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 7d 01 	sts	0x017D, r25
    10e8:	80 93 7c 01 	sts	0x017C, r24
				break;
    10ec:	b4 c0       	rjmp	.+360    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x03 :
				RGB_data=1;//"röd";"
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	80 93 70 01 	sts	0x0170, r24
				break;
    10f4:	b0 c0       	rjmp	.+352    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x04 :
				RGB_data=2;//"grön";
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	80 93 70 01 	sts	0x0170, r24
				break;		
    10fc:	ac c0       	rjmp	.+344    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x05 :
				RGB_data=3;//"blå";
    10fe:	83 e0       	ldi	r24, 0x03	; 3
    1100:	80 93 70 01 	sts	0x0170, r24
				break;
    1104:	a8 c0       	rjmp	.+336    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x06 : // gyro klart
				gyro_90 = true;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	80 93 49 01 	sts	0x0149, r24
				turning = false;
    110c:	10 92 31 01 	sts	0x0131, r1
				motor_right = 0;
    1110:	18 bc       	out	0x28, r1	; 40
				motor_left = 0;
    1112:	17 bc       	out	0x27, r1	; 39
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1114:	8f e9       	ldi	r24, 0x9F	; 159
    1116:	96 e8       	ldi	r25, 0x86	; 134
    1118:	21 e0       	ldi	r18, 0x01	; 1
    111a:	81 50       	subi	r24, 0x01	; 1
    111c:	90 40       	sbci	r25, 0x00	; 0
    111e:	20 40       	sbci	r18, 0x00	; 0
    1120:	e1 f7       	brne	.-8      	; 0x111a <i2c_handel_data+0xba>
    1122:	00 c0       	rjmp	.+0      	; 0x1124 <i2c_handel_data+0xc4>
    1124:	00 00       	nop
    1126:	97 c0       	rjmp	.+302    	; 0x1256 <i2c_handel_data+0x1f6>
				break;
			case 0x07 :// gyro data
				// Kod vi skickar till sensor
				break;
			case 0x08 : // manuel stå still
				manual_function=0;
    1128:	10 92 2c 01 	sts	0x012C, r1
    112c:	10 92 2b 01 	sts	0x012B, r1
				break;
    1130:	92 c0       	rjmp	.+292    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	90 93 2c 01 	sts	0x012C, r25
    113a:	80 93 2b 01 	sts	0x012B, r24
				break;
    113e:	8b c0       	rjmp	.+278    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	90 93 2c 01 	sts	0x012C, r25
    1148:	80 93 2b 01 	sts	0x012B, r24
				break;
    114c:	84 c0       	rjmp	.+264    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x0b ://manuel vänster fram
				manual_function=4;
    114e:	84 e0       	ldi	r24, 0x04	; 4
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 2c 01 	sts	0x012C, r25
    1156:	80 93 2b 01 	sts	0x012B, r24
				break;
    115a:	7d c0       	rjmp	.+250    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x0c ://manuel höger fram
				manual_function=3;
    115c:	83 e0       	ldi	r24, 0x03	; 3
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	90 93 2c 01 	sts	0x012C, r25
    1164:	80 93 2b 01 	sts	0x012B, r24
				break;
    1168:	76 c0       	rjmp	.+236    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
    116a:	86 e0       	ldi	r24, 0x06	; 6
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	90 93 2c 01 	sts	0x012C, r25
    1172:	80 93 2b 01 	sts	0x012B, r24
				break;
    1176:	6f c0       	rjmp	.+222    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
    1178:	85 e0       	ldi	r24, 0x05	; 5
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	90 93 2c 01 	sts	0x012C, r25
    1180:	80 93 2b 01 	sts	0x012B, r24
				break;
    1184:	68 c0       	rjmp	.+208    	; 0x1256 <i2c_handel_data+0x1f6>
			case 0x0f :	// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
    1186:	80 91 55 01 	lds	r24, 0x0155
    118a:	80 3f       	cpi	r24, 0xF0	; 240
    118c:	91 f4       	brne	.+36     	; 0x11b2 <i2c_handel_data+0x152>
					if(start==1){
    118e:	80 91 43 01 	lds	r24, 0x0143
    1192:	90 91 44 01 	lds	r25, 0x0144
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	29 f4       	brne	.+10     	; 0x11a4 <i2c_handel_data+0x144>
						start=0;
    119a:	10 92 44 01 	sts	0x0144, r1
    119e:	10 92 43 01 	sts	0x0143, r1
    11a2:	59 c0       	rjmp	.+178    	; 0x1256 <i2c_handel_data+0x1f6>
					}
					else{
						start=1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	90 93 44 01 	sts	0x0144, r25
    11ac:	80 93 43 01 	sts	0x0143, r24
    11b0:	52 c0       	rjmp	.+164    	; 0x1256 <i2c_handel_data+0x1f6>
					}
				}
				else if(i2c_data[1]==0x0f){
    11b2:	8f 30       	cpi	r24, 0x0F	; 15
    11b4:	f1 f4       	brne	.+60     	; 0x11f2 <i2c_handel_data+0x192>
					if(drive_mode==1){
    11b6:	80 91 45 01 	lds	r24, 0x0145
    11ba:	90 91 46 01 	lds	r25, 0x0146
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	59 f4       	brne	.+22     	; 0x11d8 <i2c_handel_data+0x178>
						PORTD |= (1 << PD1);
    11c2:	59 9a       	sbi	0x0b, 1	; 11
						PORTD &= ~(1 << PD0);
    11c4:	58 98       	cbi	0x0b, 0	; 11
						drive_mode=0;
    11c6:	10 92 46 01 	sts	0x0146, r1
    11ca:	10 92 45 01 	sts	0x0145, r1
						start=0;
    11ce:	10 92 44 01 	sts	0x0144, r1
    11d2:	10 92 43 01 	sts	0x0143, r1
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <i2c_handel_data+0x1f6>
					}
					else{
						PORTD |= (1 << PD0);
    11d8:	58 9a       	sbi	0x0b, 0	; 11
						PORTD &= ~(1 << PD1);
    11da:	59 98       	cbi	0x0b, 1	; 11
						drive_mode=1;
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	90 93 46 01 	sts	0x0146, r25
    11e4:	80 93 45 01 	sts	0x0145, r24
						start=0;
    11e8:	10 92 44 01 	sts	0x0144, r1
    11ec:	10 92 43 01 	sts	0x0143, r1
    11f0:	32 c0       	rjmp	.+100    	; 0x1256 <i2c_handel_data+0x1f6>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
    11f2:	81 11       	cpse	r24, r1
    11f4:	0f c0       	rjmp	.+30     	; 0x1214 <i2c_handel_data+0x1b4>
					d_constant = i2c_data[2];
    11f6:	e4 e5       	ldi	r30, 0x54	; 84
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	82 81       	ldd	r24, Z+2	; 0x02
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	90 93 01 01 	sts	0x0101, r25
    1202:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3];
    1206:	83 81       	ldd	r24, Z+3	; 0x03
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	90 93 03 01 	sts	0x0103, r25
    120e:	80 93 02 01 	sts	0x0102, r24
    1212:	21 c0       	rjmp	.+66     	; 0x1256 <i2c_handel_data+0x1f6>
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	79 f4       	brne	.+30     	; 0x1236 <i2c_handel_data+0x1d6>
					d_constant_lab = i2c_data[2];
    1218:	e4 e5       	ldi	r30, 0x54	; 84
    121a:	f1 e0       	ldi	r31, 0x01	; 1
    121c:	82 81       	ldd	r24, Z+2	; 0x02
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	90 93 0c 01 	sts	0x010C, r25
    1224:	80 93 0b 01 	sts	0x010B, r24
					p_constant_lab = i2c_data[3];
    1228:	83 81       	ldd	r24, Z+3	; 0x03
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	90 93 0e 01 	sts	0x010E, r25
    1230:	80 93 0d 01 	sts	0x010D, r24
    1234:	10 c0       	rjmp	.+32     	; 0x1256 <i2c_handel_data+0x1f6>
				}
				else if(i2c_data[1]==0x02){
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	71 f4       	brne	.+28     	; 0x1256 <i2c_handel_data+0x1f6>
					left = i2c_data[2];
    123a:	e4 e5       	ldi	r30, 0x54	; 84
    123c:	f1 e0       	ldi	r31, 0x01	; 1
    123e:	82 81       	ldd	r24, Z+2	; 0x02
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	90 93 42 01 	sts	0x0142, r25
    1246:	80 93 41 01 	sts	0x0141, r24
					right = i2c_data[3];
    124a:	83 81       	ldd	r24, Z+3	; 0x03
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	90 93 40 01 	sts	0x0140, r25
    1252:	80 93 3f 01 	sts	0x013F, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
    1256:	e8 9a       	sbi	0x1d, 0	; 29
    1258:	08 95       	ret

0000125a <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
    125a:	6f da       	rcall	.-2850   	; 0x73a <interrupt_init>
	board_init();
    125c:	0e 94 76 00 	call	0xec	; 0xec <board_init>
	initengine();
    1260:	f8 d9       	rcall	.-3088   	; 0x652 <initengine>
	timerinit();
    1262:	04 da       	rcall	.-3064   	; 0x66c <timerinit>
	i2c_setup(1);
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	ba da       	rcall	.-2700   	; 0x7dc <i2c_setup>
	sei();
    1268:	78 94       	sei
	//***********Set motors speed value here *****************
	left=130*1;				// kanske räcker med en variable för båda om båda kör exakt lika fort
    126a:	82 e8       	ldi	r24, 0x82	; 130
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	90 93 42 01 	sts	0x0142, r25
    1272:	80 93 41 01 	sts	0x0141, r24
	right=120*1;
    1276:	88 e7       	ldi	r24, 0x78	; 120
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	90 93 40 01 	sts	0x0140, r25
    127e:	80 93 3f 01 	sts	0x013F, r24
	//********************************************************
	motor_left=left;
    1282:	82 e8       	ldi	r24, 0x82	; 130
    1284:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
    1286:	80 91 3f 01 	lds	r24, 0x013F
    128a:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
    128c:	e9 de       	rcall	.-558    	; 0x1060 <i2c_handel_data>
		if(turning)
    128e:	80 91 31 01 	lds	r24, 0x0131
    1292:	81 11       	cpse	r24, r1
    1294:	fb cf       	rjmp	.-10     	; 0x128c <main+0x32>
			;
		else if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
    1296:	80 91 45 01 	lds	r24, 0x0145
    129a:	90 91 46 01 	lds	r25, 0x0146
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	91 05       	cpc	r25, r1
    12a2:	71 f4       	brne	.+28     	; 0x12c0 <main+0x66>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			//if((gyro_left == 1)|| (gyro_right == 1)){
			//	drive_mode = 0;
			//}
			if(start == 1){
    12a4:	80 91 43 01 	lds	r24, 0x0143
    12a8:	90 91 44 01 	lds	r25, 0x0144
    12ac:	81 30       	cpi	r24, 0x01	; 1
    12ae:	91 05       	cpc	r25, r1
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <main+0x5c>
				regulator();	
    12b2:	0b de       	rcall	.-1002   	; 0xeca <regulator>
    12b4:	eb cf       	rjmp	.-42     	; 0x128c <main+0x32>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
    12b6:	89 2b       	or	r24, r25
    12b8:	49 f7       	brne	.-46     	; 0x128c <main+0x32>
				motor_left=0;
    12ba:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
    12bc:	18 bc       	out	0x28, r1	; 40
    12be:	e6 cf       	rjmp	.-52     	; 0x128c <main+0x32>
			}
		}
		else if(drive_mode==0){										// Drivemode is manual
    12c0:	89 2b       	or	r24, r25
    12c2:	21 f7       	brne	.-56     	; 0x128c <main+0x32>
			PORTD |= (1 << PD1);
    12c4:	59 9a       	sbi	0x0b, 1	; 11
			manual_drive();
    12c6:	21 db       	rcall	.-2494   	; 0x90a <manual_drive>
    12c8:	e1 cf       	rjmp	.-62     	; 0x128c <main+0x32>

000012ca <__subsf3>:
    12ca:	50 58       	subi	r21, 0x80	; 128

000012cc <__addsf3>:
    12cc:	bb 27       	eor	r27, r27
    12ce:	aa 27       	eor	r26, r26
    12d0:	0e d0       	rcall	.+28     	; 0x12ee <__addsf3x>
    12d2:	4d c1       	rjmp	.+666    	; 0x156e <__fp_round>
    12d4:	3e d1       	rcall	.+636    	; 0x1552 <__fp_pscA>
    12d6:	30 f0       	brcs	.+12     	; 0x12e4 <__addsf3+0x18>
    12d8:	43 d1       	rcall	.+646    	; 0x1560 <__fp_pscB>
    12da:	20 f0       	brcs	.+8      	; 0x12e4 <__addsf3+0x18>
    12dc:	31 f4       	brne	.+12     	; 0x12ea <__addsf3+0x1e>
    12de:	9f 3f       	cpi	r25, 0xFF	; 255
    12e0:	11 f4       	brne	.+4      	; 0x12e6 <__addsf3+0x1a>
    12e2:	1e f4       	brtc	.+6      	; 0x12ea <__addsf3+0x1e>
    12e4:	33 c1       	rjmp	.+614    	; 0x154c <__fp_nan>
    12e6:	0e f4       	brtc	.+2      	; 0x12ea <__addsf3+0x1e>
    12e8:	e0 95       	com	r30
    12ea:	e7 fb       	bst	r30, 7
    12ec:	29 c1       	rjmp	.+594    	; 0x1540 <__fp_inf>

000012ee <__addsf3x>:
    12ee:	e9 2f       	mov	r30, r25
    12f0:	4f d1       	rcall	.+670    	; 0x1590 <__fp_split3>
    12f2:	80 f3       	brcs	.-32     	; 0x12d4 <__addsf3+0x8>
    12f4:	ba 17       	cp	r27, r26
    12f6:	62 07       	cpc	r22, r18
    12f8:	73 07       	cpc	r23, r19
    12fa:	84 07       	cpc	r24, r20
    12fc:	95 07       	cpc	r25, r21
    12fe:	18 f0       	brcs	.+6      	; 0x1306 <__addsf3x+0x18>
    1300:	71 f4       	brne	.+28     	; 0x131e <__addsf3x+0x30>
    1302:	9e f5       	brtc	.+102    	; 0x136a <__addsf3x+0x7c>
    1304:	67 c1       	rjmp	.+718    	; 0x15d4 <__fp_zero>
    1306:	0e f4       	brtc	.+2      	; 0x130a <__addsf3x+0x1c>
    1308:	e0 95       	com	r30
    130a:	0b 2e       	mov	r0, r27
    130c:	ba 2f       	mov	r27, r26
    130e:	a0 2d       	mov	r26, r0
    1310:	0b 01       	movw	r0, r22
    1312:	b9 01       	movw	r22, r18
    1314:	90 01       	movw	r18, r0
    1316:	0c 01       	movw	r0, r24
    1318:	ca 01       	movw	r24, r20
    131a:	a0 01       	movw	r20, r0
    131c:	11 24       	eor	r1, r1
    131e:	ff 27       	eor	r31, r31
    1320:	59 1b       	sub	r21, r25
    1322:	99 f0       	breq	.+38     	; 0x134a <__addsf3x+0x5c>
    1324:	59 3f       	cpi	r21, 0xF9	; 249
    1326:	50 f4       	brcc	.+20     	; 0x133c <__addsf3x+0x4e>
    1328:	50 3e       	cpi	r21, 0xE0	; 224
    132a:	68 f1       	brcs	.+90     	; 0x1386 <__addsf3x+0x98>
    132c:	1a 16       	cp	r1, r26
    132e:	f0 40       	sbci	r31, 0x00	; 0
    1330:	a2 2f       	mov	r26, r18
    1332:	23 2f       	mov	r18, r19
    1334:	34 2f       	mov	r19, r20
    1336:	44 27       	eor	r20, r20
    1338:	58 5f       	subi	r21, 0xF8	; 248
    133a:	f3 cf       	rjmp	.-26     	; 0x1322 <__addsf3x+0x34>
    133c:	46 95       	lsr	r20
    133e:	37 95       	ror	r19
    1340:	27 95       	ror	r18
    1342:	a7 95       	ror	r26
    1344:	f0 40       	sbci	r31, 0x00	; 0
    1346:	53 95       	inc	r21
    1348:	c9 f7       	brne	.-14     	; 0x133c <__addsf3x+0x4e>
    134a:	7e f4       	brtc	.+30     	; 0x136a <__addsf3x+0x7c>
    134c:	1f 16       	cp	r1, r31
    134e:	ba 0b       	sbc	r27, r26
    1350:	62 0b       	sbc	r22, r18
    1352:	73 0b       	sbc	r23, r19
    1354:	84 0b       	sbc	r24, r20
    1356:	ba f0       	brmi	.+46     	; 0x1386 <__addsf3x+0x98>
    1358:	91 50       	subi	r25, 0x01	; 1
    135a:	a1 f0       	breq	.+40     	; 0x1384 <__addsf3x+0x96>
    135c:	ff 0f       	add	r31, r31
    135e:	bb 1f       	adc	r27, r27
    1360:	66 1f       	adc	r22, r22
    1362:	77 1f       	adc	r23, r23
    1364:	88 1f       	adc	r24, r24
    1366:	c2 f7       	brpl	.-16     	; 0x1358 <__addsf3x+0x6a>
    1368:	0e c0       	rjmp	.+28     	; 0x1386 <__addsf3x+0x98>
    136a:	ba 0f       	add	r27, r26
    136c:	62 1f       	adc	r22, r18
    136e:	73 1f       	adc	r23, r19
    1370:	84 1f       	adc	r24, r20
    1372:	48 f4       	brcc	.+18     	; 0x1386 <__addsf3x+0x98>
    1374:	87 95       	ror	r24
    1376:	77 95       	ror	r23
    1378:	67 95       	ror	r22
    137a:	b7 95       	ror	r27
    137c:	f7 95       	ror	r31
    137e:	9e 3f       	cpi	r25, 0xFE	; 254
    1380:	08 f0       	brcs	.+2      	; 0x1384 <__addsf3x+0x96>
    1382:	b3 cf       	rjmp	.-154    	; 0x12ea <__addsf3+0x1e>
    1384:	93 95       	inc	r25
    1386:	88 0f       	add	r24, r24
    1388:	08 f0       	brcs	.+2      	; 0x138c <__addsf3x+0x9e>
    138a:	99 27       	eor	r25, r25
    138c:	ee 0f       	add	r30, r30
    138e:	97 95       	ror	r25
    1390:	87 95       	ror	r24
    1392:	08 95       	ret

00001394 <__divsf3>:
    1394:	0c d0       	rcall	.+24     	; 0x13ae <__divsf3x>
    1396:	eb c0       	rjmp	.+470    	; 0x156e <__fp_round>
    1398:	e3 d0       	rcall	.+454    	; 0x1560 <__fp_pscB>
    139a:	40 f0       	brcs	.+16     	; 0x13ac <__divsf3+0x18>
    139c:	da d0       	rcall	.+436    	; 0x1552 <__fp_pscA>
    139e:	30 f0       	brcs	.+12     	; 0x13ac <__divsf3+0x18>
    13a0:	21 f4       	brne	.+8      	; 0x13aa <__divsf3+0x16>
    13a2:	5f 3f       	cpi	r21, 0xFF	; 255
    13a4:	19 f0       	breq	.+6      	; 0x13ac <__divsf3+0x18>
    13a6:	cc c0       	rjmp	.+408    	; 0x1540 <__fp_inf>
    13a8:	51 11       	cpse	r21, r1
    13aa:	15 c1       	rjmp	.+554    	; 0x15d6 <__fp_szero>
    13ac:	cf c0       	rjmp	.+414    	; 0x154c <__fp_nan>

000013ae <__divsf3x>:
    13ae:	f0 d0       	rcall	.+480    	; 0x1590 <__fp_split3>
    13b0:	98 f3       	brcs	.-26     	; 0x1398 <__divsf3+0x4>

000013b2 <__divsf3_pse>:
    13b2:	99 23       	and	r25, r25
    13b4:	c9 f3       	breq	.-14     	; 0x13a8 <__divsf3+0x14>
    13b6:	55 23       	and	r21, r21
    13b8:	b1 f3       	breq	.-20     	; 0x13a6 <__divsf3+0x12>
    13ba:	95 1b       	sub	r25, r21
    13bc:	55 0b       	sbc	r21, r21
    13be:	bb 27       	eor	r27, r27
    13c0:	aa 27       	eor	r26, r26
    13c2:	62 17       	cp	r22, r18
    13c4:	73 07       	cpc	r23, r19
    13c6:	84 07       	cpc	r24, r20
    13c8:	38 f0       	brcs	.+14     	; 0x13d8 <__divsf3_pse+0x26>
    13ca:	9f 5f       	subi	r25, 0xFF	; 255
    13cc:	5f 4f       	sbci	r21, 0xFF	; 255
    13ce:	22 0f       	add	r18, r18
    13d0:	33 1f       	adc	r19, r19
    13d2:	44 1f       	adc	r20, r20
    13d4:	aa 1f       	adc	r26, r26
    13d6:	a9 f3       	breq	.-22     	; 0x13c2 <__divsf3_pse+0x10>
    13d8:	33 d0       	rcall	.+102    	; 0x1440 <__divsf3_pse+0x8e>
    13da:	0e 2e       	mov	r0, r30
    13dc:	3a f0       	brmi	.+14     	; 0x13ec <__divsf3_pse+0x3a>
    13de:	e0 e8       	ldi	r30, 0x80	; 128
    13e0:	30 d0       	rcall	.+96     	; 0x1442 <__divsf3_pse+0x90>
    13e2:	91 50       	subi	r25, 0x01	; 1
    13e4:	50 40       	sbci	r21, 0x00	; 0
    13e6:	e6 95       	lsr	r30
    13e8:	00 1c       	adc	r0, r0
    13ea:	ca f7       	brpl	.-14     	; 0x13de <__divsf3_pse+0x2c>
    13ec:	29 d0       	rcall	.+82     	; 0x1440 <__divsf3_pse+0x8e>
    13ee:	fe 2f       	mov	r31, r30
    13f0:	27 d0       	rcall	.+78     	; 0x1440 <__divsf3_pse+0x8e>
    13f2:	66 0f       	add	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	bb 1f       	adc	r27, r27
    13fa:	26 17       	cp	r18, r22
    13fc:	37 07       	cpc	r19, r23
    13fe:	48 07       	cpc	r20, r24
    1400:	ab 07       	cpc	r26, r27
    1402:	b0 e8       	ldi	r27, 0x80	; 128
    1404:	09 f0       	breq	.+2      	; 0x1408 <__divsf3_pse+0x56>
    1406:	bb 0b       	sbc	r27, r27
    1408:	80 2d       	mov	r24, r0
    140a:	bf 01       	movw	r22, r30
    140c:	ff 27       	eor	r31, r31
    140e:	93 58       	subi	r25, 0x83	; 131
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	2a f0       	brmi	.+10     	; 0x141e <__divsf3_pse+0x6c>
    1414:	9e 3f       	cpi	r25, 0xFE	; 254
    1416:	51 05       	cpc	r21, r1
    1418:	68 f0       	brcs	.+26     	; 0x1434 <__divsf3_pse+0x82>
    141a:	92 c0       	rjmp	.+292    	; 0x1540 <__fp_inf>
    141c:	dc c0       	rjmp	.+440    	; 0x15d6 <__fp_szero>
    141e:	5f 3f       	cpi	r21, 0xFF	; 255
    1420:	ec f3       	brlt	.-6      	; 0x141c <__divsf3_pse+0x6a>
    1422:	98 3e       	cpi	r25, 0xE8	; 232
    1424:	dc f3       	brlt	.-10     	; 0x141c <__divsf3_pse+0x6a>
    1426:	86 95       	lsr	r24
    1428:	77 95       	ror	r23
    142a:	67 95       	ror	r22
    142c:	b7 95       	ror	r27
    142e:	f7 95       	ror	r31
    1430:	9f 5f       	subi	r25, 0xFF	; 255
    1432:	c9 f7       	brne	.-14     	; 0x1426 <__divsf3_pse+0x74>
    1434:	88 0f       	add	r24, r24
    1436:	91 1d       	adc	r25, r1
    1438:	96 95       	lsr	r25
    143a:	87 95       	ror	r24
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret
    1440:	e1 e0       	ldi	r30, 0x01	; 1
    1442:	66 0f       	add	r22, r22
    1444:	77 1f       	adc	r23, r23
    1446:	88 1f       	adc	r24, r24
    1448:	bb 1f       	adc	r27, r27
    144a:	62 17       	cp	r22, r18
    144c:	73 07       	cpc	r23, r19
    144e:	84 07       	cpc	r24, r20
    1450:	ba 07       	cpc	r27, r26
    1452:	20 f0       	brcs	.+8      	; 0x145c <__divsf3_pse+0xaa>
    1454:	62 1b       	sub	r22, r18
    1456:	73 0b       	sbc	r23, r19
    1458:	84 0b       	sbc	r24, r20
    145a:	ba 0b       	sbc	r27, r26
    145c:	ee 1f       	adc	r30, r30
    145e:	88 f7       	brcc	.-30     	; 0x1442 <__divsf3_pse+0x90>
    1460:	e0 95       	com	r30
    1462:	08 95       	ret

00001464 <__fixsfsi>:
    1464:	04 d0       	rcall	.+8      	; 0x146e <__fixunssfsi>
    1466:	68 94       	set
    1468:	b1 11       	cpse	r27, r1
    146a:	b5 c0       	rjmp	.+362    	; 0x15d6 <__fp_szero>
    146c:	08 95       	ret

0000146e <__fixunssfsi>:
    146e:	98 d0       	rcall	.+304    	; 0x15a0 <__fp_splitA>
    1470:	88 f0       	brcs	.+34     	; 0x1494 <__fixunssfsi+0x26>
    1472:	9f 57       	subi	r25, 0x7F	; 127
    1474:	90 f0       	brcs	.+36     	; 0x149a <__fixunssfsi+0x2c>
    1476:	b9 2f       	mov	r27, r25
    1478:	99 27       	eor	r25, r25
    147a:	b7 51       	subi	r27, 0x17	; 23
    147c:	a0 f0       	brcs	.+40     	; 0x14a6 <__fixunssfsi+0x38>
    147e:	d1 f0       	breq	.+52     	; 0x14b4 <__fixunssfsi+0x46>
    1480:	66 0f       	add	r22, r22
    1482:	77 1f       	adc	r23, r23
    1484:	88 1f       	adc	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	1a f0       	brmi	.+6      	; 0x1490 <__fixunssfsi+0x22>
    148a:	ba 95       	dec	r27
    148c:	c9 f7       	brne	.-14     	; 0x1480 <__fixunssfsi+0x12>
    148e:	12 c0       	rjmp	.+36     	; 0x14b4 <__fixunssfsi+0x46>
    1490:	b1 30       	cpi	r27, 0x01	; 1
    1492:	81 f0       	breq	.+32     	; 0x14b4 <__fixunssfsi+0x46>
    1494:	9f d0       	rcall	.+318    	; 0x15d4 <__fp_zero>
    1496:	b1 e0       	ldi	r27, 0x01	; 1
    1498:	08 95       	ret
    149a:	9c c0       	rjmp	.+312    	; 0x15d4 <__fp_zero>
    149c:	67 2f       	mov	r22, r23
    149e:	78 2f       	mov	r23, r24
    14a0:	88 27       	eor	r24, r24
    14a2:	b8 5f       	subi	r27, 0xF8	; 248
    14a4:	39 f0       	breq	.+14     	; 0x14b4 <__fixunssfsi+0x46>
    14a6:	b9 3f       	cpi	r27, 0xF9	; 249
    14a8:	cc f3       	brlt	.-14     	; 0x149c <__fixunssfsi+0x2e>
    14aa:	86 95       	lsr	r24
    14ac:	77 95       	ror	r23
    14ae:	67 95       	ror	r22
    14b0:	b3 95       	inc	r27
    14b2:	d9 f7       	brne	.-10     	; 0x14aa <__fixunssfsi+0x3c>
    14b4:	3e f4       	brtc	.+14     	; 0x14c4 <__fixunssfsi+0x56>
    14b6:	90 95       	com	r25
    14b8:	80 95       	com	r24
    14ba:	70 95       	com	r23
    14bc:	61 95       	neg	r22
    14be:	7f 4f       	sbci	r23, 0xFF	; 255
    14c0:	8f 4f       	sbci	r24, 0xFF	; 255
    14c2:	9f 4f       	sbci	r25, 0xFF	; 255
    14c4:	08 95       	ret

000014c6 <__floatunsisf>:
    14c6:	e8 94       	clt
    14c8:	09 c0       	rjmp	.+18     	; 0x14dc <__floatsisf+0x12>

000014ca <__floatsisf>:
    14ca:	97 fb       	bst	r25, 7
    14cc:	3e f4       	brtc	.+14     	; 0x14dc <__floatsisf+0x12>
    14ce:	90 95       	com	r25
    14d0:	80 95       	com	r24
    14d2:	70 95       	com	r23
    14d4:	61 95       	neg	r22
    14d6:	7f 4f       	sbci	r23, 0xFF	; 255
    14d8:	8f 4f       	sbci	r24, 0xFF	; 255
    14da:	9f 4f       	sbci	r25, 0xFF	; 255
    14dc:	99 23       	and	r25, r25
    14de:	a9 f0       	breq	.+42     	; 0x150a <__floatsisf+0x40>
    14e0:	f9 2f       	mov	r31, r25
    14e2:	96 e9       	ldi	r25, 0x96	; 150
    14e4:	bb 27       	eor	r27, r27
    14e6:	93 95       	inc	r25
    14e8:	f6 95       	lsr	r31
    14ea:	87 95       	ror	r24
    14ec:	77 95       	ror	r23
    14ee:	67 95       	ror	r22
    14f0:	b7 95       	ror	r27
    14f2:	f1 11       	cpse	r31, r1
    14f4:	f8 cf       	rjmp	.-16     	; 0x14e6 <__floatsisf+0x1c>
    14f6:	fa f4       	brpl	.+62     	; 0x1536 <__floatsisf+0x6c>
    14f8:	bb 0f       	add	r27, r27
    14fa:	11 f4       	brne	.+4      	; 0x1500 <__floatsisf+0x36>
    14fc:	60 ff       	sbrs	r22, 0
    14fe:	1b c0       	rjmp	.+54     	; 0x1536 <__floatsisf+0x6c>
    1500:	6f 5f       	subi	r22, 0xFF	; 255
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	16 c0       	rjmp	.+44     	; 0x1536 <__floatsisf+0x6c>
    150a:	88 23       	and	r24, r24
    150c:	11 f0       	breq	.+4      	; 0x1512 <__floatsisf+0x48>
    150e:	96 e9       	ldi	r25, 0x96	; 150
    1510:	11 c0       	rjmp	.+34     	; 0x1534 <__floatsisf+0x6a>
    1512:	77 23       	and	r23, r23
    1514:	21 f0       	breq	.+8      	; 0x151e <__floatsisf+0x54>
    1516:	9e e8       	ldi	r25, 0x8E	; 142
    1518:	87 2f       	mov	r24, r23
    151a:	76 2f       	mov	r23, r22
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <__floatsisf+0x5e>
    151e:	66 23       	and	r22, r22
    1520:	71 f0       	breq	.+28     	; 0x153e <__floatsisf+0x74>
    1522:	96 e8       	ldi	r25, 0x86	; 134
    1524:	86 2f       	mov	r24, r22
    1526:	70 e0       	ldi	r23, 0x00	; 0
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	2a f0       	brmi	.+10     	; 0x1536 <__floatsisf+0x6c>
    152c:	9a 95       	dec	r25
    152e:	66 0f       	add	r22, r22
    1530:	77 1f       	adc	r23, r23
    1532:	88 1f       	adc	r24, r24
    1534:	da f7       	brpl	.-10     	; 0x152c <__floatsisf+0x62>
    1536:	88 0f       	add	r24, r24
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	97 f9       	bld	r25, 7
    153e:	08 95       	ret

00001540 <__fp_inf>:
    1540:	97 f9       	bld	r25, 7
    1542:	9f 67       	ori	r25, 0x7F	; 127
    1544:	80 e8       	ldi	r24, 0x80	; 128
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	08 95       	ret

0000154c <__fp_nan>:
    154c:	9f ef       	ldi	r25, 0xFF	; 255
    154e:	80 ec       	ldi	r24, 0xC0	; 192
    1550:	08 95       	ret

00001552 <__fp_pscA>:
    1552:	00 24       	eor	r0, r0
    1554:	0a 94       	dec	r0
    1556:	16 16       	cp	r1, r22
    1558:	17 06       	cpc	r1, r23
    155a:	18 06       	cpc	r1, r24
    155c:	09 06       	cpc	r0, r25
    155e:	08 95       	ret

00001560 <__fp_pscB>:
    1560:	00 24       	eor	r0, r0
    1562:	0a 94       	dec	r0
    1564:	12 16       	cp	r1, r18
    1566:	13 06       	cpc	r1, r19
    1568:	14 06       	cpc	r1, r20
    156a:	05 06       	cpc	r0, r21
    156c:	08 95       	ret

0000156e <__fp_round>:
    156e:	09 2e       	mov	r0, r25
    1570:	03 94       	inc	r0
    1572:	00 0c       	add	r0, r0
    1574:	11 f4       	brne	.+4      	; 0x157a <__fp_round+0xc>
    1576:	88 23       	and	r24, r24
    1578:	52 f0       	brmi	.+20     	; 0x158e <__fp_round+0x20>
    157a:	bb 0f       	add	r27, r27
    157c:	40 f4       	brcc	.+16     	; 0x158e <__fp_round+0x20>
    157e:	bf 2b       	or	r27, r31
    1580:	11 f4       	brne	.+4      	; 0x1586 <__fp_round+0x18>
    1582:	60 ff       	sbrs	r22, 0
    1584:	04 c0       	rjmp	.+8      	; 0x158e <__fp_round+0x20>
    1586:	6f 5f       	subi	r22, 0xFF	; 255
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	8f 4f       	sbci	r24, 0xFF	; 255
    158c:	9f 4f       	sbci	r25, 0xFF	; 255
    158e:	08 95       	ret

00001590 <__fp_split3>:
    1590:	57 fd       	sbrc	r21, 7
    1592:	90 58       	subi	r25, 0x80	; 128
    1594:	44 0f       	add	r20, r20
    1596:	55 1f       	adc	r21, r21
    1598:	59 f0       	breq	.+22     	; 0x15b0 <__fp_splitA+0x10>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	71 f0       	breq	.+28     	; 0x15ba <__fp_splitA+0x1a>
    159e:	47 95       	ror	r20

000015a0 <__fp_splitA>:
    15a0:	88 0f       	add	r24, r24
    15a2:	97 fb       	bst	r25, 7
    15a4:	99 1f       	adc	r25, r25
    15a6:	61 f0       	breq	.+24     	; 0x15c0 <__fp_splitA+0x20>
    15a8:	9f 3f       	cpi	r25, 0xFF	; 255
    15aa:	79 f0       	breq	.+30     	; 0x15ca <__fp_splitA+0x2a>
    15ac:	87 95       	ror	r24
    15ae:	08 95       	ret
    15b0:	12 16       	cp	r1, r18
    15b2:	13 06       	cpc	r1, r19
    15b4:	14 06       	cpc	r1, r20
    15b6:	55 1f       	adc	r21, r21
    15b8:	f2 cf       	rjmp	.-28     	; 0x159e <__fp_split3+0xe>
    15ba:	46 95       	lsr	r20
    15bc:	f1 df       	rcall	.-30     	; 0x15a0 <__fp_splitA>
    15be:	08 c0       	rjmp	.+16     	; 0x15d0 <__fp_splitA+0x30>
    15c0:	16 16       	cp	r1, r22
    15c2:	17 06       	cpc	r1, r23
    15c4:	18 06       	cpc	r1, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	f1 cf       	rjmp	.-30     	; 0x15ac <__fp_splitA+0xc>
    15ca:	86 95       	lsr	r24
    15cc:	71 05       	cpc	r23, r1
    15ce:	61 05       	cpc	r22, r1
    15d0:	08 94       	sec
    15d2:	08 95       	ret

000015d4 <__fp_zero>:
    15d4:	e8 94       	clt

000015d6 <__fp_szero>:
    15d6:	bb 27       	eor	r27, r27
    15d8:	66 27       	eor	r22, r22
    15da:	77 27       	eor	r23, r23
    15dc:	cb 01       	movw	r24, r22
    15de:	97 f9       	bld	r25, 7
    15e0:	08 95       	ret

000015e2 <__mulsf3>:
    15e2:	0b d0       	rcall	.+22     	; 0x15fa <__mulsf3x>
    15e4:	c4 cf       	rjmp	.-120    	; 0x156e <__fp_round>
    15e6:	b5 df       	rcall	.-150    	; 0x1552 <__fp_pscA>
    15e8:	28 f0       	brcs	.+10     	; 0x15f4 <__mulsf3+0x12>
    15ea:	ba df       	rcall	.-140    	; 0x1560 <__fp_pscB>
    15ec:	18 f0       	brcs	.+6      	; 0x15f4 <__mulsf3+0x12>
    15ee:	95 23       	and	r25, r21
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <__mulsf3+0x12>
    15f2:	a6 cf       	rjmp	.-180    	; 0x1540 <__fp_inf>
    15f4:	ab cf       	rjmp	.-170    	; 0x154c <__fp_nan>
    15f6:	11 24       	eor	r1, r1
    15f8:	ee cf       	rjmp	.-36     	; 0x15d6 <__fp_szero>

000015fa <__mulsf3x>:
    15fa:	ca df       	rcall	.-108    	; 0x1590 <__fp_split3>
    15fc:	a0 f3       	brcs	.-24     	; 0x15e6 <__mulsf3+0x4>

000015fe <__mulsf3_pse>:
    15fe:	95 9f       	mul	r25, r21
    1600:	d1 f3       	breq	.-12     	; 0x15f6 <__mulsf3+0x14>
    1602:	95 0f       	add	r25, r21
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	55 1f       	adc	r21, r21
    1608:	62 9f       	mul	r22, r18
    160a:	f0 01       	movw	r30, r0
    160c:	72 9f       	mul	r23, r18
    160e:	bb 27       	eor	r27, r27
    1610:	f0 0d       	add	r31, r0
    1612:	b1 1d       	adc	r27, r1
    1614:	63 9f       	mul	r22, r19
    1616:	aa 27       	eor	r26, r26
    1618:	f0 0d       	add	r31, r0
    161a:	b1 1d       	adc	r27, r1
    161c:	aa 1f       	adc	r26, r26
    161e:	64 9f       	mul	r22, r20
    1620:	66 27       	eor	r22, r22
    1622:	b0 0d       	add	r27, r0
    1624:	a1 1d       	adc	r26, r1
    1626:	66 1f       	adc	r22, r22
    1628:	82 9f       	mul	r24, r18
    162a:	22 27       	eor	r18, r18
    162c:	b0 0d       	add	r27, r0
    162e:	a1 1d       	adc	r26, r1
    1630:	62 1f       	adc	r22, r18
    1632:	73 9f       	mul	r23, r19
    1634:	b0 0d       	add	r27, r0
    1636:	a1 1d       	adc	r26, r1
    1638:	62 1f       	adc	r22, r18
    163a:	83 9f       	mul	r24, r19
    163c:	a0 0d       	add	r26, r0
    163e:	61 1d       	adc	r22, r1
    1640:	22 1f       	adc	r18, r18
    1642:	74 9f       	mul	r23, r20
    1644:	33 27       	eor	r19, r19
    1646:	a0 0d       	add	r26, r0
    1648:	61 1d       	adc	r22, r1
    164a:	23 1f       	adc	r18, r19
    164c:	84 9f       	mul	r24, r20
    164e:	60 0d       	add	r22, r0
    1650:	21 1d       	adc	r18, r1
    1652:	82 2f       	mov	r24, r18
    1654:	76 2f       	mov	r23, r22
    1656:	6a 2f       	mov	r22, r26
    1658:	11 24       	eor	r1, r1
    165a:	9f 57       	subi	r25, 0x7F	; 127
    165c:	50 40       	sbci	r21, 0x00	; 0
    165e:	8a f0       	brmi	.+34     	; 0x1682 <__mulsf3_pse+0x84>
    1660:	e1 f0       	breq	.+56     	; 0x169a <__mulsf3_pse+0x9c>
    1662:	88 23       	and	r24, r24
    1664:	4a f0       	brmi	.+18     	; 0x1678 <__mulsf3_pse+0x7a>
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	bb 1f       	adc	r27, r27
    166c:	66 1f       	adc	r22, r22
    166e:	77 1f       	adc	r23, r23
    1670:	88 1f       	adc	r24, r24
    1672:	91 50       	subi	r25, 0x01	; 1
    1674:	50 40       	sbci	r21, 0x00	; 0
    1676:	a9 f7       	brne	.-22     	; 0x1662 <__mulsf3_pse+0x64>
    1678:	9e 3f       	cpi	r25, 0xFE	; 254
    167a:	51 05       	cpc	r21, r1
    167c:	70 f0       	brcs	.+28     	; 0x169a <__mulsf3_pse+0x9c>
    167e:	60 cf       	rjmp	.-320    	; 0x1540 <__fp_inf>
    1680:	aa cf       	rjmp	.-172    	; 0x15d6 <__fp_szero>
    1682:	5f 3f       	cpi	r21, 0xFF	; 255
    1684:	ec f3       	brlt	.-6      	; 0x1680 <__mulsf3_pse+0x82>
    1686:	98 3e       	cpi	r25, 0xE8	; 232
    1688:	dc f3       	brlt	.-10     	; 0x1680 <__mulsf3_pse+0x82>
    168a:	86 95       	lsr	r24
    168c:	77 95       	ror	r23
    168e:	67 95       	ror	r22
    1690:	b7 95       	ror	r27
    1692:	f7 95       	ror	r31
    1694:	e7 95       	ror	r30
    1696:	9f 5f       	subi	r25, 0xFF	; 255
    1698:	c1 f7       	brne	.-16     	; 0x168a <__mulsf3_pse+0x8c>
    169a:	fe 2b       	or	r31, r30
    169c:	88 0f       	add	r24, r24
    169e:	91 1d       	adc	r25, r1
    16a0:	96 95       	lsr	r25
    16a2:	87 95       	ror	r24
    16a4:	97 f9       	bld	r25, 7
    16a6:	08 95       	ret

000016a8 <__divmodhi4>:
    16a8:	97 fb       	bst	r25, 7
    16aa:	07 2e       	mov	r0, r23
    16ac:	16 f4       	brtc	.+4      	; 0x16b2 <__divmodhi4+0xa>
    16ae:	00 94       	com	r0
    16b0:	06 d0       	rcall	.+12     	; 0x16be <__divmodhi4_neg1>
    16b2:	77 fd       	sbrc	r23, 7
    16b4:	08 d0       	rcall	.+16     	; 0x16c6 <__divmodhi4_neg2>
    16b6:	14 d0       	rcall	.+40     	; 0x16e0 <__udivmodhi4>
    16b8:	07 fc       	sbrc	r0, 7
    16ba:	05 d0       	rcall	.+10     	; 0x16c6 <__divmodhi4_neg2>
    16bc:	3e f4       	brtc	.+14     	; 0x16cc <__divmodhi4_exit>

000016be <__divmodhi4_neg1>:
    16be:	90 95       	com	r25
    16c0:	81 95       	neg	r24
    16c2:	9f 4f       	sbci	r25, 0xFF	; 255
    16c4:	08 95       	ret

000016c6 <__divmodhi4_neg2>:
    16c6:	70 95       	com	r23
    16c8:	61 95       	neg	r22
    16ca:	7f 4f       	sbci	r23, 0xFF	; 255

000016cc <__divmodhi4_exit>:
    16cc:	08 95       	ret

000016ce <__tablejump2__>:
    16ce:	ee 0f       	add	r30, r30
    16d0:	ff 1f       	adc	r31, r31
    16d2:	00 24       	eor	r0, r0
    16d4:	00 1c       	adc	r0, r0
    16d6:	0b be       	out	0x3b, r0	; 59
    16d8:	07 90       	elpm	r0, Z+
    16da:	f6 91       	elpm	r31, Z
    16dc:	e0 2d       	mov	r30, r0
    16de:	09 94       	ijmp

000016e0 <__udivmodhi4>:
    16e0:	aa 1b       	sub	r26, r26
    16e2:	bb 1b       	sub	r27, r27
    16e4:	51 e1       	ldi	r21, 0x11	; 17
    16e6:	07 c0       	rjmp	.+14     	; 0x16f6 <__udivmodhi4_ep>

000016e8 <__udivmodhi4_loop>:
    16e8:	aa 1f       	adc	r26, r26
    16ea:	bb 1f       	adc	r27, r27
    16ec:	a6 17       	cp	r26, r22
    16ee:	b7 07       	cpc	r27, r23
    16f0:	10 f0       	brcs	.+4      	; 0x16f6 <__udivmodhi4_ep>
    16f2:	a6 1b       	sub	r26, r22
    16f4:	b7 0b       	sbc	r27, r23

000016f6 <__udivmodhi4_ep>:
    16f6:	88 1f       	adc	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	5a 95       	dec	r21
    16fc:	a9 f7       	brne	.-22     	; 0x16e8 <__udivmodhi4_loop>
    16fe:	80 95       	com	r24
    1700:	90 95       	com	r25
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	08 95       	ret

00001708 <_exit>:
    1708:	f8 94       	cli

0000170a <__stop_program>:
    170a:	ff cf       	rjmp	.-2      	; 0x170a <__stop_program>
