
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000ab4  00000b48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ab4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000048  0080010a  0080010a  00000b52  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b84  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d26  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f4  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001622  00000000  00000000  00001d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00003340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001070c  00000000  00000000  0000367c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000100c  00000000  00000000  00013d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00014d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  00014efc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	d6 c3       	rjmp	.+1964   	; 0x7b2 <__vector_1>
   6:	00 00       	nop
   8:	94 c2       	rjmp	.+1320   	; 0x532 <__vector_2>
   a:	00 00       	nop
   c:	ba c2       	rjmp	.+1396   	; 0x582 <__vector_3>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c2       	rjmp	.+1200   	; 0x4e6 <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	27 04       	cpc	r2, r7
  8e:	2c 04       	cpc	r2, r12
  90:	38 04       	cpc	r3, r8
  92:	46 04       	cpc	r4, r6
  94:	4a 04       	cpc	r4, r10
  96:	4e 04       	cpc	r4, r14
  98:	e5 04       	cpc	r14, r5
  9a:	52 04       	cpc	r5, r2
  9c:	56 04       	cpc	r5, r6
  9e:	5b 04       	cpc	r5, r11
  a0:	62 04       	cpc	r6, r2
  a2:	69 04       	cpc	r6, r9
  a4:	70 04       	cpc	r7, r0
  a6:	77 04       	cpc	r7, r7
  a8:	7e 04       	cpc	r7, r14
  aa:	85 04       	cpc	r8, r5

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 eb       	ldi	r30, 0xB4	; 180
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	aa 30       	cpi	r26, 0x0A	; 10
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	aa e0       	ldi	r26, 0x0A	; 10
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a2 35       	cpi	r26, 0x52	; 82
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	75 d4       	rcall	.+2282   	; 0x9ce <main>
  e4:	e5 c4       	rjmp	.+2506   	; 0xab0 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <board_init>:
  e8:	08 95       	ret

000000ea <linje_get_error>:
	}
	
	else if(turn_done && count_waypoint >= 5){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
		twoway_turn_right = false;
		ongoing_turn = false;
		first_time = true;
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	f8 94       	cli
  f4:	00 91 41 01 	lds	r16, 0x0141
  f8:	10 91 42 01 	lds	r17, 0x0142
  fc:	78 94       	sei
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	c5 e0       	ldi	r28, 0x05	; 5
 10c:	d0 e0       	ldi	r29, 0x00	; 0
 10e:	a9 01       	movw	r20, r18
 110:	44 0f       	add	r20, r20
 112:	55 1f       	adc	r21, r21
 114:	f8 01       	movw	r30, r16
 116:	02 c0       	rjmp	.+4      	; 0x11c <linje_get_error+0x32>
 118:	f5 95       	asr	r31
 11a:	e7 95       	ror	r30
 11c:	4a 95       	dec	r20
 11e:	e2 f7       	brpl	.-8      	; 0x118 <linje_get_error+0x2e>
 120:	af 01       	movw	r20, r30
 122:	43 70       	andi	r20, 0x03	; 3
 124:	55 27       	eor	r21, r21
 126:	de 01       	movw	r26, r28
 128:	a2 1b       	sub	r26, r18
 12a:	b3 0b       	sbc	r27, r19
 12c:	4a 9f       	mul	r20, r26
 12e:	f0 01       	movw	r30, r0
 130:	4b 9f       	mul	r20, r27
 132:	f0 0d       	add	r31, r0
 134:	5a 9f       	mul	r21, r26
 136:	f0 0d       	add	r31, r0
 138:	11 24       	eor	r1, r1
 13a:	8e 0f       	add	r24, r30
 13c:	9f 1f       	adc	r25, r31
 13e:	64 0f       	add	r22, r20
 140:	75 1f       	adc	r23, r21
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	2b 30       	cpi	r18, 0x0B	; 11
 148:	31 05       	cpc	r19, r1
 14a:	09 f7       	brne	.-62     	; 0x10e <linje_get_error+0x24>
 14c:	81 d4       	rcall	.+2306   	; 0xa50 <__divmodhi4>
 14e:	cb 01       	movw	r24, r22
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <manual_drive>:
 15a:	80 91 1f 01 	lds	r24, 0x011F
 15e:	90 91 20 01 	lds	r25, 0x0120
 162:	00 97       	sbiw	r24, 0x00	; 0
 164:	29 f4       	brne	.+10     	; 0x170 <manual_drive+0x16>
 166:	2d 98       	cbi	0x05, 5	; 5
 168:	2e 98       	cbi	0x05, 6	; 5
 16a:	17 bc       	out	0x27, r1	; 39
 16c:	18 bc       	out	0x28, r1	; 40
 16e:	08 95       	ret
 170:	81 30       	cpi	r24, 0x01	; 1
 172:	91 05       	cpc	r25, r1
 174:	49 f4       	brne	.+18     	; 0x188 <manual_drive+0x2e>
 176:	2d 98       	cbi	0x05, 5	; 5
 178:	2e 98       	cbi	0x05, 6	; 5
 17a:	80 91 29 01 	lds	r24, 0x0129
 17e:	87 bd       	out	0x27, r24	; 39
 180:	80 91 27 01 	lds	r24, 0x0127
 184:	88 bd       	out	0x28, r24	; 40
 186:	08 95       	ret
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	91 05       	cpc	r25, r1
 18c:	59 f4       	brne	.+22     	; 0x1a4 <manual_drive+0x4a>
 18e:	85 b1       	in	r24, 0x05	; 5
 190:	80 66       	ori	r24, 0x60	; 96
 192:	85 b9       	out	0x05, r24	; 5
 194:	80 91 29 01 	lds	r24, 0x0129
 198:	8d 50       	subi	r24, 0x0D	; 13
 19a:	87 bd       	out	0x27, r24	; 39
 19c:	80 91 27 01 	lds	r24, 0x0127
 1a0:	88 bd       	out	0x28, r24	; 40
 1a2:	08 95       	ret
 1a4:	83 30       	cpi	r24, 0x03	; 3
 1a6:	91 05       	cpc	r25, r1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <manual_drive+0x70>
 1aa:	2d 98       	cbi	0x05, 5	; 5
 1ac:	2e 98       	cbi	0x05, 6	; 5
 1ae:	80 91 29 01 	lds	r24, 0x0129
 1b2:	87 bd       	out	0x27, r24	; 39
 1b4:	20 91 27 01 	lds	r18, 0x0127
 1b8:	90 91 28 01 	lds	r25, 0x0128
 1bc:	82 2f       	mov	r24, r18
 1be:	63 e0       	ldi	r22, 0x03	; 3
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	46 d4       	rcall	.+2188   	; 0xa50 <__divmodhi4>
 1c4:	26 1b       	sub	r18, r22
 1c6:	28 bd       	out	0x28, r18	; 40
 1c8:	08 95       	ret
 1ca:	84 30       	cpi	r24, 0x04	; 4
 1cc:	91 05       	cpc	r25, r1
 1ce:	81 f4       	brne	.+32     	; 0x1f0 <manual_drive+0x96>
 1d0:	2d 98       	cbi	0x05, 5	; 5
 1d2:	2e 98       	cbi	0x05, 6	; 5
 1d4:	20 91 29 01 	lds	r18, 0x0129
 1d8:	90 91 2a 01 	lds	r25, 0x012A
 1dc:	82 2f       	mov	r24, r18
 1de:	63 e0       	ldi	r22, 0x03	; 3
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	36 d4       	rcall	.+2156   	; 0xa50 <__divmodhi4>
 1e4:	26 1b       	sub	r18, r22
 1e6:	27 bd       	out	0x27, r18	; 39
 1e8:	80 91 27 01 	lds	r24, 0x0127
 1ec:	88 bd       	out	0x28, r24	; 40
 1ee:	08 95       	ret
 1f0:	85 30       	cpi	r24, 0x05	; 5
 1f2:	91 05       	cpc	r25, r1
 1f4:	49 f4       	brne	.+18     	; 0x208 <manual_drive+0xae>
 1f6:	2d 98       	cbi	0x05, 5	; 5
 1f8:	2e 9a       	sbi	0x05, 6	; 5
 1fa:	80 91 29 01 	lds	r24, 0x0129
 1fe:	87 bd       	out	0x27, r24	; 39
 200:	80 91 27 01 	lds	r24, 0x0127
 204:	88 bd       	out	0x28, r24	; 40
 206:	08 95       	ret
 208:	06 97       	sbiw	r24, 0x06	; 6
 20a:	49 f4       	brne	.+18     	; 0x21e <manual_drive+0xc4>
 20c:	2e 98       	cbi	0x05, 6	; 5
 20e:	2d 9a       	sbi	0x05, 5	; 5
 210:	80 91 29 01 	lds	r24, 0x0129
 214:	87 bd       	out	0x27, r24	; 39
 216:	80 91 27 01 	lds	r24, 0x0127
 21a:	88 bd       	out	0x28, r24	; 40
 21c:	08 95       	ret
 21e:	10 92 20 01 	sts	0x0120, r1
 222:	10 92 1f 01 	sts	0x011F, r1
 226:	08 95       	ret

00000228 <PD_for_lab>:
 228:	86 1b       	sub	r24, r22
 22a:	97 0b       	sbc	r25, r23
 22c:	90 93 4d 01 	sts	0x014D, r25
 230:	80 93 4c 01 	sts	0x014C, r24
 234:	20 91 1d 01 	lds	r18, 0x011D
 238:	30 91 1e 01 	lds	r19, 0x011E
 23c:	ac 01       	movw	r20, r24
 23e:	42 1b       	sub	r20, r18
 240:	53 0b       	sbc	r21, r19
 242:	50 93 1c 01 	sts	0x011C, r21
 246:	40 93 1b 01 	sts	0x011B, r20
 24a:	20 91 08 01 	lds	r18, 0x0108
 24e:	30 91 09 01 	lds	r19, 0x0109
 252:	82 9f       	mul	r24, r18
 254:	b0 01       	movw	r22, r0
 256:	83 9f       	mul	r24, r19
 258:	70 0d       	add	r23, r0
 25a:	92 9f       	mul	r25, r18
 25c:	70 0d       	add	r23, r0
 25e:	11 24       	eor	r1, r1
 260:	e0 91 06 01 	lds	r30, 0x0106
 264:	f0 91 07 01 	lds	r31, 0x0107
 268:	4e 9f       	mul	r20, r30
 26a:	90 01       	movw	r18, r0
 26c:	4f 9f       	mul	r20, r31
 26e:	30 0d       	add	r19, r0
 270:	5e 9f       	mul	r21, r30
 272:	30 0d       	add	r19, r0
 274:	11 24       	eor	r1, r1
 276:	26 0f       	add	r18, r22
 278:	37 1f       	adc	r19, r23
 27a:	30 93 4a 01 	sts	0x014A, r19
 27e:	20 93 49 01 	sts	0x0149, r18
 282:	90 93 1e 01 	sts	0x011E, r25
 286:	80 93 1d 01 	sts	0x011D, r24
 28a:	87 b5       	in	r24, 0x27	; 39
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	28 17       	cp	r18, r24
 290:	39 07       	cpc	r19, r25
 292:	34 f0       	brlt	.+12     	; 0x2a0 <PD_for_lab+0x78>
 294:	87 b5       	in	r24, 0x27	; 39
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 4a 01 	sts	0x014A, r25
 29c:	80 93 49 01 	sts	0x0149, r24
 2a0:	88 b5       	in	r24, 0x28	; 40
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	91 95       	neg	r25
 2a6:	81 95       	neg	r24
 2a8:	91 09       	sbc	r25, r1
 2aa:	20 91 49 01 	lds	r18, 0x0149
 2ae:	30 91 4a 01 	lds	r19, 0x014A
 2b2:	82 17       	cp	r24, r18
 2b4:	93 07       	cpc	r25, r19
 2b6:	4c f0       	brlt	.+18     	; 0x2ca <PD_for_lab+0xa2>
 2b8:	88 b5       	in	r24, 0x28	; 40
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	91 95       	neg	r25
 2be:	81 95       	neg	r24
 2c0:	91 09       	sbc	r25, r1
 2c2:	90 93 4a 01 	sts	0x014A, r25
 2c6:	80 93 49 01 	sts	0x0149, r24
 2ca:	80 91 49 01 	lds	r24, 0x0149
 2ce:	90 91 4a 01 	lds	r25, 0x014A
 2d2:	18 16       	cp	r1, r24
 2d4:	19 06       	cpc	r1, r25
 2d6:	44 f4       	brge	.+16     	; 0x2e8 <PD_for_lab+0xc0>
 2d8:	90 91 29 01 	lds	r25, 0x0129
 2dc:	98 1b       	sub	r25, r24
 2de:	97 bd       	out	0x27, r25	; 39
 2e0:	80 91 27 01 	lds	r24, 0x0127
 2e4:	88 bd       	out	0x28, r24	; 40
 2e6:	08 95       	ret
 2e8:	99 23       	and	r25, r25
 2ea:	54 f4       	brge	.+20     	; 0x300 <PD_for_lab+0xd8>
 2ec:	80 91 29 01 	lds	r24, 0x0129
 2f0:	87 bd       	out	0x27, r24	; 39
 2f2:	90 91 49 01 	lds	r25, 0x0149
 2f6:	80 91 27 01 	lds	r24, 0x0127
 2fa:	89 0f       	add	r24, r25
 2fc:	88 bd       	out	0x28, r24	; 40
 2fe:	08 95       	ret
 300:	89 2b       	or	r24, r25
 302:	31 f4       	brne	.+12     	; 0x310 <PD_for_lab+0xe8>
 304:	80 91 29 01 	lds	r24, 0x0129
 308:	87 bd       	out	0x27, r24	; 39
 30a:	80 91 27 01 	lds	r24, 0x0127
 30e:	88 bd       	out	0x28, r24	; 40
 310:	08 95       	ret

00000312 <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
 312:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
	int sensor_right_tmp = distans_right;
 314:	60 91 4f 01 	lds	r22, 0x014F
 318:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
 31a:	80 91 48 01 	lds	r24, 0x0148
 31e:	90 e0       	ldi	r25, 0x00	; 0
	sei();
 320:	78 94       	sei
	
	int st_value = 40;
	// Normalfall
	/*if((sensor_left_tmp < st_value && sensor_front_tmp > st_value && sensor_right_tmp < st_value) &&
	(!oneway_turn && !waypoint && !twoway_turn_left && !twoway_turn_right))*/
		PD_for_lab(sensor_left_tmp,sensor_right_tmp);
 322:	82 cf       	rjmp	.-252    	; 0x228 <PD_for_lab>
 324:	08 95       	ret

00000326 <linje>:


	 
void linje(void){
	//**********Scaler, depends on P and D, check with matlab to get output to be : (output = speedvalue - 20)****
	scaler = 1; //testa i matlab, nya derivatan med dt ger mycket hÃ¶gre vÃ¤rden
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	90 93 10 01 	sts	0x0110, r25
 32e:	80 93 0f 01 	sts	0x010F, r24
	//************************************************************************************************************
	cli();
 332:	f8 94       	cli
	int current_position_tmp = current_position;
 334:	40 91 11 01 	lds	r20, 0x0111
 338:	50 91 12 01 	lds	r21, 0x0112
	sei();
 33c:	78 94       	sei
	if(current_position < 0)
 33e:	80 91 11 01 	lds	r24, 0x0111
 342:	90 91 12 01 	lds	r25, 0x0112
 346:	99 23       	and	r25, r25
 348:	24 f4       	brge	.+8      	; 0x352 <linje+0x2c>
	PORTD ^= (1 << PD0);
 34a:	9b b1       	in	r25, 0x0b	; 11
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	89 27       	eor	r24, r25
 350:	8b b9       	out	0x0b, r24	; 11
	if(current_position > 0)
 352:	80 91 11 01 	lds	r24, 0x0111
 356:	90 91 12 01 	lds	r25, 0x0112
 35a:	18 16       	cp	r1, r24
 35c:	19 06       	cpc	r1, r25
 35e:	24 f4       	brge	.+8      	; 0x368 <linje+0x42>
	PORTD ^= (1 << PD1);
 360:	9b b1       	in	r25, 0x0b	; 11
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	89 27       	eor	r24, r25
 366:	8b b9       	out	0x0b, r24	; 11
	current_error = setpoint - current_position_tmp;
 368:	20 91 19 01 	lds	r18, 0x0119
 36c:	30 91 1a 01 	lds	r19, 0x011A
 370:	24 1b       	sub	r18, r20
 372:	35 0b       	sbc	r19, r21
 374:	30 93 18 01 	sts	0x0118, r19
 378:	20 93 17 01 	sts	0x0117, r18
	derivate = (current_error -previous_error) * dt;					// Tror det var dt som saknades fÃ¶r derivatan
 37c:	80 91 13 01 	lds	r24, 0x0113
 380:	90 91 14 01 	lds	r25, 0x0114
 384:	b9 01       	movw	r22, r18
 386:	68 1b       	sub	r22, r24
 388:	79 0b       	sbc	r23, r25
 38a:	80 91 00 01 	lds	r24, 0x0100
 38e:	90 91 01 01 	lds	r25, 0x0101
 392:	68 9f       	mul	r22, r24
 394:	a0 01       	movw	r20, r0
 396:	69 9f       	mul	r22, r25
 398:	50 0d       	add	r21, r0
 39a:	78 9f       	mul	r23, r24
 39c:	50 0d       	add	r21, r0
 39e:	11 24       	eor	r1, r1
 3a0:	50 93 1c 01 	sts	0x011C, r21
 3a4:	40 93 1b 01 	sts	0x011B, r20
	output = (p_constant * current_error + d_constant * derivate) / scaler;
 3a8:	80 91 04 01 	lds	r24, 0x0104
 3ac:	90 91 05 01 	lds	r25, 0x0105
 3b0:	28 9f       	mul	r18, r24
 3b2:	b0 01       	movw	r22, r0
 3b4:	29 9f       	mul	r18, r25
 3b6:	70 0d       	add	r23, r0
 3b8:	38 9f       	mul	r19, r24
 3ba:	70 0d       	add	r23, r0
 3bc:	11 24       	eor	r1, r1
 3be:	e0 91 02 01 	lds	r30, 0x0102
 3c2:	f0 91 03 01 	lds	r31, 0x0103
 3c6:	4e 9f       	mul	r20, r30
 3c8:	c0 01       	movw	r24, r0
 3ca:	4f 9f       	mul	r20, r31
 3cc:	90 0d       	add	r25, r0
 3ce:	5e 9f       	mul	r21, r30
 3d0:	90 0d       	add	r25, r0
 3d2:	11 24       	eor	r1, r1
 3d4:	86 0f       	add	r24, r22
 3d6:	97 1f       	adc	r25, r23
 3d8:	60 91 0f 01 	lds	r22, 0x010F
 3dc:	70 91 10 01 	lds	r23, 0x0110
 3e0:	37 d3       	rcall	.+1646   	; 0xa50 <__divmodhi4>
 3e2:	cb 01       	movw	r24, r22
 3e4:	70 93 16 01 	sts	0x0116, r23
 3e8:	60 93 15 01 	sts	0x0115, r22
	previous_error = current_error;
 3ec:	30 93 14 01 	sts	0x0114, r19
 3f0:	20 93 13 01 	sts	0x0113, r18
//***********************************
//Reglering
//***********************************		
	if(output < 0){									// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
 3f4:	99 23       	and	r25, r25
 3f6:	e4 f4       	brge	.+56     	; 0x430 <linje+0x10a>
		if(abs(output) >= right){				// FÃ¶r att unvika mÃ¤ttnad i regleringen
 3f8:	99 23       	and	r25, r25
 3fa:	24 f4       	brge	.+8      	; 0x404 <linje+0xde>
 3fc:	88 27       	eor	r24, r24
 3fe:	99 27       	eor	r25, r25
 400:	86 1b       	sub	r24, r22
 402:	97 0b       	sbc	r25, r23
 404:	20 91 27 01 	lds	r18, 0x0127
 408:	30 91 28 01 	lds	r19, 0x0128
 40c:	82 17       	cp	r24, r18
 40e:	93 07       	cpc	r25, r19
 410:	2c f0       	brlt	.+10     	; 0x41c <linje+0xf6>
			motor_right = 0;					// SÃ¤tta nÃ¥got lÃ¥gt vÃ¤rde men sÃ¥ att den inte stÃ¤nger av motorn helt...
 412:	18 bc       	out	0x28, r1	; 40
			motor_left = left;
 414:	80 91 29 01 	lds	r24, 0x0129
 418:	87 bd       	out	0x27, r24	; 39
 41a:	08 95       	ret
		}
		else {
			motor_left = left;
 41c:	80 91 29 01 	lds	r24, 0x0129
 420:	87 bd       	out	0x27, r24	; 39
			motor_right = right + output;
 422:	90 91 15 01 	lds	r25, 0x0115
 426:	80 91 27 01 	lds	r24, 0x0127
 42a:	89 0f       	add	r24, r25
 42c:	88 bd       	out	0x28, r24	; 40
 42e:	08 95       	ret
			output = -right;
		motor_left = left;
		motor_right = right + output; */

	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
 430:	18 16       	cp	r1, r24
 432:	19 06       	cpc	r1, r25
 434:	ec f4       	brge	.+58     	; 0x470 <linje+0x14a>
		if(abs(output) >= left){				// FÃ¶r att unvika mÃ¤ttnad i regleringen
 436:	cb 01       	movw	r24, r22
 438:	99 23       	and	r25, r25
 43a:	24 f4       	brge	.+8      	; 0x444 <linje+0x11e>
 43c:	88 27       	eor	r24, r24
 43e:	99 27       	eor	r25, r25
 440:	86 1b       	sub	r24, r22
 442:	97 0b       	sbc	r25, r23
 444:	20 91 29 01 	lds	r18, 0x0129
 448:	30 91 2a 01 	lds	r19, 0x012A
 44c:	82 17       	cp	r24, r18
 44e:	93 07       	cpc	r25, r19
 450:	2c f0       	brlt	.+10     	; 0x45c <linje+0x136>
			motor_left = 0;
 452:	17 bc       	out	0x27, r1	; 39
			motor_left = right;
 454:	80 91 27 01 	lds	r24, 0x0127
 458:	87 bd       	out	0x27, r24	; 39
 45a:	08 95       	ret
		}
		else {
			motor_right = right;
 45c:	80 91 27 01 	lds	r24, 0x0127
 460:	88 bd       	out	0x28, r24	; 40
			motor_left = left - output;
 462:	80 91 29 01 	lds	r24, 0x0129
 466:	90 91 15 01 	lds	r25, 0x0115
 46a:	89 1b       	sub	r24, r25
 46c:	87 bd       	out	0x27, r24	; 39
 46e:	08 95       	ret
		}
			
	}
	else if(output==0){
 470:	89 2b       	or	r24, r25
 472:	31 f4       	brne	.+12     	; 0x480 <linje+0x15a>
		motor_left = left;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
 474:	80 91 29 01 	lds	r24, 0x0129
 478:	87 bd       	out	0x27, r24	; 39
		motor_right = right;
 47a:	80 91 27 01 	lds	r24, 0x0127
 47e:	88 bd       	out	0x28, r24	; 40
 480:	08 95       	ret

00000482 <linje_main>:


void linje_main()
{
	//Reflex_data=Reflex_data & 0xffffff;
	current_position = linje_get_error();
 482:	33 de       	rcall	.-922    	; 0xea <linje_get_error>
 484:	90 93 12 01 	sts	0x0112, r25
 488:	80 93 11 01 	sts	0x0111, r24
	linje();
 48c:	4c cf       	rjmp	.-360    	; 0x326 <linje>
 48e:	08 95       	ret

00000490 <regulator>:

int regulator_mode=0;


void regulator(){
	if(regulator_mode==1){
 490:	80 91 21 01 	lds	r24, 0x0121
 494:	90 91 22 01 	lds	r25, 0x0122
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	11 f4       	brne	.+4      	; 0x4a0 <regulator+0x10>
		//linje();
		linje_main();
 49c:	f2 cf       	rjmp	.-28     	; 0x482 <linje_main>
 49e:	08 95       	ret
	}
	else
	{	
		labyreg();//kalla pÃ¥ labyrint funktion
 4a0:	38 cf       	rjmp	.-400    	; 0x312 <labyreg>
 4a2:	08 95       	ret

000004a4 <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
 4a4:	84 b5       	in	r24, 0x24	; 36
 4a6:	83 6a       	ori	r24, 0xA3	; 163
 4a8:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
 4aa:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
 4ac:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
 4ae:	85 b5       	in	r24, 0x25	; 37
 4b0:	83 60       	ori	r24, 0x03	; 3
 4b2:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
 4b4:	88 e7       	ldi	r24, 0x78	; 120
 4b6:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
 4b8:	85 b1       	in	r24, 0x05	; 5
 4ba:	15 b8       	out	0x05, r1	; 5
 4bc:	08 95       	ret

000004be <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
 4be:	83 e0       	ldi	r24, 0x03	; 3
 4c0:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
 4c2:	e1 e8       	ldi	r30, 0x81	; 129
 4c4:	f0 e0       	ldi	r31, 0x00	; 0
 4c6:	80 81       	ld	r24, Z
 4c8:	8d 60       	ori	r24, 0x0D	; 13
 4ca:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
 4cc:	80 ea       	ldi	r24, 0xA0	; 160
 4ce:	95 e0       	ldi	r25, 0x05	; 5
 4d0:	90 93 89 00 	sts	0x0089, r25
 4d4:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 4d8:	ef e6       	ldi	r30, 0x6F	; 111
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
 4e2:	b1 9a       	sbi	0x16, 1	; 22
 4e4:	08 95       	ret

000004e6 <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	8f 93       	push	r24
 4f2:	9f 93       	push	r25
	regler_ready=1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	90 93 26 01 	sts	0x0126, r25
 4fc:	80 93 25 01 	sts	0x0125, r24
	//if(counter_timer<10)
	//counter_timer++;
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
 500:	80 91 23 01 	lds	r24, 0x0123
 504:	90 91 24 01 	lds	r25, 0x0124
 508:	01 96       	adiw	r24, 0x01	; 1
 50a:	90 93 24 01 	sts	0x0124, r25
 50e:	80 93 23 01 	sts	0x0123, r24
}
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
 520:	8d b3       	in	r24, 0x1d	; 29
 522:	86 60       	ori	r24, 0x06	; 6
 524:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
 526:	e9 e6       	ldi	r30, 0x69	; 105
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	88 62       	ori	r24, 0x28	; 40
 52e:	80 83       	st	Z, r24
 530:	08 95       	ret

00000532 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
 532:	1f 92       	push	r1
 534:	0f 92       	push	r0
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	0f 92       	push	r0
 53a:	11 24       	eor	r1, r1
 53c:	8f 93       	push	r24
 53e:	9f 93       	push	r25
	if(drive_mode==1){
 540:	80 91 2d 01 	lds	r24, 0x012D
 544:	90 91 2e 01 	lds	r25, 0x012E
 548:	01 97       	sbiw	r24, 0x01	; 1
 54a:	39 f4       	brne	.+14     	; 0x55a <__vector_2+0x28>
		drive_mode=0;
 54c:	10 92 2e 01 	sts	0x012E, r1
 550:	10 92 2d 01 	sts	0x012D, r1
		PORTD |= (1 << PD1);
 554:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
 556:	58 98       	cbi	0x0b, 0	; 11
 558:	0c c0       	rjmp	.+24     	; 0x572 <__vector_2+0x40>
	}
	else{
		start=0;
 55a:	10 92 2c 01 	sts	0x012C, r1
 55e:	10 92 2b 01 	sts	0x012B, r1
		drive_mode=1;
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	90 93 2e 01 	sts	0x012E, r25
 56a:	80 93 2d 01 	sts	0x012D, r24
		PORTD |= (1 << PD0);
 56e:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
 570:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
 572:	e1 9a       	sbi	0x1c, 1	; 28
}
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	0f 90       	pop	r0
 57a:	0f be       	out	0x3f, r0	; 63
 57c:	0f 90       	pop	r0
 57e:	1f 90       	pop	r1
 580:	18 95       	reti

00000582 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
	if(start==0){
 590:	80 91 2b 01 	lds	r24, 0x012B
 594:	90 91 2c 01 	lds	r25, 0x012C
 598:	89 2b       	or	r24, r25
 59a:	39 f4       	brne	.+14     	; 0x5aa <__vector_3+0x28>
		start=1;
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	90 93 2c 01 	sts	0x012C, r25
 5a4:	80 93 2b 01 	sts	0x012B, r24
 5a8:	04 c0       	rjmp	.+8      	; 0x5b2 <__vector_3+0x30>
	}
	else{
		start=0;
 5aa:	10 92 2c 01 	sts	0x012C, r1
 5ae:	10 92 2b 01 	sts	0x012B, r1
	}
	EIFR |= (1<< INTF2);
 5b2:	e2 9a       	sbi	0x1c, 2	; 28
}
 5b4:	9f 91       	pop	r25
 5b6:	8f 91       	pop	r24
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
 5c2:	88 23       	and	r24, r24
 5c4:	69 f0       	breq	.+26     	; 0x5e0 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
 5c6:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
 5c8:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
 5ca:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
 5cc:	e9 e6       	ldi	r30, 0x69	; 105
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	83 60       	ori	r24, 0x03	; 3
 5d4:	80 83       	st	Z, r24
		TWBR = 0x10;
 5d6:	80 e1       	ldi	r24, 0x10	; 16
 5d8:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 5dc:	10 92 b9 00 	sts	0x00B9, r1
 5e0:	08 95       	ret

000005e2 <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){
 5e2:	8f 92       	push	r8
 5e4:	9f 92       	push	r9
 5e6:	af 92       	push	r10
 5e8:	bf 92       	push	r11
 5ea:	cf 92       	push	r12
 5ec:	df 92       	push	r13
 5ee:	ef 92       	push	r14
 5f0:	ff 92       	push	r15
 5f2:	0f 93       	push	r16
 5f4:	1f 93       	push	r17
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
 5fa:	eb 01       	movw	r28, r22
 5fc:	08 81       	ld	r16, Y
 5fe:	02 95       	swap	r16
 600:	0f 70       	andi	r16, 0x0F	; 15
 602:	10 e0       	ldi	r17, 0x00	; 0
 604:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
 606:	68 94       	set
 608:	ee 24       	eor	r14, r14
 60a:	e3 f8       	bld	r14, 3
 60c:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 612:	ec eb       	ldi	r30, 0xBC	; 188
 614:	f0 e0       	ldi	r31, 0x00	; 0
 616:	0f 2e       	mov	r0, r31
 618:	f4 ea       	ldi	r31, 0xA4	; 164
 61a:	df 2e       	mov	r13, r31
 61c:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
 61e:	a9 eb       	ldi	r26, 0xB9	; 185
 620:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 622:	8e 7f       	andi	r24, 0xFE	; 254
 624:	c8 2e       	mov	r12, r24
 626:	6b eb       	ldi	r22, 0xBB	; 187
 628:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 62a:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;
 62c:	68 94       	set
 62e:	aa 24       	eor	r10, r10
 630:	a4 f8       	bld	r10, 4
 632:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 634:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 636:	90 81       	ld	r25, Z
 638:	99 23       	and	r25, r25
 63a:	ec f7       	brge	.-6      	; 0x636 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status en start
 63c:	2c 91       	ld	r18, X
 63e:	28 7f       	andi	r18, 0xF8	; 248
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	2e 15       	cp	r18, r14
 644:	3f 05       	cpc	r19, r15
 646:	69 f5       	brne	.+90     	; 0x6a2 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 648:	eb 01       	movw	r28, r22
 64a:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 64c:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 64e:	90 81       	ld	r25, Z
 650:	99 23       	and	r25, r25
 652:	ec f7       	brge	.-6      	; 0x64e <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18)
 654:	9c 91       	ld	r25, X
 656:	98 7f       	andi	r25, 0xF8	; 248
 658:	98 31       	cpi	r25, 0x18	; 24
 65a:	29 f0       	breq	.+10     	; 0x666 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 65c:	84 e9       	ldi	r24, 0x94	; 148
 65e:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	1f c0       	rjmp	.+62     	; 0x6a4 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];
 666:	e4 01       	movw	r28, r8
 668:	99 91       	ld	r25, Y+
 66a:	4e 01       	movw	r8, r28
 66c:	eb 01       	movw	r28, r22
 66e:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
 670:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
 672:	90 81       	ld	r25, Z
 674:	99 23       	and	r25, r25
 676:	ec f7       	brge	.-6      	; 0x672 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
 678:	9c 91       	ld	r25, X
 67a:	98 7f       	andi	r25, 0xF8	; 248
 67c:	98 32       	cpi	r25, 0x28	; 40
 67e:	29 f0       	breq	.+10     	; 0x68a <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 680:	84 e9       	ldi	r24, 0x94	; 148
 682:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0d c0       	rjmp	.+26     	; 0x6a4 <i2c_send+0xc2>
	}
	counter++;
 68a:	4f 5f       	subi	r20, 0xFF	; 255
 68c:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;
 68e:	ea 2c       	mov	r14, r10
 690:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);
 692:	04 17       	cp	r16, r20
 694:	15 07       	cpc	r17, r21
 696:	74 f6       	brge	.-100    	; 0x634 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 698:	84 e9       	ldi	r24, 0x94	; 148
 69a:	80 93 bc 00 	sts	0x00BC, r24
	return true;
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	01 c0       	rjmp	.+2      	; 0x6a4 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
		return false;		
 6a2:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;
	}while (counter <= number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	ff 90       	pop	r15
 6ae:	ef 90       	pop	r14
 6b0:	df 90       	pop	r13
 6b2:	cf 90       	pop	r12
 6b4:	bf 90       	pop	r11
 6b6:	af 90       	pop	r10
 6b8:	9f 90       	pop	r9
 6ba:	8f 90       	pop	r8
 6bc:	08 95       	ret

000006be <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 6be:	ec eb       	ldi	r30, 0xBC	; 188
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	90 81       	ld	r25, Z
 6c4:	94 6a       	ori	r25, 0xA4	; 164
 6c6:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 6c8:	90 81       	ld	r25, Z
 6ca:	99 23       	and	r25, r25
 6cc:	ec f7       	brge	.-6      	; 0x6c8 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
 6ce:	90 91 b9 00 	lds	r25, 0x00B9
 6d2:	98 7f       	andi	r25, 0xF8	; 248
 6d4:	98 30       	cpi	r25, 0x08	; 8
 6d6:	29 f0       	breq	.+10     	; 0x6e2 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6d8:	84 e9       	ldi	r24, 0x94	; 148
 6da:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 6de:	80 e0       	ldi	r24, 0x00	; 0
 6e0:	08 95       	ret
	}
	TWDR = prossesor | 0x01;
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 6e8:	84 e8       	ldi	r24, 0x84	; 132
 6ea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 6ee:	ec eb       	ldi	r30, 0xBC	; 188
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	88 23       	and	r24, r24
 6f6:	ec f7       	brge	.-6      	; 0x6f2 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK)
 6f8:	80 91 b9 00 	lds	r24, 0x00B9
 6fc:	88 7f       	andi	r24, 0xF8	; 248
 6fe:	80 34       	cpi	r24, 0x40	; 64
 700:	29 f0       	breq	.+10     	; 0x70c <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 702:	84 e9       	ldi	r24, 0x94	; 148
 704:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
 70c:	ec eb       	ldi	r30, 0xBC	; 188
 70e:	f0 e0       	ldi	r31, 0x00	; 0
 710:	80 81       	ld	r24, Z
 712:	84 68       	ori	r24, 0x84	; 132
 714:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 716:	80 81       	ld	r24, Z
 718:	88 23       	and	r24, r24
 71a:	ec f7       	brge	.-6      	; 0x716 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR;
 71c:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 720:	94 e9       	ldi	r25, 0x94	; 148
 722:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 726:	08 95       	ret

00000728 <i2c_store_data>:

void i2c_store_data(byte data)
{
	static int counter;
	static int size;
	if(counter == 0){
 728:	20 91 0c 01 	lds	r18, 0x010C
 72c:	30 91 0d 01 	lds	r19, 0x010D
 730:	21 15       	cp	r18, r1
 732:	31 05       	cpc	r19, r1
 734:	89 f4       	brne	.+34     	; 0x758 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
 736:	28 2f       	mov	r18, r24
 738:	22 95       	swap	r18
 73a:	2f 70       	andi	r18, 0x0F	; 15
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	30 93 0b 01 	sts	0x010B, r19
 742:	20 93 0a 01 	sts	0x010A, r18
		i2c_data[counter] = data;
 746:	80 93 32 01 	sts	0x0132, r24
		counter++;
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	90 93 0d 01 	sts	0x010D, r25
 752:	80 93 0c 01 	sts	0x010C, r24
 756:	18 c0       	rjmp	.+48     	; 0x788 <i2c_store_data+0x60>
	}
	else if(counter < size+1){
 758:	40 91 0a 01 	lds	r20, 0x010A
 75c:	50 91 0b 01 	lds	r21, 0x010B
 760:	4f 5f       	subi	r20, 0xFF	; 255
 762:	5f 4f       	sbci	r21, 0xFF	; 255
 764:	24 17       	cp	r18, r20
 766:	35 07       	cpc	r19, r21
 768:	5c f4       	brge	.+22     	; 0x780 <i2c_store_data+0x58>
		i2c_data[counter] = data;
 76a:	f9 01       	movw	r30, r18
 76c:	ee 5c       	subi	r30, 0xCE	; 206
 76e:	fe 4f       	sbci	r31, 0xFE	; 254
 770:	80 83       	st	Z, r24
		counter++;
 772:	2f 5f       	subi	r18, 0xFF	; 255
 774:	3f 4f       	sbci	r19, 0xFF	; 255
 776:	30 93 0d 01 	sts	0x010D, r19
 77a:	20 93 0c 01 	sts	0x010C, r18
 77e:	04 c0       	rjmp	.+8      	; 0x788 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
 780:	f9 01       	movw	r30, r18
 782:	ee 5c       	subi	r30, 0xCE	; 206
 784:	fe 4f       	sbci	r31, 0xFE	; 254
 786:	80 83       	st	Z, r24
	}
	if(counter>=size+1){
 788:	80 91 0a 01 	lds	r24, 0x010A
 78c:	90 91 0b 01 	lds	r25, 0x010B
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	20 91 0c 01 	lds	r18, 0x010C
 796:	30 91 0d 01 	lds	r19, 0x010D
 79a:	28 17       	cp	r18, r24
 79c:	39 07       	cpc	r19, r25
 79e:	44 f0       	brlt	.+16     	; 0x7b0 <i2c_store_data+0x88>
		i2c_newdata = true;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	80 93 0e 01 	sts	0x010E, r24
		counter = 0;
 7a6:	10 92 0d 01 	sts	0x010D, r1
 7aa:	10 92 0c 01 	sts	0x010C, r1
		EIMSK &= ~(1<<INT0);
 7ae:	e8 98       	cbi	0x1d, 0	; 29
 7b0:	08 95       	ret

000007b2 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)
{	
 7b2:	1f 92       	push	r1
 7b4:	0f 92       	push	r0
 7b6:	0f b6       	in	r0, 0x3f	; 63
 7b8:	0f 92       	push	r0
 7ba:	11 24       	eor	r1, r1
 7bc:	0b b6       	in	r0, 0x3b	; 59
 7be:	0f 92       	push	r0
 7c0:	2f 93       	push	r18
 7c2:	3f 93       	push	r19
 7c4:	4f 93       	push	r20
 7c6:	5f 93       	push	r21
 7c8:	6f 93       	push	r22
 7ca:	7f 93       	push	r23
 7cc:	8f 93       	push	r24
 7ce:	9f 93       	push	r25
 7d0:	af 93       	push	r26
 7d2:	bf 93       	push	r27
 7d4:	ef 93       	push	r30
 7d6:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7d8:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
 7da:	36 9b       	sbis	0x06, 6	; 6
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // processor 1
 7de:	82 e0       	ldi	r24, 0x02	; 2
 7e0:	6e df       	rcall	.-292    	; 0x6be <i2c_recive>
 7e2:	a2 df       	rcall	.-188    	; 0x728 <i2c_store_data>
 7e4:	05 c0       	rjmp	.+10     	; 0x7f0 <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  PINC&(1<< PC7)>0
 7e6:	37 9b       	sbis	0x06, 7	; 6
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // processor 3
 7ea:	86 e0       	ldi	r24, 0x06	; 6
 7ec:	68 df       	rcall	.-304    	; 0x6be <i2c_recive>
 7ee:	9c df       	rcall	.-200    	; 0x728 <i2c_store_data>
	}
}
 7f0:	ff 91       	pop	r31
 7f2:	ef 91       	pop	r30
 7f4:	bf 91       	pop	r27
 7f6:	af 91       	pop	r26
 7f8:	9f 91       	pop	r25
 7fa:	8f 91       	pop	r24
 7fc:	7f 91       	pop	r23
 7fe:	6f 91       	pop	r22
 800:	5f 91       	pop	r21
 802:	4f 91       	pop	r20
 804:	3f 91       	pop	r19
 806:	2f 91       	pop	r18
 808:	0f 90       	pop	r0
 80a:	0b be       	out	0x3b, r0	; 59
 80c:	0f 90       	pop	r0
 80e:	0f be       	out	0x3f, r0	; 63
 810:	0f 90       	pop	r0
 812:	1f 90       	pop	r1
 814:	18 95       	reti

00000816 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){
	if(i2c_newdata==true)
 816:	80 91 0e 01 	lds	r24, 0x010E
 81a:	88 23       	and	r24, r24
 81c:	09 f4       	brne	.+2      	; 0x820 <i2c_handel_data+0xa>
 81e:	d6 c0       	rjmp	.+428    	; 0x9cc <i2c_handel_data+0x1b6>
	{
		i2c_newdata=false;
 820:	10 92 0e 01 	sts	0x010E, r1
		if(!((i2c_data[0]>>3)&0x01)){
 824:	80 91 32 01 	lds	r24, 0x0132
 828:	83 fd       	sbrc	r24, 3
 82a:	07 c0       	rjmp	.+14     	; 0x83a <i2c_handel_data+0x24>
 82c:	84 e6       	ldi	r24, 0x64	; 100
 82e:	8a 95       	dec	r24
 830:	f1 f7       	brne	.-4      	; 0x82e <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
 832:	62 e3       	ldi	r22, 0x32	; 50
 834:	71 e0       	ldi	r23, 0x01	; 1
 836:	82 e0       	ldi	r24, 0x02	; 2
 838:	d4 de       	rcall	.-600    	; 0x5e2 <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
 83a:	80 91 32 01 	lds	r24, 0x0132
 83e:	e8 2f       	mov	r30, r24
 840:	ef 70       	andi	r30, 0x0F	; 15
 842:	8e 2f       	mov	r24, r30
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	fc 01       	movw	r30, r24
 848:	ea 5b       	subi	r30, 0xBA	; 186
 84a:	ff 4f       	sbci	r31, 0xFF	; 255
 84c:	14 c1       	rjmp	.+552    	; 0xa76 <__tablejump2__>
			case 0x00 :
				batteri=i2c_data[1],i2c_data[2];
 84e:	80 91 33 01 	lds	r24, 0x0133
 852:	80 93 4b 01 	sts	0x014B, r24
				break;
 856:	b9 c0       	rjmp	.+370    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x01 :
				//sensor_right = i2c_data[3];
				distans_right=i2c_data[3];
 858:	e2 e3       	ldi	r30, 0x32	; 50
 85a:	f1 e0       	ldi	r31, 0x01	; 1
 85c:	83 81       	ldd	r24, Z+3	; 0x03
 85e:	80 93 4f 01 	sts	0x014F, r24
				distans_fram = i2c_data[2];
 862:	82 81       	ldd	r24, Z+2	; 0x02
 864:	80 93 45 01 	sts	0x0145, r24
				//sensor_left = i2c_data[1];
				distans_left=i2c_data[1];
 868:	81 81       	ldd	r24, Z+1	; 0x01
 86a:	80 93 48 01 	sts	0x0148, r24
				break;
 86e:	ad c0       	rjmp	.+346    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x02 :
				Reflex_data = (i2c_data[3]<<16) + (i2c_data[2]<<8) + i2c_data[1];
 870:	e2 e3       	ldi	r30, 0x32	; 50
 872:	f1 e0       	ldi	r31, 0x01	; 1
 874:	82 81       	ldd	r24, Z+2	; 0x02
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	98 2f       	mov	r25, r24
 87a:	88 27       	eor	r24, r24
 87c:	21 81       	ldd	r18, Z+1	; 0x01
 87e:	82 0f       	add	r24, r18
 880:	91 1d       	adc	r25, r1
 882:	90 93 42 01 	sts	0x0142, r25
 886:	80 93 41 01 	sts	0x0141, r24
				break;
 88a:	9f c0       	rjmp	.+318    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x03 :
				RGB_data=1;//"röd";"
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	80 93 4e 01 	sts	0x014E, r24
				break;
 892:	9b c0       	rjmp	.+310    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x04 :
				RGB_data=2;//"grön";
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	80 93 4e 01 	sts	0x014E, r24
				break;		
 89a:	97 c0       	rjmp	.+302    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x05 :
				RGB_data=3;//"blå";
 89c:	83 e0       	ldi	r24, 0x03	; 3
 89e:	80 93 4e 01 	sts	0x014E, r24
				break;
 8a2:	93 c0       	rjmp	.+294    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x06 :
			
				break;
			case 0x07 :
				gyro_90=true;
 8a4:	81 e0       	ldi	r24, 0x01	; 1
 8a6:	80 93 31 01 	sts	0x0131, r24
				break;
 8aa:	8f c0       	rjmp	.+286    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x08 :
				manual_function=0;
 8ac:	10 92 20 01 	sts	0x0120, r1
 8b0:	10 92 1f 01 	sts	0x011F, r1
				break;
 8b4:	8a c0       	rjmp	.+276    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x09 :
				manual_function=1;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	90 93 20 01 	sts	0x0120, r25
 8be:	80 93 1f 01 	sts	0x011F, r24
				
				//PORTD |= (1 << PD0); // heej
				break;
 8c2:	83 c0       	rjmp	.+262    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x0a :
			//PORTD |= (1 << PD0); // heej
				manual_function=2;
 8c4:	82 e0       	ldi	r24, 0x02	; 2
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	90 93 20 01 	sts	0x0120, r25
 8cc:	80 93 1f 01 	sts	0x011F, r24
				
				break;
 8d0:	7c c0       	rjmp	.+248    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x0b :
			//PORTD |= (1 << PD0); // heej
				manual_function=4;
 8d2:	84 e0       	ldi	r24, 0x04	; 4
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	90 93 20 01 	sts	0x0120, r25
 8da:	80 93 1f 01 	sts	0x011F, r24
				
				break;
 8de:	75 c0       	rjmp	.+234    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x0c :
			//PORTD |= (1 << PD0); // heej
				manual_function=3;
 8e0:	83 e0       	ldi	r24, 0x03	; 3
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	90 93 20 01 	sts	0x0120, r25
 8e8:	80 93 1f 01 	sts	0x011F, r24
				
				break;
 8ec:	6e c0       	rjmp	.+220    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x0d :
			//PORTD |= (1 << PD0); // heej
				manual_function=6;
 8ee:	86 e0       	ldi	r24, 0x06	; 6
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	90 93 20 01 	sts	0x0120, r25
 8f6:	80 93 1f 01 	sts	0x011F, r24
				
				break;
 8fa:	67 c0       	rjmp	.+206    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x0e :
			//PORTD |= (1 << PD0); // heej
				manual_function=5;
 8fc:	85 e0       	ldi	r24, 0x05	; 5
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	90 93 20 01 	sts	0x0120, r25
 904:	80 93 1f 01 	sts	0x011F, r24
				
				break;
 908:	60 c0       	rjmp	.+192    	; 0x9ca <i2c_handel_data+0x1b4>
			case 0x0f :							// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på)
				if(i2c_data[1]==0xf0){
 90a:	80 91 33 01 	lds	r24, 0x0133
 90e:	80 3f       	cpi	r24, 0xF0	; 240
 910:	91 f4       	brne	.+36     	; 0x936 <i2c_handel_data+0x120>
					if(start==1){
 912:	80 91 2b 01 	lds	r24, 0x012B
 916:	90 91 2c 01 	lds	r25, 0x012C
 91a:	01 97       	sbiw	r24, 0x01	; 1
 91c:	29 f4       	brne	.+10     	; 0x928 <i2c_handel_data+0x112>
						start=0;
 91e:	10 92 2c 01 	sts	0x012C, r1
 922:	10 92 2b 01 	sts	0x012B, r1
 926:	51 c0       	rjmp	.+162    	; 0x9ca <i2c_handel_data+0x1b4>
					}
					else{
						start=1;
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	90 93 2c 01 	sts	0x012C, r25
 930:	80 93 2b 01 	sts	0x012B, r24
 934:	4a c0       	rjmp	.+148    	; 0x9ca <i2c_handel_data+0x1b4>
					}
				}
				else if(i2c_data[1]==0x0f){
 936:	8f 30       	cpi	r24, 0x0F	; 15
 938:	b1 f4       	brne	.+44     	; 0x966 <i2c_handel_data+0x150>
					if(drive_mode==1){
 93a:	80 91 2d 01 	lds	r24, 0x012D
 93e:	90 91 2e 01 	lds	r25, 0x012E
 942:	01 97       	sbiw	r24, 0x01	; 1
 944:	49 f4       	brne	.+18     	; 0x958 <i2c_handel_data+0x142>
						drive_mode=0;
 946:	10 92 2e 01 	sts	0x012E, r1
 94a:	10 92 2d 01 	sts	0x012D, r1
						start=0;
 94e:	10 92 2c 01 	sts	0x012C, r1
 952:	10 92 2b 01 	sts	0x012B, r1
 956:	39 c0       	rjmp	.+114    	; 0x9ca <i2c_handel_data+0x1b4>
					}
					else{
						drive_mode=1;
 958:	81 e0       	ldi	r24, 0x01	; 1
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	90 93 2e 01 	sts	0x012E, r25
 960:	80 93 2d 01 	sts	0x012D, r24
 964:	32 c0       	rjmp	.+100    	; 0x9ca <i2c_handel_data+0x1b4>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
 966:	81 11       	cpse	r24, r1
 968:	0f c0       	rjmp	.+30     	; 0x988 <i2c_handel_data+0x172>
					d_constant = i2c_data[2];
 96a:	e2 e3       	ldi	r30, 0x32	; 50
 96c:	f1 e0       	ldi	r31, 0x01	; 1
 96e:	82 81       	ldd	r24, Z+2	; 0x02
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	90 93 03 01 	sts	0x0103, r25
 976:	80 93 02 01 	sts	0x0102, r24
					p_constant = i2c_data[3];
 97a:	83 81       	ldd	r24, Z+3	; 0x03
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	90 93 05 01 	sts	0x0105, r25
 982:	80 93 04 01 	sts	0x0104, r24
 986:	21 c0       	rjmp	.+66     	; 0x9ca <i2c_handel_data+0x1b4>
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
 988:	81 30       	cpi	r24, 0x01	; 1
 98a:	79 f4       	brne	.+30     	; 0x9aa <i2c_handel_data+0x194>
					d_constant_lab = i2c_data[2];
 98c:	e2 e3       	ldi	r30, 0x32	; 50
 98e:	f1 e0       	ldi	r31, 0x01	; 1
 990:	82 81       	ldd	r24, Z+2	; 0x02
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	90 93 07 01 	sts	0x0107, r25
 998:	80 93 06 01 	sts	0x0106, r24
					p_constant_lab = i2c_data[3];
 99c:	83 81       	ldd	r24, Z+3	; 0x03
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	90 93 09 01 	sts	0x0109, r25
 9a4:	80 93 08 01 	sts	0x0108, r24
 9a8:	10 c0       	rjmp	.+32     	; 0x9ca <i2c_handel_data+0x1b4>
				}
				else if(i2c_data[1]==0x02){
 9aa:	82 30       	cpi	r24, 0x02	; 2
 9ac:	71 f4       	brne	.+28     	; 0x9ca <i2c_handel_data+0x1b4>
					left = i2c_data[2];
 9ae:	e2 e3       	ldi	r30, 0x32	; 50
 9b0:	f1 e0       	ldi	r31, 0x01	; 1
 9b2:	82 81       	ldd	r24, Z+2	; 0x02
 9b4:	90 e0       	ldi	r25, 0x00	; 0
 9b6:	90 93 2a 01 	sts	0x012A, r25
 9ba:	80 93 29 01 	sts	0x0129, r24
					right = i2c_data[3];
 9be:	83 81       	ldd	r24, Z+3	; 0x03
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	90 93 28 01 	sts	0x0128, r25
 9c6:	80 93 27 01 	sts	0x0127, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
 9ca:	e8 9a       	sbi	0x1d, 0	; 29
 9cc:	08 95       	ret

000009ce <main>:



int main(void)
{
	interrupt_init();
 9ce:	a8 dd       	rcall	.-1200   	; 0x520 <interrupt_init>
	board_init();
 9d0:	8b db       	rcall	.-2282   	; 0xe8 <board_init>
	initengine();
 9d2:	68 dd       	rcall	.-1328   	; 0x4a4 <initengine>
	timerinit();
 9d4:	74 dd       	rcall	.-1304   	; 0x4be <timerinit>
	i2c_setup(1);
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	f4 dd       	rcall	.-1048   	; 0x5c2 <i2c_setup>
	sei();
 9da:	78 94       	sei
	//***********Set motors speed value here *****************
	left=50;//100;				// kanske räcker med en variable för båda om båda kör exakt lika fort
 9dc:	82 e3       	ldi	r24, 0x32	; 50
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	90 93 2a 01 	sts	0x012A, r25
 9e4:	80 93 29 01 	sts	0x0129, r24
	right=47;//93;
 9e8:	8f e2       	ldi	r24, 0x2F	; 47
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	90 93 28 01 	sts	0x0128, r25
 9f0:	80 93 27 01 	sts	0x0127, r24
	//********************************************************
	motor_left=left;
 9f4:	82 e3       	ldi	r24, 0x32	; 50
 9f6:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
 9f8:	80 91 27 01 	lds	r24, 0x0127
 9fc:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
 9fe:	0b df       	rcall	.-490    	; 0x816 <i2c_handel_data>
			
			if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
 a00:	80 91 2d 01 	lds	r24, 0x012D
 a04:	90 91 2e 01 	lds	r25, 0x012E
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	91 05       	cpc	r25, r1
 a0c:	e9 f4       	brne	.+58     	; 0xa48 <main+0x7a>
				PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
 a0e:	2d 98       	cbi	0x05, 5	; 5
				PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
 a10:	2e 98       	cbi	0x05, 6	; 5
				//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
				if(regler_ready==1 && start == 1){
 a12:	80 91 25 01 	lds	r24, 0x0125
 a16:	90 91 26 01 	lds	r25, 0x0126
 a1a:	01 97       	sbiw	r24, 0x01	; 1
 a1c:	61 f4       	brne	.+24     	; 0xa36 <main+0x68>
 a1e:	80 91 2b 01 	lds	r24, 0x012B
 a22:	90 91 2c 01 	lds	r25, 0x012C
 a26:	01 97       	sbiw	r24, 0x01	; 1
 a28:	31 f4       	brne	.+12     	; 0xa36 <main+0x68>
					regulator();
 a2a:	32 dd       	rcall	.-1436   	; 0x490 <regulator>
					regler_ready=0;	
 a2c:	10 92 26 01 	sts	0x0126, r1
 a30:	10 92 25 01 	sts	0x0125, r1
 a34:	e4 cf       	rjmp	.-56     	; 0x9fe <main+0x30>
				}
				else if(start == 0){					// if start is zero then turn off the auto, stops motors
 a36:	80 91 2b 01 	lds	r24, 0x012B
 a3a:	90 91 2c 01 	lds	r25, 0x012C
 a3e:	89 2b       	or	r24, r25
 a40:	f1 f6       	brne	.-68     	; 0x9fe <main+0x30>
					motor_left=0;
 a42:	17 bc       	out	0x27, r1	; 39
					motor_right=0;
 a44:	18 bc       	out	0x28, r1	; 40
 a46:	db cf       	rjmp	.-74     	; 0x9fe <main+0x30>
				}
			}
			else if(drive_mode==0){										// Drivemode is manual
 a48:	89 2b       	or	r24, r25
 a4a:	c9 f6       	brne	.-78     	; 0x9fe <main+0x30>
				manual_drive();
 a4c:	86 db       	rcall	.-2292   	; 0x15a <manual_drive>
 a4e:	d7 cf       	rjmp	.-82     	; 0x9fe <main+0x30>

00000a50 <__divmodhi4>:
 a50:	97 fb       	bst	r25, 7
 a52:	07 2e       	mov	r0, r23
 a54:	16 f4       	brtc	.+4      	; 0xa5a <__divmodhi4+0xa>
 a56:	00 94       	com	r0
 a58:	06 d0       	rcall	.+12     	; 0xa66 <__divmodhi4_neg1>
 a5a:	77 fd       	sbrc	r23, 7
 a5c:	08 d0       	rcall	.+16     	; 0xa6e <__divmodhi4_neg2>
 a5e:	14 d0       	rcall	.+40     	; 0xa88 <__udivmodhi4>
 a60:	07 fc       	sbrc	r0, 7
 a62:	05 d0       	rcall	.+10     	; 0xa6e <__divmodhi4_neg2>
 a64:	3e f4       	brtc	.+14     	; 0xa74 <__divmodhi4_exit>

00000a66 <__divmodhi4_neg1>:
 a66:	90 95       	com	r25
 a68:	81 95       	neg	r24
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	08 95       	ret

00000a6e <__divmodhi4_neg2>:
 a6e:	70 95       	com	r23
 a70:	61 95       	neg	r22
 a72:	7f 4f       	sbci	r23, 0xFF	; 255

00000a74 <__divmodhi4_exit>:
 a74:	08 95       	ret

00000a76 <__tablejump2__>:
 a76:	ee 0f       	add	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	00 24       	eor	r0, r0
 a7c:	00 1c       	adc	r0, r0
 a7e:	0b be       	out	0x3b, r0	; 59
 a80:	07 90       	elpm	r0, Z+
 a82:	f6 91       	elpm	r31, Z
 a84:	e0 2d       	mov	r30, r0
 a86:	09 94       	ijmp

00000a88 <__udivmodhi4>:
 a88:	aa 1b       	sub	r26, r26
 a8a:	bb 1b       	sub	r27, r27
 a8c:	51 e1       	ldi	r21, 0x11	; 17
 a8e:	07 c0       	rjmp	.+14     	; 0xa9e <__udivmodhi4_ep>

00000a90 <__udivmodhi4_loop>:
 a90:	aa 1f       	adc	r26, r26
 a92:	bb 1f       	adc	r27, r27
 a94:	a6 17       	cp	r26, r22
 a96:	b7 07       	cpc	r27, r23
 a98:	10 f0       	brcs	.+4      	; 0xa9e <__udivmodhi4_ep>
 a9a:	a6 1b       	sub	r26, r22
 a9c:	b7 0b       	sbc	r27, r23

00000a9e <__udivmodhi4_ep>:
 a9e:	88 1f       	adc	r24, r24
 aa0:	99 1f       	adc	r25, r25
 aa2:	5a 95       	dec	r21
 aa4:	a9 f7       	brne	.-22     	; 0xa90 <__udivmodhi4_loop>
 aa6:	80 95       	com	r24
 aa8:	90 95       	com	r25
 aaa:	bc 01       	movw	r22, r24
 aac:	cd 01       	movw	r24, r26
 aae:	08 95       	ret

00000ab0 <_exit>:
 ab0:	f8 94       	cli

00000ab2 <__stop_program>:
 ab2:	ff cf       	rjmp	.-2      	; 0xab2 <__stop_program>
