
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000014a4  00001538  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000070  0080010e  0080010e  00001546  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001546  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000015b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e13  00000000  00000000  000016f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000033d  00000000  00000000  0000250b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001706  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000040c  00000000  00000000  00003f50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010790  00000000  00000000  0000435c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012ad  00000000  00000000  00014aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00015d99  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  00015eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	a6 c6       	rjmp	.+3404   	; 0xd52 <__vector_1>
       6:	00 00       	nop
       8:	64 c5       	rjmp	.+2760   	; 0xad2 <__vector_2>
       a:	00 00       	nop
       c:	8a c5       	rjmp	.+2836   	; 0xb22 <__vector_3>
       e:	00 00       	nop
      10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
      12:	00 00       	nop
      14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
      16:	00 00       	nop
      18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
      22:	00 00       	nop
      24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
      26:	00 00       	nop
      28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
      32:	00 00       	nop
      34:	28 c5       	rjmp	.+2640   	; 0xa86 <__vector_13>
      36:	00 00       	nop
      38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
      42:	00 00       	nop
      44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
      46:	00 00       	nop
      48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
      52:	00 00       	nop
      54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
      56:	00 00       	nop
      58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
      62:	00 00       	nop
      64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
      66:	00 00       	nop
      68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
      72:	00 00       	nop
      74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
      76:	00 00       	nop
      78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
      82:	00 00       	nop
      84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
      86:	00 00       	nop
      88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f7 06       	cpc	r15, r23
      8e:	fc 06       	cpc	r15, r28
      90:	08 07       	cpc	r16, r24
      92:	1c 07       	cpc	r17, r28
      94:	20 07       	cpc	r18, r16
      96:	24 07       	cpc	r18, r20
      98:	bf 07       	cpc	r27, r31
      9a:	28 07       	cpc	r18, r24
      9c:	2c 07       	cpc	r18, r28
      9e:	31 07       	cpc	r19, r17
      a0:	38 07       	cpc	r19, r24
      a2:	3f 07       	cpc	r19, r31
      a4:	46 07       	cpc	r20, r22
      a6:	4d 07       	cpc	r20, r29
      a8:	54 07       	cpc	r21, r20
      aa:	5b 07       	cpc	r21, r27

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e4 ea       	ldi	r30, 0xA4	; 164
      c0:	f4 e1       	ldi	r31, 0x14	; 20
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ae 30       	cpi	r26, 0x0E	; 14
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	ae e0       	ldi	r26, 0x0E	; 14
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	ae 37       	cpi	r26, 0x7E	; 126
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	4f d7       	rcall	.+3742   	; 0xf82 <main>
      e4:	0c 94 50 0a 	jmp	0x14a0	; 0x14a0 <_exit>

000000e8 <__bad_interrupt>:
      e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <board_init>:
      ea:	08 95       	ret

000000ec <linje_get_error>:
	}
	
	else if(turn_done && count_waypoint >= 5){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
		twoway_turn_right = false;
		ongoing_turn = false;
		first_time = true;
      ec:	2f 92       	push	r2
      ee:	3f 92       	push	r3
      f0:	4f 92       	push	r4
      f2:	5f 92       	push	r5
      f4:	6f 92       	push	r6
      f6:	7f 92       	push	r7
      f8:	8f 92       	push	r8
      fa:	9f 92       	push	r9
      fc:	af 92       	push	r10
      fe:	bf 92       	push	r11
     100:	cf 92       	push	r12
     102:	df 92       	push	r13
     104:	ef 92       	push	r14
     106:	ff 92       	push	r15
     108:	0f 93       	push	r16
     10a:	1f 93       	push	r17
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	10 92 34 01 	sts	0x0134, r1
     114:	10 92 33 01 	sts	0x0133, r1
     118:	f8 94       	cli
     11a:	80 90 5f 01 	lds	r8, 0x015F
     11e:	90 90 60 01 	lds	r9, 0x0160
     122:	20 90 78 01 	lds	r2, 0x0178
     126:	30 90 79 01 	lds	r3, 0x0179
     12a:	78 94       	sei
     12c:	c0 90 33 01 	lds	r12, 0x0133
     130:	d0 90 34 01 	lds	r13, 0x0134
     134:	05 e0       	ldi	r16, 0x05	; 5
     136:	10 e0       	ldi	r17, 0x00	; 0
     138:	c0 e0       	ldi	r28, 0x00	; 0
     13a:	d0 e0       	ldi	r29, 0x00	; 0
     13c:	41 2c       	mov	r4, r1
     13e:	51 2c       	mov	r5, r1
     140:	32 01       	movw	r6, r4
     142:	0f 2e       	mov	r0, r31
     144:	f5 e0       	ldi	r31, 0x05	; 5
     146:	af 2e       	mov	r10, r31
     148:	b1 2c       	mov	r11, r1
     14a:	f0 2d       	mov	r31, r0
     14c:	c5 01       	movw	r24, r10
     14e:	80 1b       	sub	r24, r16
     150:	91 0b       	sbc	r25, r17
     152:	08 97       	sbiw	r24, 0x08	; 8
     154:	0c f5       	brge	.+66     	; 0x198 <linje_get_error+0xac>
     156:	74 01       	movw	r14, r8
     158:	0c 2e       	mov	r0, r28
     15a:	02 c0       	rjmp	.+4      	; 0x160 <linje_get_error+0x74>
     15c:	f5 94       	asr	r15
     15e:	e7 94       	ror	r14
     160:	0a 94       	dec	r0
     162:	e2 f7       	brpl	.-8      	; 0x15c <linje_get_error+0x70>
     164:	83 e0       	ldi	r24, 0x03	; 3
     166:	e8 22       	and	r14, r24
     168:	ff 24       	eor	r15, r15
     16a:	0e 9d       	mul	r16, r14
     16c:	b0 01       	movw	r22, r0
     16e:	0f 9d       	mul	r16, r15
     170:	70 0d       	add	r23, r0
     172:	1e 9d       	mul	r17, r14
     174:	70 0d       	add	r23, r0
     176:	11 24       	eor	r1, r1
     178:	07 2e       	mov	r0, r23
     17a:	00 0c       	add	r0, r0
     17c:	88 0b       	sbc	r24, r24
     17e:	99 0b       	sbc	r25, r25
     180:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     184:	9b 01       	movw	r18, r22
     186:	ac 01       	movw	r20, r24
     188:	c3 01       	movw	r24, r6
     18a:	b2 01       	movw	r22, r4
     18c:	3f d7       	rcall	.+3710   	; 0x100c <__addsf3>
     18e:	2b 01       	movw	r4, r22
     190:	3c 01       	movw	r6, r24
     192:	ce 0c       	add	r12, r14
     194:	df 1c       	adc	r13, r15
     196:	21 c0       	rjmp	.+66     	; 0x1da <linje_get_error+0xee>
     198:	ce 01       	movw	r24, r28
     19a:	40 97       	sbiw	r24, 0x10	; 16
     19c:	71 01       	movw	r14, r2
     19e:	02 c0       	rjmp	.+4      	; 0x1a4 <linje_get_error+0xb8>
     1a0:	f5 94       	asr	r15
     1a2:	e7 94       	ror	r14
     1a4:	8a 95       	dec	r24
     1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <linje_get_error+0xb4>
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	e8 22       	and	r14, r24
     1ac:	ff 24       	eor	r15, r15
     1ae:	0e 9d       	mul	r16, r14
     1b0:	b0 01       	movw	r22, r0
     1b2:	0f 9d       	mul	r16, r15
     1b4:	70 0d       	add	r23, r0
     1b6:	1e 9d       	mul	r17, r14
     1b8:	70 0d       	add	r23, r0
     1ba:	11 24       	eor	r1, r1
     1bc:	07 2e       	mov	r0, r23
     1be:	00 0c       	add	r0, r0
     1c0:	88 0b       	sbc	r24, r24
     1c2:	99 0b       	sbc	r25, r25
     1c4:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     1c8:	9b 01       	movw	r18, r22
     1ca:	ac 01       	movw	r20, r24
     1cc:	c3 01       	movw	r24, r6
     1ce:	b2 01       	movw	r22, r4
     1d0:	1d d7       	rcall	.+3642   	; 0x100c <__addsf3>
     1d2:	2b 01       	movw	r4, r22
     1d4:	3c 01       	movw	r6, r24
     1d6:	ce 0c       	add	r12, r14
     1d8:	df 1c       	adc	r13, r15
     1da:	22 96       	adiw	r28, 0x02	; 2
     1dc:	01 50       	subi	r16, 0x01	; 1
     1de:	11 09       	sbc	r17, r1
     1e0:	c6 31       	cpi	r28, 0x16	; 22
     1e2:	d1 05       	cpc	r29, r1
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <linje_get_error+0xfc>
     1e6:	b2 cf       	rjmp	.-156    	; 0x14c <linje_get_error+0x60>
     1e8:	d0 92 34 01 	sts	0x0134, r13
     1ec:	c0 92 33 01 	sts	0x0133, r12
     1f0:	c1 14       	cp	r12, r1
     1f2:	d1 04       	cpc	r13, r1
     1f4:	61 f0       	breq	.+24     	; 0x20e <linje_get_error+0x122>
     1f6:	b6 01       	movw	r22, r12
     1f8:	dd 0c       	add	r13, r13
     1fa:	88 0b       	sbc	r24, r24
     1fc:	99 0b       	sbc	r25, r25
     1fe:	0e 94 09 09 	call	0x1212	; 0x1212 <__floatsisf>
     202:	9b 01       	movw	r18, r22
     204:	ac 01       	movw	r20, r24
     206:	c3 01       	movw	r24, r6
     208:	b2 01       	movw	r22, r4
     20a:	68 d7       	rcall	.+3792   	; 0x10dc <__divsf3>
     20c:	03 c0       	rjmp	.+6      	; 0x214 <linje_get_error+0x128>
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	70 e0       	ldi	r23, 0x00	; 0
     212:	cb 01       	movw	r24, r22
     214:	cb d7       	rcall	.+3990   	; 0x11ac <__fixsfsi>
     216:	cb 01       	movw	r24, r22
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	1f 91       	pop	r17
     21e:	0f 91       	pop	r16
     220:	ff 90       	pop	r15
     222:	ef 90       	pop	r14
     224:	df 90       	pop	r13
     226:	cf 90       	pop	r12
     228:	bf 90       	pop	r11
     22a:	af 90       	pop	r10
     22c:	9f 90       	pop	r9
     22e:	8f 90       	pop	r8
     230:	7f 90       	pop	r7
     232:	6f 90       	pop	r6
     234:	5f 90       	pop	r5
     236:	4f 90       	pop	r4
     238:	3f 90       	pop	r3
     23a:	2f 90       	pop	r2
     23c:	08 95       	ret

0000023e <linje_RGBsveng>:
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	f8 94       	cli
     244:	20 91 5f 01 	lds	r18, 0x015F
     248:	30 91 60 01 	lds	r19, 0x0160
     24c:	40 91 78 01 	lds	r20, 0x0178
     250:	50 91 79 01 	lds	r21, 0x0179
     254:	78 94       	sei
     256:	80 91 18 01 	lds	r24, 0x0118
     25a:	90 91 19 01 	lds	r25, 0x0119
     25e:	85 31       	cpi	r24, 0x15	; 21
     260:	91 05       	cpc	r25, r1
     262:	3c f0       	brlt	.+14     	; 0x272 <linje_RGBsveng+0x34>
     264:	10 92 6c 01 	sts	0x016C, r1
     268:	10 92 19 01 	sts	0x0119, r1
     26c:	10 92 18 01 	sts	0x0118, r1
     270:	75 c0       	rjmp	.+234    	; 0x35c <linje_RGBsveng+0x11e>
     272:	01 96       	adiw	r24, 0x01	; 1
     274:	90 93 19 01 	sts	0x0119, r25
     278:	80 93 18 01 	sts	0x0118, r24
     27c:	6f c0       	rjmp	.+222    	; 0x35c <linje_RGBsveng+0x11e>
     27e:	a0 ef       	ldi	r26, 0xF0	; 240
     280:	bf ef       	ldi	r27, 0xFF	; 255
     282:	6b ef       	ldi	r22, 0xFB	; 251
     284:	e0 e0       	ldi	r30, 0x00	; 0
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	81 11       	cpse	r24, r1
     28c:	1f c0       	rjmp	.+62     	; 0x2cc <linje_RGBsveng+0x8e>
     28e:	e8 30       	cpi	r30, 0x08	; 8
     290:	f1 05       	cpc	r31, r1
     292:	84 f4       	brge	.+32     	; 0x2b4 <linje_RGBsveng+0x76>
     294:	cf 01       	movw	r24, r30
     296:	88 0f       	add	r24, r24
     298:	99 1f       	adc	r25, r25
     29a:	e9 01       	movw	r28, r18
     29c:	02 c0       	rjmp	.+4      	; 0x2a2 <linje_RGBsveng+0x64>
     29e:	d5 95       	asr	r29
     2a0:	c7 95       	ror	r28
     2a2:	8a 95       	dec	r24
     2a4:	e2 f7       	brpl	.-8      	; 0x29e <linje_RGBsveng+0x60>
     2a6:	ce 01       	movw	r24, r28
     2a8:	86 95       	lsr	r24
     2aa:	81 70       	andi	r24, 0x01	; 1
     2ac:	68 9f       	mul	r22, r24
     2ae:	80 2d       	mov	r24, r0
     2b0:	11 24       	eor	r1, r1
     2b2:	0c c0       	rjmp	.+24     	; 0x2cc <linje_RGBsveng+0x8e>
     2b4:	ca 01       	movw	r24, r20
     2b6:	0a 2e       	mov	r0, r26
     2b8:	02 c0       	rjmp	.+4      	; 0x2be <linje_RGBsveng+0x80>
     2ba:	95 95       	asr	r25
     2bc:	87 95       	ror	r24
     2be:	0a 94       	dec	r0
     2c0:	e2 f7       	brpl	.-8      	; 0x2ba <linje_RGBsveng+0x7c>
     2c2:	86 95       	lsr	r24
     2c4:	81 70       	andi	r24, 0x01	; 1
     2c6:	68 9f       	mul	r22, r24
     2c8:	80 2d       	mov	r24, r0
     2ca:	11 24       	eor	r1, r1
     2cc:	31 96       	adiw	r30, 0x01	; 1
     2ce:	6f 5f       	subi	r22, 0xFF	; 255
     2d0:	12 96       	adiw	r26, 0x02	; 2
     2d2:	66 30       	cpi	r22, 0x06	; 6
     2d4:	d1 f6       	brne	.-76     	; 0x28a <linje_RGBsveng+0x4c>
     2d6:	48 c0       	rjmp	.+144    	; 0x368 <linje_RGBsveng+0x12a>
     2d8:	82 30       	cpi	r24, 0x02	; 2
     2da:	69 f4       	brne	.+26     	; 0x2f6 <linje_RGBsveng+0xb8>
     2dc:	20 7f       	andi	r18, 0xF0	; 240
     2de:	30 93 60 01 	sts	0x0160, r19
     2e2:	20 93 5f 01 	sts	0x015F, r18
     2e6:	43 70       	andi	r20, 0x03	; 3
     2e8:	55 27       	eor	r21, r21
     2ea:	50 93 79 01 	sts	0x0179, r21
     2ee:	40 93 78 01 	sts	0x0178, r20
     2f2:	fc de       	rcall	.-520    	; 0xec <linje_get_error>
     2f4:	39 c0       	rjmp	.+114    	; 0x368 <linje_RGBsveng+0x12a>
     2f6:	83 30       	cpi	r24, 0x03	; 3
     2f8:	79 f5       	brne	.+94     	; 0x358 <linje_RGBsveng+0x11a>
     2fa:	a6 e0       	ldi	r26, 0x06	; 6
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	e6 e0       	ldi	r30, 0x06	; 6
     300:	6b e0       	ldi	r22, 0x0B	; 11
     302:	70 e0       	ldi	r23, 0x00	; 0
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	81 11       	cpse	r24, r1
     308:	1f c0       	rjmp	.+62     	; 0x348 <linje_RGBsveng+0x10a>
     30a:	68 30       	cpi	r22, 0x08	; 8
     30c:	71 05       	cpc	r23, r1
     30e:	84 f4       	brge	.+32     	; 0x330 <linje_RGBsveng+0xf2>
     310:	cb 01       	movw	r24, r22
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	e9 01       	movw	r28, r18
     318:	02 c0       	rjmp	.+4      	; 0x31e <linje_RGBsveng+0xe0>
     31a:	d5 95       	asr	r29
     31c:	c7 95       	ror	r28
     31e:	8a 95       	dec	r24
     320:	e2 f7       	brpl	.-8      	; 0x31a <linje_RGBsveng+0xdc>
     322:	ce 01       	movw	r24, r28
     324:	86 95       	lsr	r24
     326:	81 70       	andi	r24, 0x01	; 1
     328:	e8 9f       	mul	r30, r24
     32a:	80 2d       	mov	r24, r0
     32c:	11 24       	eor	r1, r1
     32e:	0c c0       	rjmp	.+24     	; 0x348 <linje_RGBsveng+0x10a>
     330:	ca 01       	movw	r24, r20
     332:	0a 2e       	mov	r0, r26
     334:	02 c0       	rjmp	.+4      	; 0x33a <linje_RGBsveng+0xfc>
     336:	95 95       	asr	r25
     338:	87 95       	ror	r24
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <linje_RGBsveng+0xf8>
     33e:	86 95       	lsr	r24
     340:	81 70       	andi	r24, 0x01	; 1
     342:	e8 9f       	mul	r30, r24
     344:	80 2d       	mov	r24, r0
     346:	11 24       	eor	r1, r1
     348:	61 50       	subi	r22, 0x01	; 1
     34a:	71 09       	sbc	r23, r1
     34c:	e1 50       	subi	r30, 0x01	; 1
     34e:	12 97       	sbiw	r26, 0x02	; 2
     350:	61 15       	cp	r22, r1
     352:	71 05       	cpc	r23, r1
     354:	c1 f6       	brne	.-80     	; 0x306 <linje_RGBsveng+0xc8>
     356:	08 c0       	rjmp	.+16     	; 0x368 <linje_RGBsveng+0x12a>
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	06 c0       	rjmp	.+12     	; 0x368 <linje_RGBsveng+0x12a>
     35c:	80 91 6c 01 	lds	r24, 0x016C
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <linje_RGBsveng+0x128>
     364:	b9 cf       	rjmp	.-142    	; 0x2d8 <linje_RGBsveng+0x9a>
     366:	8b cf       	rjmp	.-234    	; 0x27e <linje_RGBsveng+0x40>
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	08 95       	ret

0000036e <detect_goal>:
     36e:	80 91 16 01 	lds	r24, 0x0116
     372:	90 91 17 01 	lds	r25, 0x0117
     376:	9c 01       	movw	r18, r24
     378:	2d 7f       	andi	r18, 0xFD	; 253
     37a:	21 30       	cpi	r18, 0x01	; 1
     37c:	31 05       	cpc	r19, r1
     37e:	79 f4       	brne	.+30     	; 0x39e <detect_goal+0x30>
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	90 93 17 01 	sts	0x0117, r25
     386:	80 93 16 01 	sts	0x0116, r24
     38a:	80 91 14 01 	lds	r24, 0x0114
     38e:	90 91 15 01 	lds	r25, 0x0115
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	90 93 15 01 	sts	0x0115, r25
     398:	80 93 14 01 	sts	0x0114, r24
     39c:	15 c0       	rjmp	.+42     	; 0x3c8 <detect_goal+0x5a>
     39e:	80 91 14 01 	lds	r24, 0x0114
     3a2:	90 91 15 01 	lds	r25, 0x0115
     3a6:	8a 30       	cpi	r24, 0x0A	; 10
     3a8:	91 05       	cpc	r25, r1
     3aa:	34 f4       	brge	.+12     	; 0x3b8 <detect_goal+0x4a>
     3ac:	01 96       	adiw	r24, 0x01	; 1
     3ae:	90 93 15 01 	sts	0x0115, r25
     3b2:	80 93 14 01 	sts	0x0114, r24
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <detect_goal+0x5a>
     3b8:	10 92 15 01 	sts	0x0115, r1
     3bc:	10 92 14 01 	sts	0x0114, r1
     3c0:	10 92 17 01 	sts	0x0117, r1
     3c4:	10 92 16 01 	sts	0x0116, r1
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	08 95       	ret

000003cc <detect_labyrint>:
     3cc:	80 91 68 01 	lds	r24, 0x0168
     3d0:	89 31       	cpi	r24, 0x19	; 25
     3d2:	70 f4       	brcc	.+28     	; 0x3f0 <detect_labyrint+0x24>
     3d4:	80 91 12 01 	lds	r24, 0x0112
     3d8:	90 91 13 01 	lds	r25, 0x0113
     3dc:	85 31       	cpi	r24, 0x15	; 21
     3de:	91 05       	cpc	r25, r1
     3e0:	6c f4       	brge	.+26     	; 0x3fc <detect_labyrint+0x30>
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 13 01 	sts	0x0113, r25
     3e8:	80 93 12 01 	sts	0x0112, r24
     3ec:	80 e0       	ldi	r24, 0x00	; 0
     3ee:	08 95       	ret
     3f0:	10 92 13 01 	sts	0x0113, r1
     3f4:	10 92 12 01 	sts	0x0112, r1
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	08 95       	ret
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	08 95       	ret

00000400 <manual_drive>:
     400:	80 91 31 01 	lds	r24, 0x0131
     404:	90 91 32 01 	lds	r25, 0x0132
     408:	00 97       	sbiw	r24, 0x00	; 0
     40a:	29 f4       	brne	.+10     	; 0x416 <manual_drive+0x16>
     40c:	2d 98       	cbi	0x05, 5	; 5
     40e:	2e 98       	cbi	0x05, 6	; 5
     410:	17 bc       	out	0x27, r1	; 39
     412:	18 bc       	out	0x28, r1	; 40
     414:	08 95       	ret
     416:	81 30       	cpi	r24, 0x01	; 1
     418:	91 05       	cpc	r25, r1
     41a:	49 f4       	brne	.+18     	; 0x42e <manual_drive+0x2e>
     41c:	2d 98       	cbi	0x05, 5	; 5
     41e:	2e 98       	cbi	0x05, 6	; 5
     420:	80 91 3d 01 	lds	r24, 0x013D
     424:	87 bd       	out	0x27, r24	; 39
     426:	80 91 3b 01 	lds	r24, 0x013B
     42a:	88 bd       	out	0x28, r24	; 40
     42c:	08 95       	ret
     42e:	82 30       	cpi	r24, 0x02	; 2
     430:	91 05       	cpc	r25, r1
     432:	59 f4       	brne	.+22     	; 0x44a <manual_drive+0x4a>
     434:	85 b1       	in	r24, 0x05	; 5
     436:	80 66       	ori	r24, 0x60	; 96
     438:	85 b9       	out	0x05, r24	; 5
     43a:	80 91 3d 01 	lds	r24, 0x013D
     43e:	8d 50       	subi	r24, 0x0D	; 13
     440:	87 bd       	out	0x27, r24	; 39
     442:	80 91 3b 01 	lds	r24, 0x013B
     446:	88 bd       	out	0x28, r24	; 40
     448:	08 95       	ret
     44a:	83 30       	cpi	r24, 0x03	; 3
     44c:	91 05       	cpc	r25, r1
     44e:	81 f4       	brne	.+32     	; 0x470 <manual_drive+0x70>
     450:	2d 98       	cbi	0x05, 5	; 5
     452:	2e 98       	cbi	0x05, 6	; 5
     454:	80 91 3d 01 	lds	r24, 0x013D
     458:	87 bd       	out	0x27, r24	; 39
     45a:	20 91 3b 01 	lds	r18, 0x013B
     45e:	90 91 3c 01 	lds	r25, 0x013C
     462:	82 2f       	mov	r24, r18
     464:	63 e0       	ldi	r22, 0x03	; 3
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	eb d7       	rcall	.+4054   	; 0x1440 <__divmodhi4>
     46a:	26 1b       	sub	r18, r22
     46c:	28 bd       	out	0x28, r18	; 40
     46e:	08 95       	ret
     470:	84 30       	cpi	r24, 0x04	; 4
     472:	91 05       	cpc	r25, r1
     474:	81 f4       	brne	.+32     	; 0x496 <manual_drive+0x96>
     476:	2d 98       	cbi	0x05, 5	; 5
     478:	2e 98       	cbi	0x05, 6	; 5
     47a:	20 91 3d 01 	lds	r18, 0x013D
     47e:	90 91 3e 01 	lds	r25, 0x013E
     482:	82 2f       	mov	r24, r18
     484:	63 e0       	ldi	r22, 0x03	; 3
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	db d7       	rcall	.+4022   	; 0x1440 <__divmodhi4>
     48a:	26 1b       	sub	r18, r22
     48c:	27 bd       	out	0x27, r18	; 39
     48e:	80 91 3b 01 	lds	r24, 0x013B
     492:	88 bd       	out	0x28, r24	; 40
     494:	08 95       	ret
     496:	85 30       	cpi	r24, 0x05	; 5
     498:	91 05       	cpc	r25, r1
     49a:	49 f4       	brne	.+18     	; 0x4ae <manual_drive+0xae>
     49c:	2d 98       	cbi	0x05, 5	; 5
     49e:	2e 9a       	sbi	0x05, 6	; 5
     4a0:	80 91 3d 01 	lds	r24, 0x013D
     4a4:	87 bd       	out	0x27, r24	; 39
     4a6:	80 91 3b 01 	lds	r24, 0x013B
     4aa:	88 bd       	out	0x28, r24	; 40
     4ac:	08 95       	ret
     4ae:	06 97       	sbiw	r24, 0x06	; 6
     4b0:	49 f4       	brne	.+18     	; 0x4c4 <manual_drive+0xc4>
     4b2:	2e 98       	cbi	0x05, 6	; 5
     4b4:	2d 9a       	sbi	0x05, 5	; 5
     4b6:	80 91 3d 01 	lds	r24, 0x013D
     4ba:	87 bd       	out	0x27, r24	; 39
     4bc:	80 91 3b 01 	lds	r24, 0x013B
     4c0:	88 bd       	out	0x28, r24	; 40
     4c2:	08 95       	ret
     4c4:	10 92 32 01 	sts	0x0132, r1
     4c8:	10 92 31 01 	sts	0x0131, r1
     4cc:	08 95       	ret

000004ce <PD_for_lab>:
     4ce:	2f 92       	push	r2
     4d0:	3f 92       	push	r3
     4d2:	4f 92       	push	r4
     4d4:	5f 92       	push	r5
     4d6:	6f 92       	push	r6
     4d8:	7f 92       	push	r7
     4da:	8f 92       	push	r8
     4dc:	9f 92       	push	r9
     4de:	af 92       	push	r10
     4e0:	bf 92       	push	r11
     4e2:	cf 92       	push	r12
     4e4:	df 92       	push	r13
     4e6:	ef 92       	push	r14
     4e8:	ff 92       	push	r15
     4ea:	0f 93       	push	r16
     4ec:	1f 93       	push	r17
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	28 97       	sbiw	r28, 0x08	; 8
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	de bf       	out	0x3e, r29	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	cd bf       	out	0x3d, r28	; 61
     502:	7c 01       	movw	r14, r24
     504:	c0 90 08 01 	lds	r12, 0x0108
     508:	d0 90 09 01 	lds	r13, 0x0109
     50c:	86 01       	movw	r16, r12
     50e:	06 1b       	sub	r16, r22
     510:	17 0b       	sbc	r17, r23
     512:	40 90 2b 01 	lds	r4, 0x012B
     516:	50 90 2c 01 	lds	r5, 0x012C
     51a:	20 90 0c 01 	lds	r2, 0x010C
     51e:	30 90 0d 01 	lds	r3, 0x010D
     522:	60 91 0a 01 	lds	r22, 0x010A
     526:	70 91 0b 01 	lds	r23, 0x010B
     52a:	07 2e       	mov	r0, r23
     52c:	00 0c       	add	r0, r0
     52e:	88 0b       	sbc	r24, r24
     530:	99 0b       	sbc	r25, r25
     532:	6f d6       	rcall	.+3294   	; 0x1212 <__floatsisf>
     534:	69 83       	std	Y+1, r22	; 0x01
     536:	7a 83       	std	Y+2, r23	; 0x02
     538:	8b 83       	std	Y+3, r24	; 0x03
     53a:	9c 83       	std	Y+4, r25	; 0x04
     53c:	02 9d       	mul	r16, r2
     53e:	b0 01       	movw	r22, r0
     540:	03 9d       	mul	r16, r3
     542:	70 0d       	add	r23, r0
     544:	12 9d       	mul	r17, r2
     546:	70 0d       	add	r23, r0
     548:	11 24       	eor	r1, r1
     54a:	07 2e       	mov	r0, r23
     54c:	00 0c       	add	r0, r0
     54e:	88 0b       	sbc	r24, r24
     550:	99 0b       	sbc	r25, r25
     552:	5f d6       	rcall	.+3262   	; 0x1212 <__floatsisf>
     554:	6d 83       	std	Y+5, r22	; 0x05
     556:	7e 83       	std	Y+6, r23	; 0x06
     558:	8f 83       	std	Y+7, r24	; 0x07
     55a:	98 87       	std	Y+8, r25	; 0x08
     55c:	42 01       	movw	r8, r4
     55e:	88 0c       	add	r8, r8
     560:	99 1c       	adc	r9, r9
     562:	c4 01       	movw	r24, r8
     564:	8a 5b       	subi	r24, 0xBA	; 186
     566:	9e 4f       	sbci	r25, 0xFE	; 254
     568:	5c 01       	movw	r10, r24
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	91 81       	ldd	r25, Z+1	; 0x01
     570:	b8 01       	movw	r22, r16
     572:	68 1b       	sub	r22, r24
     574:	79 0b       	sbc	r23, r25
     576:	07 2e       	mov	r0, r23
     578:	00 0c       	add	r0, r0
     57a:	88 0b       	sbc	r24, r24
     57c:	99 0b       	sbc	r25, r25
     57e:	49 d6       	rcall	.+3218   	; 0x1212 <__floatsisf>
     580:	29 81       	ldd	r18, Y+1	; 0x01
     582:	3a 81       	ldd	r19, Y+2	; 0x02
     584:	4b 81       	ldd	r20, Y+3	; 0x03
     586:	5c 81       	ldd	r21, Y+4	; 0x04
     588:	f8 d6       	rcall	.+3568   	; 0x137a <__mulsf3>
     58a:	9b 01       	movw	r18, r22
     58c:	ac 01       	movw	r20, r24
     58e:	6d 81       	ldd	r22, Y+5	; 0x05
     590:	7e 81       	ldd	r23, Y+6	; 0x06
     592:	8f 81       	ldd	r24, Y+7	; 0x07
     594:	98 85       	ldd	r25, Y+8	; 0x08
     596:	3a d5       	rcall	.+2676   	; 0x100c <__addsf3>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	30 e0       	ldi	r19, 0x00	; 0
     59c:	40 e2       	ldi	r20, 0x20	; 32
     59e:	51 e4       	ldi	r21, 0x41	; 65
     5a0:	9d d5       	rcall	.+2874   	; 0x10dc <__divsf3>
     5a2:	04 d6       	rcall	.+3080   	; 0x11ac <__fixsfsi>
     5a4:	3b 01       	movw	r6, r22
     5a6:	70 93 7b 01 	sts	0x017B, r23
     5aa:	60 93 7a 01 	sts	0x017A, r22
     5ae:	f5 01       	movw	r30, r10
     5b0:	11 83       	std	Z+1, r17	; 0x01
     5b2:	00 83       	st	Z, r16
     5b4:	c6 01       	movw	r24, r12
     5b6:	8e 19       	sub	r24, r14
     5b8:	9f 09       	sbc	r25, r15
     5ba:	9e 83       	std	Y+6, r25	; 0x06
     5bc:	8d 83       	std	Y+5, r24	; 0x05
     5be:	90 93 6b 01 	sts	0x016B, r25
     5c2:	80 93 6a 01 	sts	0x016A, r24
     5c6:	84 01       	movw	r16, r8
     5c8:	02 59       	subi	r16, 0x92	; 146
     5ca:	1e 4f       	sbci	r17, 0xFE	; 254
     5cc:	f8 01       	movw	r30, r16
     5ce:	80 81       	ld	r24, Z
     5d0:	91 81       	ldd	r25, Z+1	; 0x01
     5d2:	6d 81       	ldd	r22, Y+5	; 0x05
     5d4:	7e 81       	ldd	r23, Y+6	; 0x06
     5d6:	68 1b       	sub	r22, r24
     5d8:	79 0b       	sbc	r23, r25
     5da:	07 2e       	mov	r0, r23
     5dc:	00 0c       	add	r0, r0
     5de:	88 0b       	sbc	r24, r24
     5e0:	99 0b       	sbc	r25, r25
     5e2:	17 d6       	rcall	.+3118   	; 0x1212 <__floatsisf>
     5e4:	4b 01       	movw	r8, r22
     5e6:	5c 01       	movw	r10, r24
     5e8:	60 93 2d 01 	sts	0x012D, r22
     5ec:	70 93 2e 01 	sts	0x012E, r23
     5f0:	80 93 2f 01 	sts	0x012F, r24
     5f4:	90 93 30 01 	sts	0x0130, r25
     5f8:	8d 81       	ldd	r24, Y+5	; 0x05
     5fa:	9e 81       	ldd	r25, Y+6	; 0x06
     5fc:	28 9e       	mul	r2, r24
     5fe:	b0 01       	movw	r22, r0
     600:	29 9e       	mul	r2, r25
     602:	70 0d       	add	r23, r0
     604:	38 9e       	mul	r3, r24
     606:	70 0d       	add	r23, r0
     608:	11 24       	eor	r1, r1
     60a:	07 2e       	mov	r0, r23
     60c:	00 0c       	add	r0, r0
     60e:	88 0b       	sbc	r24, r24
     610:	99 0b       	sbc	r25, r25
     612:	ff d5       	rcall	.+3070   	; 0x1212 <__floatsisf>
     614:	6b 01       	movw	r12, r22
     616:	7c 01       	movw	r14, r24
     618:	a5 01       	movw	r20, r10
     61a:	94 01       	movw	r18, r8
     61c:	69 81       	ldd	r22, Y+1	; 0x01
     61e:	7a 81       	ldd	r23, Y+2	; 0x02
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	aa d6       	rcall	.+3412   	; 0x137a <__mulsf3>
     626:	9b 01       	movw	r18, r22
     628:	ac 01       	movw	r20, r24
     62a:	c7 01       	movw	r24, r14
     62c:	b6 01       	movw	r22, r12
     62e:	ee d4       	rcall	.+2524   	; 0x100c <__addsf3>
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	40 e2       	ldi	r20, 0x20	; 32
     636:	51 e4       	ldi	r21, 0x41	; 65
     638:	51 d5       	rcall	.+2722   	; 0x10dc <__divsf3>
     63a:	b8 d5       	rcall	.+2928   	; 0x11ac <__fixsfsi>
     63c:	9b 01       	movw	r18, r22
     63e:	70 93 62 01 	sts	0x0162, r23
     642:	60 93 61 01 	sts	0x0161, r22
     646:	8d 81       	ldd	r24, Y+5	; 0x05
     648:	9e 81       	ldd	r25, Y+6	; 0x06
     64a:	f8 01       	movw	r30, r16
     64c:	91 83       	std	Z+1, r25	; 0x01
     64e:	80 83       	st	Z, r24
     650:	c2 01       	movw	r24, r4
     652:	01 96       	adiw	r24, 0x01	; 1
     654:	85 30       	cpi	r24, 0x05	; 5
     656:	91 05       	cpc	r25, r1
     658:	29 f0       	breq	.+10     	; 0x664 <PD_for_lab+0x196>
     65a:	90 93 2c 01 	sts	0x012C, r25
     65e:	80 93 2b 01 	sts	0x012B, r24
     662:	04 c0       	rjmp	.+8      	; 0x66c <PD_for_lab+0x19e>
     664:	10 92 2c 01 	sts	0x012C, r1
     668:	10 92 2b 01 	sts	0x012B, r1
     66c:	33 23       	and	r19, r19
     66e:	2c f0       	brlt	.+10     	; 0x67a <PD_for_lab+0x1ac>
     670:	10 92 62 01 	sts	0x0162, r1
     674:	10 92 61 01 	sts	0x0161, r1
     678:	11 c0       	rjmp	.+34     	; 0x69c <PD_for_lab+0x1ce>
     67a:	87 b5       	in	r24, 0x27	; 39
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	91 95       	neg	r25
     680:	81 95       	neg	r24
     682:	91 09       	sbc	r25, r1
     684:	82 17       	cp	r24, r18
     686:	93 07       	cpc	r25, r19
     688:	4c f0       	brlt	.+18     	; 0x69c <PD_for_lab+0x1ce>
     68a:	87 b5       	in	r24, 0x27	; 39
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	91 95       	neg	r25
     690:	81 95       	neg	r24
     692:	91 09       	sbc	r25, r1
     694:	90 93 62 01 	sts	0x0162, r25
     698:	80 93 61 01 	sts	0x0161, r24
     69c:	77 20       	and	r7, r7
     69e:	2c f0       	brlt	.+10     	; 0x6aa <PD_for_lab+0x1dc>
     6a0:	10 92 7b 01 	sts	0x017B, r1
     6a4:	10 92 7a 01 	sts	0x017A, r1
     6a8:	11 c0       	rjmp	.+34     	; 0x6cc <PD_for_lab+0x1fe>
     6aa:	88 b5       	in	r24, 0x28	; 40
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	91 95       	neg	r25
     6b0:	81 95       	neg	r24
     6b2:	91 09       	sbc	r25, r1
     6b4:	86 15       	cp	r24, r6
     6b6:	97 05       	cpc	r25, r7
     6b8:	4c f0       	brlt	.+18     	; 0x6cc <PD_for_lab+0x1fe>
     6ba:	88 b5       	in	r24, 0x28	; 40
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	91 95       	neg	r25
     6c0:	81 95       	neg	r24
     6c2:	91 09       	sbc	r25, r1
     6c4:	90 93 7b 01 	sts	0x017B, r25
     6c8:	80 93 7a 01 	sts	0x017A, r24
     6cc:	90 91 61 01 	lds	r25, 0x0161
     6d0:	80 91 3d 01 	lds	r24, 0x013D
     6d4:	89 0f       	add	r24, r25
     6d6:	87 bd       	out	0x27, r24	; 39
     6d8:	90 91 7a 01 	lds	r25, 0x017A
     6dc:	80 91 3b 01 	lds	r24, 0x013B
     6e0:	89 0f       	add	r24, r25
     6e2:	88 bd       	out	0x28, r24	; 40
     6e4:	28 96       	adiw	r28, 0x08	; 8
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	de bf       	out	0x3e, r29	; 62
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	cd bf       	out	0x3d, r28	; 61
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	1f 91       	pop	r17
     6f6:	0f 91       	pop	r16
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	bf 90       	pop	r11
     702:	af 90       	pop	r10
     704:	9f 90       	pop	r9
     706:	8f 90       	pop	r8
     708:	7f 90       	pop	r7
     70a:	6f 90       	pop	r6
     70c:	5f 90       	pop	r5
     70e:	4f 90       	pop	r4
     710:	3f 90       	pop	r3
     712:	2f 90       	pop	r2
     714:	08 95       	ret

00000716 <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
     716:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
	int sensor_right_tmp = distans_right;
     718:	60 91 6d 01 	lds	r22, 0x016D
     71c:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
     71e:	80 91 68 01 	lds	r24, 0x0168
     722:	90 e0       	ldi	r25, 0x00	; 0
	sei();
     724:	78 94       	sei
	
	int st_value = 40;
	// Normalfall
	/*if((sensor_left_tmp < st_value && sensor_front_tmp > st_value && sensor_right_tmp < st_value) &&
	(!oneway_turn && !waypoint && !twoway_turn_left && !twoway_turn_right))*/
		PD_for_lab(sensor_left_tmp,sensor_right_tmp);
     726:	d3 ce       	rjmp	.-602    	; 0x4ce <PD_for_lab>
     728:	08 95       	ret

0000072a <linje>:
int scaler=1;
int dt = 1;			// 100ms loop time (kanske)


	 
void linje(void){
     72a:	4f 92       	push	r4
     72c:	5f 92       	push	r5
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
	//**********Scaler, depends on P and D, check with matlab to get output to be : (output = speedvalue - 20)****
	scaler = 1; //testa i matlab, nya derivatan med dt ger mycket hÃ¶gre vÃ¤rden
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	90 93 03 01 	sts	0x0103, r25
     74a:	80 93 02 01 	sts	0x0102, r24
	//************************************************************************************************************
	cli();
     74e:	f8 94       	cli
	int current_position_tmp = current_position;
     750:	60 91 1b 01 	lds	r22, 0x011B
     754:	70 91 1c 01 	lds	r23, 0x011C
     758:	80 91 1d 01 	lds	r24, 0x011D
     75c:	90 91 1e 01 	lds	r25, 0x011E
     760:	25 d5       	rcall	.+2634   	; 0x11ac <__fixsfsi>
     762:	6b 01       	movw	r12, r22
     764:	7c 01       	movw	r14, r24
	sei();
     766:	78 94       	sei
	if(current_position < 0)
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	a9 01       	movw	r20, r18
     76e:	60 91 1b 01 	lds	r22, 0x011B
     772:	70 91 1c 01 	lds	r23, 0x011C
     776:	80 91 1d 01 	lds	r24, 0x011D
     77a:	90 91 1e 01 	lds	r25, 0x011E
     77e:	aa d4       	rcall	.+2388   	; 0x10d4 <__cmpsf2>
     780:	88 23       	and	r24, r24
     782:	24 f4       	brge	.+8      	; 0x78c <linje+0x62>
		PORTD ^= (1 << PD0);
     784:	9b b1       	in	r25, 0x0b	; 11
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	89 27       	eor	r24, r25
     78a:	8b b9       	out	0x0b, r24	; 11
	if(current_position > 0)
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	a9 01       	movw	r20, r18
     792:	60 91 1b 01 	lds	r22, 0x011B
     796:	70 91 1c 01 	lds	r23, 0x011C
     79a:	80 91 1d 01 	lds	r24, 0x011D
     79e:	90 91 1e 01 	lds	r25, 0x011E
     7a2:	e7 d5       	rcall	.+3022   	; 0x1372 <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	24 f4       	brge	.+8      	; 0x7b0 <linje+0x86>
		PORTD ^= (1 << PD1);
     7a8:	9b b1       	in	r25, 0x0b	; 11
     7aa:	82 e0       	ldi	r24, 0x02	; 2
     7ac:	89 27       	eor	r24, r25
     7ae:	8b b9       	out	0x0b, r24	; 11
	current_error = setpoint - current_position_tmp;
     7b0:	80 91 29 01 	lds	r24, 0x0129
     7b4:	90 91 2a 01 	lds	r25, 0x012A
     7b8:	bc 01       	movw	r22, r24
     7ba:	6c 19       	sub	r22, r12
     7bc:	7d 09       	sbc	r23, r13
     7be:	07 2e       	mov	r0, r23
     7c0:	00 0c       	add	r0, r0
     7c2:	88 0b       	sbc	r24, r24
     7c4:	99 0b       	sbc	r25, r25
     7c6:	25 d5       	rcall	.+2634   	; 0x1212 <__floatsisf>
     7c8:	6b 01       	movw	r12, r22
     7ca:	7c 01       	movw	r14, r24
     7cc:	60 93 25 01 	sts	0x0125, r22
     7d0:	70 93 26 01 	sts	0x0126, r23
     7d4:	80 93 27 01 	sts	0x0127, r24
     7d8:	90 93 28 01 	sts	0x0128, r25
	derivate = (current_error -previous_error) * dt;					// Tror det var dt som saknades fÃ¶r derivatan
     7dc:	20 91 1f 01 	lds	r18, 0x011F
     7e0:	30 91 20 01 	lds	r19, 0x0120
     7e4:	40 91 21 01 	lds	r20, 0x0121
     7e8:	50 91 22 01 	lds	r21, 0x0122
     7ec:	0e d4       	rcall	.+2076   	; 0x100a <__subsf3>
     7ee:	4b 01       	movw	r8, r22
     7f0:	5c 01       	movw	r10, r24
     7f2:	80 91 00 01 	lds	r24, 0x0100
     7f6:	90 91 01 01 	lds	r25, 0x0101
     7fa:	bc 01       	movw	r22, r24
     7fc:	99 0f       	add	r25, r25
     7fe:	88 0b       	sbc	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	07 d5       	rcall	.+2574   	; 0x1212 <__floatsisf>
     804:	9b 01       	movw	r18, r22
     806:	ac 01       	movw	r20, r24
     808:	c5 01       	movw	r24, r10
     80a:	b4 01       	movw	r22, r8
     80c:	b6 d5       	rcall	.+2924   	; 0x137a <__mulsf3>
     80e:	4b 01       	movw	r8, r22
     810:	5c 01       	movw	r10, r24
     812:	60 93 2d 01 	sts	0x012D, r22
     816:	70 93 2e 01 	sts	0x012E, r23
     81a:	80 93 2f 01 	sts	0x012F, r24
     81e:	90 93 30 01 	sts	0x0130, r25
	output = (p_constant * current_error + d_constant * derivate) / scaler;
     822:	60 91 06 01 	lds	r22, 0x0106
     826:	70 91 07 01 	lds	r23, 0x0107
     82a:	07 2e       	mov	r0, r23
     82c:	00 0c       	add	r0, r0
     82e:	88 0b       	sbc	r24, r24
     830:	99 0b       	sbc	r25, r25
     832:	ef d4       	rcall	.+2526   	; 0x1212 <__floatsisf>
     834:	9b 01       	movw	r18, r22
     836:	ac 01       	movw	r20, r24
     838:	c7 01       	movw	r24, r14
     83a:	b6 01       	movw	r22, r12
     83c:	9e d5       	rcall	.+2876   	; 0x137a <__mulsf3>
     83e:	2b 01       	movw	r4, r22
     840:	3c 01       	movw	r6, r24
     842:	60 91 04 01 	lds	r22, 0x0104
     846:	70 91 05 01 	lds	r23, 0x0105
     84a:	07 2e       	mov	r0, r23
     84c:	00 0c       	add	r0, r0
     84e:	88 0b       	sbc	r24, r24
     850:	99 0b       	sbc	r25, r25
     852:	df d4       	rcall	.+2494   	; 0x1212 <__floatsisf>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	c5 01       	movw	r24, r10
     85a:	b4 01       	movw	r22, r8
     85c:	8e d5       	rcall	.+2844   	; 0x137a <__mulsf3>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	c3 01       	movw	r24, r6
     864:	b2 01       	movw	r22, r4
     866:	d2 d3       	rcall	.+1956   	; 0x100c <__addsf3>
     868:	4b 01       	movw	r8, r22
     86a:	5c 01       	movw	r10, r24
     86c:	80 91 02 01 	lds	r24, 0x0102
     870:	90 91 03 01 	lds	r25, 0x0103
     874:	bc 01       	movw	r22, r24
     876:	99 0f       	add	r25, r25
     878:	88 0b       	sbc	r24, r24
     87a:	99 0b       	sbc	r25, r25
     87c:	ca d4       	rcall	.+2452   	; 0x1212 <__floatsisf>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	c5 01       	movw	r24, r10
     884:	b4 01       	movw	r22, r8
     886:	2a d4       	rcall	.+2132   	; 0x10dc <__divsf3>
     888:	91 d4       	rcall	.+2338   	; 0x11ac <__fixsfsi>
     88a:	9b 01       	movw	r18, r22
     88c:	70 93 24 01 	sts	0x0124, r23
     890:	60 93 23 01 	sts	0x0123, r22
	previous_error = current_error;
     894:	c0 92 1f 01 	sts	0x011F, r12
     898:	d0 92 20 01 	sts	0x0120, r13
     89c:	e0 92 21 01 	sts	0x0121, r14
     8a0:	f0 92 22 01 	sts	0x0122, r15
//***********************************
//Reglering
//***********************************		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     8a4:	40 91 33 01 	lds	r20, 0x0133
     8a8:	50 91 34 01 	lds	r21, 0x0134
     8ac:	45 2b       	or	r20, r21
     8ae:	b9 f4       	brne	.+46     	; 0x8de <linje+0x1b4>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     8b0:	2d 9a       	sbi	0x05, 5	; 5
		PORTB |= (1 << motor_dir_right);
     8b2:	2e 9a       	sbi	0x05, 6	; 5
		motor_left = left/2;
     8b4:	80 91 3d 01 	lds	r24, 0x013D
     8b8:	90 91 3e 01 	lds	r25, 0x013E
     8bc:	99 23       	and	r25, r25
     8be:	0c f4       	brge	.+2      	; 0x8c2 <linje+0x198>
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	95 95       	asr	r25
     8c4:	87 95       	ror	r24
     8c6:	87 bd       	out	0x27, r24	; 39
		motor_right = right/2;
     8c8:	80 91 3b 01 	lds	r24, 0x013B
     8cc:	90 91 3c 01 	lds	r25, 0x013C
     8d0:	99 23       	and	r25, r25
     8d2:	0c f4       	brge	.+2      	; 0x8d6 <linje+0x1ac>
     8d4:	01 96       	adiw	r24, 0x01	; 1
     8d6:	95 95       	asr	r25
     8d8:	87 95       	ror	r24
     8da:	88 bd       	out	0x28, r24	; 40
     8dc:	5b c0       	rjmp	.+182    	; 0x994 <linje+0x26a>
	}
	else if(output < 0){									// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     8de:	77 23       	and	r23, r23
     8e0:	6c f5       	brge	.+90     	; 0x93c <linje+0x212>
		if(abs(output) >= right){				// FÃ¶r att unvika mÃ¤ttnad i regleringen
     8e2:	9b 01       	movw	r18, r22
     8e4:	77 23       	and	r23, r23
     8e6:	24 f4       	brge	.+8      	; 0x8f0 <linje+0x1c6>
     8e8:	22 27       	eor	r18, r18
     8ea:	33 27       	eor	r19, r19
     8ec:	26 1b       	sub	r18, r22
     8ee:	37 0b       	sbc	r19, r23
     8f0:	80 91 3b 01 	lds	r24, 0x013B
     8f4:	90 91 3c 01 	lds	r25, 0x013C
     8f8:	28 17       	cp	r18, r24
     8fa:	39 07       	cpc	r19, r25
     8fc:	9c f0       	brlt	.+38     	; 0x924 <linje+0x1fa>
			PORTB |= (1 << motor_dir_left);		// Set motor direction to backward
     8fe:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     900:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left;
     902:	80 91 3d 01 	lds	r24, 0x013D
     906:	87 bd       	out	0x27, r24	; 39
			motor_right = abs(output)- right;
     908:	80 91 23 01 	lds	r24, 0x0123
     90c:	90 91 24 01 	lds	r25, 0x0124
     910:	99 23       	and	r25, r25
     912:	1c f4       	brge	.+6      	; 0x91a <linje+0x1f0>
     914:	91 95       	neg	r25
     916:	81 95       	neg	r24
     918:	91 09       	sbc	r25, r1
     91a:	90 91 3b 01 	lds	r25, 0x013B
     91e:	89 1b       	sub	r24, r25
     920:	88 bd       	out	0x28, r24	; 40
     922:	38 c0       	rjmp	.+112    	; 0x994 <linje+0x26a>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     924:	2d 98       	cbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     926:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left;
     928:	80 91 3d 01 	lds	r24, 0x013D
     92c:	87 bd       	out	0x27, r24	; 39
			motor_right = right + output;
     92e:	90 91 23 01 	lds	r25, 0x0123
     932:	80 91 3b 01 	lds	r24, 0x013B
     936:	89 0f       	add	r24, r25
     938:	88 bd       	out	0x28, r24	; 40
     93a:	2c c0       	rjmp	.+88     	; 0x994 <linje+0x26a>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     93c:	16 16       	cp	r1, r22
     93e:	17 06       	cpc	r1, r23
     940:	fc f4       	brge	.+62     	; 0x980 <linje+0x256>
		if(output >= left){				// FÃ¶r att unvika mÃ¤ttnad i regleringen
     942:	80 91 3d 01 	lds	r24, 0x013D
     946:	90 91 3e 01 	lds	r25, 0x013E
     94a:	28 17       	cp	r18, r24
     94c:	39 07       	cpc	r19, r25
     94e:	64 f0       	brlt	.+24     	; 0x968 <linje+0x23e>
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward
     950:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     952:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right;
     954:	80 91 3b 01 	lds	r24, 0x013B
     958:	88 bd       	out	0x28, r24	; 40
			motor_left = output - left;
     95a:	80 91 23 01 	lds	r24, 0x0123
     95e:	90 91 3d 01 	lds	r25, 0x013D
     962:	89 1b       	sub	r24, r25
     964:	87 bd       	out	0x27, r24	; 39
     966:	16 c0       	rjmp	.+44     	; 0x994 <linje+0x26a>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     968:	2d 98       	cbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     96a:	2e 98       	cbi	0x05, 6	; 5
			motor_right = right;
     96c:	80 91 3b 01 	lds	r24, 0x013B
     970:	88 bd       	out	0x28, r24	; 40
			motor_left = left - output;
     972:	80 91 3d 01 	lds	r24, 0x013D
     976:	90 91 23 01 	lds	r25, 0x0123
     97a:	89 1b       	sub	r24, r25
     97c:	87 bd       	out	0x27, r24	; 39
     97e:	0a c0       	rjmp	.+20     	; 0x994 <linje+0x26a>
		}
	}
	else if(output==0){
     980:	67 2b       	or	r22, r23
     982:	41 f4       	brne	.+16     	; 0x994 <linje+0x26a>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     984:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     986:	2e 98       	cbi	0x05, 6	; 5
		motor_left = left;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     988:	80 91 3d 01 	lds	r24, 0x013D
     98c:	87 bd       	out	0x27, r24	; 39
		motor_right = right;
     98e:	80 91 3b 01 	lds	r24, 0x013B
     992:	88 bd       	out	0x28, r24	; 40
	}
	//PORTD ^= (1 << PD1); // heej
}
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	bf 90       	pop	r11
     99e:	af 90       	pop	r10
     9a0:	9f 90       	pop	r9
     9a2:	8f 90       	pop	r8
     9a4:	7f 90       	pop	r7
     9a6:	6f 90       	pop	r6
     9a8:	5f 90       	pop	r5
     9aa:	4f 90       	pop	r4
     9ac:	08 95       	ret

000009ae <linje_main>:
int fel_antal=0;


void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	if(distans_fram<10){
     9ae:	80 91 65 01 	lds	r24, 0x0165
     9b2:	8a 30       	cpi	r24, 0x0A	; 10
     9b4:	28 f4       	brcc	.+10     	; 0x9c0 <linje_main+0x12>
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
     9b6:	10 92 40 01 	sts	0x0140, r1
     9ba:	10 92 3f 01 	sts	0x013F, r1
     9be:	08 95       	ret
	}
	else if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     9c0:	80 91 6c 01 	lds	r24, 0x016C
     9c4:	81 50       	subi	r24, 0x01	; 1
     9c6:	83 30       	cpi	r24, 0x03	; 3
     9c8:	88 f4       	brcc	.+34     	; 0x9ec <linje_main+0x3e>
		current_position=linje_RGBsveng();
     9ca:	39 dc       	rcall	.-1934   	; 0x23e <linje_RGBsveng>
     9cc:	68 2f       	mov	r22, r24
     9ce:	88 0f       	add	r24, r24
     9d0:	77 0b       	sbc	r23, r23
     9d2:	88 0b       	sbc	r24, r24
     9d4:	99 0b       	sbc	r25, r25
     9d6:	1d d4       	rcall	.+2106   	; 0x1212 <__floatsisf>
     9d8:	60 93 1b 01 	sts	0x011B, r22
     9dc:	70 93 1c 01 	sts	0x011C, r23
     9e0:	80 93 1d 01 	sts	0x011D, r24
     9e4:	90 93 1e 01 	sts	0x011E, r25
		linje();
     9e8:	a0 ce       	rjmp	.-704    	; 0x72a <linje>
     9ea:	08 95       	ret
	}
	else if(detect_goal()==true){
     9ec:	c0 dc       	rcall	.-1664   	; 0x36e <detect_goal>
     9ee:	88 23       	and	r24, r24
     9f0:	29 f0       	breq	.+10     	; 0x9fc <linje_main+0x4e>
		start=0;
     9f2:	10 92 40 01 	sts	0x0140, r1
     9f6:	10 92 3f 01 	sts	0x013F, r1
     9fa:	08 95       	ret
		//signalera i mål och stanna
	}
	else if(detect_labyrint()==true){
     9fc:	e7 dc       	rcall	.-1586   	; 0x3cc <detect_labyrint>
     9fe:	88 23       	and	r24, r24
     a00:	39 f0       	breq	.+14     	; 0xa10 <linje_main+0x62>
		regulator_mode=2; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
     a02:	82 e0       	ldi	r24, 0x02	; 2
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	90 93 36 01 	sts	0x0136, r25
     a0a:	80 93 35 01 	sts	0x0135, r24
     a0e:	08 95       	ret
	}
	else{
		current_position=linje_get_error();
     a10:	6d db       	rcall	.-2342   	; 0xec <linje_get_error>
     a12:	bc 01       	movw	r22, r24
     a14:	99 0f       	add	r25, r25
     a16:	88 0b       	sbc	r24, r24
     a18:	99 0b       	sbc	r25, r25
     a1a:	fb d3       	rcall	.+2038   	; 0x1212 <__floatsisf>
     a1c:	60 93 1b 01 	sts	0x011B, r22
     a20:	70 93 1c 01 	sts	0x011C, r23
     a24:	80 93 1d 01 	sts	0x011D, r24
     a28:	90 93 1e 01 	sts	0x011E, r25
		linje();
     a2c:	7e ce       	rjmp	.-772    	; 0x72a <linje>
     a2e:	08 95       	ret

00000a30 <regulator>:
ï»¿#include <avr/interrupt.h>
#include <avr/io.h>
#include "asf.h"

void regulator(){
	if(regulator_mode == 1){
     a30:	80 91 35 01 	lds	r24, 0x0135
     a34:	90 91 36 01 	lds	r25, 0x0136
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	11 f4       	brne	.+4      	; 0xa40 <regulator+0x10>
		linje_main();
     a3c:	b8 cf       	rjmp	.-144    	; 0x9ae <linje_main>
     a3e:	08 95       	ret
	}
	else
	{	
		labyreg();//kalla pÃ¥ labyrint funktion
     a40:	6a ce       	rjmp	.-812    	; 0x716 <labyreg>
     a42:	08 95       	ret

00000a44 <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     a44:	84 b5       	in	r24, 0x24	; 36
     a46:	83 6a       	ori	r24, 0xA3	; 163
     a48:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     a4a:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     a4c:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     a4e:	85 b5       	in	r24, 0x25	; 37
     a50:	83 60       	ori	r24, 0x03	; 3
     a52:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     a54:	88 e7       	ldi	r24, 0x78	; 120
     a56:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     a58:	85 b1       	in	r24, 0x05	; 5
     a5a:	15 b8       	out	0x05, r1	; 5
     a5c:	08 95       	ret

00000a5e <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     a62:	e1 e8       	ldi	r30, 0x81	; 129
     a64:	f0 e0       	ldi	r31, 0x00	; 0
     a66:	80 81       	ld	r24, Z
     a68:	8d 60       	ori	r24, 0x0D	; 13
     a6a:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     a6c:	80 ea       	ldi	r24, 0xA0	; 160
     a6e:	95 e0       	ldi	r25, 0x05	; 5
     a70:	90 93 89 00 	sts	0x0089, r25
     a74:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     a78:	ef e6       	ldi	r30, 0x6F	; 111
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	80 81       	ld	r24, Z
     a7e:	82 60       	ori	r24, 0x02	; 2
     a80:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     a82:	b1 9a       	sbi	0x16, 1	; 22
     a84:	08 95       	ret

00000a86 <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
	regler_ready=1;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	90 93 3a 01 	sts	0x013A, r25
     a9c:	80 93 39 01 	sts	0x0139, r24
	//if(counter_timer<10)
	//counter_timer++;
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
     aa0:	80 91 37 01 	lds	r24, 0x0137
     aa4:	90 91 38 01 	lds	r25, 0x0138
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	90 93 38 01 	sts	0x0138, r25
     aae:	80 93 37 01 	sts	0x0137, r24
}
     ab2:	9f 91       	pop	r25
     ab4:	8f 91       	pop	r24
     ab6:	0f 90       	pop	r0
     ab8:	0f be       	out	0x3f, r0	; 63
     aba:	0f 90       	pop	r0
     abc:	1f 90       	pop	r1
     abe:	18 95       	reti

00000ac0 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     ac0:	8d b3       	in	r24, 0x1d	; 29
     ac2:	86 60       	ori	r24, 0x06	; 6
     ac4:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     ac6:	e9 e6       	ldi	r30, 0x69	; 105
     ac8:	f0 e0       	ldi	r31, 0x00	; 0
     aca:	80 81       	ld	r24, Z
     acc:	88 62       	ori	r24, 0x28	; 40
     ace:	80 83       	st	Z, r24
     ad0:	08 95       	ret

00000ad2 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     ad2:	1f 92       	push	r1
     ad4:	0f 92       	push	r0
     ad6:	0f b6       	in	r0, 0x3f	; 63
     ad8:	0f 92       	push	r0
     ada:	11 24       	eor	r1, r1
     adc:	8f 93       	push	r24
     ade:	9f 93       	push	r25
	if(drive_mode==1){
     ae0:	80 91 41 01 	lds	r24, 0x0141
     ae4:	90 91 42 01 	lds	r25, 0x0142
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	39 f4       	brne	.+14     	; 0xafa <__vector_2+0x28>
		drive_mode=0;
     aec:	10 92 42 01 	sts	0x0142, r1
     af0:	10 92 41 01 	sts	0x0141, r1
		PORTD |= (1 << PD1);
     af4:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     af6:	58 98       	cbi	0x0b, 0	; 11
     af8:	0c c0       	rjmp	.+24     	; 0xb12 <__vector_2+0x40>
	}
	else{
		start=0;
     afa:	10 92 40 01 	sts	0x0140, r1
     afe:	10 92 3f 01 	sts	0x013F, r1
		drive_mode=1;
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	90 93 42 01 	sts	0x0142, r25
     b0a:	80 93 41 01 	sts	0x0141, r24
		PORTD |= (1 << PD0);
     b0e:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     b10:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     b12:	e1 9a       	sbi	0x1c, 1	; 28
}
     b14:	9f 91       	pop	r25
     b16:	8f 91       	pop	r24
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     b22:	1f 92       	push	r1
     b24:	0f 92       	push	r0
     b26:	0f b6       	in	r0, 0x3f	; 63
     b28:	0f 92       	push	r0
     b2a:	11 24       	eor	r1, r1
     b2c:	8f 93       	push	r24
     b2e:	9f 93       	push	r25
	if(start==0){
     b30:	80 91 3f 01 	lds	r24, 0x013F
     b34:	90 91 40 01 	lds	r25, 0x0140
     b38:	89 2b       	or	r24, r25
     b3a:	39 f4       	brne	.+14     	; 0xb4a <__vector_3+0x28>
		start=1;
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	90 93 40 01 	sts	0x0140, r25
     b44:	80 93 3f 01 	sts	0x013F, r24
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <__vector_3+0x30>
	}
	else{
		start=0;
     b4a:	10 92 40 01 	sts	0x0140, r1
     b4e:	10 92 3f 01 	sts	0x013F, r1
	}
	EIFR |= (1<< INTF2);
     b52:	e2 9a       	sbi	0x1c, 2	; 28
}
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	0f 90       	pop	r0
     b5a:	0f be       	out	0x3f, r0	; 63
     b5c:	0f 90       	pop	r0
     b5e:	1f 90       	pop	r1
     b60:	18 95       	reti

00000b62 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     b62:	88 23       	and	r24, r24
     b64:	69 f0       	breq	.+26     	; 0xb80 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     b66:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     b68:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     b6a:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     b6c:	e9 e6       	ldi	r30, 0x69	; 105
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	83 60       	ori	r24, 0x03	; 3
     b74:	80 83       	st	Z, r24
		TWBR = 0x10;
     b76:	80 e1       	ldi	r24, 0x10	; 16
     b78:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     b7c:	10 92 b9 00 	sts	0x00B9, r1
     b80:	08 95       	ret

00000b82 <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     b82:	8f 92       	push	r8
     b84:	9f 92       	push	r9
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     b9a:	eb 01       	movw	r28, r22
     b9c:	08 81       	ld	r16, Y
     b9e:	02 95       	swap	r16
     ba0:	0f 70       	andi	r16, 0x0F	; 15
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     ba6:	68 94       	set
     ba8:	ee 24       	eor	r14, r14
     baa:	e3 f8       	bld	r14, 3
     bac:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     bb2:	ec eb       	ldi	r30, 0xBC	; 188
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	0f 2e       	mov	r0, r31
     bb8:	f4 ea       	ldi	r31, 0xA4	; 164
     bba:	df 2e       	mov	r13, r31
     bbc:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     bbe:	a9 eb       	ldi	r26, 0xB9	; 185
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	c8 2e       	mov	r12, r24
     bc6:	6b eb       	ldi	r22, 0xBB	; 187
     bc8:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     bca:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     bcc:	68 94       	set
     bce:	aa 24       	eor	r10, r10
     bd0:	a4 f8       	bld	r10, 4
     bd2:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     bd4:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     bd6:	90 81       	ld	r25, Z
     bd8:	99 23       	and	r25, r25
     bda:	ec f7       	brge	.-6      	; 0xbd6 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     bdc:	2c 91       	ld	r18, X
     bde:	28 7f       	andi	r18, 0xF8	; 248
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	2e 15       	cp	r18, r14
     be4:	3f 05       	cpc	r19, r15
     be6:	69 f5       	brne	.+90     	; 0xc42 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     be8:	eb 01       	movw	r28, r22
     bea:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     bec:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
     bee:	90 81       	ld	r25, Z
     bf0:	99 23       	and	r25, r25
     bf2:	ec f7       	brge	.-6      	; 0xbee <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
     bf4:	9c 91       	ld	r25, X
     bf6:	98 7f       	andi	r25, 0xF8	; 248
     bf8:	98 31       	cpi	r25, 0x18	; 24
     bfa:	29 f0       	breq	.+10     	; 0xc06 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     bfc:	84 e9       	ldi	r24, 0x94	; 148
     bfe:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	1f c0       	rjmp	.+62     	; 0xc44 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
     c06:	e4 01       	movw	r28, r8
     c08:	99 91       	ld	r25, Y+
     c0a:	4e 01       	movw	r8, r28
     c0c:	eb 01       	movw	r28, r22
     c0e:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
     c10:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
     c12:	90 81       	ld	r25, Z
     c14:	99 23       	and	r25, r25
     c16:	ec f7       	brge	.-6      	; 0xc12 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
     c18:	9c 91       	ld	r25, X
     c1a:	98 7f       	andi	r25, 0xF8	; 248
     c1c:	98 32       	cpi	r25, 0x28	; 40
     c1e:	29 f0       	breq	.+10     	; 0xc2a <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     c20:	84 e9       	ldi	r24, 0x94	; 148
     c22:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	0d c0       	rjmp	.+26     	; 0xc44 <i2c_send+0xc2>
	}
	counter++;
     c2a:	4f 5f       	subi	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     c2e:	ea 2c       	mov	r14, r10
     c30:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
     c32:	04 17       	cp	r16, r20
     c34:	15 07       	cpc	r17, r21
     c36:	74 f6       	brge	.-100    	; 0xbd4 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     c38:	84 e9       	ldi	r24, 0x94	; 148
     c3a:	80 93 bc 00 	sts	0x00BC, r24
	return true;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
     c42:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	1f 91       	pop	r17
     c4a:	0f 91       	pop	r16
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	bf 90       	pop	r11
     c56:	af 90       	pop	r10
     c58:	9f 90       	pop	r9
     c5a:	8f 90       	pop	r8
     c5c:	08 95       	ret

00000c5e <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
     c5e:	ec eb       	ldi	r30, 0xBC	; 188
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	90 81       	ld	r25, Z
     c64:	94 6a       	ori	r25, 0xA4	; 164
     c66:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     c68:	90 81       	ld	r25, Z
     c6a:	99 23       	and	r25, r25
     c6c:	ec f7       	brge	.-6      	; 0xc68 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
     c6e:	90 91 b9 00 	lds	r25, 0x00B9
     c72:	98 7f       	andi	r25, 0xF8	; 248
     c74:	98 30       	cpi	r25, 0x08	; 8
     c76:	29 f0       	breq	.+10     	; 0xc82 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     c78:	84 e9       	ldi	r24, 0x94	; 148
     c7a:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
     c82:	81 60       	ori	r24, 0x01	; 1
     c84:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     c88:	84 e8       	ldi	r24, 0x84	; 132
     c8a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
     c8e:	ec eb       	ldi	r30, 0xBC	; 188
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 23       	and	r24, r24
     c96:	ec f7       	brge	.-6      	; 0xc92 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
     c98:	80 91 b9 00 	lds	r24, 0x00B9
     c9c:	88 7f       	andi	r24, 0xF8	; 248
     c9e:	80 34       	cpi	r24, 0x40	; 64
     ca0:	29 f0       	breq	.+10     	; 0xcac <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     ca2:	84 e9       	ldi	r24, 0x94	; 148
     ca4:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
     cac:	ec eb       	ldi	r30, 0xBC	; 188
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	84 68       	ori	r24, 0x84	; 132
     cb4:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	ec f7       	brge	.-6      	; 0xcb6 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR; //ta emot data 
     cbc:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     cc0:	94 e9       	ldi	r25, 0x94	; 148
     cc2:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
     cc6:	08 95       	ret

00000cc8 <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
     cc8:	20 91 10 01 	lds	r18, 0x0110
     ccc:	30 91 11 01 	lds	r19, 0x0111
     cd0:	21 15       	cp	r18, r1
     cd2:	31 05       	cpc	r19, r1
     cd4:	89 f4       	brne	.+34     	; 0xcf8 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
     cd6:	28 2f       	mov	r18, r24
     cd8:	22 95       	swap	r18
     cda:	2f 70       	andi	r18, 0x0F	; 15
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	30 93 0f 01 	sts	0x010F, r19
     ce2:	20 93 0e 01 	sts	0x010E, r18
		i2c_data[counter] = data;
     ce6:	80 93 50 01 	sts	0x0150, r24
		counter++;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	90 93 11 01 	sts	0x0111, r25
     cf2:	80 93 10 01 	sts	0x0110, r24
     cf6:	18 c0       	rjmp	.+48     	; 0xd28 <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
     cf8:	40 91 0e 01 	lds	r20, 0x010E
     cfc:	50 91 0f 01 	lds	r21, 0x010F
     d00:	4f 5f       	subi	r20, 0xFF	; 255
     d02:	5f 4f       	sbci	r21, 0xFF	; 255
     d04:	24 17       	cp	r18, r20
     d06:	35 07       	cpc	r19, r21
     d08:	5c f4       	brge	.+22     	; 0xd20 <i2c_store_data+0x58>
		i2c_data[counter] = data;
     d0a:	f9 01       	movw	r30, r18
     d0c:	e0 5b       	subi	r30, 0xB0	; 176
     d0e:	fe 4f       	sbci	r31, 0xFE	; 254
     d10:	80 83       	st	Z, r24
		counter++;
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
     d16:	30 93 11 01 	sts	0x0111, r19
     d1a:	20 93 10 01 	sts	0x0110, r18
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
     d20:	f9 01       	movw	r30, r18
     d22:	e0 5b       	subi	r30, 0xB0	; 176
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
     d28:	80 91 0e 01 	lds	r24, 0x010E
     d2c:	90 91 0f 01 	lds	r25, 0x010F
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	20 91 10 01 	lds	r18, 0x0110
     d36:	30 91 11 01 	lds	r19, 0x0111
     d3a:	28 17       	cp	r18, r24
     d3c:	39 07       	cpc	r19, r25
     d3e:	44 f0       	brlt	.+16     	; 0xd50 <i2c_store_data+0x88>
		i2c_newdata = true;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	80 93 1a 01 	sts	0x011A, r24
		counter = 0;
     d46:	10 92 11 01 	sts	0x0111, r1
     d4a:	10 92 10 01 	sts	0x0110, r1
		EIMSK &= ~(1<<INT0);
     d4e:	e8 98       	cbi	0x1d, 0	; 29
     d50:	08 95       	ret

00000d52 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
     d52:	1f 92       	push	r1
     d54:	0f 92       	push	r0
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	0f 92       	push	r0
     d5a:	11 24       	eor	r1, r1
     d5c:	0b b6       	in	r0, 0x3b	; 59
     d5e:	0f 92       	push	r0
     d60:	2f 93       	push	r18
     d62:	3f 93       	push	r19
     d64:	4f 93       	push	r20
     d66:	5f 93       	push	r21
     d68:	6f 93       	push	r22
     d6a:	7f 93       	push	r23
     d6c:	8f 93       	push	r24
     d6e:	9f 93       	push	r25
     d70:	af 93       	push	r26
     d72:	bf 93       	push	r27
     d74:	ef 93       	push	r30
     d76:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d78:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
     d7a:	36 9b       	sbis	0x06, 6	; 6
     d7c:	04 c0       	rjmp	.+8      	; 0xd86 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	6e df       	rcall	.-292    	; 0xc5e <i2c_recive>
     d82:	a2 df       	rcall	.-188    	; 0xcc8 <i2c_store_data>
     d84:	05 c0       	rjmp	.+10     	; 0xd90 <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
     d86:	37 9b       	sbis	0x06, 7	; 6
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
     d8a:	86 e0       	ldi	r24, 0x06	; 6
     d8c:	68 df       	rcall	.-304    	; 0xc5e <i2c_recive>
     d8e:	9c df       	rcall	.-200    	; 0xcc8 <i2c_store_data>
	}
}
     d90:	ff 91       	pop	r31
     d92:	ef 91       	pop	r30
     d94:	bf 91       	pop	r27
     d96:	af 91       	pop	r26
     d98:	9f 91       	pop	r25
     d9a:	8f 91       	pop	r24
     d9c:	7f 91       	pop	r23
     d9e:	6f 91       	pop	r22
     da0:	5f 91       	pop	r21
     da2:	4f 91       	pop	r20
     da4:	3f 91       	pop	r19
     da6:	2f 91       	pop	r18
     da8:	0f 90       	pop	r0
     daa:	0b be       	out	0x3b, r0	; 59
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
     db6:	80 91 1a 01 	lds	r24, 0x011A
     dba:	88 23       	and	r24, r24
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <i2c_handel_data+0xa>
     dbe:	e0 c0       	rjmp	.+448    	; 0xf80 <i2c_handel_data+0x1ca>
	{
		i2c_newdata=false;
     dc0:	10 92 1a 01 	sts	0x011A, r1
		if(!((i2c_data[0]>>3)&0x01)){
     dc4:	80 91 50 01 	lds	r24, 0x0150
     dc8:	83 fd       	sbrc	r24, 3
     dca:	07 c0       	rjmp	.+14     	; 0xdda <i2c_handel_data+0x24>
     dcc:	84 e6       	ldi	r24, 0x64	; 100
     dce:	8a 95       	dec	r24
     dd0:	f1 f7       	brne	.-4      	; 0xdce <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
     dd2:	60 e5       	ldi	r22, 0x50	; 80
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	d4 de       	rcall	.-600    	; 0xb82 <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
     dda:	80 91 50 01 	lds	r24, 0x0150
     dde:	e8 2f       	mov	r30, r24
     de0:	ef 70       	andi	r30, 0x0F	; 15
     de2:	8e 2f       	mov	r24, r30
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	fc 01       	movw	r30, r24
     de8:	ea 5b       	subi	r30, 0xBA	; 186
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	3c c3       	rjmp	.+1656   	; 0x1466 <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
     dee:	80 91 51 01 	lds	r24, 0x0151
     df2:	80 93 69 01 	sts	0x0169, r24
				break;
     df6:	c3 c0       	rjmp	.+390    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x01 ://avståndssensorer
				distans_right=i2c_data[3];
     df8:	e0 e5       	ldi	r30, 0x50	; 80
     dfa:	f1 e0       	ldi	r31, 0x01	; 1
     dfc:	83 81       	ldd	r24, Z+3	; 0x03
     dfe:	80 93 6d 01 	sts	0x016D, r24
				distans_fram = i2c_data[2];;
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	80 93 65 01 	sts	0x0165, r24
				distans_left=i2c_data[1];
     e08:	81 81       	ldd	r24, Z+1	; 0x01
     e0a:	80 93 68 01 	sts	0x0168, r24
				break;
     e0e:	b7 c0       	rjmp	.+366    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x02 :// refelxsensor data
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
     e10:	e0 e5       	ldi	r30, 0x50	; 80
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	98 2f       	mov	r25, r24
     e1a:	88 27       	eor	r24, r24
     e1c:	21 81       	ldd	r18, Z+1	; 0x01
     e1e:	82 0f       	add	r24, r18
     e20:	91 1d       	adc	r25, r1
     e22:	90 93 60 01 	sts	0x0160, r25
     e26:	80 93 5f 01 	sts	0x015F, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
     e2a:	83 81       	ldd	r24, Z+3	; 0x03
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	90 93 79 01 	sts	0x0179, r25
     e32:	80 93 78 01 	sts	0x0178, r24
				break;
     e36:	a3 c0       	rjmp	.+326    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x03 :
				RGB_data=1;//"röd";"
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	80 93 6c 01 	sts	0x016C, r24
				break;
     e3e:	9f c0       	rjmp	.+318    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x04 :
				RGB_data=2;//"grön";
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	80 93 6c 01 	sts	0x016C, r24
				break;		
     e46:	9b c0       	rjmp	.+310    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x05 :
				RGB_data=3;//"blå";
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 6c 01 	sts	0x016C, r24
				break;
     e4e:	97 c0       	rjmp	.+302    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x06 :
			
				break;
			case 0x07 :// gyro data
				gyro_90=true;
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	80 93 45 01 	sts	0x0145, r24
				break;
     e56:	93 c0       	rjmp	.+294    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x08 : // manuel stå still
				manual_function=0;
     e58:	10 92 32 01 	sts	0x0132, r1
     e5c:	10 92 31 01 	sts	0x0131, r1
				break;
     e60:	8e c0       	rjmp	.+284    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	90 93 32 01 	sts	0x0132, r25
     e6a:	80 93 31 01 	sts	0x0131, r24
				break;
     e6e:	87 c0       	rjmp	.+270    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	90 93 32 01 	sts	0x0132, r25
     e78:	80 93 31 01 	sts	0x0131, r24
				break;
     e7c:	80 c0       	rjmp	.+256    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x0b ://manuel vänster fram
				manual_function=4;
     e7e:	84 e0       	ldi	r24, 0x04	; 4
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	90 93 32 01 	sts	0x0132, r25
     e86:	80 93 31 01 	sts	0x0131, r24
				break;
     e8a:	79 c0       	rjmp	.+242    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x0c ://manuel höger fram
				manual_function=3;
     e8c:	83 e0       	ldi	r24, 0x03	; 3
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	90 93 32 01 	sts	0x0132, r25
     e94:	80 93 31 01 	sts	0x0131, r24
				break;
     e98:	72 c0       	rjmp	.+228    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
     e9a:	86 e0       	ldi	r24, 0x06	; 6
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	90 93 32 01 	sts	0x0132, r25
     ea2:	80 93 31 01 	sts	0x0131, r24
				break;
     ea6:	6b c0       	rjmp	.+214    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
     ea8:	85 e0       	ldi	r24, 0x05	; 5
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	90 93 32 01 	sts	0x0132, r25
     eb0:	80 93 31 01 	sts	0x0131, r24
				break;
     eb4:	64 c0       	rjmp	.+200    	; 0xf7e <i2c_handel_data+0x1c8>
			case 0x0f :							// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
     eb6:	80 91 51 01 	lds	r24, 0x0151
     eba:	80 3f       	cpi	r24, 0xF0	; 240
     ebc:	91 f4       	brne	.+36     	; 0xee2 <i2c_handel_data+0x12c>
					if(start==1){
     ebe:	80 91 3f 01 	lds	r24, 0x013F
     ec2:	90 91 40 01 	lds	r25, 0x0140
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	29 f4       	brne	.+10     	; 0xed4 <i2c_handel_data+0x11e>
						start=0;
     eca:	10 92 40 01 	sts	0x0140, r1
     ece:	10 92 3f 01 	sts	0x013F, r1
     ed2:	55 c0       	rjmp	.+170    	; 0xf7e <i2c_handel_data+0x1c8>
					}
					else{
						start=1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	90 93 40 01 	sts	0x0140, r25
     edc:	80 93 3f 01 	sts	0x013F, r24
     ee0:	4e c0       	rjmp	.+156    	; 0xf7e <i2c_handel_data+0x1c8>
					}
				}
				else if(i2c_data[1]==0x0f){
     ee2:	8f 30       	cpi	r24, 0x0F	; 15
     ee4:	d1 f4       	brne	.+52     	; 0xf1a <i2c_handel_data+0x164>
					if(drive_mode==1){
     ee6:	80 91 41 01 	lds	r24, 0x0141
     eea:	90 91 42 01 	lds	r25, 0x0142
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	49 f4       	brne	.+18     	; 0xf04 <i2c_handel_data+0x14e>
						drive_mode=0;
     ef2:	10 92 42 01 	sts	0x0142, r1
     ef6:	10 92 41 01 	sts	0x0141, r1
						start=0;
     efa:	10 92 40 01 	sts	0x0140, r1
     efe:	10 92 3f 01 	sts	0x013F, r1
     f02:	3d c0       	rjmp	.+122    	; 0xf7e <i2c_handel_data+0x1c8>
					}
					else{
						drive_mode=1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 42 01 	sts	0x0142, r25
     f0c:	80 93 41 01 	sts	0x0141, r24
						start=0;
     f10:	10 92 40 01 	sts	0x0140, r1
     f14:	10 92 3f 01 	sts	0x013F, r1
     f18:	32 c0       	rjmp	.+100    	; 0xf7e <i2c_handel_data+0x1c8>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
     f1a:	81 11       	cpse	r24, r1
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <i2c_handel_data+0x186>
					d_constant = i2c_data[2];
     f1e:	e0 e5       	ldi	r30, 0x50	; 80
     f20:	f1 e0       	ldi	r31, 0x01	; 1
     f22:	82 81       	ldd	r24, Z+2	; 0x02
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 05 01 	sts	0x0105, r25
     f2a:	80 93 04 01 	sts	0x0104, r24
					p_constant = i2c_data[3];
     f2e:	83 81       	ldd	r24, Z+3	; 0x03
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 07 01 	sts	0x0107, r25
     f36:	80 93 06 01 	sts	0x0106, r24
     f3a:	21 c0       	rjmp	.+66     	; 0xf7e <i2c_handel_data+0x1c8>
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	79 f4       	brne	.+30     	; 0xf5e <i2c_handel_data+0x1a8>
					d_constant_lab = i2c_data[2];
     f40:	e0 e5       	ldi	r30, 0x50	; 80
     f42:	f1 e0       	ldi	r31, 0x01	; 1
     f44:	82 81       	ldd	r24, Z+2	; 0x02
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	90 93 0b 01 	sts	0x010B, r25
     f4c:	80 93 0a 01 	sts	0x010A, r24
					p_constant_lab = i2c_data[3];
     f50:	83 81       	ldd	r24, Z+3	; 0x03
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	90 93 0d 01 	sts	0x010D, r25
     f58:	80 93 0c 01 	sts	0x010C, r24
     f5c:	10 c0       	rjmp	.+32     	; 0xf7e <i2c_handel_data+0x1c8>
				}
				else if(i2c_data[1]==0x02){
     f5e:	82 30       	cpi	r24, 0x02	; 2
     f60:	71 f4       	brne	.+28     	; 0xf7e <i2c_handel_data+0x1c8>
					left = i2c_data[2];
     f62:	e0 e5       	ldi	r30, 0x50	; 80
     f64:	f1 e0       	ldi	r31, 0x01	; 1
     f66:	82 81       	ldd	r24, Z+2	; 0x02
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	90 93 3e 01 	sts	0x013E, r25
     f6e:	80 93 3d 01 	sts	0x013D, r24
					right = i2c_data[3];
     f72:	83 81       	ldd	r24, Z+3	; 0x03
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	90 93 3c 01 	sts	0x013C, r25
     f7a:	80 93 3b 01 	sts	0x013B, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
     f7e:	e8 9a       	sbi	0x1d, 0	; 29
     f80:	08 95       	ret

00000f82 <main>:



int main(void)
{
	interrupt_init();
     f82:	9e dd       	rcall	.-1220   	; 0xac0 <interrupt_init>
	board_init();
     f84:	b2 d8       	rcall	.-3740   	; 0xea <board_init>
	initengine();
     f86:	5e dd       	rcall	.-1348   	; 0xa44 <initengine>
	timerinit();
     f88:	6a dd       	rcall	.-1324   	; 0xa5e <timerinit>
	i2c_setup(1);
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	ea dd       	rcall	.-1068   	; 0xb62 <i2c_setup>
	sei();
     f8e:	78 94       	sei
	//***********Set motors speed value here *****************
	left=130;				// kanske räcker med en variable för båda om båda kör exakt lika fort
     f90:	82 e8       	ldi	r24, 0x82	; 130
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	90 93 3e 01 	sts	0x013E, r25
     f98:	80 93 3d 01 	sts	0x013D, r24
	right=120;
     f9c:	88 e7       	ldi	r24, 0x78	; 120
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	90 93 3c 01 	sts	0x013C, r25
     fa4:	80 93 3b 01 	sts	0x013B, r24
	//********************************************************
	motor_left=left;
     fa8:	82 e8       	ldi	r24, 0x82	; 130
     faa:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
     fac:	80 91 3b 01 	lds	r24, 0x013B
     fb0:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
		RGB_data=3;	
     fb2:	c3 e0       	ldi	r28, 0x03	; 3
		if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			if(regler_ready == 1 && start == 1){
				regulator();
				regler_ready = 1;	
     fb4:	01 e0       	ldi	r16, 0x01	; 1
     fb6:	10 e0       	ldi	r17, 0x00	; 0
	right=120;
	//********************************************************
	motor_left=left;
	motor_right=right;
	while(1){
		i2c_handel_data();  //test av fregulito
     fb8:	fe de       	rcall	.-516    	; 0xdb6 <i2c_handel_data>
		RGB_data=3;	
     fba:	c0 93 6c 01 	sts	0x016C, r28
		if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
     fbe:	80 91 41 01 	lds	r24, 0x0141
     fc2:	90 91 42 01 	lds	r25, 0x0142
     fc6:	81 30       	cpi	r24, 0x01	; 1
     fc8:	91 05       	cpc	r25, r1
     fca:	d9 f4       	brne	.+54     	; 0x1002 <main+0x80>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			if(regler_ready == 1 && start == 1){
     fcc:	80 91 39 01 	lds	r24, 0x0139
     fd0:	90 91 3a 01 	lds	r25, 0x013A
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	61 f4       	brne	.+24     	; 0xff0 <main+0x6e>
     fd8:	80 91 3f 01 	lds	r24, 0x013F
     fdc:	90 91 40 01 	lds	r25, 0x0140
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	31 f4       	brne	.+12     	; 0xff0 <main+0x6e>
				regulator();
     fe4:	25 dd       	rcall	.-1462   	; 0xa30 <regulator>
				regler_ready = 1;	
     fe6:	10 93 3a 01 	sts	0x013A, r17
     fea:	00 93 39 01 	sts	0x0139, r16
     fee:	e4 cf       	rjmp	.-56     	; 0xfb8 <main+0x36>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
     ff0:	80 91 3f 01 	lds	r24, 0x013F
     ff4:	90 91 40 01 	lds	r25, 0x0140
     ff8:	89 2b       	or	r24, r25
     ffa:	f1 f6       	brne	.-68     	; 0xfb8 <main+0x36>
				motor_left=0;
     ffc:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
     ffe:	18 bc       	out	0x28, r1	; 40
    1000:	db cf       	rjmp	.-74     	; 0xfb8 <main+0x36>
				}
			}
		else if(drive_mode==0){										// Drivemode is manual
    1002:	89 2b       	or	r24, r25
    1004:	c9 f6       	brne	.-78     	; 0xfb8 <main+0x36>
			manual_drive();
    1006:	fc d9       	rcall	.-3080   	; 0x400 <manual_drive>
    1008:	d7 cf       	rjmp	.-82     	; 0xfb8 <main+0x36>

0000100a <__subsf3>:
    100a:	50 58       	subi	r21, 0x80	; 128

0000100c <__addsf3>:
    100c:	bb 27       	eor	r27, r27
    100e:	aa 27       	eor	r26, r26
    1010:	0e d0       	rcall	.+28     	; 0x102e <__addsf3x>
    1012:	75 c1       	rjmp	.+746    	; 0x12fe <__fp_round>
    1014:	66 d1       	rcall	.+716    	; 0x12e2 <__fp_pscA>
    1016:	30 f0       	brcs	.+12     	; 0x1024 <__addsf3+0x18>
    1018:	6b d1       	rcall	.+726    	; 0x12f0 <__fp_pscB>
    101a:	20 f0       	brcs	.+8      	; 0x1024 <__addsf3+0x18>
    101c:	31 f4       	brne	.+12     	; 0x102a <__addsf3+0x1e>
    101e:	9f 3f       	cpi	r25, 0xFF	; 255
    1020:	11 f4       	brne	.+4      	; 0x1026 <__addsf3+0x1a>
    1022:	1e f4       	brtc	.+6      	; 0x102a <__addsf3+0x1e>
    1024:	5b c1       	rjmp	.+694    	; 0x12dc <__fp_nan>
    1026:	0e f4       	brtc	.+2      	; 0x102a <__addsf3+0x1e>
    1028:	e0 95       	com	r30
    102a:	e7 fb       	bst	r30, 7
    102c:	51 c1       	rjmp	.+674    	; 0x12d0 <__fp_inf>

0000102e <__addsf3x>:
    102e:	e9 2f       	mov	r30, r25
    1030:	77 d1       	rcall	.+750    	; 0x1320 <__fp_split3>
    1032:	80 f3       	brcs	.-32     	; 0x1014 <__addsf3+0x8>
    1034:	ba 17       	cp	r27, r26
    1036:	62 07       	cpc	r22, r18
    1038:	73 07       	cpc	r23, r19
    103a:	84 07       	cpc	r24, r20
    103c:	95 07       	cpc	r25, r21
    103e:	18 f0       	brcs	.+6      	; 0x1046 <__addsf3x+0x18>
    1040:	71 f4       	brne	.+28     	; 0x105e <__addsf3x+0x30>
    1042:	9e f5       	brtc	.+102    	; 0x10aa <__addsf3x+0x7c>
    1044:	8f c1       	rjmp	.+798    	; 0x1364 <__fp_zero>
    1046:	0e f4       	brtc	.+2      	; 0x104a <__addsf3x+0x1c>
    1048:	e0 95       	com	r30
    104a:	0b 2e       	mov	r0, r27
    104c:	ba 2f       	mov	r27, r26
    104e:	a0 2d       	mov	r26, r0
    1050:	0b 01       	movw	r0, r22
    1052:	b9 01       	movw	r22, r18
    1054:	90 01       	movw	r18, r0
    1056:	0c 01       	movw	r0, r24
    1058:	ca 01       	movw	r24, r20
    105a:	a0 01       	movw	r20, r0
    105c:	11 24       	eor	r1, r1
    105e:	ff 27       	eor	r31, r31
    1060:	59 1b       	sub	r21, r25
    1062:	99 f0       	breq	.+38     	; 0x108a <__addsf3x+0x5c>
    1064:	59 3f       	cpi	r21, 0xF9	; 249
    1066:	50 f4       	brcc	.+20     	; 0x107c <__addsf3x+0x4e>
    1068:	50 3e       	cpi	r21, 0xE0	; 224
    106a:	68 f1       	brcs	.+90     	; 0x10c6 <__addsf3x+0x98>
    106c:	1a 16       	cp	r1, r26
    106e:	f0 40       	sbci	r31, 0x00	; 0
    1070:	a2 2f       	mov	r26, r18
    1072:	23 2f       	mov	r18, r19
    1074:	34 2f       	mov	r19, r20
    1076:	44 27       	eor	r20, r20
    1078:	58 5f       	subi	r21, 0xF8	; 248
    107a:	f3 cf       	rjmp	.-26     	; 0x1062 <__addsf3x+0x34>
    107c:	46 95       	lsr	r20
    107e:	37 95       	ror	r19
    1080:	27 95       	ror	r18
    1082:	a7 95       	ror	r26
    1084:	f0 40       	sbci	r31, 0x00	; 0
    1086:	53 95       	inc	r21
    1088:	c9 f7       	brne	.-14     	; 0x107c <__addsf3x+0x4e>
    108a:	7e f4       	brtc	.+30     	; 0x10aa <__addsf3x+0x7c>
    108c:	1f 16       	cp	r1, r31
    108e:	ba 0b       	sbc	r27, r26
    1090:	62 0b       	sbc	r22, r18
    1092:	73 0b       	sbc	r23, r19
    1094:	84 0b       	sbc	r24, r20
    1096:	ba f0       	brmi	.+46     	; 0x10c6 <__addsf3x+0x98>
    1098:	91 50       	subi	r25, 0x01	; 1
    109a:	a1 f0       	breq	.+40     	; 0x10c4 <__addsf3x+0x96>
    109c:	ff 0f       	add	r31, r31
    109e:	bb 1f       	adc	r27, r27
    10a0:	66 1f       	adc	r22, r22
    10a2:	77 1f       	adc	r23, r23
    10a4:	88 1f       	adc	r24, r24
    10a6:	c2 f7       	brpl	.-16     	; 0x1098 <__addsf3x+0x6a>
    10a8:	0e c0       	rjmp	.+28     	; 0x10c6 <__addsf3x+0x98>
    10aa:	ba 0f       	add	r27, r26
    10ac:	62 1f       	adc	r22, r18
    10ae:	73 1f       	adc	r23, r19
    10b0:	84 1f       	adc	r24, r20
    10b2:	48 f4       	brcc	.+18     	; 0x10c6 <__addsf3x+0x98>
    10b4:	87 95       	ror	r24
    10b6:	77 95       	ror	r23
    10b8:	67 95       	ror	r22
    10ba:	b7 95       	ror	r27
    10bc:	f7 95       	ror	r31
    10be:	9e 3f       	cpi	r25, 0xFE	; 254
    10c0:	08 f0       	brcs	.+2      	; 0x10c4 <__addsf3x+0x96>
    10c2:	b3 cf       	rjmp	.-154    	; 0x102a <__addsf3+0x1e>
    10c4:	93 95       	inc	r25
    10c6:	88 0f       	add	r24, r24
    10c8:	08 f0       	brcs	.+2      	; 0x10cc <__addsf3x+0x9e>
    10ca:	99 27       	eor	r25, r25
    10cc:	ee 0f       	add	r30, r30
    10ce:	97 95       	ror	r25
    10d0:	87 95       	ror	r24
    10d2:	08 95       	ret

000010d4 <__cmpsf2>:
    10d4:	d9 d0       	rcall	.+434    	; 0x1288 <__fp_cmp>
    10d6:	08 f4       	brcc	.+2      	; 0x10da <__cmpsf2+0x6>
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	08 95       	ret

000010dc <__divsf3>:
    10dc:	0c d0       	rcall	.+24     	; 0x10f6 <__divsf3x>
    10de:	0f c1       	rjmp	.+542    	; 0x12fe <__fp_round>
    10e0:	07 d1       	rcall	.+526    	; 0x12f0 <__fp_pscB>
    10e2:	40 f0       	brcs	.+16     	; 0x10f4 <__divsf3+0x18>
    10e4:	fe d0       	rcall	.+508    	; 0x12e2 <__fp_pscA>
    10e6:	30 f0       	brcs	.+12     	; 0x10f4 <__divsf3+0x18>
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <__divsf3+0x16>
    10ea:	5f 3f       	cpi	r21, 0xFF	; 255
    10ec:	19 f0       	breq	.+6      	; 0x10f4 <__divsf3+0x18>
    10ee:	f0 c0       	rjmp	.+480    	; 0x12d0 <__fp_inf>
    10f0:	51 11       	cpse	r21, r1
    10f2:	39 c1       	rjmp	.+626    	; 0x1366 <__fp_szero>
    10f4:	f3 c0       	rjmp	.+486    	; 0x12dc <__fp_nan>

000010f6 <__divsf3x>:
    10f6:	14 d1       	rcall	.+552    	; 0x1320 <__fp_split3>
    10f8:	98 f3       	brcs	.-26     	; 0x10e0 <__divsf3+0x4>

000010fa <__divsf3_pse>:
    10fa:	99 23       	and	r25, r25
    10fc:	c9 f3       	breq	.-14     	; 0x10f0 <__divsf3+0x14>
    10fe:	55 23       	and	r21, r21
    1100:	b1 f3       	breq	.-20     	; 0x10ee <__divsf3+0x12>
    1102:	95 1b       	sub	r25, r21
    1104:	55 0b       	sbc	r21, r21
    1106:	bb 27       	eor	r27, r27
    1108:	aa 27       	eor	r26, r26
    110a:	62 17       	cp	r22, r18
    110c:	73 07       	cpc	r23, r19
    110e:	84 07       	cpc	r24, r20
    1110:	38 f0       	brcs	.+14     	; 0x1120 <__divsf3_pse+0x26>
    1112:	9f 5f       	subi	r25, 0xFF	; 255
    1114:	5f 4f       	sbci	r21, 0xFF	; 255
    1116:	22 0f       	add	r18, r18
    1118:	33 1f       	adc	r19, r19
    111a:	44 1f       	adc	r20, r20
    111c:	aa 1f       	adc	r26, r26
    111e:	a9 f3       	breq	.-22     	; 0x110a <__divsf3_pse+0x10>
    1120:	33 d0       	rcall	.+102    	; 0x1188 <__divsf3_pse+0x8e>
    1122:	0e 2e       	mov	r0, r30
    1124:	3a f0       	brmi	.+14     	; 0x1134 <__divsf3_pse+0x3a>
    1126:	e0 e8       	ldi	r30, 0x80	; 128
    1128:	30 d0       	rcall	.+96     	; 0x118a <__divsf3_pse+0x90>
    112a:	91 50       	subi	r25, 0x01	; 1
    112c:	50 40       	sbci	r21, 0x00	; 0
    112e:	e6 95       	lsr	r30
    1130:	00 1c       	adc	r0, r0
    1132:	ca f7       	brpl	.-14     	; 0x1126 <__divsf3_pse+0x2c>
    1134:	29 d0       	rcall	.+82     	; 0x1188 <__divsf3_pse+0x8e>
    1136:	fe 2f       	mov	r31, r30
    1138:	27 d0       	rcall	.+78     	; 0x1188 <__divsf3_pse+0x8e>
    113a:	66 0f       	add	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	bb 1f       	adc	r27, r27
    1142:	26 17       	cp	r18, r22
    1144:	37 07       	cpc	r19, r23
    1146:	48 07       	cpc	r20, r24
    1148:	ab 07       	cpc	r26, r27
    114a:	b0 e8       	ldi	r27, 0x80	; 128
    114c:	09 f0       	breq	.+2      	; 0x1150 <__divsf3_pse+0x56>
    114e:	bb 0b       	sbc	r27, r27
    1150:	80 2d       	mov	r24, r0
    1152:	bf 01       	movw	r22, r30
    1154:	ff 27       	eor	r31, r31
    1156:	93 58       	subi	r25, 0x83	; 131
    1158:	5f 4f       	sbci	r21, 0xFF	; 255
    115a:	2a f0       	brmi	.+10     	; 0x1166 <__divsf3_pse+0x6c>
    115c:	9e 3f       	cpi	r25, 0xFE	; 254
    115e:	51 05       	cpc	r21, r1
    1160:	68 f0       	brcs	.+26     	; 0x117c <__divsf3_pse+0x82>
    1162:	b6 c0       	rjmp	.+364    	; 0x12d0 <__fp_inf>
    1164:	00 c1       	rjmp	.+512    	; 0x1366 <__fp_szero>
    1166:	5f 3f       	cpi	r21, 0xFF	; 255
    1168:	ec f3       	brlt	.-6      	; 0x1164 <__divsf3_pse+0x6a>
    116a:	98 3e       	cpi	r25, 0xE8	; 232
    116c:	dc f3       	brlt	.-10     	; 0x1164 <__divsf3_pse+0x6a>
    116e:	86 95       	lsr	r24
    1170:	77 95       	ror	r23
    1172:	67 95       	ror	r22
    1174:	b7 95       	ror	r27
    1176:	f7 95       	ror	r31
    1178:	9f 5f       	subi	r25, 0xFF	; 255
    117a:	c9 f7       	brne	.-14     	; 0x116e <__divsf3_pse+0x74>
    117c:	88 0f       	add	r24, r24
    117e:	91 1d       	adc	r25, r1
    1180:	96 95       	lsr	r25
    1182:	87 95       	ror	r24
    1184:	97 f9       	bld	r25, 7
    1186:	08 95       	ret
    1188:	e1 e0       	ldi	r30, 0x01	; 1
    118a:	66 0f       	add	r22, r22
    118c:	77 1f       	adc	r23, r23
    118e:	88 1f       	adc	r24, r24
    1190:	bb 1f       	adc	r27, r27
    1192:	62 17       	cp	r22, r18
    1194:	73 07       	cpc	r23, r19
    1196:	84 07       	cpc	r24, r20
    1198:	ba 07       	cpc	r27, r26
    119a:	20 f0       	brcs	.+8      	; 0x11a4 <__divsf3_pse+0xaa>
    119c:	62 1b       	sub	r22, r18
    119e:	73 0b       	sbc	r23, r19
    11a0:	84 0b       	sbc	r24, r20
    11a2:	ba 0b       	sbc	r27, r26
    11a4:	ee 1f       	adc	r30, r30
    11a6:	88 f7       	brcc	.-30     	; 0x118a <__divsf3_pse+0x90>
    11a8:	e0 95       	com	r30
    11aa:	08 95       	ret

000011ac <__fixsfsi>:
    11ac:	04 d0       	rcall	.+8      	; 0x11b6 <__fixunssfsi>
    11ae:	68 94       	set
    11b0:	b1 11       	cpse	r27, r1
    11b2:	d9 c0       	rjmp	.+434    	; 0x1366 <__fp_szero>
    11b4:	08 95       	ret

000011b6 <__fixunssfsi>:
    11b6:	bc d0       	rcall	.+376    	; 0x1330 <__fp_splitA>
    11b8:	88 f0       	brcs	.+34     	; 0x11dc <__fixunssfsi+0x26>
    11ba:	9f 57       	subi	r25, 0x7F	; 127
    11bc:	90 f0       	brcs	.+36     	; 0x11e2 <__fixunssfsi+0x2c>
    11be:	b9 2f       	mov	r27, r25
    11c0:	99 27       	eor	r25, r25
    11c2:	b7 51       	subi	r27, 0x17	; 23
    11c4:	a0 f0       	brcs	.+40     	; 0x11ee <__fixunssfsi+0x38>
    11c6:	d1 f0       	breq	.+52     	; 0x11fc <__fixunssfsi+0x46>
    11c8:	66 0f       	add	r22, r22
    11ca:	77 1f       	adc	r23, r23
    11cc:	88 1f       	adc	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	1a f0       	brmi	.+6      	; 0x11d8 <__fixunssfsi+0x22>
    11d2:	ba 95       	dec	r27
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__fixunssfsi+0x12>
    11d6:	12 c0       	rjmp	.+36     	; 0x11fc <__fixunssfsi+0x46>
    11d8:	b1 30       	cpi	r27, 0x01	; 1
    11da:	81 f0       	breq	.+32     	; 0x11fc <__fixunssfsi+0x46>
    11dc:	c3 d0       	rcall	.+390    	; 0x1364 <__fp_zero>
    11de:	b1 e0       	ldi	r27, 0x01	; 1
    11e0:	08 95       	ret
    11e2:	c0 c0       	rjmp	.+384    	; 0x1364 <__fp_zero>
    11e4:	67 2f       	mov	r22, r23
    11e6:	78 2f       	mov	r23, r24
    11e8:	88 27       	eor	r24, r24
    11ea:	b8 5f       	subi	r27, 0xF8	; 248
    11ec:	39 f0       	breq	.+14     	; 0x11fc <__fixunssfsi+0x46>
    11ee:	b9 3f       	cpi	r27, 0xF9	; 249
    11f0:	cc f3       	brlt	.-14     	; 0x11e4 <__fixunssfsi+0x2e>
    11f2:	86 95       	lsr	r24
    11f4:	77 95       	ror	r23
    11f6:	67 95       	ror	r22
    11f8:	b3 95       	inc	r27
    11fa:	d9 f7       	brne	.-10     	; 0x11f2 <__fixunssfsi+0x3c>
    11fc:	3e f4       	brtc	.+14     	; 0x120c <__fixunssfsi+0x56>
    11fe:	90 95       	com	r25
    1200:	80 95       	com	r24
    1202:	70 95       	com	r23
    1204:	61 95       	neg	r22
    1206:	7f 4f       	sbci	r23, 0xFF	; 255
    1208:	8f 4f       	sbci	r24, 0xFF	; 255
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	08 95       	ret

0000120e <__floatunsisf>:
    120e:	e8 94       	clt
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <__floatsisf+0x12>

00001212 <__floatsisf>:
    1212:	97 fb       	bst	r25, 7
    1214:	3e f4       	brtc	.+14     	; 0x1224 <__floatsisf+0x12>
    1216:	90 95       	com	r25
    1218:	80 95       	com	r24
    121a:	70 95       	com	r23
    121c:	61 95       	neg	r22
    121e:	7f 4f       	sbci	r23, 0xFF	; 255
    1220:	8f 4f       	sbci	r24, 0xFF	; 255
    1222:	9f 4f       	sbci	r25, 0xFF	; 255
    1224:	99 23       	and	r25, r25
    1226:	a9 f0       	breq	.+42     	; 0x1252 <__floatsisf+0x40>
    1228:	f9 2f       	mov	r31, r25
    122a:	96 e9       	ldi	r25, 0x96	; 150
    122c:	bb 27       	eor	r27, r27
    122e:	93 95       	inc	r25
    1230:	f6 95       	lsr	r31
    1232:	87 95       	ror	r24
    1234:	77 95       	ror	r23
    1236:	67 95       	ror	r22
    1238:	b7 95       	ror	r27
    123a:	f1 11       	cpse	r31, r1
    123c:	f8 cf       	rjmp	.-16     	; 0x122e <__floatsisf+0x1c>
    123e:	fa f4       	brpl	.+62     	; 0x127e <__floatsisf+0x6c>
    1240:	bb 0f       	add	r27, r27
    1242:	11 f4       	brne	.+4      	; 0x1248 <__floatsisf+0x36>
    1244:	60 ff       	sbrs	r22, 0
    1246:	1b c0       	rjmp	.+54     	; 0x127e <__floatsisf+0x6c>
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	16 c0       	rjmp	.+44     	; 0x127e <__floatsisf+0x6c>
    1252:	88 23       	and	r24, r24
    1254:	11 f0       	breq	.+4      	; 0x125a <__floatsisf+0x48>
    1256:	96 e9       	ldi	r25, 0x96	; 150
    1258:	11 c0       	rjmp	.+34     	; 0x127c <__floatsisf+0x6a>
    125a:	77 23       	and	r23, r23
    125c:	21 f0       	breq	.+8      	; 0x1266 <__floatsisf+0x54>
    125e:	9e e8       	ldi	r25, 0x8E	; 142
    1260:	87 2f       	mov	r24, r23
    1262:	76 2f       	mov	r23, r22
    1264:	05 c0       	rjmp	.+10     	; 0x1270 <__floatsisf+0x5e>
    1266:	66 23       	and	r22, r22
    1268:	71 f0       	breq	.+28     	; 0x1286 <__floatsisf+0x74>
    126a:	96 e8       	ldi	r25, 0x86	; 134
    126c:	86 2f       	mov	r24, r22
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	2a f0       	brmi	.+10     	; 0x127e <__floatsisf+0x6c>
    1274:	9a 95       	dec	r25
    1276:	66 0f       	add	r22, r22
    1278:	77 1f       	adc	r23, r23
    127a:	88 1f       	adc	r24, r24
    127c:	da f7       	brpl	.-10     	; 0x1274 <__floatsisf+0x62>
    127e:	88 0f       	add	r24, r24
    1280:	96 95       	lsr	r25
    1282:	87 95       	ror	r24
    1284:	97 f9       	bld	r25, 7
    1286:	08 95       	ret

00001288 <__fp_cmp>:
    1288:	99 0f       	add	r25, r25
    128a:	00 08       	sbc	r0, r0
    128c:	55 0f       	add	r21, r21
    128e:	aa 0b       	sbc	r26, r26
    1290:	e0 e8       	ldi	r30, 0x80	; 128
    1292:	fe ef       	ldi	r31, 0xFE	; 254
    1294:	16 16       	cp	r1, r22
    1296:	17 06       	cpc	r1, r23
    1298:	e8 07       	cpc	r30, r24
    129a:	f9 07       	cpc	r31, r25
    129c:	c0 f0       	brcs	.+48     	; 0x12ce <__fp_cmp+0x46>
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	e4 07       	cpc	r30, r20
    12a4:	f5 07       	cpc	r31, r21
    12a6:	98 f0       	brcs	.+38     	; 0x12ce <__fp_cmp+0x46>
    12a8:	62 1b       	sub	r22, r18
    12aa:	73 0b       	sbc	r23, r19
    12ac:	84 0b       	sbc	r24, r20
    12ae:	95 0b       	sbc	r25, r21
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <__fp_cmp+0x38>
    12b2:	0a 26       	eor	r0, r26
    12b4:	61 f0       	breq	.+24     	; 0x12ce <__fp_cmp+0x46>
    12b6:	23 2b       	or	r18, r19
    12b8:	24 2b       	or	r18, r20
    12ba:	25 2b       	or	r18, r21
    12bc:	21 f4       	brne	.+8      	; 0x12c6 <__fp_cmp+0x3e>
    12be:	08 95       	ret
    12c0:	0a 26       	eor	r0, r26
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <__fp_cmp+0x3e>
    12c4:	a1 40       	sbci	r26, 0x01	; 1
    12c6:	a6 95       	lsr	r26
    12c8:	8f ef       	ldi	r24, 0xFF	; 255
    12ca:	81 1d       	adc	r24, r1
    12cc:	81 1d       	adc	r24, r1
    12ce:	08 95       	ret

000012d0 <__fp_inf>:
    12d0:	97 f9       	bld	r25, 7
    12d2:	9f 67       	ori	r25, 0x7F	; 127
    12d4:	80 e8       	ldi	r24, 0x80	; 128
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	08 95       	ret

000012dc <__fp_nan>:
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	80 ec       	ldi	r24, 0xC0	; 192
    12e0:	08 95       	ret

000012e2 <__fp_pscA>:
    12e2:	00 24       	eor	r0, r0
    12e4:	0a 94       	dec	r0
    12e6:	16 16       	cp	r1, r22
    12e8:	17 06       	cpc	r1, r23
    12ea:	18 06       	cpc	r1, r24
    12ec:	09 06       	cpc	r0, r25
    12ee:	08 95       	ret

000012f0 <__fp_pscB>:
    12f0:	00 24       	eor	r0, r0
    12f2:	0a 94       	dec	r0
    12f4:	12 16       	cp	r1, r18
    12f6:	13 06       	cpc	r1, r19
    12f8:	14 06       	cpc	r1, r20
    12fa:	05 06       	cpc	r0, r21
    12fc:	08 95       	ret

000012fe <__fp_round>:
    12fe:	09 2e       	mov	r0, r25
    1300:	03 94       	inc	r0
    1302:	00 0c       	add	r0, r0
    1304:	11 f4       	brne	.+4      	; 0x130a <__fp_round+0xc>
    1306:	88 23       	and	r24, r24
    1308:	52 f0       	brmi	.+20     	; 0x131e <__fp_round+0x20>
    130a:	bb 0f       	add	r27, r27
    130c:	40 f4       	brcc	.+16     	; 0x131e <__fp_round+0x20>
    130e:	bf 2b       	or	r27, r31
    1310:	11 f4       	brne	.+4      	; 0x1316 <__fp_round+0x18>
    1312:	60 ff       	sbrs	r22, 0
    1314:	04 c0       	rjmp	.+8      	; 0x131e <__fp_round+0x20>
    1316:	6f 5f       	subi	r22, 0xFF	; 255
    1318:	7f 4f       	sbci	r23, 0xFF	; 255
    131a:	8f 4f       	sbci	r24, 0xFF	; 255
    131c:	9f 4f       	sbci	r25, 0xFF	; 255
    131e:	08 95       	ret

00001320 <__fp_split3>:
    1320:	57 fd       	sbrc	r21, 7
    1322:	90 58       	subi	r25, 0x80	; 128
    1324:	44 0f       	add	r20, r20
    1326:	55 1f       	adc	r21, r21
    1328:	59 f0       	breq	.+22     	; 0x1340 <__fp_splitA+0x10>
    132a:	5f 3f       	cpi	r21, 0xFF	; 255
    132c:	71 f0       	breq	.+28     	; 0x134a <__fp_splitA+0x1a>
    132e:	47 95       	ror	r20

00001330 <__fp_splitA>:
    1330:	88 0f       	add	r24, r24
    1332:	97 fb       	bst	r25, 7
    1334:	99 1f       	adc	r25, r25
    1336:	61 f0       	breq	.+24     	; 0x1350 <__fp_splitA+0x20>
    1338:	9f 3f       	cpi	r25, 0xFF	; 255
    133a:	79 f0       	breq	.+30     	; 0x135a <__fp_splitA+0x2a>
    133c:	87 95       	ror	r24
    133e:	08 95       	ret
    1340:	12 16       	cp	r1, r18
    1342:	13 06       	cpc	r1, r19
    1344:	14 06       	cpc	r1, r20
    1346:	55 1f       	adc	r21, r21
    1348:	f2 cf       	rjmp	.-28     	; 0x132e <__fp_split3+0xe>
    134a:	46 95       	lsr	r20
    134c:	f1 df       	rcall	.-30     	; 0x1330 <__fp_splitA>
    134e:	08 c0       	rjmp	.+16     	; 0x1360 <__fp_splitA+0x30>
    1350:	16 16       	cp	r1, r22
    1352:	17 06       	cpc	r1, r23
    1354:	18 06       	cpc	r1, r24
    1356:	99 1f       	adc	r25, r25
    1358:	f1 cf       	rjmp	.-30     	; 0x133c <__fp_splitA+0xc>
    135a:	86 95       	lsr	r24
    135c:	71 05       	cpc	r23, r1
    135e:	61 05       	cpc	r22, r1
    1360:	08 94       	sec
    1362:	08 95       	ret

00001364 <__fp_zero>:
    1364:	e8 94       	clt

00001366 <__fp_szero>:
    1366:	bb 27       	eor	r27, r27
    1368:	66 27       	eor	r22, r22
    136a:	77 27       	eor	r23, r23
    136c:	cb 01       	movw	r24, r22
    136e:	97 f9       	bld	r25, 7
    1370:	08 95       	ret

00001372 <__gesf2>:
    1372:	8a df       	rcall	.-236    	; 0x1288 <__fp_cmp>
    1374:	08 f4       	brcc	.+2      	; 0x1378 <__gesf2+0x6>
    1376:	8f ef       	ldi	r24, 0xFF	; 255
    1378:	08 95       	ret

0000137a <__mulsf3>:
    137a:	0b d0       	rcall	.+22     	; 0x1392 <__mulsf3x>
    137c:	c0 cf       	rjmp	.-128    	; 0x12fe <__fp_round>
    137e:	b1 df       	rcall	.-158    	; 0x12e2 <__fp_pscA>
    1380:	28 f0       	brcs	.+10     	; 0x138c <__mulsf3+0x12>
    1382:	b6 df       	rcall	.-148    	; 0x12f0 <__fp_pscB>
    1384:	18 f0       	brcs	.+6      	; 0x138c <__mulsf3+0x12>
    1386:	95 23       	and	r25, r21
    1388:	09 f0       	breq	.+2      	; 0x138c <__mulsf3+0x12>
    138a:	a2 cf       	rjmp	.-188    	; 0x12d0 <__fp_inf>
    138c:	a7 cf       	rjmp	.-178    	; 0x12dc <__fp_nan>
    138e:	11 24       	eor	r1, r1
    1390:	ea cf       	rjmp	.-44     	; 0x1366 <__fp_szero>

00001392 <__mulsf3x>:
    1392:	c6 df       	rcall	.-116    	; 0x1320 <__fp_split3>
    1394:	a0 f3       	brcs	.-24     	; 0x137e <__mulsf3+0x4>

00001396 <__mulsf3_pse>:
    1396:	95 9f       	mul	r25, r21
    1398:	d1 f3       	breq	.-12     	; 0x138e <__mulsf3+0x14>
    139a:	95 0f       	add	r25, r21
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	55 1f       	adc	r21, r21
    13a0:	62 9f       	mul	r22, r18
    13a2:	f0 01       	movw	r30, r0
    13a4:	72 9f       	mul	r23, r18
    13a6:	bb 27       	eor	r27, r27
    13a8:	f0 0d       	add	r31, r0
    13aa:	b1 1d       	adc	r27, r1
    13ac:	63 9f       	mul	r22, r19
    13ae:	aa 27       	eor	r26, r26
    13b0:	f0 0d       	add	r31, r0
    13b2:	b1 1d       	adc	r27, r1
    13b4:	aa 1f       	adc	r26, r26
    13b6:	64 9f       	mul	r22, r20
    13b8:	66 27       	eor	r22, r22
    13ba:	b0 0d       	add	r27, r0
    13bc:	a1 1d       	adc	r26, r1
    13be:	66 1f       	adc	r22, r22
    13c0:	82 9f       	mul	r24, r18
    13c2:	22 27       	eor	r18, r18
    13c4:	b0 0d       	add	r27, r0
    13c6:	a1 1d       	adc	r26, r1
    13c8:	62 1f       	adc	r22, r18
    13ca:	73 9f       	mul	r23, r19
    13cc:	b0 0d       	add	r27, r0
    13ce:	a1 1d       	adc	r26, r1
    13d0:	62 1f       	adc	r22, r18
    13d2:	83 9f       	mul	r24, r19
    13d4:	a0 0d       	add	r26, r0
    13d6:	61 1d       	adc	r22, r1
    13d8:	22 1f       	adc	r18, r18
    13da:	74 9f       	mul	r23, r20
    13dc:	33 27       	eor	r19, r19
    13de:	a0 0d       	add	r26, r0
    13e0:	61 1d       	adc	r22, r1
    13e2:	23 1f       	adc	r18, r19
    13e4:	84 9f       	mul	r24, r20
    13e6:	60 0d       	add	r22, r0
    13e8:	21 1d       	adc	r18, r1
    13ea:	82 2f       	mov	r24, r18
    13ec:	76 2f       	mov	r23, r22
    13ee:	6a 2f       	mov	r22, r26
    13f0:	11 24       	eor	r1, r1
    13f2:	9f 57       	subi	r25, 0x7F	; 127
    13f4:	50 40       	sbci	r21, 0x00	; 0
    13f6:	8a f0       	brmi	.+34     	; 0x141a <__mulsf3_pse+0x84>
    13f8:	e1 f0       	breq	.+56     	; 0x1432 <__mulsf3_pse+0x9c>
    13fa:	88 23       	and	r24, r24
    13fc:	4a f0       	brmi	.+18     	; 0x1410 <__mulsf3_pse+0x7a>
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	bb 1f       	adc	r27, r27
    1404:	66 1f       	adc	r22, r22
    1406:	77 1f       	adc	r23, r23
    1408:	88 1f       	adc	r24, r24
    140a:	91 50       	subi	r25, 0x01	; 1
    140c:	50 40       	sbci	r21, 0x00	; 0
    140e:	a9 f7       	brne	.-22     	; 0x13fa <__mulsf3_pse+0x64>
    1410:	9e 3f       	cpi	r25, 0xFE	; 254
    1412:	51 05       	cpc	r21, r1
    1414:	70 f0       	brcs	.+28     	; 0x1432 <__mulsf3_pse+0x9c>
    1416:	5c cf       	rjmp	.-328    	; 0x12d0 <__fp_inf>
    1418:	a6 cf       	rjmp	.-180    	; 0x1366 <__fp_szero>
    141a:	5f 3f       	cpi	r21, 0xFF	; 255
    141c:	ec f3       	brlt	.-6      	; 0x1418 <__mulsf3_pse+0x82>
    141e:	98 3e       	cpi	r25, 0xE8	; 232
    1420:	dc f3       	brlt	.-10     	; 0x1418 <__mulsf3_pse+0x82>
    1422:	86 95       	lsr	r24
    1424:	77 95       	ror	r23
    1426:	67 95       	ror	r22
    1428:	b7 95       	ror	r27
    142a:	f7 95       	ror	r31
    142c:	e7 95       	ror	r30
    142e:	9f 5f       	subi	r25, 0xFF	; 255
    1430:	c1 f7       	brne	.-16     	; 0x1422 <__mulsf3_pse+0x8c>
    1432:	fe 2b       	or	r31, r30
    1434:	88 0f       	add	r24, r24
    1436:	91 1d       	adc	r25, r1
    1438:	96 95       	lsr	r25
    143a:	87 95       	ror	r24
    143c:	97 f9       	bld	r25, 7
    143e:	08 95       	ret

00001440 <__divmodhi4>:
    1440:	97 fb       	bst	r25, 7
    1442:	07 2e       	mov	r0, r23
    1444:	16 f4       	brtc	.+4      	; 0x144a <__divmodhi4+0xa>
    1446:	00 94       	com	r0
    1448:	06 d0       	rcall	.+12     	; 0x1456 <__divmodhi4_neg1>
    144a:	77 fd       	sbrc	r23, 7
    144c:	08 d0       	rcall	.+16     	; 0x145e <__divmodhi4_neg2>
    144e:	14 d0       	rcall	.+40     	; 0x1478 <__udivmodhi4>
    1450:	07 fc       	sbrc	r0, 7
    1452:	05 d0       	rcall	.+10     	; 0x145e <__divmodhi4_neg2>
    1454:	3e f4       	brtc	.+14     	; 0x1464 <__divmodhi4_exit>

00001456 <__divmodhi4_neg1>:
    1456:	90 95       	com	r25
    1458:	81 95       	neg	r24
    145a:	9f 4f       	sbci	r25, 0xFF	; 255
    145c:	08 95       	ret

0000145e <__divmodhi4_neg2>:
    145e:	70 95       	com	r23
    1460:	61 95       	neg	r22
    1462:	7f 4f       	sbci	r23, 0xFF	; 255

00001464 <__divmodhi4_exit>:
    1464:	08 95       	ret

00001466 <__tablejump2__>:
    1466:	ee 0f       	add	r30, r30
    1468:	ff 1f       	adc	r31, r31
    146a:	00 24       	eor	r0, r0
    146c:	00 1c       	adc	r0, r0
    146e:	0b be       	out	0x3b, r0	; 59
    1470:	07 90       	elpm	r0, Z+
    1472:	f6 91       	elpm	r31, Z
    1474:	e0 2d       	mov	r30, r0
    1476:	09 94       	ijmp

00001478 <__udivmodhi4>:
    1478:	aa 1b       	sub	r26, r26
    147a:	bb 1b       	sub	r27, r27
    147c:	51 e1       	ldi	r21, 0x11	; 17
    147e:	07 c0       	rjmp	.+14     	; 0x148e <__udivmodhi4_ep>

00001480 <__udivmodhi4_loop>:
    1480:	aa 1f       	adc	r26, r26
    1482:	bb 1f       	adc	r27, r27
    1484:	a6 17       	cp	r26, r22
    1486:	b7 07       	cpc	r27, r23
    1488:	10 f0       	brcs	.+4      	; 0x148e <__udivmodhi4_ep>
    148a:	a6 1b       	sub	r26, r22
    148c:	b7 0b       	sbc	r27, r23

0000148e <__udivmodhi4_ep>:
    148e:	88 1f       	adc	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	5a 95       	dec	r21
    1494:	a9 f7       	brne	.-22     	; 0x1480 <__udivmodhi4_loop>
    1496:	80 95       	com	r24
    1498:	90 95       	com	r25
    149a:	bc 01       	movw	r22, r24
    149c:	cd 01       	movw	r24, r26
    149e:	08 95       	ret

000014a0 <_exit>:
    14a0:	f8 94       	cli

000014a2 <__stop_program>:
    14a2:	ff cf       	rjmp	.-2      	; 0x14a2 <__stop_program>
