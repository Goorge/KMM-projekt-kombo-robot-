
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000021a8  0000223c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bd  00800120  00800120  0000225c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000228c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001509  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034c  00000000  00000000  00003925  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ea6  00000000  00000000  00003c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  00005b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000109a5  00000000  00000000  00005fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001ad8  00000000  00000000  0001698d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00018465  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  000185ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 74 0c 	jmp	0x18e8	; 0x18e8 <__vector_1>
       8:	65 c7       	rjmp	.+3786   	; 0xed4 <__vector_2>
       a:	00 00       	nop
       c:	8b c7       	rjmp	.+3862   	; 0xf24 <__vector_3>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	fc c6       	rjmp	.+3576   	; 0xe2e <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c7 0c       	add	r12, r7
      8e:	cc 0c       	add	r12, r12
      90:	41 0d       	add	r20, r1
      92:	5b 0d       	add	r21, r11
      94:	5f 0d       	add	r21, r15
      96:	63 0d       	add	r22, r3
      98:	67 0d       	add	r22, r7
      9a:	34 0e       	add	r3, r20
      9c:	7a 0d       	add	r23, r10
      9e:	7f 0d       	add	r23, r15
      a0:	86 0d       	add	r24, r6
      a2:	8d 0d       	add	r24, r13
      a4:	94 0d       	add	r25, r4
      a6:	9b 0d       	add	r25, r11
      a8:	a2 0d       	add	r26, r2
      aa:	a9 0d       	add	r26, r9

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e8 ea       	ldi	r30, 0xA8	; 168
      c0:	f1 e2       	ldi	r31, 0x21	; 33
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a0 32       	cpi	r26, 0x20	; 32
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a0 e2       	ldi	r26, 0x20	; 32
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	ad 3d       	cpi	r26, 0xDD	; 221
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <main>
      e6:	0c 94 d2 10 	jmp	0x21a4	; 0x21a4 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
      ec:	08 95       	ret

000000ee <linje_get_error>:
	return styr_fel;
}



int linje_get_error(){
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	float styr_fel=0;
	fel_antal=0;
     112:	10 92 5e 01 	sts	0x015E, r1
     116:	10 92 5d 01 	sts	0x015D, r1
	cli();
     11a:	f8 94       	cli
	int Reflex_data_tmp = Reflex_data;
     11c:	80 90 9a 01 	lds	r8, 0x019A
     120:	90 90 9b 01 	lds	r9, 0x019B
	int Reflex_data2_tmp = Reflex_data2;
     124:	20 90 c3 01 	lds	r2, 0x01C3
     128:	30 90 c4 01 	lds	r3, 0x01C4
	sei();
     12c:	78 94       	sei
     12e:	c0 90 5d 01 	lds	r12, 0x015D
     132:	d0 90 5e 01 	lds	r13, 0x015E
     136:	05 e0       	ldi	r16, 0x05	; 5
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	d0 e0       	ldi	r29, 0x00	; 0
}



int linje_get_error(){
	float styr_fel=0;
     13e:	41 2c       	mov	r4, r1
     140:	51 2c       	mov	r5, r1
     142:	32 01       	movw	r6, r4
     144:	0f 2e       	mov	r0, r31
     146:	f5 e0       	ldi	r31, 0x05	; 5
     148:	af 2e       	mov	r10, r31
     14a:	b1 2c       	mov	r11, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	c5 01       	movw	r24, r10
     150:	80 1b       	sub	r24, r16
     152:	91 0b       	sbc	r25, r17
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
	{
		if(i < 8){ //första 8 sensorenrna
     154:	08 97       	sbiw	r24, 0x08	; 8
     156:	14 f5       	brge	.+68     	; 0x19c <linje_get_error+0xae>
			styr_fel += ((5-i) * ((Reflex_data_tmp>>(i*2))&3));
     158:	74 01       	movw	r14, r8
     15a:	0c 2e       	mov	r0, r28
     15c:	02 c0       	rjmp	.+4      	; 0x162 <linje_get_error+0x74>
     15e:	f5 94       	asr	r15
     160:	e7 94       	ror	r14
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <linje_get_error+0x70>
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	e8 22       	and	r14, r24
     16a:	ff 24       	eor	r15, r15
     16c:	0e 9d       	mul	r16, r14
     16e:	b0 01       	movw	r22, r0
     170:	0f 9d       	mul	r16, r15
     172:	70 0d       	add	r23, r0
     174:	1e 9d       	mul	r17, r14
     176:	70 0d       	add	r23, r0
     178:	11 24       	eor	r1, r1
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     186:	9b 01       	movw	r18, r22
     188:	ac 01       	movw	r20, r24
     18a:	c3 01       	movw	r24, r6
     18c:	b2 01       	movw	r22, r4
     18e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3>
     192:	2b 01       	movw	r4, r22
     194:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data_tmp>>(i*2))&0x3);
     196:	ce 0c       	add	r12, r14
     198:	df 1c       	adc	r13, r15
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <linje_get_error+0xf2>
     19c:	ce 01       	movw	r24, r28
     19e:	40 97       	sbiw	r24, 0x10	; 16
		}
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
     1a0:	71 01       	movw	r14, r2
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <linje_get_error+0xba>
     1a4:	f5 94       	asr	r15
     1a6:	e7 94       	ror	r14
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <linje_get_error+0xb6>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	e8 22       	and	r14, r24
     1b0:	ff 24       	eor	r15, r15
     1b2:	0e 9d       	mul	r16, r14
     1b4:	b0 01       	movw	r22, r0
     1b6:	0f 9d       	mul	r16, r15
     1b8:	70 0d       	add	r23, r0
     1ba:	1e 9d       	mul	r17, r14
     1bc:	70 0d       	add	r23, r0
     1be:	11 24       	eor	r1, r1
     1c0:	07 2e       	mov	r0, r23
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3>
     1d8:	2b 01       	movw	r4, r22
     1da:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
     1dc:	ce 0c       	add	r12, r14
     1de:	df 1c       	adc	r13, r15
     1e0:	22 96       	adiw	r28, 0x02	; 2
     1e2:	01 50       	subi	r16, 0x01	; 1
     1e4:	11 09       	sbc	r17, r1
	fel_antal=0;
	cli();
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
     1e6:	c6 31       	cpi	r28, 0x16	; 22
     1e8:	d1 05       	cpc	r29, r1
     1ea:	09 f0       	breq	.+2      	; 0x1ee <linje_get_error+0x100>
     1ec:	b0 cf       	rjmp	.-160    	; 0x14e <linje_get_error+0x60>
     1ee:	d0 92 5e 01 	sts	0x015E, r13
     1f2:	c0 92 5d 01 	sts	0x015D, r12
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
     1f6:	c1 14       	cp	r12, r1
     1f8:	d1 04       	cpc	r13, r1
     1fa:	69 f0       	breq	.+26     	; 0x216 <linje_get_error+0x128>
		styr_fel = 0; //kan inte dela med 0, specialfall
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
     1fc:	b6 01       	movw	r22, r12
     1fe:	dd 0c       	add	r13, r13
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__divsf3>
     214:	03 c0       	rjmp	.+6      	; 0x21c <linje_get_error+0x12e>
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
		styr_fel = 0; //kan inte dela med 0, specialfall
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
	return styr_fel;
     21c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixsfsi>
}
     220:	cb 01       	movw	r24, r22
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
     232:	bf 90       	pop	r11
     234:	af 90       	pop	r10
     236:	9f 90       	pop	r9
     238:	8f 90       	pop	r8
     23a:	7f 90       	pop	r7
     23c:	6f 90       	pop	r6
     23e:	5f 90       	pop	r5
     240:	4f 90       	pop	r4
     242:	3f 90       	pop	r3
     244:	2f 90       	pop	r2
     246:	08 95       	ret

00000248 <linje_RGBsveng>:
	}
	
}

signed char linje_RGBsveng() //om RGB ger utslag
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	cli();
     24c:	f8 94       	cli
	signed char styr_fel=0x00;
	int Reflex_data_tmp = Reflex_data;
     24e:	40 91 9a 01 	lds	r20, 0x019A
     252:	50 91 9b 01 	lds	r21, 0x019B
	int Reflex_data2_tmp = Reflex_data2;
     256:	60 91 c3 01 	lds	r22, 0x01C3
     25a:	70 91 c4 01 	lds	r23, 0x01C4
	sei();
     25e:	78 94       	sei
		time=0;
	}
	else // fortsätt med RGB sväng
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
     260:	80 91 ad 01 	lds	r24, 0x01AD
     264:	88 23       	and	r24, r24
     266:	09 f4       	brne	.+2      	; 0x26a <linje_RGBsveng+0x22>
     268:	a3 c0       	rjmp	.+326    	; 0x3b0 <linje_RGBsveng+0x168>
     26a:	20 91 5b 01 	lds	r18, 0x015B
     26e:	30 91 5c 01 	lds	r19, 0x015C
     272:	23 2b       	or	r18, r19
     274:	b1 f4       	brne	.+44     	; 0x2a2 <linje_RGBsveng+0x5a>
     276:	20 91 57 01 	lds	r18, 0x0157
     27a:	30 91 58 01 	lds	r19, 0x0158
     27e:	23 2b       	or	r18, r19
     280:	81 f4       	brne	.+32     	; 0x2a2 <linje_RGBsveng+0x5a>
		counter_timer_line_RGB = 0;
     282:	10 92 68 01 	sts	0x0168, r1
     286:	10 92 67 01 	sts	0x0167, r1
		RGB_reset_timer = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 5c 01 	sts	0x015C, r25
     292:	80 93 5b 01 	sts	0x015B, r24
		RGB_force = 1;
     296:	90 93 58 01 	sts	0x0158, r25
     29a:	80 93 57 01 	sts	0x0157, r24
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     29e:	80 e0       	ldi	r24, 0x00	; 0
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
     2a0:	8e c0       	rjmp	.+284    	; 0x3be <linje_RGBsveng+0x176>
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     2a2:	20 91 67 01 	lds	r18, 0x0167
     2a6:	30 91 68 01 	lds	r19, 0x0168
     2aa:	24 30       	cpi	r18, 0x04	; 4
     2ac:	31 05       	cpc	r19, r1
     2ae:	0c f0       	brlt	.+2      	; 0x2b2 <linje_RGBsveng+0x6a>
     2b0:	6f c0       	rjmp	.+222    	; 0x390 <linje_RGBsveng+0x148>
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	71 f5       	brne	.+92     	; 0x312 <linje_RGBsveng+0xca>
     2b6:	a0 ef       	ldi	r26, 0xF0	; 240
     2b8:	bf ef       	ldi	r27, 0xFF	; 255
     2ba:	2b ef       	ldi	r18, 0xFB	; 251
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
			
			for(int i=0;i<11;i++)
			{
				if (styr_fel==0){
     2c2:	81 11       	cpse	r24, r1
     2c4:	1f c0       	rjmp	.+62     	; 0x304 <linje_RGBsveng+0xbc>
					if(i < 8){ //första 8 sensorenrna
     2c6:	e8 30       	cpi	r30, 0x08	; 8
     2c8:	f1 05       	cpc	r31, r1
     2ca:	84 f4       	brge	.+32     	; 0x2ec <linje_RGBsveng+0xa4>
     2cc:	cf 01       	movw	r24, r30
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     2d2:	ea 01       	movw	r28, r20
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <linje_RGBsveng+0x92>
     2d6:	d5 95       	asr	r29
     2d8:	c7 95       	ror	r28
     2da:	8a 95       	dec	r24
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <linje_RGBsveng+0x8e>
     2de:	ce 01       	movw	r24, r28
     2e0:	86 95       	lsr	r24
     2e2:	81 70       	andi	r24, 0x01	; 1
     2e4:	28 9f       	mul	r18, r24
     2e6:	80 2d       	mov	r24, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <linje_RGBsveng+0xbc>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     2ec:	cb 01       	movw	r24, r22
     2ee:	0a 2e       	mov	r0, r26
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <linje_RGBsveng+0xae>
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	0a 94       	dec	r0
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <linje_RGBsveng+0xaa>
     2fa:	86 95       	lsr	r24
     2fc:	81 70       	andi	r24, 0x01	; 1
     2fe:	28 9f       	mul	r18, r24
     300:	80 2d       	mov	r24, r0
     302:	11 24       	eor	r1, r1
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
			
			for(int i=0;i<11;i++)
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	12 96       	adiw	r26, 0x02	; 2
     30a:	26 30       	cpi	r18, 0x06	; 6
     30c:	d1 f6       	brne	.-76     	; 0x2c2 <linje_RGBsveng+0x7a>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
		styr_fel = -3;
     30e:	8d ef       	ldi	r24, 0xFD	; 253
     310:	56 c0       	rjmp	.+172    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data==2){ //raktfram
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	69 f4       	brne	.+26     	; 0x330 <linje_RGBsveng+0xe8>
			
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
     316:	40 7f       	andi	r20, 0xF0	; 240
     318:	50 93 9b 01 	sts	0x019B, r21
     31c:	40 93 9a 01 	sts	0x019A, r20
			Reflex_data2 = Reflex_data2_tmp & 0x03;
     320:	63 70       	andi	r22, 0x03	; 3
     322:	77 27       	eor	r23, r23
     324:	70 93 c4 01 	sts	0x01C4, r23
     328:	60 93 c3 01 	sts	0x01C3, r22
			return linje_get_error();
     32c:	e0 de       	rcall	.-576    	; 0xee <linje_get_error>
     32e:	47 c0       	rjmp	.+142    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	d1 f5       	brne	.+116    	; 0x3a8 <linje_RGBsveng+0x160>
     334:	a6 e0       	ldi	r26, 0x06	; 6
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e6 e0       	ldi	r30, 0x06	; 6
     33a:	8b e0       	ldi	r24, 0x0B	; 11
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 e0       	ldi	r18, 0x00	; 0
			for(int i=11;i>0;i--){
				if (styr_fel == 0){
     340:	21 11       	cpse	r18, r1
     342:	1f c0       	rjmp	.+62     	; 0x382 <linje_RGBsveng+0x13a>
					if(i < 8){ //första 8 sensorenrna
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	91 05       	cpc	r25, r1
     348:	84 f4       	brge	.+32     	; 0x36a <linje_RGBsveng+0x122>
     34a:	9c 01       	movw	r18, r24
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     350:	ea 01       	movw	r28, r20
     352:	02 c0       	rjmp	.+4      	; 0x358 <linje_RGBsveng+0x110>
     354:	d5 95       	asr	r29
     356:	c7 95       	ror	r28
     358:	2a 95       	dec	r18
     35a:	e2 f7       	brpl	.-8      	; 0x354 <linje_RGBsveng+0x10c>
     35c:	9e 01       	movw	r18, r28
     35e:	26 95       	lsr	r18
     360:	21 70       	andi	r18, 0x01	; 1
     362:	e2 9f       	mul	r30, r18
     364:	20 2d       	mov	r18, r0
     366:	11 24       	eor	r1, r1
     368:	0c c0       	rjmp	.+24     	; 0x382 <linje_RGBsveng+0x13a>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     36a:	9b 01       	movw	r18, r22
     36c:	0a 2e       	mov	r0, r26
     36e:	02 c0       	rjmp	.+4      	; 0x374 <linje_RGBsveng+0x12c>
     370:	35 95       	asr	r19
     372:	27 95       	ror	r18
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <linje_RGBsveng+0x128>
     378:	26 95       	lsr	r18
     37a:	21 70       	andi	r18, 0x01	; 1
     37c:	e2 9f       	mul	r30, r18
     37e:	20 2d       	mov	r18, r0
     380:	11 24       	eor	r1, r1
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	e1 50       	subi	r30, 0x01	; 1
     386:	12 97       	sbiw	r26, 0x02	; 2
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
			Reflex_data2 = Reflex_data2_tmp & 0x03;
			return linje_get_error();
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
			for(int i=11;i>0;i--){
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	d1 f6       	brne	.-76     	; 0x340 <linje_RGBsveng+0xf8>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
			styr_fel = 3;
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	17 c0       	rjmp	.+46     	; 0x3be <linje_RGBsveng+0x176>
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
		}
	}
	else{
		RGB_data=0;
     390:	10 92 ad 01 	sts	0x01AD, r1
		RGB_reset_timer = 0;
     394:	10 92 5c 01 	sts	0x015C, r1
     398:	10 92 5b 01 	sts	0x015B, r1
		RGB_force = 0;
     39c:	10 92 58 01 	sts	0x0158, r1
     3a0:	10 92 57 01 	sts	0x0157, r1
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <linje_RGBsveng+0x176>
				}
			}
			styr_fel = 3;
		}
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <linje_RGBsveng+0x176>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <linje_RGBsveng+0x176>
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     3b0:	80 91 67 01 	lds	r24, 0x0167
     3b4:	90 91 68 01 	lds	r25, 0x0168
     3b8:	04 97       	sbiw	r24, 0x04	; 4
     3ba:	c4 f3       	brlt	.-16     	; 0x3ac <linje_RGBsveng+0x164>
     3bc:	e9 cf       	rjmp	.-46     	; 0x390 <linje_RGBsveng+0x148>
		RGB_force = 0;
		
	}
	 
	return styr_fel;
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sekvens_goal_detekted>:
bool sekvens_goal_detekted(){
	//int fel_antal=0;
	#ifndef time
		static int prew_fel_antal=0;
	#endif
	linje_get_error();		// Borde uppdatera fel_antal
     3c4:	94 de       	rcall	.-728    	; 0xee <linje_get_error>
	if(fel_antal>28){		// om robbot paserar tejp på tvären 
     3c6:	80 91 5d 01 	lds	r24, 0x015D
     3ca:	90 91 5e 01 	lds	r25, 0x015E
     3ce:	8d 31       	cpi	r24, 0x1D	; 29
     3d0:	91 05       	cpc	r25, r1
     3d2:	5c f0       	brlt	.+22     	; 0x3ea <sekvens_goal_detekted+0x26>
		PORTD |= (1 << PD1);
     3d4:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     3d6:	80 91 5d 01 	lds	r24, 0x015D
     3da:	90 91 5e 01 	lds	r25, 0x015E
     3de:	90 93 28 01 	sts	0x0128, r25
     3e2:	80 93 27 01 	sts	0x0127, r24
		return true;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	08 95       	ret
	}
	else if(prew_fel_antal+fel_antal>36 && prew_fel_antal <=28 && RGB_data==0){
     3ea:	20 91 27 01 	lds	r18, 0x0127
     3ee:	30 91 28 01 	lds	r19, 0x0128
     3f2:	ac 01       	movw	r20, r24
     3f4:	42 0f       	add	r20, r18
     3f6:	53 1f       	adc	r21, r19
     3f8:	45 32       	cpi	r20, 0x25	; 37
     3fa:	51 05       	cpc	r21, r1
     3fc:	94 f0       	brlt	.+36     	; 0x422 <sekvens_goal_detekted+0x5e>
     3fe:	2d 31       	cpi	r18, 0x1D	; 29
     400:	31 05       	cpc	r19, r1
     402:	7c f4       	brge	.+30     	; 0x422 <sekvens_goal_detekted+0x5e>
     404:	20 91 ad 01 	lds	r18, 0x01AD
     408:	21 11       	cpse	r18, r1
     40a:	0b c0       	rjmp	.+22     	; 0x422 <sekvens_goal_detekted+0x5e>
		PORTD |= (1 << PD1);
     40c:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     40e:	80 91 5d 01 	lds	r24, 0x015D
     412:	90 91 5e 01 	lds	r25, 0x015E
     416:	90 93 28 01 	sts	0x0128, r25
     41a:	80 93 27 01 	sts	0x0127, r24
		return true;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret
	}
	else{
		prew_fel_antal=fel_antal;
     422:	90 93 28 01 	sts	0x0128, r25
     426:	80 93 27 01 	sts	0x0127, r24
		return false;
     42a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(fel_antal>3 & fel_antal < 7 & max-min > 5 & max-min < 8) // måste kalibreras bör nog vara && ?
		return true;
	return false;
	*/
}
     42c:	08 95       	ret

0000042e <detect_goal>:
			static int count;
		#endif
		
	int goal_timer = 10;
	
	if((Goal_reset_timer == 0) && (sekvens_goal_detekted() == true)){		
     42e:	80 91 59 01 	lds	r24, 0x0159
     432:	90 91 5a 01 	lds	r25, 0x015A
     436:	89 2b       	or	r24, r25
     438:	69 f4       	brne	.+26     	; 0x454 <detect_goal+0x26>
     43a:	c4 df       	rcall	.-120    	; 0x3c4 <sekvens_goal_detekted>
     43c:	88 23       	and	r24, r24
     43e:	51 f0       	breq	.+20     	; 0x454 <detect_goal+0x26>
		Goal_reset_timer = 1;	
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 5a 01 	sts	0x015A, r25
     448:	80 93 59 01 	sts	0x0159, r24
		counter_timer_line_goal = 0;																						// Nollar timern som sitter i timerintrerruptet, ISR för timern sker 10ggr per sekund						
     44c:	10 92 64 01 	sts	0x0164, r1
     450:	10 92 63 01 	sts	0x0163, r1
	}	
	if((sekvens_goal_detekted() == true) && ((count == 0) | (count == 2)) && (counter_timer_line_goal < goal_timer)){		//linje 1(count=0) eller 2(count=2) upptäkt procid
     454:	b7 df       	rcall	.-146    	; 0x3c4 <sekvens_goal_detekted>
     456:	88 23       	and	r24, r24
     458:	b1 f0       	breq	.+44     	; 0x486 <detect_goal+0x58>
     45a:	80 91 29 01 	lds	r24, 0x0129
     45e:	90 91 2a 01 	lds	r25, 0x012A
     462:	9c 01       	movw	r18, r24
     464:	2d 7f       	andi	r18, 0xFD	; 253
     466:	23 2b       	or	r18, r19
     468:	71 f4       	brne	.+28     	; 0x486 <detect_goal+0x58>
     46a:	20 91 63 01 	lds	r18, 0x0163
     46e:	30 91 64 01 	lds	r19, 0x0164
     472:	2a 30       	cpi	r18, 0x0A	; 10
     474:	31 05       	cpc	r19, r1
     476:	3c f4       	brge	.+14     	; 0x486 <detect_goal+0x58>
		count++;
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	90 93 2a 01 	sts	0x012A, r25
     47e:	80 93 29 01 	sts	0x0129, r24
		return false;
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == false) && ((count == 1) | (count == 3)) && (counter_timer_line_goal < goal_timer)){	// mellanrum mellan linje 1-2(count=1) eller 2-3(count=3) upptäkt
     486:	9e df       	rcall	.-196    	; 0x3c4 <sekvens_goal_detekted>
     488:	81 11       	cpse	r24, r1
     48a:	17 c0       	rjmp	.+46     	; 0x4ba <detect_goal+0x8c>
     48c:	20 91 29 01 	lds	r18, 0x0129
     490:	30 91 2a 01 	lds	r19, 0x012A
     494:	a9 01       	movw	r20, r18
     496:	4d 7f       	andi	r20, 0xFD	; 253
     498:	41 30       	cpi	r20, 0x01	; 1
     49a:	51 05       	cpc	r21, r1
     49c:	71 f4       	brne	.+28     	; 0x4ba <detect_goal+0x8c>
     49e:	40 91 63 01 	lds	r20, 0x0163
     4a2:	50 91 64 01 	lds	r21, 0x0164
     4a6:	4a 30       	cpi	r20, 0x0A	; 10
     4a8:	51 05       	cpc	r21, r1
     4aa:	3c f4       	brge	.+14     	; 0x4ba <detect_goal+0x8c>
		count++;
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	30 93 2a 01 	sts	0x012A, r19
     4b4:	20 93 29 01 	sts	0x0129, r18
		return false;																		
     4b8:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == true) && (count == 4)  && (counter_timer_line_goal < goal_timer)){					//linje 3 upptäkt indikerar mål
     4ba:	84 df       	rcall	.-248    	; 0x3c4 <sekvens_goal_detekted>
     4bc:	88 23       	and	r24, r24
     4be:	99 f0       	breq	.+38     	; 0x4e6 <detect_goal+0xb8>
     4c0:	20 91 29 01 	lds	r18, 0x0129
     4c4:	30 91 2a 01 	lds	r19, 0x012A
     4c8:	24 30       	cpi	r18, 0x04	; 4
     4ca:	31 05       	cpc	r19, r1
     4cc:	61 f4       	brne	.+24     	; 0x4e6 <detect_goal+0xb8>
     4ce:	20 91 63 01 	lds	r18, 0x0163
     4d2:	30 91 64 01 	lds	r19, 0x0164
     4d6:	2a 30       	cpi	r18, 0x0A	; 10
     4d8:	31 05       	cpc	r19, r1
     4da:	5c f4       	brge	.+22     	; 0x4f2 <detect_goal+0xc4>
		Goal_reset_timer = 0;
     4dc:	10 92 5a 01 	sts	0x015A, r1
     4e0:	10 92 59 01 	sts	0x0159, r1
		return true;
     4e4:	08 95       	ret
	}
	else if(counter_timer_line_goal >= goal_timer){																			// Timeout, tiden har passerat. Alltså inget mål utan bara en T korsning
     4e6:	80 91 63 01 	lds	r24, 0x0163
     4ea:	90 91 64 01 	lds	r25, 0x0164
     4ee:	0a 97       	sbiw	r24, 0x0a	; 10
     4f0:	54 f0       	brlt	.+20     	; 0x506 <detect_goal+0xd8>
		count = 0;
     4f2:	10 92 2a 01 	sts	0x012A, r1
     4f6:	10 92 29 01 	sts	0x0129, r1
		Goal_reset_timer = 0;
     4fa:	10 92 5a 01 	sts	0x015A, r1
     4fe:	10 92 59 01 	sts	0x0159, r1
		return false;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
	else{	// time out detta är inte mål
		time=0;
		count=0;
		return false;
	}*/
}
     506:	08 95       	ret

00000508 <detect_labyrint>:
bool detect_labyrint(){ //om robboten har kommmit in i en labyrint 
		#ifndef time
			static int time;
		#endif
		
	if(distans_left<30 && distans_right<30 && fel_antal==0){ // om det finns väggar på båda sidor     
     508:	80 91 a6 01 	lds	r24, 0x01A6
     50c:	8e 31       	cpi	r24, 0x1E	; 30
     50e:	68 f4       	brcc	.+26     	; 0x52a <detect_labyrint+0x22>
     510:	80 91 ae 01 	lds	r24, 0x01AE
     514:	8e 31       	cpi	r24, 0x1E	; 30
     516:	58 f4       	brcc	.+22     	; 0x52e <detect_labyrint+0x26>
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	20 91 5d 01 	lds	r18, 0x015D
     51e:	30 91 5e 01 	lds	r19, 0x015E
     522:	23 2b       	or	r18, r19
     524:	29 f0       	breq	.+10     	; 0x530 <detect_labyrint+0x28>
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	08 95       	ret
		}*/
		
	}
	else{ // det var ingen labyrint
		//time = 0;
		return false;
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	08 95       	ret
     52e:	80 e0       	ldi	r24, 0x00	; 0
	}
     530:	08 95       	ret

00000532 <stand_still>:
	turning = true;
	_delay_ms(100);
}

void stand_still(void){
	PORTB &= ~(1 << motor_dir_left);
     532:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     534:	2d 98       	cbi	0x05, 5	; 5
	motor_left = 0;
     536:	17 bc       	out	0x27, r1	; 39
	motor_right = 0;
     538:	18 bc       	out	0x28, r1	; 40
     53a:	08 95       	ret

0000053c <drive_forward>:
}

void drive_forward(void){
	PORTB &= ~(1 << motor_dir_left);
     53c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     53e:	2d 98       	cbi	0x05, 5	; 5
	motor_left = laby_left_speed;
     540:	80 91 17 01 	lds	r24, 0x0117
     544:	87 bd       	out	0x27, r24	; 39
	motor_right = laby_right_speed;
     546:	80 91 15 01 	lds	r24, 0x0115
     54a:	88 bd       	out	0x28, r24	; 40
     54c:	08 95       	ret

0000054e <turn_left>:
}

void turn_left(void){
	PORTB &= ~(1 << motor_dir_right);
     54e:	2d 98       	cbi	0x05, 5	; 5
	PORTB |= (1 << motor_dir_left);
     550:	2e 9a       	sbi	0x05, 6	; 5
	motor_left = 60;//80;//60left;
     552:	8c e3       	ldi	r24, 0x3C	; 60
     554:	87 bd       	out	0x27, r24	; 39
	motor_right = 55;//70;//55right;
     556:	87 e3       	ldi	r24, 0x37	; 55
     558:	88 bd       	out	0x28, r24	; 40
     55a:	08 95       	ret

0000055c <turn_right>:
}

void turn_right(void){
	PORTB |= (1 << motor_dir_right);
     55c:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motor_dir_left);
     55e:	2e 98       	cbi	0x05, 6	; 5
	motor_left = 57;//80;//57left;
     560:	89 e3       	ldi	r24, 0x39	; 57
     562:	87 bd       	out	0x27, r24	; 39
	motor_right = 52;//52right;
     564:	84 e3       	ldi	r24, 0x34	; 52
     566:	88 bd       	out	0x28, r24	; 40
     568:	08 95       	ret

0000056a <PD_for_lab>:
int number_of_errors = 4;
int previous_errors_left[10];
int previous_errors_right[10];
int error_count = 0;

void PD_for_lab(int distance_left, int distance_right, int distance_front){
     56a:	4f 92       	push	r4
     56c:	5f 92       	push	r5
     56e:	6f 92       	push	r6
     570:	7f 92       	push	r7
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	ef 92       	push	r14
     57c:	ff 92       	push	r15
     57e:	0f 93       	push	r16
     580:	1f 93       	push	r17
     582:	cf 93       	push	r28
     584:	df 93       	push	r29
     586:	7a 01       	movw	r14, r20
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
     588:	8c 01       	movw	r16, r24
     58a:	06 1b       	sub	r16, r22
     58c:	17 0b       	sbc	r17, r23
     58e:	10 93 ac 01 	sts	0x01AC, r17
     592:	00 93 ab 01 	sts	0x01AB, r16
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
     596:	c0 91 4b 01 	lds	r28, 0x014B
     59a:	d0 91 4c 01 	lds	r29, 0x014C
     59e:	fe 01       	movw	r30, r28
     5a0:	ee 0f       	add	r30, r30
     5a2:	ff 1f       	adc	r31, r31
     5a4:	e9 58       	subi	r30, 0x89	; 137
     5a6:	fe 4f       	sbci	r31, 0xFE	; 254
     5a8:	80 81       	ld	r24, Z
     5aa:	91 81       	ldd	r25, Z+1	; 0x01
     5ac:	b8 01       	movw	r22, r16
     5ae:	68 1b       	sub	r22, r24
     5b0:	79 0b       	sbc	r23, r25
     5b2:	07 2e       	mov	r0, r23
     5b4:	00 0c       	add	r0, r0
     5b6:	88 0b       	sbc	r24, r24
     5b8:	99 0b       	sbc	r25, r25
     5ba:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     5be:	4b 01       	movw	r8, r22
     5c0:	5c 01       	movw	r10, r24
     5c2:	60 93 4d 01 	sts	0x014D, r22
     5c6:	70 93 4e 01 	sts	0x014E, r23
     5ca:	80 93 4f 01 	sts	0x014F, r24
     5ce:	90 93 50 01 	sts	0x0150, r25
	if (derivate < 3 && derivate > -3)
     5d2:	20 e0       	ldi	r18, 0x00	; 0
     5d4:	30 e0       	ldi	r19, 0x00	; 0
     5d6:	40 e4       	ldi	r20, 0x40	; 64
     5d8:	50 e4       	ldi	r21, 0x40	; 64
     5da:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__cmpsf2>
     5de:	88 23       	and	r24, r24
     5e0:	0c f0       	brlt	.+2      	; 0x5e4 <PD_for_lab+0x7a>
     5e2:	8c c0       	rjmp	.+280    	; 0x6fc <PD_for_lab+0x192>
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e4       	ldi	r20, 0x40	; 64
     5ea:	50 ec       	ldi	r21, 0xC0	; 192
     5ec:	c5 01       	movw	r24, r10
     5ee:	b4 01       	movw	r22, r8
     5f0:	0e 94 3b 10 	call	0x2076	; 0x2076 <__gesf2>
     5f4:	18 16       	cp	r1, r24
     5f6:	44 f4       	brge	.+16     	; 0x608 <PD_for_lab+0x9e>
		derivate = 0;
     5f8:	10 92 4d 01 	sts	0x014D, r1
     5fc:	10 92 4e 01 	sts	0x014E, r1
     600:	10 92 4f 01 	sts	0x014F, r1
     604:	10 92 50 01 	sts	0x0150, r1
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
     608:	80 91 13 01 	lds	r24, 0x0113
     60c:	90 91 14 01 	lds	r25, 0x0114
     610:	08 9f       	mul	r16, r24
     612:	b0 01       	movw	r22, r0
     614:	09 9f       	mul	r16, r25
     616:	70 0d       	add	r23, r0
     618:	18 9f       	mul	r17, r24
     61a:	70 0d       	add	r23, r0
     61c:	11 24       	eor	r1, r1
     61e:	07 2e       	mov	r0, r23
     620:	00 0c       	add	r0, r0
     622:	88 0b       	sbc	r24, r24
     624:	99 0b       	sbc	r25, r25
     626:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     62a:	4b 01       	movw	r8, r22
     62c:	5c 01       	movw	r10, r24
     62e:	80 91 11 01 	lds	r24, 0x0111
     632:	90 91 12 01 	lds	r25, 0x0112
     636:	bc 01       	movw	r22, r24
     638:	99 0f       	add	r25, r25
     63a:	88 0b       	sbc	r24, r24
     63c:	99 0b       	sbc	r25, r25
     63e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     642:	20 91 4d 01 	lds	r18, 0x014D
     646:	30 91 4e 01 	lds	r19, 0x014E
     64a:	40 91 4f 01 	lds	r20, 0x014F
     64e:	50 91 50 01 	lds	r21, 0x0150
     652:	0e 94 3f 10 	call	0x207e	; 0x207e <__mulsf3>
     656:	9b 01       	movw	r18, r22
     658:	ac 01       	movw	r20, r24
     65a:	c5 01       	movw	r24, r10
     65c:	b4 01       	movw	r22, r8
     65e:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	40 e2       	ldi	r20, 0x20	; 32
     668:	51 e4       	ldi	r21, 0x41	; 65
     66a:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__divsf3>
     66e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixsfsi>
     672:	70 93 c6 01 	sts	0x01C6, r23
     676:	60 93 c5 01 	sts	0x01C5, r22
	previous_errors_right[error_count] = current_error_lab;
     67a:	cc 0f       	add	r28, r28
     67c:	dd 1f       	adc	r29, r29
     67e:	c9 58       	subi	r28, 0x89	; 137
     680:	de 4f       	sbci	r29, 0xFE	; 254
     682:	19 83       	std	Y+1, r17	; 0x01
     684:	08 83       	st	Y, r16
	
	if(output_right >= 0){
     686:	77 23       	and	r23, r23
     688:	bc f0       	brlt	.+46     	; 0x6b8 <PD_for_lab+0x14e>
		motor_right = laby_right_speed;
     68a:	80 91 15 01 	lds	r24, 0x0115
     68e:	88 bd       	out	0x28, r24	; 40
		if(output_right > laby_left_speed)
     690:	80 91 17 01 	lds	r24, 0x0117
     694:	90 91 18 01 	lds	r25, 0x0118
     698:	20 91 c5 01 	lds	r18, 0x01C5
     69c:	30 91 c6 01 	lds	r19, 0x01C6
     6a0:	82 17       	cp	r24, r18
     6a2:	93 07       	cpc	r25, r19
     6a4:	24 f4       	brge	.+8      	; 0x6ae <PD_for_lab+0x144>
			output_right = laby_left_speed;
     6a6:	90 93 c6 01 	sts	0x01C6, r25
     6aa:	80 93 c5 01 	sts	0x01C5, r24
		motor_left = laby_left_speed - output_right;	
     6ae:	90 91 c5 01 	lds	r25, 0x01C5
     6b2:	89 1b       	sub	r24, r25
     6b4:	87 bd       	out	0x27, r24	; 39
     6b6:	1a c0       	rjmp	.+52     	; 0x6ec <PD_for_lab+0x182>
	}
	else if(output_right < 0){
		motor_left = laby_left_speed;
     6b8:	80 91 17 01 	lds	r24, 0x0117
     6bc:	87 bd       	out	0x27, r24	; 39
		if(output_right < -laby_right_speed)
     6be:	80 91 15 01 	lds	r24, 0x0115
     6c2:	90 91 16 01 	lds	r25, 0x0116
     6c6:	22 27       	eor	r18, r18
     6c8:	33 27       	eor	r19, r19
     6ca:	28 1b       	sub	r18, r24
     6cc:	39 0b       	sbc	r19, r25
     6ce:	40 91 c5 01 	lds	r20, 0x01C5
     6d2:	50 91 c6 01 	lds	r21, 0x01C6
     6d6:	42 17       	cp	r20, r18
     6d8:	53 07       	cpc	r21, r19
     6da:	24 f4       	brge	.+8      	; 0x6e4 <PD_for_lab+0x17a>
			output_right = -laby_right_speed;
     6dc:	30 93 c6 01 	sts	0x01C6, r19
     6e0:	20 93 c5 01 	sts	0x01C5, r18
		motor_right = laby_right_speed + output_right;	
     6e4:	90 91 c5 01 	lds	r25, 0x01C5
     6e8:	89 0f       	add	r24, r25
     6ea:	88 bd       	out	0x28, r24	; 40
			stand_still();
			for(int i = 0; i < number_of_errors ; i++){
				previous_errors_right[i] = 0;
		}
		}*/
	if(distance_front <= 35){
     6ec:	84 e2       	ldi	r24, 0x24	; 36
     6ee:	e8 16       	cp	r14, r24
     6f0:	f1 04       	cpc	r15, r1
     6f2:	0c f0       	brlt	.+2      	; 0x6f6 <PD_for_lab+0x18c>
     6f4:	42 c0       	rjmp	.+132    	; 0x77a <PD_for_lab+0x210>
		motor_left = 0; //output_left = -left;// = 0; 
     6f6:	17 bc       	out	0x27, r1	; 39
		motor_right = 0;//	output_right = -right;//motor_right = 0;
     6f8:	18 bc       	out	0x28, r1	; 40
     6fa:	3f c0       	rjmp	.+126    	; 0x77a <PD_for_lab+0x210>
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
	if (derivate < 3 && derivate > -3)
		derivate = 0;
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
     6fc:	80 91 13 01 	lds	r24, 0x0113
     700:	90 91 14 01 	lds	r25, 0x0114
     704:	08 9f       	mul	r16, r24
     706:	b0 01       	movw	r22, r0
     708:	09 9f       	mul	r16, r25
     70a:	70 0d       	add	r23, r0
     70c:	18 9f       	mul	r17, r24
     70e:	70 0d       	add	r23, r0
     710:	11 24       	eor	r1, r1
     712:	07 2e       	mov	r0, r23
     714:	00 0c       	add	r0, r0
     716:	88 0b       	sbc	r24, r24
     718:	99 0b       	sbc	r25, r25
     71a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     71e:	2b 01       	movw	r4, r22
     720:	3c 01       	movw	r6, r24
     722:	60 91 11 01 	lds	r22, 0x0111
     726:	70 91 12 01 	lds	r23, 0x0112
     72a:	07 2e       	mov	r0, r23
     72c:	00 0c       	add	r0, r0
     72e:	88 0b       	sbc	r24, r24
     730:	99 0b       	sbc	r25, r25
     732:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	c5 01       	movw	r24, r10
     73c:	b4 01       	movw	r22, r8
     73e:	0e 94 3f 10 	call	0x207e	; 0x207e <__mulsf3>
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	c3 01       	movw	r24, r6
     748:	b2 01       	movw	r22, r4
     74a:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e2       	ldi	r20, 0x20	; 32
     754:	51 e4       	ldi	r21, 0x41	; 65
     756:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__divsf3>
     75a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixsfsi>
     75e:	70 93 c6 01 	sts	0x01C6, r23
     762:	60 93 c5 01 	sts	0x01C5, r22
	previous_errors_right[error_count] = current_error_lab;
     766:	cc 0f       	add	r28, r28
     768:	dd 1f       	adc	r29, r29
     76a:	c9 58       	subi	r28, 0x89	; 137
     76c:	de 4f       	sbci	r29, 0xFE	; 254
     76e:	19 83       	std	Y+1, r17	; 0x01
     770:	08 83       	st	Y, r16
	
	if(output_right >= 0){
     772:	77 23       	and	r23, r23
     774:	0c f0       	brlt	.+2      	; 0x778 <PD_for_lab+0x20e>
     776:	89 cf       	rjmp	.-238    	; 0x68a <PD_for_lab+0x120>
     778:	9f cf       	rjmp	.-194    	; 0x6b8 <PD_for_lab+0x14e>
	//if(error_count == 0)
	//	PORTD ^= (1 << PD0);
	
	//motor_left = left + output_left;
	//motor_right = right + output_right;
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	7f 90       	pop	r7
     790:	6f 90       	pop	r6
     792:	5f 90       	pop	r5
     794:	4f 90       	pop	r4
     796:	08 95       	ret

00000798 <drive_forward_left>:

short regulate_side = 0;



void drive_forward_left(int distance){
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     7a8:	00 91 0f 01 	lds	r16, 0x010F
     7ac:	10 91 10 01 	lds	r17, 0x0110
     7b0:	08 1b       	sub	r16, r24
     7b2:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     7b4:	c0 91 4b 01 	lds	r28, 0x014B
     7b8:	d0 91 4c 01 	lds	r29, 0x014C
     7bc:	fe 01       	movw	r30, r28
     7be:	ee 0f       	add	r30, r30
     7c0:	ff 1f       	adc	r31, r31
     7c2:	e9 53       	subi	r30, 0x39	; 57
     7c4:	fe 4f       	sbci	r31, 0xFE	; 254
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	b8 01       	movw	r22, r16
     7cc:	68 1b       	sub	r22, r24
     7ce:	79 0b       	sbc	r23, r25
     7d0:	07 2e       	mov	r0, r23
     7d2:	00 0c       	add	r0, r0
     7d4:	88 0b       	sbc	r24, r24
     7d6:	99 0b       	sbc	r25, r25
     7d8:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     7dc:	6b 01       	movw	r12, r22
     7de:	7c 01       	movw	r14, r24
	if (derivate < 3)
     7e0:	20 e0       	ldi	r18, 0x00	; 0
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	40 e4       	ldi	r20, 0x40	; 64
     7e6:	50 e4       	ldi	r21, 0x40	; 64
     7e8:	0e 94 ec 0e 	call	0x1dd8	; 0x1dd8 <__cmpsf2>
     7ec:	88 23       	and	r24, r24
     7ee:	4c f0       	brlt	.+18     	; 0x802 <drive_forward_left+0x6a>



void drive_forward_left(int distance){
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
	derivate = current_error - previous_errors[error_count];///10; //
     7f0:	c0 92 4d 01 	sts	0x014D, r12
     7f4:	d0 92 4e 01 	sts	0x014E, r13
     7f8:	e0 92 4f 01 	sts	0x014F, r14
     7fc:	f0 92 50 01 	sts	0x0150, r15
     800:	08 c0       	rjmp	.+16     	; 0x812 <drive_forward_left+0x7a>
	if (derivate < 3)
		derivate = 0;
     802:	10 92 4d 01 	sts	0x014D, r1
     806:	10 92 4e 01 	sts	0x014E, r1
     80a:	10 92 4f 01 	sts	0x014F, r1
     80e:	10 92 50 01 	sts	0x0150, r1
	int output = (p_constant_lab * current_error + d_constant_lab * derivate)/10;
     812:	80 91 13 01 	lds	r24, 0x0113
     816:	90 91 14 01 	lds	r25, 0x0114
     81a:	08 9f       	mul	r16, r24
     81c:	b0 01       	movw	r22, r0
     81e:	09 9f       	mul	r16, r25
     820:	70 0d       	add	r23, r0
     822:	18 9f       	mul	r17, r24
     824:	70 0d       	add	r23, r0
     826:	11 24       	eor	r1, r1
     828:	07 2e       	mov	r0, r23
     82a:	00 0c       	add	r0, r0
     82c:	88 0b       	sbc	r24, r24
     82e:	99 0b       	sbc	r25, r25
     830:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     834:	6b 01       	movw	r12, r22
     836:	7c 01       	movw	r14, r24
     838:	80 91 11 01 	lds	r24, 0x0111
     83c:	90 91 12 01 	lds	r25, 0x0112
     840:	bc 01       	movw	r22, r24
     842:	99 0f       	add	r25, r25
     844:	88 0b       	sbc	r24, r24
     846:	99 0b       	sbc	r25, r25
     848:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     84c:	20 91 4d 01 	lds	r18, 0x014D
     850:	30 91 4e 01 	lds	r19, 0x014E
     854:	40 91 4f 01 	lds	r20, 0x014F
     858:	50 91 50 01 	lds	r21, 0x0150
     85c:	0e 94 3f 10 	call	0x207e	; 0x207e <__mulsf3>
     860:	9b 01       	movw	r18, r22
     862:	ac 01       	movw	r20, r24
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3>
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e2       	ldi	r20, 0x20	; 32
     872:	51 e4       	ldi	r21, 0x41	; 65
     874:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__divsf3>
     878:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixsfsi>
     87c:	ab 01       	movw	r20, r22
	previous_errors[error_count] = current_error;
     87e:	fe 01       	movw	r30, r28
     880:	ee 0f       	add	r30, r30
     882:	ff 1f       	adc	r31, r31
     884:	e9 53       	subi	r30, 0x39	; 57
     886:	fe 4f       	sbci	r31, 0xFE	; 254
     888:	11 83       	std	Z+1, r17	; 0x01
     88a:	00 83       	st	Z, r16

	if(++error_count >= number_of_errors_sc)
     88c:	21 96       	adiw	r28, 0x01	; 1
     88e:	d0 93 4c 01 	sts	0x014C, r29
     892:	c0 93 4b 01 	sts	0x014B, r28
     896:	20 91 04 01 	lds	r18, 0x0104
     89a:	30 91 05 01 	lds	r19, 0x0105
     89e:	c2 17       	cp	r28, r18
     8a0:	d3 07       	cpc	r29, r19
     8a2:	24 f0       	brlt	.+8      	; 0x8ac <drive_forward_left+0x114>
		error_count=0;
     8a4:	10 92 4c 01 	sts	0x014C, r1
     8a8:	10 92 4b 01 	sts	0x014B, r1
	
	if(output <= (-laby_left_speed))
     8ac:	20 91 17 01 	lds	r18, 0x0117
     8b0:	30 91 18 01 	lds	r19, 0x0118
     8b4:	ee 27       	eor	r30, r30
     8b6:	ff 27       	eor	r31, r31
     8b8:	e2 1b       	sub	r30, r18
     8ba:	f3 0b       	sbc	r31, r19
     8bc:	e4 17       	cp	r30, r20
     8be:	f5 07       	cpc	r31, r21
     8c0:	4c f4       	brge	.+18     	; 0x8d4 <drive_forward_left+0x13c>
		output = -laby_left_speed;
	
	else if(output >= laby_right_speed)
     8c2:	40 91 15 01 	lds	r20, 0x0115
     8c6:	50 91 16 01 	lds	r21, 0x0116
     8ca:	fb 01       	movw	r30, r22
     8cc:	46 17       	cp	r20, r22
     8ce:	57 07       	cpc	r21, r23
     8d0:	0c f4       	brge	.+2      	; 0x8d4 <drive_forward_left+0x13c>
     8d2:	fa 01       	movw	r30, r20
		output=laby_right_speed;
	
	if(output <= 0){
     8d4:	1e 16       	cp	r1, r30
     8d6:	1f 06       	cpc	r1, r31
     8d8:	4c f0       	brlt	.+18     	; 0x8ec <drive_forward_left+0x154>
		motor_right = laby_right_speed;
     8da:	90 91 15 01 	lds	r25, 0x0115
     8de:	98 bd       	out	0x28, r25	; 40
		motor_left = laby_left_speed + output;
     8e0:	90 91 17 01 	lds	r25, 0x0117
     8e4:	89 2f       	mov	r24, r25
     8e6:	8e 0f       	add	r24, r30
     8e8:	87 bd       	out	0x27, r24	; 39
     8ea:	06 c0       	rjmp	.+12     	; 0x8f8 <drive_forward_left+0x160>
	}
	else{ 
		motor_left = laby_left_speed;
     8ec:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed - output;	
     8ee:	90 91 15 01 	lds	r25, 0x0115
     8f2:	89 2f       	mov	r24, r25
     8f4:	8e 1b       	sub	r24, r30
     8f6:	88 bd       	out	0x28, r24	; 40
	}
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	df 90       	pop	r13
     906:	cf 90       	pop	r12
     908:	08 95       	ret

0000090a <drive_forward_right>:

void drive_forward_right(int distance, int distance_front){
     90a:	4f 92       	push	r4
     90c:	5f 92       	push	r5
     90e:	6f 92       	push	r6
     910:	7f 92       	push	r7
     912:	8f 92       	push	r8
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	bf 92       	push	r11
     91a:	ef 92       	push	r14
     91c:	ff 92       	push	r15
     91e:	0f 93       	push	r16
     920:	1f 93       	push	r17
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
	 int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     926:	00 91 0f 01 	lds	r16, 0x010F
     92a:	10 91 10 01 	lds	r17, 0x0110
     92e:	08 1b       	sub	r16, r24
     930:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     932:	c0 91 4b 01 	lds	r28, 0x014B
     936:	d0 91 4c 01 	lds	r29, 0x014C
     93a:	ce 01       	movw	r24, r28
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	9c 01       	movw	r18, r24
     942:	29 53       	subi	r18, 0x39	; 57
     944:	3e 4f       	sbci	r19, 0xFE	; 254
     946:	79 01       	movw	r14, r18
     948:	f9 01       	movw	r30, r18
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	b8 01       	movw	r22, r16
     950:	68 1b       	sub	r22, r24
     952:	79 0b       	sbc	r23, r25
     954:	07 2e       	mov	r0, r23
     956:	00 0c       	add	r0, r0
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     960:	4b 01       	movw	r8, r22
     962:	5c 01       	movw	r10, r24
     964:	60 93 4d 01 	sts	0x014D, r22
     968:	70 93 4e 01 	sts	0x014E, r23
     96c:	80 93 4f 01 	sts	0x014F, r24
     970:	90 93 50 01 	sts	0x0150, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     974:	80 91 0a 01 	lds	r24, 0x010A
     978:	90 91 0b 01 	lds	r25, 0x010B
     97c:	08 9f       	mul	r16, r24
     97e:	b0 01       	movw	r22, r0
     980:	09 9f       	mul	r16, r25
     982:	70 0d       	add	r23, r0
     984:	18 9f       	mul	r17, r24
     986:	70 0d       	add	r23, r0
     988:	11 24       	eor	r1, r1
     98a:	07 2e       	mov	r0, r23
     98c:	00 0c       	add	r0, r0
     98e:	88 0b       	sbc	r24, r24
     990:	99 0b       	sbc	r25, r25
     992:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     996:	2b 01       	movw	r4, r22
     998:	3c 01       	movw	r6, r24
     99a:	60 91 08 01 	lds	r22, 0x0108
     99e:	70 91 09 01 	lds	r23, 0x0109
     9a2:	07 2e       	mov	r0, r23
     9a4:	00 0c       	add	r0, r0
     9a6:	88 0b       	sbc	r24, r24
     9a8:	99 0b       	sbc	r25, r25
     9aa:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     9ae:	9b 01       	movw	r18, r22
     9b0:	ac 01       	movw	r20, r24
     9b2:	c5 01       	movw	r24, r10
     9b4:	b4 01       	movw	r22, r8
     9b6:	0e 94 3f 10 	call	0x207e	; 0x207e <__mulsf3>
     9ba:	9b 01       	movw	r18, r22
     9bc:	ac 01       	movw	r20, r24
     9be:	c3 01       	movw	r24, r6
     9c0:	b2 01       	movw	r22, r4
     9c2:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3>
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e2       	ldi	r20, 0x20	; 32
     9cc:	51 e4       	ldi	r21, 0x41	; 65
     9ce:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <__divsf3>
     9d2:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixsfsi>
     9d6:	ab 01       	movw	r20, r22
	previous_errors[error_count] = current_error;
     9d8:	f7 01       	movw	r30, r14
     9da:	11 83       	std	Z+1, r17	; 0x01
     9dc:	00 83       	st	Z, r16


	if(++error_count >= number_of_errors)
     9de:	21 96       	adiw	r28, 0x01	; 1
     9e0:	d0 93 4c 01 	sts	0x014C, r29
     9e4:	c0 93 4b 01 	sts	0x014B, r28
     9e8:	20 91 0d 01 	lds	r18, 0x010D
     9ec:	30 91 0e 01 	lds	r19, 0x010E
     9f0:	c2 17       	cp	r28, r18
     9f2:	d3 07       	cpc	r29, r19
     9f4:	24 f0       	brlt	.+8      	; 0x9fe <drive_forward_right+0xf4>
		error_count = 0;
     9f6:	10 92 4c 01 	sts	0x014C, r1
     9fa:	10 92 4b 01 	sts	0x014B, r1
	
	if(output >= (laby_left_speed))
     9fe:	20 91 17 01 	lds	r18, 0x0117
     a02:	30 91 18 01 	lds	r19, 0x0118
     a06:	42 17       	cp	r20, r18
     a08:	53 07       	cpc	r21, r19
     a0a:	64 f4       	brge	.+24     	; 0xa24 <drive_forward_right+0x11a>
		output = laby_left_speed;
	
	else if(output <= -laby_right_speed)
     a0c:	40 91 15 01 	lds	r20, 0x0115
     a10:	50 91 16 01 	lds	r21, 0x0116
     a14:	51 95       	neg	r21
     a16:	41 95       	neg	r20
     a18:	51 09       	sbc	r21, r1
     a1a:	64 17       	cp	r22, r20
     a1c:	75 07       	cpc	r23, r21
     a1e:	1c f4       	brge	.+6      	; 0xa26 <drive_forward_right+0x11c>
     a20:	ba 01       	movw	r22, r20
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <drive_forward_right+0x11c>

	if(++error_count >= number_of_errors)
		error_count = 0;
	
	if(output >= (laby_left_speed))
		output = laby_left_speed;
     a24:	b9 01       	movw	r22, r18
	
	else if(output <= -laby_right_speed)
		output = -laby_right_speed;
	
	if(output >= 0){
     a26:	77 23       	and	r23, r23
     a28:	44 f0       	brlt	.+16     	; 0xa3a <drive_forward_right+0x130>
		motor_right = laby_right_speed;
     a2a:	80 91 15 01 	lds	r24, 0x0115
     a2e:	88 bd       	out	0x28, r24	; 40
		motor_left = laby_left_speed - output;
     a30:	80 91 17 01 	lds	r24, 0x0117
     a34:	86 1b       	sub	r24, r22
     a36:	87 bd       	out	0x27, r24	; 39
     a38:	05 c0       	rjmp	.+10     	; 0xa44 <drive_forward_right+0x13a>
	}
	else{
		motor_left = laby_left_speed;
     a3a:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed + output;
     a3c:	80 91 15 01 	lds	r24, 0x0115
     a40:	68 0f       	add	r22, r24
     a42:	68 bd       	out	0x28, r22	; 40
		motor_left = 57;//80;//57left;
		motor_right = 52;//52right;
		_delay_ms(80);	
		stand_still();
	}*/
}
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	bf 90       	pop	r11
     a52:	af 90       	pop	r10
     a54:	9f 90       	pop	r9
     a56:	8f 90       	pop	r8
     a58:	7f 90       	pop	r7
     a5a:	6f 90       	pop	r6
     a5c:	5f 90       	pop	r5
     a5e:	4f 90       	pop	r4
     a60:	08 95       	ret

00000a62 <linje>:
float current_position = 0;



	 
void linje(void){
     a62:	4f 92       	push	r4
     a64:	5f 92       	push	r5
     a66:	6f 92       	push	r6
     a68:	7f 92       	push	r7
     a6a:	8f 92       	push	r8
     a6c:	9f 92       	push	r9
     a6e:	af 92       	push	r10
     a70:	bf 92       	push	r11
     a72:	cf 92       	push	r12
     a74:	df 92       	push	r13
     a76:	ef 92       	push	r14
     a78:	ff 92       	push	r15
	cli();
     a7a:	f8 94       	cli
	int current_position_tmp = current_position;
     a7c:	60 91 2c 01 	lds	r22, 0x012C
     a80:	70 91 2d 01 	lds	r23, 0x012D
     a84:	80 91 2e 01 	lds	r24, 0x012E
     a88:	90 91 2f 01 	lds	r25, 0x012F
     a8c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixsfsi>
	sei();
     a90:	78 94       	sei
	
	current_error = setpoint - current_position_tmp;
     a92:	20 91 3a 01 	lds	r18, 0x013A
     a96:	30 91 3b 01 	lds	r19, 0x013B
     a9a:	a9 01       	movw	r20, r18
     a9c:	46 1b       	sub	r20, r22
     a9e:	57 0b       	sbc	r21, r23
     aa0:	ba 01       	movw	r22, r20
     aa2:	07 2e       	mov	r0, r23
     aa4:	00 0c       	add	r0, r0
     aa6:	88 0b       	sbc	r24, r24
     aa8:	99 0b       	sbc	r25, r25
     aaa:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     aae:	6b 01       	movw	r12, r22
     ab0:	7c 01       	movw	r14, r24
     ab2:	60 93 36 01 	sts	0x0136, r22
     ab6:	70 93 37 01 	sts	0x0137, r23
     aba:	80 93 38 01 	sts	0x0138, r24
     abe:	90 93 39 01 	sts	0x0139, r25
	derivate = (current_error -previous_error);					// Tror det var dt som saknades fÃ¶r derivatan
     ac2:	20 91 30 01 	lds	r18, 0x0130
     ac6:	30 91 31 01 	lds	r19, 0x0131
     aca:	40 91 32 01 	lds	r20, 0x0132
     ace:	50 91 33 01 	lds	r21, 0x0133
     ad2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__subsf3>
     ad6:	4b 01       	movw	r8, r22
     ad8:	5c 01       	movw	r10, r24
     ada:	60 93 4d 01 	sts	0x014D, r22
     ade:	70 93 4e 01 	sts	0x014E, r23
     ae2:	80 93 4f 01 	sts	0x014F, r24
     ae6:	90 93 50 01 	sts	0x0150, r25
	output = (p_constant * current_error + d_constant * derivate);
     aea:	60 91 02 01 	lds	r22, 0x0102
     aee:	70 91 03 01 	lds	r23, 0x0103
     af2:	07 2e       	mov	r0, r23
     af4:	00 0c       	add	r0, r0
     af6:	88 0b       	sbc	r24, r24
     af8:	99 0b       	sbc	r25, r25
     afa:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     afe:	9b 01       	movw	r18, r22
     b00:	ac 01       	movw	r20, r24
     b02:	c7 01       	movw	r24, r14
     b04:	b6 01       	movw	r22, r12
     b06:	0e 94 3f 10 	call	0x207e	; 0x207e <__mulsf3>
     b0a:	2b 01       	movw	r4, r22
     b0c:	3c 01       	movw	r6, r24
     b0e:	60 91 00 01 	lds	r22, 0x0100
     b12:	70 91 01 01 	lds	r23, 0x0101
     b16:	07 2e       	mov	r0, r23
     b18:	00 0c       	add	r0, r0
     b1a:	88 0b       	sbc	r24, r24
     b1c:	99 0b       	sbc	r25, r25
     b1e:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     b22:	9b 01       	movw	r18, r22
     b24:	ac 01       	movw	r20, r24
     b26:	c5 01       	movw	r24, r10
     b28:	b4 01       	movw	r22, r8
     b2a:	0e 94 3f 10 	call	0x207e	; 0x207e <__mulsf3>
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	c3 01       	movw	r24, r6
     b34:	b2 01       	movw	r22, r4
     b36:	0e 94 88 0e 	call	0x1d10	; 0x1d10 <__addsf3>
     b3a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <__fixsfsi>
     b3e:	9b 01       	movw	r18, r22
     b40:	70 93 35 01 	sts	0x0135, r23
     b44:	60 93 34 01 	sts	0x0134, r22
	previous_error = current_error;
     b48:	c0 92 30 01 	sts	0x0130, r12
     b4c:	d0 92 31 01 	sts	0x0131, r13
     b50:	e0 92 32 01 	sts	0x0132, r14
     b54:	f0 92 33 01 	sts	0x0133, r15
//***********************************
//Reglering
//***********************************
		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     b58:	40 91 5d 01 	lds	r20, 0x015D
     b5c:	50 91 5e 01 	lds	r21, 0x015E
     b60:	45 2b       	or	r20, r21
     b62:	e9 f4       	brne	.+58     	; 0xb9e <linje+0x13c>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     b64:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= (1 << motor_dir_right);
     b66:	2d 9a       	sbi	0x05, 5	; 5
		motor_left = left/(2 * RGB_slow);
     b68:	60 91 19 01 	lds	r22, 0x0119
     b6c:	70 91 1a 01 	lds	r23, 0x011A
     b70:	66 0f       	add	r22, r22
     b72:	77 1f       	adc	r23, r23
     b74:	80 91 6b 01 	lds	r24, 0x016B
     b78:	90 91 6c 01 	lds	r25, 0x016C
     b7c:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     b80:	67 bd       	out	0x27, r22	; 39
		motor_right = right/(2 * RGB_slow);
     b82:	60 91 19 01 	lds	r22, 0x0119
     b86:	70 91 1a 01 	lds	r23, 0x011A
     b8a:	66 0f       	add	r22, r22
     b8c:	77 1f       	adc	r23, r23
     b8e:	80 91 69 01 	lds	r24, 0x0169
     b92:	90 91 6a 01 	lds	r25, 0x016A
     b96:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     b9a:	68 bd       	out	0x28, r22	; 40
     b9c:	c3 c0       	rjmp	.+390    	; 0xd24 <linje+0x2c2>
	}
	else if(output < 0){							// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     b9e:	77 23       	and	r23, r23
     ba0:	0c f0       	brlt	.+2      	; 0xba4 <linje+0x142>
     ba2:	57 c0       	rjmp	.+174    	; 0xc52 <linje+0x1f0>
		if(abs(output) >= (right / RGB_slow)){					// FÃ¶r att unvika mÃ¤ttnad i regleringen
     ba4:	9b 01       	movw	r18, r22
     ba6:	77 23       	and	r23, r23
     ba8:	24 f4       	brge	.+8      	; 0xbb2 <linje+0x150>
     baa:	22 27       	eor	r18, r18
     bac:	33 27       	eor	r19, r19
     bae:	26 1b       	sub	r18, r22
     bb0:	37 0b       	sbc	r19, r23
     bb2:	80 91 69 01 	lds	r24, 0x0169
     bb6:	90 91 6a 01 	lds	r25, 0x016A
     bba:	60 91 19 01 	lds	r22, 0x0119
     bbe:	70 91 1a 01 	lds	r23, 0x011A
     bc2:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     bc6:	26 17       	cp	r18, r22
     bc8:	37 07       	cpc	r19, r23
     bca:	24 f1       	brlt	.+72     	; 0xc14 <linje+0x1b2>
			//PORTB |= (1 << motor_dir_left);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  
     bcc:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   
     bce:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left / RGB_slow;
     bd0:	80 91 6b 01 	lds	r24, 0x016B
     bd4:	90 91 6c 01 	lds	r25, 0x016C
     bd8:	60 91 19 01 	lds	r22, 0x0119
     bdc:	70 91 1a 01 	lds	r23, 0x011A
     be0:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     be4:	67 bd       	out	0x27, r22	; 39
			motor_right = (abs(output)- right) / RGB_slow;
     be6:	80 91 34 01 	lds	r24, 0x0134
     bea:	90 91 35 01 	lds	r25, 0x0135
     bee:	99 23       	and	r25, r25
     bf0:	1c f4       	brge	.+6      	; 0xbf8 <linje+0x196>
     bf2:	91 95       	neg	r25
     bf4:	81 95       	neg	r24
     bf6:	91 09       	sbc	r25, r1
     bf8:	20 91 69 01 	lds	r18, 0x0169
     bfc:	30 91 6a 01 	lds	r19, 0x016A
     c00:	82 1b       	sub	r24, r18
     c02:	93 0b       	sbc	r25, r19
     c04:	60 91 19 01 	lds	r22, 0x0119
     c08:	70 91 1a 01 	lds	r23, 0x011A
     c0c:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     c10:	68 bd       	out	0x28, r22	; 40
     c12:	88 c0       	rjmp	.+272    	; 0xd24 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     c14:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     c16:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left / RGB_slow;
     c18:	80 91 6b 01 	lds	r24, 0x016B
     c1c:	90 91 6c 01 	lds	r25, 0x016C
     c20:	60 91 19 01 	lds	r22, 0x0119
     c24:	70 91 1a 01 	lds	r23, 0x011A
     c28:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     c2c:	67 bd       	out	0x27, r22	; 39
			motor_right = (right + output) / RGB_slow;
     c2e:	20 91 69 01 	lds	r18, 0x0169
     c32:	30 91 6a 01 	lds	r19, 0x016A
     c36:	80 91 34 01 	lds	r24, 0x0134
     c3a:	90 91 35 01 	lds	r25, 0x0135
     c3e:	82 0f       	add	r24, r18
     c40:	93 1f       	adc	r25, r19
     c42:	60 91 19 01 	lds	r22, 0x0119
     c46:	70 91 1a 01 	lds	r23, 0x011A
     c4a:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     c4e:	68 bd       	out	0x28, r22	; 40
     c50:	69 c0       	rjmp	.+210    	; 0xd24 <linje+0x2c2>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     c52:	16 16       	cp	r1, r22
     c54:	17 06       	cpc	r1, r23
     c56:	0c f0       	brlt	.+2      	; 0xc5a <linje+0x1f8>
     c58:	4b c0       	rjmp	.+150    	; 0xcf0 <linje+0x28e>
		if(output >= (left / RGB_slow)){							// FÃ¶r att unvika mÃ¤ttnad i regleringen
     c5a:	80 91 6b 01 	lds	r24, 0x016B
     c5e:	90 91 6c 01 	lds	r25, 0x016C
     c62:	60 91 19 01 	lds	r22, 0x0119
     c66:	70 91 1a 01 	lds	r23, 0x011A
     c6a:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     c6e:	26 17       	cp	r18, r22
     c70:	37 07       	cpc	r19, r23
     c72:	fc f0       	brlt	.+62     	; 0xcb2 <linje+0x250>
			//PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_left);			// Set motor direction to backward  
     c74:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   
     c76:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     c78:	80 91 69 01 	lds	r24, 0x0169
     c7c:	90 91 6a 01 	lds	r25, 0x016A
     c80:	60 91 19 01 	lds	r22, 0x0119
     c84:	70 91 1a 01 	lds	r23, 0x011A
     c88:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     c8c:	68 bd       	out	0x28, r22	; 40
			motor_left = (output - left) / RGB_slow;
     c8e:	80 91 34 01 	lds	r24, 0x0134
     c92:	90 91 35 01 	lds	r25, 0x0135
     c96:	20 91 6b 01 	lds	r18, 0x016B
     c9a:	30 91 6c 01 	lds	r19, 0x016C
     c9e:	82 1b       	sub	r24, r18
     ca0:	93 0b       	sbc	r25, r19
     ca2:	60 91 19 01 	lds	r22, 0x0119
     ca6:	70 91 1a 01 	lds	r23, 0x011A
     caa:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     cae:	67 bd       	out	0x27, r22	; 39
     cb0:	39 c0       	rjmp	.+114    	; 0xd24 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     cb2:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     cb4:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     cb6:	80 91 69 01 	lds	r24, 0x0169
     cba:	90 91 6a 01 	lds	r25, 0x016A
     cbe:	60 91 19 01 	lds	r22, 0x0119
     cc2:	70 91 1a 01 	lds	r23, 0x011A
     cc6:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     cca:	68 bd       	out	0x28, r22	; 40
			motor_left = (left - output) / RGB_slow;
     ccc:	80 91 6b 01 	lds	r24, 0x016B
     cd0:	90 91 6c 01 	lds	r25, 0x016C
     cd4:	20 91 34 01 	lds	r18, 0x0134
     cd8:	30 91 35 01 	lds	r19, 0x0135
     cdc:	82 1b       	sub	r24, r18
     cde:	93 0b       	sbc	r25, r19
     ce0:	60 91 19 01 	lds	r22, 0x0119
     ce4:	70 91 1a 01 	lds	r23, 0x011A
     ce8:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     cec:	67 bd       	out	0x27, r22	; 39
     cee:	1a c0       	rjmp	.+52     	; 0xd24 <linje+0x2c2>
		}
	}
	else if(output==0){
     cf0:	67 2b       	or	r22, r23
     cf2:	c1 f4       	brne	.+48     	; 0xd24 <linje+0x2c2>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     cf4:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     cf6:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left / RGB_slow;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     cf8:	80 91 6b 01 	lds	r24, 0x016B
     cfc:	90 91 6c 01 	lds	r25, 0x016C
     d00:	60 91 19 01 	lds	r22, 0x0119
     d04:	70 91 1a 01 	lds	r23, 0x011A
     d08:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     d0c:	67 bd       	out	0x27, r22	; 39
		motor_right = right / RGB_slow;
     d0e:	80 91 69 01 	lds	r24, 0x0169
     d12:	90 91 6a 01 	lds	r25, 0x016A
     d16:	60 91 19 01 	lds	r22, 0x0119
     d1a:	70 91 1a 01 	lds	r23, 0x011A
     d1e:	0e 94 a2 10 	call	0x2144	; 0x2144 <__divmodhi4>
     d22:	68 bd       	out	0x28, r22	; 40
	}
}
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	cf 90       	pop	r12
     d2c:	bf 90       	pop	r11
     d2e:	af 90       	pop	r10
     d30:	9f 90       	pop	r9
     d32:	8f 90       	pop	r8
     d34:	7f 90       	pop	r7
     d36:	6f 90       	pop	r6
     d38:	5f 90       	pop	r5
     d3a:	4f 90       	pop	r4
     d3c:	08 95       	ret

00000d3e <linje_main>:
int RGB_slow = 1;
int RGB_force = 0;

void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	RGB_slow = 1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	90 93 1a 01 	sts	0x011A, r25
     d46:	80 93 19 01 	sts	0x0119, r24
	/*if(distans_fram<34){
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
		PORTD |= (1 << PD1);
		PORTD |= (1 << PD0);
	}
	else*/ if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     d4a:	80 91 ad 01 	lds	r24, 0x01AD
     d4e:	81 50       	subi	r24, 0x01	; 1
     d50:	83 30       	cpi	r24, 0x03	; 3
     d52:	c0 f4       	brcc	.+48     	; 0xd84 <linje_main+0x46>
		current_position=linje_RGBsveng();
     d54:	79 da       	rcall	.-2830   	; 0x248 <linje_RGBsveng>
     d56:	68 2f       	mov	r22, r24
     d58:	88 0f       	add	r24, r24
     d5a:	77 0b       	sbc	r23, r23
     d5c:	88 0b       	sbc	r24, r24
     d5e:	99 0b       	sbc	r25, r25
     d60:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     d64:	60 93 2c 01 	sts	0x012C, r22
     d68:	70 93 2d 01 	sts	0x012D, r23
     d6c:	80 93 2e 01 	sts	0x012E, r24
     d70:	90 93 2f 01 	sts	0x012F, r25
		RGB_slow = 2;
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	90 93 1a 01 	sts	0x011A, r25
     d7c:	80 93 19 01 	sts	0x0119, r24
		linje();
     d80:	70 ce       	rjmp	.-800    	; 0xa62 <linje>
     d82:	08 95       	ret
	}
	else if(detect_goal()){
     d84:	54 db       	rcall	.-2392   	; 0x42e <detect_goal>
     d86:	88 23       	and	r24, r24
     d88:	b9 f0       	breq	.+46     	; 0xdb8 <linje_main+0x7a>
		//kör rakt fram tills paserat mål förhoppnngsvis
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     d8a:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     d8c:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left;
     d8e:	80 91 6b 01 	lds	r24, 0x016B
     d92:	87 bd       	out	0x27, r24	; 39
		motor_right = right;
     d94:	80 91 69 01 	lds	r24, 0x0169
     d98:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d9a:	2f ef       	ldi	r18, 0xFF	; 255
     d9c:	8f ef       	ldi	r24, 0xFF	; 255
     d9e:	91 e1       	ldi	r25, 0x11	; 17
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	80 40       	sbci	r24, 0x00	; 0
     da4:	90 40       	sbci	r25, 0x00	; 0
     da6:	e1 f7       	brne	.-8      	; 0xda0 <linje_main+0x62>
     da8:	00 c0       	rjmp	.+0      	; 0xdaa <linje_main+0x6c>
     daa:	00 00       	nop
		_delay_ms(400);
		start=0;
     dac:	10 92 6e 01 	sts	0x016E, r1
     db0:	10 92 6d 01 	sts	0x016D, r1
		PORTD |= (1 << PD1);
     db4:	59 9a       	sbi	0x0b, 1	; 11
     db6:	08 95       	ret
		//signalera i mål och stanna
	}
	else if(detect_labyrint()){
     db8:	a7 db       	rcall	.-2226   	; 0x508 <detect_labyrint>
     dba:	88 23       	and	r24, r24
     dbc:	31 f0       	breq	.+12     	; 0xdca <linje_main+0x8c>
		PORTD |= (1 << PD0);
     dbe:	58 9a       	sbi	0x0b, 0	; 11
		//start = 0;
		regulator_mode=0; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
     dc0:	10 92 1c 01 	sts	0x011C, r1
     dc4:	10 92 1b 01 	sts	0x011B, r1
     dc8:	08 95       	ret
	}
	else{
		current_position=linje_get_error();
     dca:	91 d9       	rcall	.-3294   	; 0xee <linje_get_error>
     dcc:	bc 01       	movw	r22, r24
     dce:	99 0f       	add	r25, r25
     dd0:	88 0b       	sbc	r24, r24
     dd2:	99 0b       	sbc	r25, r25
     dd4:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__floatsisf>
     dd8:	60 93 2c 01 	sts	0x012C, r22
     ddc:	70 93 2d 01 	sts	0x012D, r23
     de0:	80 93 2e 01 	sts	0x012E, r24
     de4:	90 93 2f 01 	sts	0x012F, r25
		linje();
     de8:	3c ce       	rjmp	.-904    	; 0xa62 <linje>
     dea:	08 95       	ret

00000dec <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     dec:	84 b5       	in	r24, 0x24	; 36
     dee:	83 6a       	ori	r24, 0xA3	; 163
     df0:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     df2:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     df4:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     df6:	85 b5       	in	r24, 0x25	; 37
     df8:	83 60       	ori	r24, 0x03	; 3
     dfa:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     dfc:	88 e7       	ldi	r24, 0x78	; 120
     dfe:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     e00:	85 b1       	in	r24, 0x05	; 5
     e02:	15 b8       	out	0x05, r1	; 5
     e04:	08 95       	ret

00000e06 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     e06:	83 e0       	ldi	r24, 0x03	; 3
     e08:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     e0a:	e1 e8       	ldi	r30, 0x81	; 129
     e0c:	f0 e0       	ldi	r31, 0x00	; 0
     e0e:	80 81       	ld	r24, Z
     e10:	8d 60       	ori	r24, 0x0D	; 13
     e12:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     e14:	80 ea       	ldi	r24, 0xA0	; 160
     e16:	95 e0       	ldi	r25, 0x05	; 5
     e18:	90 93 89 00 	sts	0x0089, r25
     e1c:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     e20:	ef e6       	ldi	r30, 0x6F	; 111
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	82 60       	ori	r24, 0x02	; 2
     e28:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     e2a:	b1 9a       	sbi	0x16, 1	; 22
     e2c:	08 95       	ret

00000e2e <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	8f 93       	push	r24
     e3a:	9f 93       	push	r25
	//regler_ready=1;
	
	
	updaterad_labyrint = true;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	80 93 60 01 	sts	0x0160, r24
	counter_timer_line_lab++;
     e42:	80 91 65 01 	lds	r24, 0x0165
     e46:	90 91 66 01 	lds	r25, 0x0166
     e4a:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_lab >= 50){
     e4c:	82 33       	cpi	r24, 0x32	; 50
     e4e:	91 05       	cpc	r25, r1
     e50:	2c f4       	brge	.+10     	; 0xe5c <__vector_13+0x2e>
ISR(TIMER1_COMPA_vect){
	//regler_ready=1;
	
	
	updaterad_labyrint = true;
	counter_timer_line_lab++;
     e52:	90 93 66 01 	sts	0x0166, r25
     e56:	80 93 65 01 	sts	0x0165, r24
     e5a:	06 c0       	rjmp	.+12     	; 0xe68 <__vector_13+0x3a>
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
     e5c:	82 e3       	ldi	r24, 0x32	; 50
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	90 93 66 01 	sts	0x0166, r25
     e64:	80 93 65 01 	sts	0x0165, r24
	}
	counter_timer_line_RGB++;
     e68:	80 91 67 01 	lds	r24, 0x0167
     e6c:	90 91 68 01 	lds	r25, 0x0168
     e70:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_RGB >= 50){			
     e72:	82 33       	cpi	r24, 0x32	; 50
     e74:	91 05       	cpc	r25, r1
     e76:	2c f4       	brge	.+10     	; 0xe82 <__vector_13+0x54>
	updaterad_labyrint = true;
	counter_timer_line_lab++;
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
	}
	counter_timer_line_RGB++;
     e78:	90 93 68 01 	sts	0x0168, r25
     e7c:	80 93 67 01 	sts	0x0167, r24
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <__vector_13+0x60>
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
     e82:	82 e3       	ldi	r24, 0x32	; 50
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	90 93 68 01 	sts	0x0168, r25
     e8a:	80 93 67 01 	sts	0x0167, r24
	}
	counter_timer_line_goal++;
     e8e:	80 91 63 01 	lds	r24, 0x0163
     e92:	90 91 64 01 	lds	r25, 0x0164
     e96:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_goal >= 50)
     e98:	82 33       	cpi	r24, 0x32	; 50
     e9a:	91 05       	cpc	r25, r1
     e9c:	2c f4       	brge	.+10     	; 0xea8 <__vector_13+0x7a>
	}
	counter_timer_line_RGB++;
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
	}
	counter_timer_line_goal++;
     e9e:	90 93 64 01 	sts	0x0164, r25
     ea2:	80 93 63 01 	sts	0x0163, r24
     ea6:	06 c0       	rjmp	.+12     	; 0xeb4 <__vector_13+0x86>
	if(counter_timer_line_goal >= 50)
		counter_timer_line_goal = 50;
     ea8:	82 e3       	ldi	r24, 0x32	; 50
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	90 93 64 01 	sts	0x0164, r25
     eb0:	80 93 63 01 	sts	0x0163, r24
		
	//count_waypoint++;			//räknare för att köra ur svängar i labyrinter
}
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	0f 90       	pop	r0
     eba:	0f be       	out	0x3f, r0	; 63
     ebc:	0f 90       	pop	r0
     ebe:	1f 90       	pop	r1
     ec0:	18 95       	reti

00000ec2 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     ec2:	8d b3       	in	r24, 0x1d	; 29
     ec4:	86 60       	ori	r24, 0x06	; 6
     ec6:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     ec8:	e9 e6       	ldi	r30, 0x69	; 105
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 62       	ori	r24, 0x28	; 40
     ed0:	80 83       	st	Z, r24
     ed2:	08 95       	ret

00000ed4 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     ed4:	1f 92       	push	r1
     ed6:	0f 92       	push	r0
     ed8:	0f b6       	in	r0, 0x3f	; 63
     eda:	0f 92       	push	r0
     edc:	11 24       	eor	r1, r1
     ede:	8f 93       	push	r24
     ee0:	9f 93       	push	r25
	if(drive_mode==1){
     ee2:	80 91 6f 01 	lds	r24, 0x016F
     ee6:	90 91 70 01 	lds	r25, 0x0170
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	39 f4       	brne	.+14     	; 0xefc <__vector_2+0x28>
		drive_mode=0;
     eee:	10 92 70 01 	sts	0x0170, r1
     ef2:	10 92 6f 01 	sts	0x016F, r1
		PORTD |= (1 << PD1);
     ef6:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     ef8:	58 98       	cbi	0x0b, 0	; 11
     efa:	0c c0       	rjmp	.+24     	; 0xf14 <__vector_2+0x40>
	}
	else{
		start=0;
     efc:	10 92 6e 01 	sts	0x016E, r1
     f00:	10 92 6d 01 	sts	0x016D, r1
		drive_mode=1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	90 93 70 01 	sts	0x0170, r25
     f0c:	80 93 6f 01 	sts	0x016F, r24
		PORTD |= (1 << PD0);
     f10:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     f12:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     f14:	e1 9a       	sbi	0x1c, 1	; 28
}
     f16:	9f 91       	pop	r25
     f18:	8f 91       	pop	r24
     f1a:	0f 90       	pop	r0
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	0f 90       	pop	r0
     f20:	1f 90       	pop	r1
     f22:	18 95       	reti

00000f24 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     f24:	1f 92       	push	r1
     f26:	0f 92       	push	r0
     f28:	0f b6       	in	r0, 0x3f	; 63
     f2a:	0f 92       	push	r0
     f2c:	11 24       	eor	r1, r1
     f2e:	8f 93       	push	r24
     f30:	9f 93       	push	r25
	if(start==0){
     f32:	80 91 6d 01 	lds	r24, 0x016D
     f36:	90 91 6e 01 	lds	r25, 0x016E
     f3a:	89 2b       	or	r24, r25
     f3c:	39 f4       	brne	.+14     	; 0xf4c <__vector_3+0x28>
		start=1;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	90 93 6e 01 	sts	0x016E, r25
     f46:	80 93 6d 01 	sts	0x016D, r24
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <__vector_3+0x30>
	}
	else{
		start=0;
     f4c:	10 92 6e 01 	sts	0x016E, r1
     f50:	10 92 6d 01 	sts	0x016D, r1
	}
	EIFR |= (1<< INTF2);
     f54:	e2 9a       	sbi	0x1c, 2	; 28
}
     f56:	9f 91       	pop	r25
     f58:	8f 91       	pop	r24
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     f64:	88 23       	and	r24, r24
     f66:	69 f0       	breq	.+26     	; 0xf82 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     f68:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     f6a:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     f6c:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     f6e:	e9 e6       	ldi	r30, 0x69	; 105
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	83 60       	ori	r24, 0x03	; 3
     f76:	80 83       	st	Z, r24
		TWBR = 0x10;
     f78:	80 e1       	ldi	r24, 0x10	; 16
     f7a:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     f7e:	10 92 b9 00 	sts	0x00B9, r1
     f82:	08 95       	ret

00000f84 <i2c_send>:
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     f84:	8f 92       	push	r8
     f86:	9f 92       	push	r9
     f88:	af 92       	push	r10
     f8a:	bf 92       	push	r11
     f8c:	cf 92       	push	r12
     f8e:	df 92       	push	r13
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     f9c:	eb 01       	movw	r28, r22
     f9e:	08 81       	ld	r16, Y
     fa0:	02 95       	swap	r16
     fa2:	0f 70       	andi	r16, 0x0F	; 15
     fa4:	10 e0       	ldi	r17, 0x00	; 0
     fa6:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     fa8:	68 94       	set
     faa:	ee 24       	eor	r14, r14
     fac:	e3 f8       	bld	r14, 3
     fae:	f1 2c       	mov	r15, r1
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     fb0:	40 e0       	ldi	r20, 0x00	; 0
     fb2:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     fb4:	ec eb       	ldi	r30, 0xBC	; 188
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	0f 2e       	mov	r0, r31
     fba:	f4 ea       	ldi	r31, 0xA4	; 164
     fbc:	df 2e       	mov	r13, r31
     fbe:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     fc0:	a9 eb       	ldi	r26, 0xB9	; 185
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     fc4:	8e 7f       	andi	r24, 0xFE	; 254
     fc6:	c8 2e       	mov	r12, r24
     fc8:	6b eb       	ldi	r22, 0xBB	; 187
     fca:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     fcc:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     fce:	68 94       	set
     fd0:	aa 24       	eor	r10, r10
     fd2:	a4 f8       	bld	r10, 4
     fd4:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     fd6:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     fd8:	90 81       	ld	r25, Z
     fda:	99 23       	and	r25, r25
     fdc:	ec f7       	brge	.-6      	; 0xfd8 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     fde:	2c 91       	ld	r18, X
     fe0:	28 7f       	andi	r18, 0xF8	; 248
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	2e 15       	cp	r18, r14
     fe6:	3f 05       	cpc	r19, r15
     fe8:	69 f5       	brne	.+90     	; 0x1044 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     fea:	eb 01       	movw	r28, r22
     fec:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     fee:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
     ff0:	90 81       	ld	r25, Z
     ff2:	99 23       	and	r25, r25
     ff4:	ec f7       	brge	.-6      	; 0xff0 <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
     ff6:	9c 91       	ld	r25, X
     ff8:	98 7f       	andi	r25, 0xF8	; 248
     ffa:	98 31       	cpi	r25, 0x18	; 24
     ffc:	29 f0       	breq	.+10     	; 0x1008 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     ffe:	84 e9       	ldi	r24, 0x94	; 148
    1000:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	1f c0       	rjmp	.+62     	; 0x1046 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
    1008:	e4 01       	movw	r28, r8
    100a:	99 91       	ld	r25, Y+
    100c:	4e 01       	movw	r8, r28
    100e:	eb 01       	movw	r28, r22
    1010:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
    1012:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
    1014:	90 81       	ld	r25, Z
    1016:	99 23       	and	r25, r25
    1018:	ec f7       	brge	.-6      	; 0x1014 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
    101a:	9c 91       	ld	r25, X
    101c:	98 7f       	andi	r25, 0xF8	; 248
    101e:	98 32       	cpi	r25, 0x28	; 40
    1020:	29 f0       	breq	.+10     	; 0x102c <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1022:	84 e9       	ldi	r24, 0x94	; 148
    1024:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0d c0       	rjmp	.+26     	; 0x1046 <i2c_send+0xc2>
	}
	counter++;
    102c:	4f 5f       	subi	r20, 0xFF	; 255
    102e:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
    1030:	ea 2c       	mov	r14, r10
    1032:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
    1034:	04 17       	cp	r16, r20
    1036:	15 07       	cpc	r17, r21
    1038:	74 f6       	brge	.-100    	; 0xfd6 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
    103a:	84 e9       	ldi	r24, 0x94	; 148
    103c:	80 93 bc 00 	sts	0x00BC, r24
	return true;
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
    1044:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	df 90       	pop	r13
    1054:	cf 90       	pop	r12
    1056:	bf 90       	pop	r11
    1058:	af 90       	pop	r10
    105a:	9f 90       	pop	r9
    105c:	8f 90       	pop	r8
    105e:	08 95       	ret

00001060 <req_gyro_turn>:
int gyro_left = 0;
int gyro_right = 0;
int laby_left_speed = 100;
int laby_right_speed = 93;

void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	1f 92       	push	r1
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	byte data[1] = { 0x07 };
    106a:	87 e0       	ldi	r24, 0x07	; 7
    106c:	89 83       	std	Y+1, r24	; 0x01
	i2c_send(0x06, data);
    106e:	be 01       	movw	r22, r28
    1070:	6f 5f       	subi	r22, 0xFF	; 255
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	86 e0       	ldi	r24, 0x06	; 6
    1076:	86 df       	rcall	.-244    	; 0xf84 <i2c_send>
	turning = true;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	80 93 5f 01 	sts	0x015F, r24
    107e:	2f ef       	ldi	r18, 0xFF	; 255
    1080:	8f e7       	ldi	r24, 0x7F	; 127
    1082:	94 e0       	ldi	r25, 0x04	; 4
    1084:	21 50       	subi	r18, 0x01	; 1
    1086:	80 40       	sbci	r24, 0x00	; 0
    1088:	90 40       	sbci	r25, 0x00	; 0
    108a:	e1 f7       	brne	.-8      	; 0x1084 <req_gyro_turn+0x24>
    108c:	00 c0       	rjmp	.+0      	; 0x108e <req_gyro_turn+0x2e>
    108e:	00 00       	nop
	_delay_ms(100);
}
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <manual_drive>:
//Funktioner fÃ¶r att styra robot fÃ¶r hÃ¶ger/vÃ¤nster eller framÃ¥t
//--------------------------------------------------------------

void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
    1098:	20 91 53 01 	lds	r18, 0x0153
    109c:	30 91 54 01 	lds	r19, 0x0154
    10a0:	21 30       	cpi	r18, 0x01	; 1
    10a2:	31 05       	cpc	r19, r1
    10a4:	49 f4       	brne	.+18     	; 0x10b8 <manual_drive+0x20>
				req_gyro_turn();											// Request gyroturn
				turn_left();												// Turn motors on for left spin						
				gyro_left = 1;												
			}
			else if(gyro_left == 1){					// 90 turn done
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
    10a6:	10 92 56 01 	sts	0x0156, r1
    10aa:	10 92 55 01 	sts	0x0155, r1
				gyro_left = 0;
    10ae:	10 92 54 01 	sts	0x0154, r1
    10b2:	10 92 53 01 	sts	0x0153, r1
    10b6:	08 95       	ret
void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
			manual_function = 6;
		}
		else if(gyro_right == 1){
    10b8:	80 91 51 01 	lds	r24, 0x0151
    10bc:	90 91 52 01 	lds	r25, 0x0152
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	71 f4       	brne	.+28     	; 0x10e0 <manual_drive+0x48>
			manual_function = 5;	
    10c4:	85 e0       	ldi	r24, 0x05	; 5
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	90 93 56 01 	sts	0x0156, r25
    10cc:	80 93 55 01 	sts	0x0155, r24
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    10d0:	80 91 51 01 	lds	r24, 0x0151
    10d4:	90 91 52 01 	lds	r25, 0x0152
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	09 f0       	breq	.+2      	; 0x10de <manual_drive+0x46>
    10dc:	59 c0       	rjmp	.+178    	; 0x1190 <manual_drive+0xf8>
    10de:	4f c0       	rjmp	.+158    	; 0x117e <manual_drive+0xe6>
		}
		else if(gyro_right == 1){
			manual_function = 5;	
		}
		//*******************************
		if(manual_function == 0){											// Stand still = dont dare to move
    10e0:	80 91 55 01 	lds	r24, 0x0155
    10e4:	90 91 56 01 	lds	r25, 0x0156
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <manual_drive+0x5e>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10ec:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10ee:	2d 98       	cbi	0x05, 5	; 5
			motor_left = 0;
    10f0:	17 bc       	out	0x27, r1	; 39
			motor_right = 0;
    10f2:	18 bc       	out	0x28, r1	; 40
    10f4:	08 95       	ret
		}
		else if(manual_function == 1){										// Forward
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	91 05       	cpc	r25, r1
    10fa:	49 f4       	brne	.+18     	; 0x110e <manual_drive+0x76>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10fc:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10fe:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    1100:	80 91 6b 01 	lds	r24, 0x016B
    1104:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    1106:	80 91 69 01 	lds	r24, 0x0169
    110a:	88 bd       	out	0x28, r24	; 40
    110c:	08 95       	ret
		}
		else if(manual_function == 2){										// Backward
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	91 05       	cpc	r25, r1
    1112:	59 f4       	brne	.+22     	; 0x112a <manual_drive+0x92>
			PORTB |= (1 << motor_dir_left) | (1 << motor_dir_right);		// Set motor direction to backward
    1114:	85 b1       	in	r24, 0x05	; 5
    1116:	80 66       	ori	r24, 0x60	; 96
    1118:	85 b9       	out	0x05, r24	; 5
			motor_left = left-13;											// -n for adjusting so the motors "speed" are the same :D :D  ***Change depends on speed :D***
    111a:	80 91 6b 01 	lds	r24, 0x016B
    111e:	8d 50       	subi	r24, 0x0D	; 13
    1120:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    1122:	80 91 69 01 	lds	r24, 0x0169
    1126:	88 bd       	out	0x28, r24	; 40
    1128:	08 95       	ret
		}
		else if(manual_function == 3){										// Rightforward
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	91 05       	cpc	r25, r1
    112e:	81 f4       	brne	.+32     	; 0x1150 <manual_drive+0xb8>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    1130:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1132:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    1134:	80 91 6b 01 	lds	r24, 0x016B
    1138:	87 bd       	out	0x27, r24	; 39
			motor_right = (right - (right/3));								// Speed value minus one third of the speedvalue
    113a:	20 91 69 01 	lds	r18, 0x0169
    113e:	90 91 6a 01 	lds	r25, 0x016A
    1142:	82 2f       	mov	r24, r18
    1144:	63 e0       	ldi	r22, 0x03	; 3
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	fd d7       	rcall	.+4090   	; 0x2144 <__divmodhi4>
    114a:	26 1b       	sub	r18, r22
    114c:	28 bd       	out	0x28, r18	; 40
    114e:	08 95       	ret
		}
		else if(manual_function == 4){										// Leftforward
    1150:	84 30       	cpi	r24, 0x04	; 4
    1152:	91 05       	cpc	r25, r1
    1154:	81 f4       	brne	.+32     	; 0x1176 <manual_drive+0xde>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    1156:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1158:	2d 98       	cbi	0x05, 5	; 5
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
    115a:	20 91 6b 01 	lds	r18, 0x016B
    115e:	90 91 6c 01 	lds	r25, 0x016C
    1162:	82 2f       	mov	r24, r18
    1164:	63 e0       	ldi	r22, 0x03	; 3
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	ed d7       	rcall	.+4058   	; 0x2144 <__divmodhi4>
    116a:	26 1b       	sub	r18, r22
    116c:	27 bd       	out	0x27, r18	; 39
			motor_right = right;
    116e:	80 91 69 01 	lds	r24, 0x0169
    1172:	88 bd       	out	0x28, r24	; 40
    1174:	08 95       	ret
		}
		else if(manual_function == 5){										// Spin right
    1176:	85 30       	cpi	r24, 0x05	; 5
    1178:	91 05       	cpc	r25, r1
    117a:	a9 f4       	brne	.+42     	; 0x11a6 <manual_drive+0x10e>
    117c:	26 c0       	rjmp	.+76     	; 0x11ca <manual_drive+0x132>
			if(gyro_right == 0){											// Only once when pressed
				req_gyro_turn();											// Request gyroturn
    117e:	70 df       	rcall	.-288    	; 0x1060 <req_gyro_turn>
				turn_right();												// Turn motors on for left spin	
    1180:	ed d9       	rcall	.-3110   	; 0x55c <turn_right>
				gyro_right = 1; 
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	90 93 52 01 	sts	0x0152, r25
    118a:	80 93 51 01 	sts	0x0151, r24
    118e:	08 95       	ret
			}
			else if(gyro_right == 1){				// 90 turn done
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	09 f5       	brne	.+66     	; 0x11d6 <manual_drive+0x13e>
				manual_function = 0;										// kan behÃ¶vas nollstÃ¤llning av funktion (probably not)
    1194:	10 92 56 01 	sts	0x0156, r1
    1198:	10 92 55 01 	sts	0x0155, r1
				gyro_right = 0;												
    119c:	10 92 52 01 	sts	0x0152, r1
    11a0:	10 92 51 01 	sts	0x0151, r1
    11a4:	08 95       	ret
			}
		}
		else if(manual_function == 6){										// Spin left
    11a6:	06 97       	sbiw	r24, 0x06	; 6
    11a8:	59 f4       	brne	.+22     	; 0x11c0 <manual_drive+0x128>
			if(gyro_left == 0){												// Only once when pressed
    11aa:	23 2b       	or	r18, r19
    11ac:	a1 f4       	brne	.+40     	; 0x11d6 <manual_drive+0x13e>
				req_gyro_turn();											// Request gyroturn
    11ae:	58 df       	rcall	.-336    	; 0x1060 <req_gyro_turn>
				turn_left();												// Turn motors on for left spin						
    11b0:	ce d9       	rcall	.-3172   	; 0x54e <turn_left>
				gyro_left = 1;												
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	90 93 54 01 	sts	0x0154, r25
    11ba:	80 93 53 01 	sts	0x0153, r24
    11be:	08 95       	ret
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
				gyro_left = 0;
			}
		}
		else{
			manual_function=0;												// why not :D 
    11c0:	10 92 56 01 	sts	0x0156, r1
    11c4:	10 92 55 01 	sts	0x0155, r1
    11c8:	08 95       	ret
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    11ca:	80 91 51 01 	lds	r24, 0x0151
    11ce:	90 91 52 01 	lds	r25, 0x0152
    11d2:	89 2b       	or	r24, r25
    11d4:	a1 f2       	breq	.-88     	; 0x117e <manual_drive+0xe6>
    11d6:	08 95       	ret

000011d8 <waypoint_lab>:


//-------------------------------------
//Funktioner som kommer styra roboten vid specialfall som tillexempel t-korsning eller en vanlig sväng
//-------------------------------------
void waypoint_lab(int distance_left,int distance_right,int distance_front,int st_value){ //t-korsning 
    11d8:	fc 01       	movw	r30, r24
	//PORTD ^= ( 1 << PD1 );
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    11da:	90 91 49 01 	lds	r25, 0x0149
    11de:	91 11       	cpse	r25, r1
    11e0:	40 c0       	rjmp	.+128    	; 0x1262 <waypoint_lab+0x8a>
    11e2:	80 91 06 01 	lds	r24, 0x0106
    11e6:	90 91 07 01 	lds	r25, 0x0107
    11ea:	84 17       	cp	r24, r20
    11ec:	95 07       	cpc	r25, r21
    11ee:	24 f4       	brge	.+8      	; 0x11f8 <waypoint_lab+0x20>
		drive_forward();
    11f0:	a5 d9       	rcall	.-3254   	; 0x53c <drive_forward>
		turn_done = false;
    11f2:	10 92 48 01 	sts	0x0148, r1
    11f6:	08 95       	ret
	}
	
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		ongoing_turn = true;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	80 93 49 01 	sts	0x0149, r24
		start_turn = true;
    11fe:	80 93 4a 01 	sts	0x014A, r24
		turn_done = false;
    1202:	10 92 48 01 	sts	0x0148, r1
		stand_still();
    1206:	95 c9       	rjmp	.-3286   	; 0x532 <stand_still>
    1208:	08 95       	ret
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
		
		if(RGB_data == 3){					//RGB_data="blå" alltså sväng vänster vänster=blå
    120a:	80 91 ad 01 	lds	r24, 0x01AD
    120e:	83 30       	cpi	r24, 0x03	; 3
    1210:	19 f4       	brne	.+6      	; 0x1218 <waypoint_lab+0x40>
			req_gyro_turn();
    1212:	26 df       	rcall	.-436    	; 0x1060 <req_gyro_turn>
			turn_left();
    1214:	9c d9       	rcall	.-3272   	; 0x54e <turn_left>
    1216:	02 c0       	rjmp	.+4      	; 0x121c <waypoint_lab+0x44>
		}
		else {
			req_gyro_turn();
    1218:	23 df       	rcall	.-442    	; 0x1060 <req_gyro_turn>
			turn_right();					//RGB_data="röd" alltså sväng höger
    121a:	a0 d9       	rcall	.-3264   	; 0x55c <turn_right>
		}
		start_turn = false;					//Säger att svängen har inledits för att inte gå in i den här if-satsen igen
    121c:	10 92 4a 01 	sts	0x014A, r1
    1220:	08 95       	ret
	}
	
	else if(ongoing_turn && !turning && (distance_left > st_value || distance_right > st_value)){	//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    1222:	80 91 5f 01 	lds	r24, 0x015F
    1226:	81 11       	cpse	r24, r1
    1228:	0b c0       	rjmp	.+22     	; 0x1240 <waypoint_lab+0x68>
    122a:	2e 17       	cp	r18, r30
    122c:	3f 07       	cpc	r19, r31
    122e:	1c f0       	brlt	.+6      	; 0x1236 <waypoint_lab+0x5e>
    1230:	26 17       	cp	r18, r22
    1232:	37 07       	cpc	r19, r23
    1234:	2c f4       	brge	.+10     	; 0x1240 <waypoint_lab+0x68>
		turn_done = true;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	80 93 48 01 	sts	0x0148, r24
		//count_waypoint = 0;
		drive_forward(); // Byt till att reglera mot vägg
    123c:	7f c9       	rjmp	.-3330   	; 0x53c <drive_forward>
    123e:	08 95       	ret
	}
	
	else if(ongoing_turn && turn_done && distance_right < st_value && distance_left < st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1240:	80 91 48 01 	lds	r24, 0x0148
    1244:	88 23       	and	r24, r24
    1246:	91 f0       	breq	.+36     	; 0x126c <waypoint_lab+0x94>
    1248:	62 17       	cp	r22, r18
    124a:	73 07       	cpc	r23, r19
    124c:	7c f4       	brge	.+30     	; 0x126c <waypoint_lab+0x94>
    124e:	e2 17       	cp	r30, r18
    1250:	f3 07       	cpc	r31, r19
    1252:	64 f4       	brge	.+24     	; 0x126c <waypoint_lab+0x94>
		waypoint = false;						
    1254:	10 92 3f 01 	sts	0x013F, r1
		ongoing_turn = false;
    1258:	10 92 49 01 	sts	0x0149, r1
		prepare_special_case = false;
    125c:	10 92 46 01 	sts	0x0146, r1
    1260:	08 95       	ret
		start_turn = true;
		turn_done = false;
		stand_still();
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
    1262:	80 91 4a 01 	lds	r24, 0x014A
    1266:	81 11       	cpse	r24, r1
    1268:	d0 cf       	rjmp	.-96     	; 0x120a <waypoint_lab+0x32>
    126a:	db cf       	rjmp	.-74     	; 0x1222 <waypoint_lab+0x4a>
    126c:	08 95       	ret

0000126e <oneway_turn_lab>:
		ongoing_turn = false;
		prepare_special_case = false;
	}
}

void oneway_turn_lab(int distance_left,int distance_right,int distance_front,int st_value){//roboten kommer fram till en enkel kurva antingen till höger eller vänster
    126e:	0f 93       	push	r16
    1270:	1f 93       	push	r17
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ec 01       	movw	r28, r24
    1278:	8b 01       	movw	r16, r22
	PORTD ^= ( 1 << PD0 );
    127a:	8b b1       	in	r24, 0x0b	; 11
    127c:	91 e0       	ldi	r25, 0x01	; 1
    127e:	98 27       	eor	r25, r24
    1280:	9b b9       	out	0x0b, r25	; 11
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    1282:	80 91 49 01 	lds	r24, 0x0149
    1286:	81 11       	cpse	r24, r1
    1288:	14 c0       	rjmp	.+40     	; 0x12b2 <oneway_turn_lab+0x44>
    128a:	80 91 06 01 	lds	r24, 0x0106
    128e:	90 91 07 01 	lds	r25, 0x0107
    1292:	84 17       	cp	r24, r20
    1294:	95 07       	cpc	r25, r21
    1296:	24 f4       	brge	.+8      	; 0x12a0 <oneway_turn_lab+0x32>
		drive_forward();
    1298:	51 d9       	rcall	.-3422   	; 0x53c <drive_forward>
		turn_done = false;
    129a:	10 92 48 01 	sts	0x0148, r1
    129e:	4d c0       	rjmp	.+154    	; 0x133a <oneway_turn_lab+0xcc>
	}
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		turn_done = false;
    12a0:	10 92 48 01 	sts	0x0148, r1
		ongoing_turn = true;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	80 93 49 01 	sts	0x0149, r24
		start_turn = true;
    12aa:	80 93 4a 01 	sts	0x014A, r24
		stand_still();
    12ae:	41 d9       	rcall	.-3454   	; 0x532 <stand_still>
    12b0:	44 c0       	rjmp	.+136    	; 0x133a <oneway_turn_lab+0xcc>
	}
	else if(start_turn){	
    12b2:	80 91 4a 01 	lds	r24, 0x014A
    12b6:	88 23       	and	r24, r24
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <oneway_turn_lab+0x80>
		start_turn = false;									//Roboten är inne i kurvan och redo o svänga 
    12ba:	10 92 4a 01 	sts	0x014A, r1
		if(distance_left > st_value){						//Kollar avstånd till höger och vänster för att -												//se vilket håll det ska svängas och inleder sedan sväng
    12be:	2c 17       	cp	r18, r28
    12c0:	3d 07       	cpc	r19, r29
    12c2:	4c f4       	brge	.+18     	; 0x12d6 <oneway_turn_lab+0x68>
			req_gyro_turn();
    12c4:	cd de       	rcall	.-614    	; 0x1060 <req_gyro_turn>
			turn_left();
    12c6:	43 d9       	rcall	.-3450   	; 0x54e <turn_left>
			regulate_side = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	90 93 41 01 	sts	0x0141, r25
    12d0:	80 93 40 01 	sts	0x0140, r24
    12d4:	32 c0       	rjmp	.+100    	; 0x133a <oneway_turn_lab+0xcc>
		}
		else if(distance_right > st_value){
    12d6:	26 17       	cp	r18, r22
    12d8:	37 07       	cpc	r19, r23
    12da:	7c f5       	brge	.+94     	; 0x133a <oneway_turn_lab+0xcc>
			req_gyro_turn();
    12dc:	c1 de       	rcall	.-638    	; 0x1060 <req_gyro_turn>
			turn_right();
    12de:	3e d9       	rcall	.-3460   	; 0x55c <turn_right>
			regulate_side = 2;
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	90 93 41 01 	sts	0x0141, r25
    12e8:	80 93 40 01 	sts	0x0140, r24
    12ec:	26 c0       	rjmp	.+76     	; 0x133a <oneway_turn_lab+0xcc>
		//previous_right = 0;
		//previous_left = 0;
		//return;
	}
	
	else if(ongoing_turn && !turn_done && (distance_left > st_value || distance_right > st_value)){					//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    12ee:	80 91 48 01 	lds	r24, 0x0148
    12f2:	81 11       	cpse	r24, r1
    12f4:	22 c0       	rjmp	.+68     	; 0x133a <oneway_turn_lab+0xcc>
    12f6:	2c 17       	cp	r18, r28
    12f8:	3d 07       	cpc	r19, r29
    12fa:	1c f0       	brlt	.+6      	; 0x1302 <oneway_turn_lab+0x94>
    12fc:	26 17       	cp	r18, r22
    12fe:	37 07       	cpc	r19, r23
    1300:	6c f4       	brge	.+26     	; 0x131c <oneway_turn_lab+0xae>
		//count_waypoint = 0; //oneway_turn
		//gyro_turn = 0;
		if(regulate_side == 1)
    1302:	80 91 40 01 	lds	r24, 0x0140
    1306:	90 91 41 01 	lds	r25, 0x0141
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	21 f4       	brne	.+8      	; 0x1316 <oneway_turn_lab+0xa8>
			drive_forward_right(distance_right, distance_front);
    130e:	ba 01       	movw	r22, r20
    1310:	c8 01       	movw	r24, r16
    1312:	fb da       	rcall	.-2570   	; 0x90a <drive_forward_right>
    1314:	12 c0       	rjmp	.+36     	; 0x133a <oneway_turn_lab+0xcc>
		else 
			drive_forward_left(distance_left);	
    1316:	ce 01       	movw	r24, r28
    1318:	3f da       	rcall	.-2946   	; 0x798 <drive_forward_left>
    131a:	0f c0       	rjmp	.+30     	; 0x133a <oneway_turn_lab+0xcc>
		//drive_forward(); // Byt till left eller right beroende på riktning
	}
	
	else if(!turn_done && distance_left < st_value && distance_right < st_value /*&& previous_left < st_value && previous_right < st_value*/){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    131c:	c2 17       	cp	r28, r18
    131e:	d3 07       	cpc	r29, r19
    1320:	64 f4       	brge	.+24     	; 0x133a <oneway_turn_lab+0xcc>
    1322:	62 17       	cp	r22, r18
    1324:	73 07       	cpc	r23, r19
    1326:	4c f4       	brge	.+18     	; 0x133a <oneway_turn_lab+0xcc>
		turn_done = true;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	80 93 48 01 	sts	0x0148, r24
		oneway_turn = false;
    132e:	10 92 3e 01 	sts	0x013E, r1
		ongoing_turn = false;
    1332:	10 92 49 01 	sts	0x0149, r1
		//PORTD ^= (1 << PD0);
		prepare_special_case = false;
    1336:	10 92 46 01 	sts	0x0146, r1
	}
	previous_right = distance_right;
    133a:	10 93 45 01 	sts	0x0145, r17
    133e:	00 93 44 01 	sts	0x0144, r16
	previous_left = distance_left;
    1342:	d0 93 43 01 	sts	0x0143, r29
    1346:	c0 93 42 01 	sts	0x0142, r28
}
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	1f 91       	pop	r17
    1350:	0f 91       	pop	r16
    1352:	08 95       	ret

00001354 <twoway_turn_left_lab>:


//Måste testas
void twoway_turn_left_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram	
    1354:	0f 93       	push	r16
    1356:	1f 93       	push	r17
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	ec 01       	movw	r28, r24
    135e:	8b 01       	movw	r16, r22
	PORTD ^= (1 << PD1);
    1360:	8b b1       	in	r24, 0x0b	; 11
    1362:	92 e0       	ldi	r25, 0x02	; 2
    1364:	98 27       	eor	r25, r24
    1366:	9b b9       	out	0x0b, r25	; 11
	if(!ongoing_turn /*&& ++count_waypoint <= 1*/){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1368:	80 91 49 01 	lds	r24, 0x0149
    136c:	81 11       	cpse	r24, r1
    136e:	0b c0       	rjmp	.+22     	; 0x1386 <twoway_turn_left_lab+0x32>
		ongoing_turn = true;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 49 01 	sts	0x0149, r24
		start_turn = true;
    1376:	80 93 4a 01 	sts	0x014A, r24
		stand_still();
    137a:	db d8       	rcall	.-3658   	; 0x532 <stand_still>
		turn_done = false;
    137c:	10 92 48 01 	sts	0x0148, r1
		first_time = false;
    1380:	10 92 0c 01 	sts	0x010C, r1
    1384:	7d c0       	rjmp	.+250    	; 0x1480 <twoway_turn_left_lab+0x12c>
		//count_waypoint = 0;
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1386:	80 91 4a 01 	lds	r24, 0x014A
    138a:	88 23       	and	r24, r24
    138c:	e9 f0       	breq	.+58     	; 0x13c8 <twoway_turn_left_lab+0x74>
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    138e:	10 92 4a 01 	sts	0x014A, r1
		if(RGB_data != 3){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    1392:	80 91 ad 01 	lds	r24, 0x01AD
    1396:	83 30       	cpi	r24, 0x03	; 3
    1398:	61 f0       	breq	.+24     	; 0x13b2 <twoway_turn_left_lab+0x5e>
			drive_forward_right(distance_right, distance_front);
    139a:	ba 01       	movw	r22, r20
    139c:	c8 01       	movw	r24, r16
    139e:	b5 da       	rcall	.-2710   	; 0x90a <drive_forward_right>
			turn_done = true;
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	80 93 48 01 	sts	0x0148, r24
			regler_against_wall = true;
    13a6:	80 93 47 01 	sts	0x0147, r24
			PORTD ^= (1<<PD0);
    13aa:	9b b1       	in	r25, 0x0b	; 11
    13ac:	89 27       	eor	r24, r25
    13ae:	8b b9       	out	0x0b, r24	; 11
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <twoway_turn_left_lab+0x62>
		}
		else {						//RGB säger att roboten ska svänga vänster så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    13b2:	56 de       	rcall	.-852    	; 0x1060 <req_gyro_turn>
			turn_left();
    13b4:	cc d8       	rcall	.-3688   	; 0x54e <turn_left>
		}
			
		previous_right = 0;
    13b6:	10 92 45 01 	sts	0x0145, r1
    13ba:	10 92 44 01 	sts	0x0144, r1
		previous_left = 0;
    13be:	10 92 43 01 	sts	0x0143, r1
    13c2:	10 92 42 01 	sts	0x0142, r1
		return;
    13c6:	6b c0       	rjmp	.+214    	; 0x149e <twoway_turn_left_lab+0x14a>
	}
	
	// Rakt fram11
	else if(regler_against_wall && (distance_left > st_value )){
    13c8:	80 91 47 01 	lds	r24, 0x0147
    13cc:	88 23       	and	r24, r24
    13ce:	41 f0       	breq	.+16     	; 0x13e0 <twoway_turn_left_lab+0x8c>
    13d0:	2c 17       	cp	r18, r28
    13d2:	3d 07       	cpc	r19, r29
    13d4:	0c f0       	brlt	.+2      	; 0x13d8 <twoway_turn_left_lab+0x84>
    13d6:	5d c0       	rjmp	.+186    	; 0x1492 <twoway_turn_left_lab+0x13e>
		drive_forward_right(distance_right, distance_front);
    13d8:	ba 01       	movw	r22, r20
    13da:	c8 01       	movw	r24, r16
    13dc:	96 da       	rcall	.-2772   	; 0x90a <drive_forward_right>
    13de:	50 c0       	rjmp	.+160    	; 0x1480 <twoway_turn_left_lab+0x12c>
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    13e0:	80 91 ad 01 	lds	r24, 0x01AD
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	11 f1       	breq	.+68     	; 0x142c <twoway_turn_left_lab+0xd8>
    13e8:	2c 17       	cp	r18, r28
    13ea:	3d 07       	cpc	r19, r29
    13ec:	44 f1       	brlt	.+80     	; 0x143e <twoway_turn_left_lab+0xea>
    13ee:	20 17       	cp	r18, r16
    13f0:	31 07       	cpc	r19, r17
    13f2:	2c f1       	brlt	.+74     	; 0x143e <twoway_turn_left_lab+0xea>
    13f4:	80 91 42 01 	lds	r24, 0x0142
    13f8:	90 91 43 01 	lds	r25, 0x0143
    13fc:	82 17       	cp	r24, r18
    13fe:	93 07       	cpc	r25, r19
    1400:	f4 f4       	brge	.+60     	; 0x143e <twoway_turn_left_lab+0xea>
    1402:	80 91 44 01 	lds	r24, 0x0144
    1406:	90 91 45 01 	lds	r25, 0x0145
    140a:	82 17       	cp	r24, r18
    140c:	93 07       	cpc	r25, r19
    140e:	bc f4       	brge	.+46     	; 0x143e <twoway_turn_left_lab+0xea>
		twoway_turn_left = false;
    1410:	10 92 3d 01 	sts	0x013D, r1
		first_time = true;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    141a:	10 92 49 01 	sts	0x0149, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    141e:	10 92 ad 01 	sts	0x01AD, r1
		regler_against_wall = false;
    1422:	10 92 47 01 	sts	0x0147, r1
		prepare_special_case = false;
    1426:	10 92 46 01 	sts	0x0146, r1
    142a:	2a c0       	rjmp	.+84     	; 0x1480 <twoway_turn_left_lab+0x12c>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data == 3 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    142c:	80 91 48 01 	lds	r24, 0x0148
    1430:	81 11       	cpse	r24, r1
    1432:	09 c0       	rjmp	.+18     	; 0x1446 <twoway_turn_left_lab+0xf2>
		turn_done = true;
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	80 93 48 01 	sts	0x0148, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    143a:	80 d8       	rcall	.-3840   	; 0x53c <drive_forward>
    143c:	21 c0       	rjmp	.+66     	; 0x1480 <twoway_turn_left_lab+0x12c>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    143e:	80 91 48 01 	lds	r24, 0x0148
    1442:	88 23       	and	r24, r24
    1444:	e9 f0       	breq	.+58     	; 0x1480 <twoway_turn_left_lab+0x12c>
    1446:	c2 17       	cp	r28, r18
    1448:	d3 07       	cpc	r29, r19
    144a:	d4 f4       	brge	.+52     	; 0x1480 <twoway_turn_left_lab+0x12c>
    144c:	02 17       	cp	r16, r18
    144e:	13 07       	cpc	r17, r19
    1450:	bc f4       	brge	.+46     	; 0x1480 <twoway_turn_left_lab+0x12c>
    1452:	80 91 42 01 	lds	r24, 0x0142
    1456:	90 91 43 01 	lds	r25, 0x0143
    145a:	82 17       	cp	r24, r18
    145c:	93 07       	cpc	r25, r19
    145e:	84 f4       	brge	.+32     	; 0x1480 <twoway_turn_left_lab+0x12c>
    1460:	80 91 44 01 	lds	r24, 0x0144
    1464:	90 91 45 01 	lds	r25, 0x0145
    1468:	82 17       	cp	r24, r18
    146a:	93 07       	cpc	r25, r19
    146c:	4c f4       	brge	.+18     	; 0x1480 <twoway_turn_left_lab+0x12c>
		twoway_turn_right = false;
    146e:	10 92 3c 01 	sts	0x013C, r1
		ongoing_turn = false;
    1472:	10 92 49 01 	sts	0x0149, r1
		first_time = true;
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    147c:	10 92 46 01 	sts	0x0146, r1
	}
	previous_right = distance_right;
    1480:	10 93 45 01 	sts	0x0145, r17
    1484:	00 93 44 01 	sts	0x0144, r16
	previous_left = distance_left;	
    1488:	d0 93 43 01 	sts	0x0143, r29
    148c:	c0 93 42 01 	sts	0x0142, r28
    1490:	06 c0       	rjmp	.+12     	; 0x149e <twoway_turn_left_lab+0x14a>
	// Rakt fram11
	else if(regler_against_wall && (distance_left > st_value )){
		drive_forward_right(distance_right, distance_front);
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    1492:	80 91 ad 01 	lds	r24, 0x01AD
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	09 f0       	breq	.+2      	; 0x149c <twoway_turn_left_lab+0x148>
    149a:	a9 cf       	rjmp	.-174    	; 0x13ee <twoway_turn_left_lab+0x9a>
    149c:	c7 cf       	rjmp	.-114    	; 0x142c <twoway_turn_left_lab+0xd8>
		first_time = true;
		prepare_special_case = false;
	}
	previous_right = distance_right;
	previous_left = distance_left;	
}
    149e:	df 91       	pop	r29
    14a0:	cf 91       	pop	r28
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <twoway_turn_right_lab>:


//INTE KLAR + måste testas
void twoway_turn_right_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
    14a8:	0f 93       	push	r16
    14aa:	1f 93       	push	r17
    14ac:	cf 93       	push	r28
    14ae:	df 93       	push	r29
    14b0:	ec 01       	movw	r28, r24
    14b2:	8b 01       	movw	r16, r22
	++count_waypoint;
    14b4:	e0 91 1d 01 	lds	r30, 0x011D
    14b8:	f0 91 1e 01 	lds	r31, 0x011E
    14bc:	31 96       	adiw	r30, 0x01	; 1
    14be:	f0 93 1e 01 	sts	0x011E, r31
    14c2:	e0 93 1d 01 	sts	0x011D, r30
	if(first_time){    //---kör fram i korsningen för att prepa sväng
    14c6:	80 91 0c 01 	lds	r24, 0x010C
    14ca:	88 23       	and	r24, r24
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <twoway_turn_right_lab+0x3e>
		drive_forward();
    14ce:	36 d8       	rcall	.-3988   	; 0x53c <drive_forward>
		turn_done = false;
    14d0:	10 92 48 01 	sts	0x0148, r1
		first_time = false;
    14d4:	10 92 0c 01 	sts	0x010C, r1
		count_waypoint = 0;
    14d8:	10 92 1e 01 	sts	0x011E, r1
    14dc:	10 92 1d 01 	sts	0x011D, r1
		ongoing_turn = false;
    14e0:	10 92 49 01 	sts	0x0149, r1
    14e4:	6d c0       	rjmp	.+218    	; 0x15c0 <twoway_turn_right_lab+0x118>
	}
	else if(!ongoing_turn && count_waypoint>= 1){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    14e6:	80 91 49 01 	lds	r24, 0x0149
    14ea:	81 11       	cpse	r24, r1
    14ec:	0a c0       	rjmp	.+20     	; 0x1502 <twoway_turn_right_lab+0x5a>
    14ee:	1e 16       	cp	r1, r30
    14f0:	1f 06       	cpc	r1, r31
    14f2:	3c f4       	brge	.+14     	; 0x1502 <twoway_turn_right_lab+0x5a>
		ongoing_turn = true;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 49 01 	sts	0x0149, r24
		start_turn = true;
    14fa:	80 93 4a 01 	sts	0x014A, r24
		stand_still();
    14fe:	19 d8       	rcall	.-4046   	; 0x532 <stand_still>
    1500:	5f c0       	rjmp	.+190    	; 0x15c0 <twoway_turn_right_lab+0x118>
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1502:	90 91 4a 01 	lds	r25, 0x014A
    1506:	99 23       	and	r25, r25
    1508:	c9 f0       	breq	.+50     	; 0x153c <twoway_turn_right_lab+0x94>
		if(RGB_data == 2){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    150a:	80 91 ad 01 	lds	r24, 0x01AD
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	41 f4       	brne	.+16     	; 0x1522 <twoway_turn_right_lab+0x7a>
			drive_forward_left(distance_left);
    1512:	ce 01       	movw	r24, r28
    1514:	41 d9       	rcall	.-3454   	; 0x798 <drive_forward_left>
			turn_done = true;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 93 48 01 	sts	0x0148, r24
			regler_against_wall = true;
    151c:	80 93 47 01 	sts	0x0147, r24
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <twoway_turn_right_lab+0x7e>
		}
		else {						//RGB säger att roboten ska svänga höger så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    1522:	9e dd       	rcall	.-1220   	; 0x1060 <req_gyro_turn>
			turn_right();
    1524:	1b d8       	rcall	.-4042   	; 0x55c <turn_right>
		}	
		previous_right = 0;
    1526:	10 92 45 01 	sts	0x0145, r1
    152a:	10 92 44 01 	sts	0x0144, r1
		previous_left = 0;
    152e:	10 92 43 01 	sts	0x0143, r1
    1532:	10 92 42 01 	sts	0x0142, r1
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    1536:	10 92 4a 01 	sts	0x014A, r1
		return;
    153a:	53 c0       	rjmp	.+166    	; 0x15e2 <twoway_turn_right_lab+0x13a>
	}
	
	// Rakt fram
	else if(regler_against_wall && (distance_right > st_value )){
    153c:	90 91 47 01 	lds	r25, 0x0147
    1540:	99 23       	and	r25, r25
    1542:	31 f0       	breq	.+12     	; 0x1550 <twoway_turn_right_lab+0xa8>
    1544:	20 17       	cp	r18, r16
    1546:	31 07       	cpc	r19, r17
    1548:	1c f4       	brge	.+6      	; 0x1550 <twoway_turn_right_lab+0xa8>
		drive_forward_left(distance_left);
    154a:	ce 01       	movw	r24, r28
    154c:	25 d9       	rcall	.-3510   	; 0x798 <drive_forward_left>
    154e:	38 c0       	rjmp	.+112    	; 0x15c0 <twoway_turn_right_lab+0x118>
	}
	
	else if(RGB_data == 2 && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    1550:	90 91 ad 01 	lds	r25, 0x01AD
    1554:	92 30       	cpi	r25, 0x02	; 2
    1556:	e9 f5       	brne	.+122    	; 0x15d2 <twoway_turn_right_lab+0x12a>
    1558:	c2 17       	cp	r28, r18
    155a:	d3 07       	cpc	r29, r19
    155c:	8c f5       	brge	.+98     	; 0x15c0 <twoway_turn_right_lab+0x118>
    155e:	02 17       	cp	r16, r18
    1560:	13 07       	cpc	r17, r19
    1562:	74 f5       	brge	.+92     	; 0x15c0 <twoway_turn_right_lab+0x118>
    1564:	24 17       	cp	r18, r20
    1566:	35 07       	cpc	r19, r21
    1568:	bc f5       	brge	.+110    	; 0x15d8 <twoway_turn_right_lab+0x130>
		twoway_turn_right = false;
    156a:	10 92 3c 01 	sts	0x013C, r1
		first_time = true;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    1574:	10 92 49 01 	sts	0x0149, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    1578:	10 92 ad 01 	sts	0x01AD, r1
		regler_against_wall = false;
    157c:	10 92 47 01 	sts	0x0147, r1
		prepare_special_case = false;
    1580:	10 92 46 01 	sts	0x0146, r1
    1584:	1d c0       	rjmp	.+58     	; 0x15c0 <twoway_turn_right_lab+0x118>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    1586:	80 91 48 01 	lds	r24, 0x0148
    158a:	81 11       	cpse	r24, r1
    158c:	0a c0       	rjmp	.+20     	; 0x15a2 <twoway_turn_right_lab+0xfa>
		turn_done = true;
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	80 93 48 01 	sts	0x0148, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    1594:	0e 94 9e 02 	call	0x53c	; 0x53c <drive_forward>
    1598:	13 c0       	rjmp	.+38     	; 0x15c0 <twoway_turn_right_lab+0x118>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    159a:	80 91 48 01 	lds	r24, 0x0148
    159e:	88 23       	and	r24, r24
    15a0:	79 f0       	breq	.+30     	; 0x15c0 <twoway_turn_right_lab+0x118>
    15a2:	c2 17       	cp	r28, r18
    15a4:	d3 07       	cpc	r29, r19
    15a6:	64 f4       	brge	.+24     	; 0x15c0 <twoway_turn_right_lab+0x118>
    15a8:	02 17       	cp	r16, r18
    15aa:	13 07       	cpc	r17, r19
    15ac:	4c f4       	brge	.+18     	; 0x15c0 <twoway_turn_right_lab+0x118>
		twoway_turn_right = false;
    15ae:	10 92 3c 01 	sts	0x013C, r1
		ongoing_turn = false;
    15b2:	10 92 49 01 	sts	0x0149, r1
		first_time = true;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    15bc:	10 92 46 01 	sts	0x0146, r1
	}
	previous_right = distance_right;
    15c0:	10 93 45 01 	sts	0x0145, r17
    15c4:	00 93 44 01 	sts	0x0144, r16
	previous_left = distance_left;
    15c8:	d0 93 43 01 	sts	0x0143, r29
    15cc:	c0 93 42 01 	sts	0x0142, r28
    15d0:	08 c0       	rjmp	.+16     	; 0x15e2 <twoway_turn_right_lab+0x13a>
		regler_against_wall = false;
		prepare_special_case = false;
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    15d2:	81 11       	cpse	r24, r1
    15d4:	d8 cf       	rjmp	.-80     	; 0x1586 <twoway_turn_right_lab+0xde>
    15d6:	e1 cf       	rjmp	.-62     	; 0x159a <twoway_turn_right_lab+0xf2>
		turn_done = true;
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    15d8:	80 91 48 01 	lds	r24, 0x0148
    15dc:	88 23       	and	r24, r24
    15de:	81 f3       	breq	.-32     	; 0x15c0 <twoway_turn_right_lab+0x118>
    15e0:	e6 cf       	rjmp	.-52     	; 0x15ae <twoway_turn_right_lab+0x106>
		first_time = true;
		prepare_special_case = false;
	}
	previous_right = distance_right;
	previous_left = distance_left;
    15e2:	df 91       	pop	r29
    15e4:	cf 91       	pop	r28
    15e6:	1f 91       	pop	r17
    15e8:	0f 91       	pop	r16
    15ea:	08 95       	ret

000015ec <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
    15ec:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
    15ee:	40 91 a0 01 	lds	r20, 0x01A0
    15f2:	50 e0       	ldi	r21, 0x00	; 0
	int sensor_right_tmp = distans_right;
    15f4:	60 91 ae 01 	lds	r22, 0x01AE
    15f8:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
    15fa:	80 91 a6 01 	lds	r24, 0x01A6
    15fe:	90 e0       	ldi	r25, 0x00	; 0
	sei();
    1600:	78 94       	sei
	int st_value = 40;
	int st_value_front = 50;
	/*if(true)      //testplats för reglering
		drive_forward_right(sensor_right_tmp, sensor_front_tmp);
	else*/ if(waypoint){
    1602:	20 91 3f 01 	lds	r18, 0x013F
    1606:	22 23       	and	r18, r18
    1608:	21 f0       	breq	.+8      	; 0x1612 <labyreg+0x26>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    160a:	28 e2       	ldi	r18, 0x28	; 40
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	e4 cd       	rjmp	.-1080   	; 0x11d8 <waypoint_lab>
		return;	
    1610:	08 95       	ret
	}
	else if(oneway_turn){
    1612:	20 91 3e 01 	lds	r18, 0x013E
    1616:	22 23       	and	r18, r18
    1618:	21 f0       	breq	.+8      	; 0x1622 <labyreg+0x36>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    161a:	28 e2       	ldi	r18, 0x28	; 40
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	27 ce       	rjmp	.-946    	; 0x126e <oneway_turn_lab>
		return;
    1620:	08 95       	ret
	}
	else if(twoway_turn_left){
    1622:	20 91 3d 01 	lds	r18, 0x013D
    1626:	22 23       	and	r18, r18
    1628:	21 f0       	breq	.+8      	; 0x1632 <labyreg+0x46>
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    162a:	28 e2       	ldi	r18, 0x28	; 40
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	92 ce       	rjmp	.-732    	; 0x1354 <twoway_turn_left_lab>
		return;
    1630:	08 95       	ret
	}
	else if(twoway_turn_right){
    1632:	20 91 3c 01 	lds	r18, 0x013C
    1636:	22 23       	and	r18, r18
    1638:	21 f0       	breq	.+8      	; 0x1642 <labyreg+0x56>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    163a:	28 e2       	ldi	r18, 0x28	; 40
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	34 cf       	rjmp	.-408    	; 0x14a8 <twoway_turn_right_lab>
		return;
    1640:	08 95       	ret
	}	
	
	else if(count_waypoint < 3){
    1642:	20 91 1d 01 	lds	r18, 0x011D
    1646:	30 91 1e 01 	lds	r19, 0x011E
    164a:	23 30       	cpi	r18, 0x03	; 3
    164c:	31 05       	cpc	r19, r1
    164e:	5c f4       	brge	.+22     	; 0x1666 <labyreg+0x7a>
		count_waypoint++;
    1650:	2f 5f       	subi	r18, 0xFF	; 255
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	30 93 1e 01 	sts	0x011E, r19
    1658:	20 93 1d 01 	sts	0x011D, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    165c:	81 e3       	ldi	r24, 0x31	; 49
    165e:	8a 95       	dec	r24
    1660:	f1 f7       	brne	.-4      	; 0x165e <labyreg+0x72>
    1662:	00 00       	nop
    1664:	08 95       	ret
		_delay_us(10);
	}
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
    1666:	88 32       	cpi	r24, 0x28	; 40
    1668:	91 05       	cpc	r25, r1
    166a:	3c f4       	brge	.+14     	; 0x167a <labyreg+0x8e>
    166c:	68 32       	cpi	r22, 0x28	; 40
    166e:	71 05       	cpc	r23, r1
    1670:	0c f0       	brlt	.+2      	; 0x1674 <labyreg+0x88>
    1672:	66 c0       	rjmp	.+204    	; 0x1740 <labyreg+0x154>
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
    1674:	0c 94 b5 02 	jmp	0x56a	; 0x56a <PD_for_lab>
    1678:	08 95       	ret
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case && sensor_front_tmp >= st_value_front){
    167a:	20 91 46 01 	lds	r18, 0x0146
    167e:	21 11       	cpse	r18, r1
    1680:	0e c0       	rjmp	.+28     	; 0x169e <labyreg+0xb2>
    1682:	42 33       	cpi	r20, 0x32	; 50
    1684:	51 05       	cpc	r21, r1
    1686:	0c f4       	brge	.+2      	; 0x168a <labyreg+0x9e>
    1688:	4f c0       	rjmp	.+158    	; 0x1728 <labyreg+0x13c>
		prepare_special_case = true;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	80 93 46 01 	sts	0x0146, r24
		count_waypoint = 0;
    1690:	10 92 1e 01 	sts	0x011E, r1
    1694:	10 92 1d 01 	sts	0x011D, r1
		drive_forward();
    1698:	0c 94 9e 02 	jmp	0x53c	; 0x53c <drive_forward>
    169c:	08 95       	ret
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
    169e:	88 32       	cpi	r24, 0x28	; 40
    16a0:	91 05       	cpc	r25, r1
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <labyreg+0xba>
    16a4:	52 c0       	rjmp	.+164    	; 0x174a <labyreg+0x15e>
    16a6:	42 33       	cpi	r20, 0x32	; 50
    16a8:	51 05       	cpc	r21, r1
    16aa:	0c f0       	brlt	.+2      	; 0x16ae <labyreg+0xc2>
    16ac:	58 c0       	rjmp	.+176    	; 0x175e <labyreg+0x172>
    16ae:	69 32       	cpi	r22, 0x29	; 41
    16b0:	71 05       	cpc	r23, r1
    16b2:	0c f4       	brge	.+2      	; 0x16b6 <labyreg+0xca>
    16b4:	3d c0       	rjmp	.+122    	; 0x1730 <labyreg+0x144>
    16b6:	06 c0       	rjmp	.+12     	; 0x16c4 <labyreg+0xd8>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    16b8:	42 33       	cpi	r20, 0x32	; 50
    16ba:	51 05       	cpc	r21, r1
    16bc:	a4 f4       	brge	.+40     	; 0x16e6 <labyreg+0xfa>
    16be:	68 32       	cpi	r22, 0x28	; 40
    16c0:	71 05       	cpc	r23, r1
    16c2:	3c f4       	brge	.+14     	; 0x16d2 <labyreg+0xe6>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16c4:	28 e2       	ldi	r18, 0x28	; 40
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	d2 dd       	rcall	.-1116   	; 0x126e <oneway_turn_lab>
		oneway_turn = true;
    16ca:	81 e0       	ldi	r24, 0x01	; 1
    16cc:	80 93 3e 01 	sts	0x013E, r24
    16d0:	08 95       	ret
		
	}
	
	//t-korsning rakt framifrån
	else if((sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value))	{	
    16d2:	69 32       	cpi	r22, 0x29	; 41
    16d4:	71 05       	cpc	r23, r1
    16d6:	3c f0       	brlt	.+14     	; 0x16e6 <labyreg+0xfa>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16d8:	28 e2       	ldi	r18, 0x28	; 40
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	7d dd       	rcall	.-1286   	; 0x11d8 <waypoint_lab>
		waypoint = true;
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	80 93 3f 01 	sts	0x013F, r24
    16e4:	08 95       	ret
		//PORTD |= (1 << PD1);
		
	}
	
	// T-korsning där roboten kan köra framåt eller åt vänster
	else if(sensor_left_tmp > st_value && sensor_front_tmp > st_value_front && sensor_right_tmp < st_value){
    16e6:	43 33       	cpi	r20, 0x33	; 51
    16e8:	51 05       	cpc	r21, r1
    16ea:	d4 f0       	brlt	.+52     	; 0x1720 <labyreg+0x134>
    16ec:	68 32       	cpi	r22, 0x28	; 40
    16ee:	71 05       	cpc	r23, r1
    16f0:	1c f5       	brge	.+70     	; 0x1738 <labyreg+0x14c>
		twoway_turn_left = true;
    16f2:	21 e0       	ldi	r18, 0x01	; 1
    16f4:	20 93 3d 01 	sts	0x013D, r18
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16f8:	28 e2       	ldi	r18, 0x28	; 40
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	2b ce       	rjmp	.-938    	; 0x1354 <twoway_turn_left_lab>
    16fe:	08 95       	ret
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    1700:	88 32       	cpi	r24, 0x28	; 40
    1702:	91 05       	cpc	r25, r1
    1704:	6c f4       	brge	.+26     	; 0x1720 <labyreg+0x134>
    1706:	43 33       	cpi	r20, 0x33	; 51
    1708:	51 05       	cpc	r21, r1
    170a:	54 f0       	brlt	.+20     	; 0x1720 <labyreg+0x134>
    170c:	69 32       	cpi	r22, 0x29	; 41
    170e:	71 05       	cpc	r23, r1
    1710:	3c f0       	brlt	.+14     	; 0x1720 <labyreg+0x134>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1712:	28 e2       	ldi	r18, 0x28	; 40
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	c8 de       	rcall	.-624    	; 0x14a8 <twoway_turn_right_lab>
		twoway_turn_right = true;
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	80 93 3c 01 	sts	0x013C, r24
    171e:	08 95       	ret
	}
	else{
		req_gyro_turn();
    1720:	9f dc       	rcall	.-1730   	; 0x1060 <req_gyro_turn>
		turn_left();
    1722:	0c 94 a7 02 	jmp	0x54e	; 0x54e <turn_left>
    1726:	08 95       	ret
		count_waypoint = 0;
		drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
    1728:	88 32       	cpi	r24, 0x28	; 40
    172a:	91 05       	cpc	r25, r1
    172c:	9c f4       	brge	.+38     	; 0x1754 <labyreg+0x168>
    172e:	bf cf       	rjmp	.-130    	; 0x16ae <labyreg+0xc2>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    1730:	89 32       	cpi	r24, 0x29	; 41
    1732:	91 05       	cpc	r25, r1
    1734:	cc f4       	brge	.+50     	; 0x1768 <labyreg+0x17c>
    1736:	e4 cf       	rjmp	.-56     	; 0x1700 <labyreg+0x114>
		twoway_turn_left = true;
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    1738:	88 32       	cpi	r24, 0x28	; 40
    173a:	91 05       	cpc	r25, r1
    173c:	3c f3       	brlt	.-50     	; 0x170c <labyreg+0x120>
    173e:	f0 cf       	rjmp	.-32     	; 0x1720 <labyreg+0x134>
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case && sensor_front_tmp >= st_value_front){
    1740:	20 91 46 01 	lds	r18, 0x0146
    1744:	21 11       	cpse	r18, r1
    1746:	af cf       	rjmp	.-162    	; 0x16a6 <labyreg+0xba>
    1748:	9c cf       	rjmp	.-200    	; 0x1682 <labyreg+0x96>
		drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    174a:	89 32       	cpi	r24, 0x29	; 41
    174c:	91 05       	cpc	r25, r1
    174e:	0c f0       	brlt	.+2      	; 0x1752 <labyreg+0x166>
    1750:	b3 cf       	rjmp	.-154    	; 0x16b8 <labyreg+0xcc>
    1752:	e6 cf       	rjmp	.-52     	; 0x1720 <labyreg+0x134>
    1754:	89 32       	cpi	r24, 0x29	; 41
    1756:	91 05       	cpc	r25, r1
    1758:	0c f0       	brlt	.+2      	; 0x175c <labyreg+0x170>
    175a:	b1 cf       	rjmp	.-158    	; 0x16be <labyreg+0xd2>
    175c:	d1 cf       	rjmp	.-94     	; 0x1700 <labyreg+0x114>
    175e:	89 32       	cpi	r24, 0x29	; 41
    1760:	91 05       	cpc	r25, r1
    1762:	0c f0       	brlt	.+2      	; 0x1766 <labyreg+0x17a>
    1764:	c0 cf       	rjmp	.-128    	; 0x16e6 <labyreg+0xfa>
    1766:	cc cf       	rjmp	.-104    	; 0x1700 <labyreg+0x114>
    1768:	68 32       	cpi	r22, 0x28	; 40
    176a:	71 05       	cpc	r23, r1
    176c:	0c f0       	brlt	.+2      	; 0x1770 <labyreg+0x184>
    176e:	bb cf       	rjmp	.-138    	; 0x16e6 <labyreg+0xfa>
    1770:	a9 cf       	rjmp	.-174    	; 0x16c4 <labyreg+0xd8>

00001772 <regulator>:
		//motor_right = 60;
		//PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
		//PORTB |= (1 << motor_dir_left);									// Set motor direction to backward
//	}

	if((regulator_mode == 1) && (regler_ready_linje == 1)){
    1772:	80 91 1b 01 	lds	r24, 0x011B
    1776:	90 91 1c 01 	lds	r25, 0x011C
    177a:	81 30       	cpi	r24, 0x01	; 1
    177c:	91 05       	cpc	r25, r1
    177e:	e9 f4       	brne	.+58     	; 0x17ba <regulator+0x48>
    1780:	80 91 61 01 	lds	r24, 0x0161
    1784:	90 91 62 01 	lds	r25, 0x0162
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	99 f5       	brne	.+102    	; 0x17f2 <regulator+0x80>
		left=180;				// kanske rÃ¤cker med en variable fÃ¶r bÃ¥da om bÃ¥da kÃ¶r exakt lika fort
    178c:	84 eb       	ldi	r24, 0xB4	; 180
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	90 93 6c 01 	sts	0x016C, r25
    1794:	80 93 6b 01 	sts	0x016B, r24
		right=170;
    1798:	8a ea       	ldi	r24, 0xAA	; 170
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	90 93 6a 01 	sts	0x016A, r25
    17a0:	80 93 69 01 	sts	0x0169, r24
		motor_left=left;
    17a4:	84 eb       	ldi	r24, 0xB4	; 180
    17a6:	87 bd       	out	0x27, r24	; 39
		motor_right=right;
    17a8:	80 91 69 01 	lds	r24, 0x0169
    17ac:	88 bd       	out	0x28, r24	; 40
		linje_main();
    17ae:	c7 da       	rcall	.-2674   	; 0xd3e <linje_main>
		regler_ready_linje = 0;
    17b0:	10 92 62 01 	sts	0x0162, r1
    17b4:	10 92 61 01 	sts	0x0161, r1
    17b8:	08 95       	ret
	}

	else if(regulator_mode == 0){	
    17ba:	89 2b       	or	r24, r25
    17bc:	d1 f4       	brne	.+52     	; 0x17f2 <regulator+0x80>
		left=100;				
    17be:	84 e6       	ldi	r24, 0x64	; 100
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	90 93 6c 01 	sts	0x016C, r25
    17c6:	80 93 6b 01 	sts	0x016B, r24
		right=93;
    17ca:	8d e5       	ldi	r24, 0x5D	; 93
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	90 93 6a 01 	sts	0x016A, r25
    17d2:	80 93 69 01 	sts	0x0169, r24
		motor_left=left;
    17d6:	84 e6       	ldi	r24, 0x64	; 100
    17d8:	87 bd       	out	0x27, r24	; 39
		motor_right=right;
    17da:	80 91 69 01 	lds	r24, 0x0169
    17de:	88 bd       	out	0x28, r24	; 40
		PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    17e0:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_left);	
    17e2:	2e 98       	cbi	0x05, 6	; 5
		if(updaterad_labyrint == true){
    17e4:	80 91 60 01 	lds	r24, 0x0160
    17e8:	88 23       	and	r24, r24
    17ea:	19 f0       	breq	.+6      	; 0x17f2 <regulator+0x80>
		
			updaterad_labyrint = false;
    17ec:	10 92 60 01 	sts	0x0160, r1
			labyreg();//kalla pÃ¥ labyrint funktion
    17f0:	fd ce       	rjmp	.-518    	; 0x15ec <labyreg>
    17f2:	08 95       	ret

000017f4 <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
    17f4:	ec eb       	ldi	r30, 0xBC	; 188
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	90 81       	ld	r25, Z
    17fa:	94 6a       	ori	r25, 0xA4	; 164
    17fc:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
    17fe:	90 81       	ld	r25, Z
    1800:	99 23       	and	r25, r25
    1802:	ec f7       	brge	.-6      	; 0x17fe <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
    1804:	90 91 b9 00 	lds	r25, 0x00B9
    1808:	98 7f       	andi	r25, 0xF8	; 248
    180a:	98 30       	cpi	r25, 0x08	; 8
    180c:	29 f0       	breq	.+10     	; 0x1818 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    180e:	84 e9       	ldi	r24, 0x94	; 148
    1810:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    181e:	84 e8       	ldi	r24, 0x84	; 132
    1820:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
    1824:	ec eb       	ldi	r30, 0xBC	; 188
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	88 23       	and	r24, r24
    182c:	ec f7       	brge	.-6      	; 0x1828 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
    182e:	80 91 b9 00 	lds	r24, 0x00B9
    1832:	88 7f       	andi	r24, 0xF8	; 248
    1834:	80 34       	cpi	r24, 0x40	; 64
    1836:	29 f0       	breq	.+10     	; 0x1842 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1838:	84 e9       	ldi	r24, 0x94	; 148
    183a:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    183e:	80 e0       	ldi	r24, 0x00	; 0
    1840:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
    1842:	ec eb       	ldi	r30, 0xBC	; 188
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	84 68       	ori	r24, 0x84	; 132
    184a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    184c:	80 81       	ld	r24, Z
    184e:	88 23       	and	r24, r24
    1850:	ec f7       	brge	.-6      	; 0x184c <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data = TWDR; //ta emot data 
    1852:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1856:	94 e9       	ldi	r25, 0x94	; 148
    1858:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
    185c:	08 95       	ret

0000185e <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
    185e:	20 91 25 01 	lds	r18, 0x0125
    1862:	30 91 26 01 	lds	r19, 0x0126
    1866:	21 15       	cp	r18, r1
    1868:	31 05       	cpc	r19, r1
    186a:	89 f4       	brne	.+34     	; 0x188e <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
    186c:	28 2f       	mov	r18, r24
    186e:	22 95       	swap	r18
    1870:	2f 70       	andi	r18, 0x0F	; 15
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	30 93 24 01 	sts	0x0124, r19
    1878:	20 93 23 01 	sts	0x0123, r18
		i2c_data[counter] = data;
    187c:	80 93 8b 01 	sts	0x018B, r24
		counter++;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	90 93 26 01 	sts	0x0126, r25
    1888:	80 93 25 01 	sts	0x0125, r24
    188c:	18 c0       	rjmp	.+48     	; 0x18be <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
    188e:	40 91 23 01 	lds	r20, 0x0123
    1892:	50 91 24 01 	lds	r21, 0x0124
    1896:	4f 5f       	subi	r20, 0xFF	; 255
    1898:	5f 4f       	sbci	r21, 0xFF	; 255
    189a:	24 17       	cp	r18, r20
    189c:	35 07       	cpc	r19, r21
    189e:	5c f4       	brge	.+22     	; 0x18b6 <i2c_store_data+0x58>
		i2c_data[counter] = data;
    18a0:	f9 01       	movw	r30, r18
    18a2:	e5 57       	subi	r30, 0x75	; 117
    18a4:	fe 4f       	sbci	r31, 0xFE	; 254
    18a6:	80 83       	st	Z, r24
		counter++;
    18a8:	2f 5f       	subi	r18, 0xFF	; 255
    18aa:	3f 4f       	sbci	r19, 0xFF	; 255
    18ac:	30 93 26 01 	sts	0x0126, r19
    18b0:	20 93 25 01 	sts	0x0125, r18
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
    18b6:	f9 01       	movw	r30, r18
    18b8:	e5 57       	subi	r30, 0x75	; 117
    18ba:	fe 4f       	sbci	r31, 0xFE	; 254
    18bc:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
    18be:	80 91 23 01 	lds	r24, 0x0123
    18c2:	90 91 24 01 	lds	r25, 0x0124
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	20 91 25 01 	lds	r18, 0x0125
    18cc:	30 91 26 01 	lds	r19, 0x0126
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	44 f0       	brlt	.+16     	; 0x18e6 <i2c_store_data+0x88>
		i2c_newdata = true;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	80 93 2b 01 	sts	0x012B, r24
		counter = 0;
    18dc:	10 92 26 01 	sts	0x0126, r1
    18e0:	10 92 25 01 	sts	0x0125, r1
		EIMSK &= ~(1<<INT0);
    18e4:	e8 98       	cbi	0x1d, 0	; 29
    18e6:	08 95       	ret

000018e8 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
    18e8:	1f 92       	push	r1
    18ea:	0f 92       	push	r0
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	0b b6       	in	r0, 0x3b	; 59
    18f4:	0f 92       	push	r0
    18f6:	2f 93       	push	r18
    18f8:	3f 93       	push	r19
    18fa:	4f 93       	push	r20
    18fc:	5f 93       	push	r21
    18fe:	6f 93       	push	r22
    1900:	7f 93       	push	r23
    1902:	8f 93       	push	r24
    1904:	9f 93       	push	r25
    1906:	af 93       	push	r26
    1908:	bf 93       	push	r27
    190a:	ef 93       	push	r30
    190c:	ff 93       	push	r31
    190e:	85 e0       	ldi	r24, 0x05	; 5
    1910:	8a 95       	dec	r24
    1912:	f1 f7       	brne	.-4      	; 0x1910 <__vector_1+0x28>
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
    1914:	36 9b       	sbis	0x06, 6	; 6
    1916:	04 c0       	rjmp	.+8      	; 0x1920 <__vector_1+0x38>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
    1918:	82 e0       	ldi	r24, 0x02	; 2
    191a:	6c df       	rcall	.-296    	; 0x17f4 <i2c_recive>
    191c:	a0 df       	rcall	.-192    	; 0x185e <i2c_store_data>
    191e:	05 c0       	rjmp	.+10     	; 0x192a <__vector_1+0x42>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
    1920:	37 9b       	sbis	0x06, 7	; 6
    1922:	03 c0       	rjmp	.+6      	; 0x192a <__vector_1+0x42>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
    1924:	86 e0       	ldi	r24, 0x06	; 6
    1926:	66 df       	rcall	.-308    	; 0x17f4 <i2c_recive>
    1928:	9a df       	rcall	.-204    	; 0x185e <i2c_store_data>
	}
}
    192a:	ff 91       	pop	r31
    192c:	ef 91       	pop	r30
    192e:	bf 91       	pop	r27
    1930:	af 91       	pop	r26
    1932:	9f 91       	pop	r25
    1934:	8f 91       	pop	r24
    1936:	7f 91       	pop	r23
    1938:	6f 91       	pop	r22
    193a:	5f 91       	pop	r21
    193c:	4f 91       	pop	r20
    193e:	3f 91       	pop	r19
    1940:	2f 91       	pop	r18
    1942:	0f 90       	pop	r0
    1944:	0b be       	out	0x3b, r0	; 59
    1946:	0f 90       	pop	r0
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	0f 90       	pop	r0
    194c:	1f 90       	pop	r1
    194e:	18 95       	reti

00001950 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
    1950:	80 91 2b 01 	lds	r24, 0x012B
    1954:	88 23       	and	r24, r24
    1956:	09 f4       	brne	.+2      	; 0x195a <i2c_handel_data+0xa>
    1958:	a1 c1       	rjmp	.+834    	; 0x1c9c <i2c_handel_data+0x34c>
	{
		i2c_newdata=false;
    195a:	10 92 2b 01 	sts	0x012B, r1
		if(!((i2c_data[0]>>3)&0x01)){
    195e:	80 91 8b 01 	lds	r24, 0x018B
    1962:	83 fd       	sbrc	r24, 3
    1964:	0a c0       	rjmp	.+20     	; 0x197a <i2c_handel_data+0x2a>
    1966:	81 e5       	ldi	r24, 0x51	; 81
    1968:	94 e0       	ldi	r25, 0x04	; 4
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <i2c_handel_data+0x1a>
    196e:	00 c0       	rjmp	.+0      	; 0x1970 <i2c_handel_data+0x20>
    1970:	00 00       	nop
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
    1972:	6b e8       	ldi	r22, 0x8B	; 139
    1974:	71 e0       	ldi	r23, 0x01	; 1
    1976:	82 e0       	ldi	r24, 0x02	; 2
    1978:	05 db       	rcall	.-2550   	; 0xf84 <i2c_send>
		}
		
		switch (i2c_data[0] & 0x0f){
    197a:	80 91 8b 01 	lds	r24, 0x018B
    197e:	e8 2f       	mov	r30, r24
    1980:	ef 70       	andi	r30, 0x0F	; 15
    1982:	8e 2f       	mov	r24, r30
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	fc 01       	movw	r30, r24
    1988:	ea 5b       	subi	r30, 0xBA	; 186
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	ee c3       	rjmp	.+2012   	; 0x216a <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
    198e:	80 91 8c 01 	lds	r24, 0x018C
    1992:	80 93 aa 01 	sts	0x01AA, r24
				break;
    1996:	68 c1       	rjmp	.+720    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x01 ://avståndssensorer  plockar fram medianen av dom senaste 3 värdena ser krongligt ut men är bara hitta mittenvärdet och lägg det i distans_xxx
				distans_right_median[0] = i2c_data[3];
    1998:	80 91 8e 01 	lds	r24, 0x018E
    199c:	e7 ea       	ldi	r30, 0xA7	; 167
    199e:	f1 e0       	ldi	r31, 0x01	; 1
    19a0:	80 83       	st	Z, r24
				if((distans_right_median[0]<distans_right_median[1] && distans_right_median[0]>distans_right_median[2])||(distans_right_median[0]>distans_right_median[1] && distans_right_median[0]<distans_right_median[2]))
    19a2:	91 81       	ldd	r25, Z+1	; 0x01
    19a4:	89 17       	cp	r24, r25
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <i2c_handel_data+0x5a>
    19a8:	65 c1       	rjmp	.+714    	; 0x1c74 <i2c_handel_data+0x324>
    19aa:	20 91 a9 01 	lds	r18, 0x01A9
    19ae:	28 17       	cp	r18, r24
    19b0:	28 f0       	brcs	.+10     	; 0x19bc <i2c_handel_data+0x6c>
    19b2:	5c c1       	rjmp	.+696    	; 0x1c6c <i2c_handel_data+0x31c>
    19b4:	20 91 a9 01 	lds	r18, 0x01A9
    19b8:	82 17       	cp	r24, r18
    19ba:	18 f4       	brcc	.+6      	; 0x19c2 <i2c_handel_data+0x72>
					distans_right=distans_right_median[0];
    19bc:	80 93 ae 01 	sts	0x01AE, r24
    19c0:	0f c0       	rjmp	.+30     	; 0x19e0 <i2c_handel_data+0x90>
				else if((distans_right_median[1]<distans_right_median[0] && distans_right_median[1]>distans_right_median[2])||(distans_right_median[1]>distans_right_median[0] && distans_right_median[1]<distans_right_median[2]))
    19c2:	29 17       	cp	r18, r25
    19c4:	30 f0       	brcs	.+12     	; 0x19d2 <i2c_handel_data+0x82>
    19c6:	89 17       	cp	r24, r25
    19c8:	38 f4       	brcc	.+14     	; 0x19d8 <i2c_handel_data+0x88>
    19ca:	20 91 a9 01 	lds	r18, 0x01A9
    19ce:	92 17       	cp	r25, r18
    19d0:	18 f4       	brcc	.+6      	; 0x19d8 <i2c_handel_data+0x88>
					distans_right=distans_right_median[1];
    19d2:	90 93 ae 01 	sts	0x01AE, r25
    19d6:	04 c0       	rjmp	.+8      	; 0x19e0 <i2c_handel_data+0x90>
				else
					distans_right=distans_right_median[2];
    19d8:	20 91 a9 01 	lds	r18, 0x01A9
    19dc:	20 93 ae 01 	sts	0x01AE, r18
				distans_right_median[2]=distans_right_median[1];
    19e0:	e7 ea       	ldi	r30, 0xA7	; 167
    19e2:	f1 e0       	ldi	r31, 0x01	; 1
    19e4:	92 83       	std	Z+2, r25	; 0x02
				distans_right_median[1]=distans_right_median[0];
    19e6:	81 83       	std	Z+1, r24	; 0x01
				
				
				distans_fram_median[0] = i2c_data[3];
    19e8:	e3 ea       	ldi	r30, 0xA3	; 163
    19ea:	f1 e0       	ldi	r31, 0x01	; 1
    19ec:	80 83       	st	Z, r24
				if((distans_fram_median[0]<distans_fram_median[1] && distans_fram_median[0]>distans_fram_median[2])||(distans_fram_median[0]>distans_fram_median[1] && distans_fram_median[0]<distans_fram_median[2]))
    19ee:	91 81       	ldd	r25, Z+1	; 0x01
    19f0:	89 17       	cp	r24, r25
    19f2:	08 f0       	brcs	.+2      	; 0x19f6 <i2c_handel_data+0xa6>
    19f4:	47 c1       	rjmp	.+654    	; 0x1c84 <i2c_handel_data+0x334>
    19f6:	20 91 a5 01 	lds	r18, 0x01A5
    19fa:	28 17       	cp	r18, r24
    19fc:	28 f0       	brcs	.+10     	; 0x1a08 <i2c_handel_data+0xb8>
    19fe:	3e c1       	rjmp	.+636    	; 0x1c7c <i2c_handel_data+0x32c>
    1a00:	20 91 a5 01 	lds	r18, 0x01A5
    1a04:	82 17       	cp	r24, r18
    1a06:	18 f4       	brcc	.+6      	; 0x1a0e <i2c_handel_data+0xbe>
					distans_fram=distans_fram_median[0];
    1a08:	80 93 a0 01 	sts	0x01A0, r24
    1a0c:	0f c0       	rjmp	.+30     	; 0x1a2c <i2c_handel_data+0xdc>
				else if((distans_fram_median[1]<distans_fram_median[0] && distans_fram_median[1]>distans_fram_median[2])||(distans_fram_median[1]>distans_fram_median[0] && distans_fram_median[1]<distans_fram_median[2]))
    1a0e:	29 17       	cp	r18, r25
    1a10:	30 f0       	brcs	.+12     	; 0x1a1e <i2c_handel_data+0xce>
    1a12:	89 17       	cp	r24, r25
    1a14:	38 f4       	brcc	.+14     	; 0x1a24 <i2c_handel_data+0xd4>
    1a16:	20 91 a5 01 	lds	r18, 0x01A5
    1a1a:	92 17       	cp	r25, r18
    1a1c:	18 f4       	brcc	.+6      	; 0x1a24 <i2c_handel_data+0xd4>
					distans_fram=distans_fram_median[1];
    1a1e:	90 93 a0 01 	sts	0x01A0, r25
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <i2c_handel_data+0xdc>
				else
					distans_fram=distans_fram_median[2];
    1a24:	20 91 a5 01 	lds	r18, 0x01A5
    1a28:	20 93 a0 01 	sts	0x01A0, r18
				distans_fram_median[2]=distans_fram_median[1];
    1a2c:	e3 ea       	ldi	r30, 0xA3	; 163
    1a2e:	f1 e0       	ldi	r31, 0x01	; 1
    1a30:	92 83       	std	Z+2, r25	; 0x02
				distans_fram_median[1]=distans_fram_median[0];
    1a32:	81 83       	std	Z+1, r24	; 0x01
				
				static byte distans_left_median[3];
				distans_left_median[0] = i2c_data[3];
    1a34:	e0 e2       	ldi	r30, 0x20	; 32
    1a36:	f1 e0       	ldi	r31, 0x01	; 1
    1a38:	80 83       	st	Z, r24
				if((distans_left_median[0]<distans_left_median[1] && distans_left_median[0]>distans_left_median[2])||(distans_left_median[0]>distans_left_median[1] && distans_left_median[0]<distans_left_median[2]))
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	89 17       	cp	r24, r25
    1a3e:	08 f0       	brcs	.+2      	; 0x1a42 <i2c_handel_data+0xf2>
    1a40:	25 c1       	rjmp	.+586    	; 0x1c8c <i2c_handel_data+0x33c>
    1a42:	20 91 22 01 	lds	r18, 0x0122
    1a46:	28 17       	cp	r18, r24
    1a48:	28 f0       	brcs	.+10     	; 0x1a54 <i2c_handel_data+0x104>
    1a4a:	24 c1       	rjmp	.+584    	; 0x1c94 <i2c_handel_data+0x344>
    1a4c:	20 91 22 01 	lds	r18, 0x0122
    1a50:	82 17       	cp	r24, r18
    1a52:	18 f4       	brcc	.+6      	; 0x1a5a <i2c_handel_data+0x10a>
					distans_left=distans_left_median[0];
    1a54:	80 93 a6 01 	sts	0x01A6, r24
    1a58:	0f c0       	rjmp	.+30     	; 0x1a78 <i2c_handel_data+0x128>
				else if((distans_left_median[1]<distans_left_median[0] && distans_left_median[1]>distans_left_median[2])||(distans_left_median[1]>distans_left_median[0] && distans_left_median[1]<distans_left_median[2]))
    1a5a:	29 17       	cp	r18, r25
    1a5c:	30 f0       	brcs	.+12     	; 0x1a6a <i2c_handel_data+0x11a>
    1a5e:	89 17       	cp	r24, r25
    1a60:	38 f4       	brcc	.+14     	; 0x1a70 <i2c_handel_data+0x120>
    1a62:	20 91 22 01 	lds	r18, 0x0122
    1a66:	92 17       	cp	r25, r18
    1a68:	18 f4       	brcc	.+6      	; 0x1a70 <i2c_handel_data+0x120>
					distans_left=distans_left_median[1];
    1a6a:	90 93 a6 01 	sts	0x01A6, r25
    1a6e:	04 c0       	rjmp	.+8      	; 0x1a78 <i2c_handel_data+0x128>
				else
					distans_left=distans_left_median[2];
    1a70:	20 91 22 01 	lds	r18, 0x0122
    1a74:	20 93 a6 01 	sts	0x01A6, r18
				distans_left_median[2]=distans_left_median[1];
    1a78:	e0 e2       	ldi	r30, 0x20	; 32
    1a7a:	f1 e0       	ldi	r31, 0x01	; 1
    1a7c:	92 83       	std	Z+2, r25	; 0x02
				distans_left_median[1]=distans_left_median[0];
    1a7e:	81 83       	std	Z+1, r24	; 0x01
				//updaterad_labyrint = true;
				break;
    1a80:	f3 c0       	rjmp	.+486    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x02 :// refelxsensor data
				regler_ready_linje = 1;					// Ny data har lästs in då uppdaterar vi regleringen
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	90 93 62 01 	sts	0x0162, r25
    1a8a:	80 93 61 01 	sts	0x0161, r24
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
    1a8e:	eb e8       	ldi	r30, 0x8B	; 139
    1a90:	f1 e0       	ldi	r31, 0x01	; 1
    1a92:	82 81       	ldd	r24, Z+2	; 0x02
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	98 2f       	mov	r25, r24
    1a98:	88 27       	eor	r24, r24
    1a9a:	21 81       	ldd	r18, Z+1	; 0x01
    1a9c:	82 0f       	add	r24, r18
    1a9e:	91 1d       	adc	r25, r1
    1aa0:	90 93 9b 01 	sts	0x019B, r25
    1aa4:	80 93 9a 01 	sts	0x019A, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
    1aa8:	83 81       	ldd	r24, Z+3	; 0x03
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	90 93 c4 01 	sts	0x01C4, r25
    1ab0:	80 93 c3 01 	sts	0x01C3, r24
				break;
    1ab4:	d9 c0       	rjmp	.+434    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x03 :
				RGB_data=1;//"röd";"
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	80 93 ad 01 	sts	0x01AD, r24
				break;
    1abc:	d5 c0       	rjmp	.+426    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x04 :
				RGB_data=2;//"grön";
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	80 93 ad 01 	sts	0x01AD, r24
				break;		
    1ac4:	d1 c0       	rjmp	.+418    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x05 :
				RGB_data=3;//"blå";
    1ac6:	83 e0       	ldi	r24, 0x03	; 3
    1ac8:	80 93 ad 01 	sts	0x01AD, r24
				break;
    1acc:	cd c0       	rjmp	.+410    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x06 : // gyro klart
				gyro_90 = true;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	80 93 76 01 	sts	0x0176, r24
				turning = false;
    1ad4:	10 92 5f 01 	sts	0x015F, r1
				motor_right = 0;
    1ad8:	18 bc       	out	0x28, r1	; 40
				motor_left = 0;
    1ada:	17 bc       	out	0x27, r1	; 39
				updaterad_labyrint = false;
    1adc:	10 92 60 01 	sts	0x0160, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae0:	9f ef       	ldi	r25, 0xFF	; 255
    1ae2:	2f e7       	ldi	r18, 0x7F	; 127
    1ae4:	86 e1       	ldi	r24, 0x16	; 22
    1ae6:	91 50       	subi	r25, 0x01	; 1
    1ae8:	20 40       	sbci	r18, 0x00	; 0
    1aea:	80 40       	sbci	r24, 0x00	; 0
    1aec:	e1 f7       	brne	.-8      	; 0x1ae6 <i2c_handel_data+0x196>
    1aee:	00 c0       	rjmp	.+0      	; 0x1af0 <i2c_handel_data+0x1a0>
    1af0:	00 00       	nop
    1af2:	ba c0       	rjmp	.+372    	; 0x1c68 <i2c_handel_data+0x318>
				break;
			case 0x07 :// gyro data
				// Kod vi skickar till sensor
				break;
			case 0x08 : // manuel stå still
				manual_function=0;
    1af4:	10 92 56 01 	sts	0x0156, r1
    1af8:	10 92 55 01 	sts	0x0155, r1
				break;
    1afc:	b5 c0       	rjmp	.+362    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	90 93 56 01 	sts	0x0156, r25
    1b06:	80 93 55 01 	sts	0x0155, r24
				break;
    1b0a:	ae c0       	rjmp	.+348    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
    1b0c:	82 e0       	ldi	r24, 0x02	; 2
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	90 93 56 01 	sts	0x0156, r25
    1b14:	80 93 55 01 	sts	0x0155, r24
				break;
    1b18:	a7 c0       	rjmp	.+334    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x0b ://manuel vänster fram
				manual_function=4;
    1b1a:	84 e0       	ldi	r24, 0x04	; 4
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	90 93 56 01 	sts	0x0156, r25
    1b22:	80 93 55 01 	sts	0x0155, r24
				break;
    1b26:	a0 c0       	rjmp	.+320    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x0c ://manuel höger fram
				manual_function=3;
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	90 93 56 01 	sts	0x0156, r25
    1b30:	80 93 55 01 	sts	0x0155, r24
				break;
    1b34:	99 c0       	rjmp	.+306    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
    1b36:	86 e0       	ldi	r24, 0x06	; 6
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	90 93 56 01 	sts	0x0156, r25
    1b3e:	80 93 55 01 	sts	0x0155, r24
				break;
    1b42:	92 c0       	rjmp	.+292    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
    1b44:	85 e0       	ldi	r24, 0x05	; 5
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	90 93 56 01 	sts	0x0156, r25
    1b4c:	80 93 55 01 	sts	0x0155, r24
				break;
    1b50:	8b c0       	rjmp	.+278    	; 0x1c68 <i2c_handel_data+0x318>
			case 0x0f :	// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
    1b52:	80 91 8c 01 	lds	r24, 0x018C
    1b56:	80 3f       	cpi	r24, 0xF0	; 240
    1b58:	09 f5       	brne	.+66     	; 0x1b9c <i2c_handel_data+0x24c>
					if(start==1){
    1b5a:	80 91 6d 01 	lds	r24, 0x016D
    1b5e:	90 91 6e 01 	lds	r25, 0x016E
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	29 f4       	brne	.+10     	; 0x1b70 <i2c_handel_data+0x220>
						start=0;
    1b66:	10 92 6e 01 	sts	0x016E, r1
    1b6a:	10 92 6d 01 	sts	0x016D, r1
    1b6e:	7c c0       	rjmp	.+248    	; 0x1c68 <i2c_handel_data+0x318>
    1b70:	e7 e7       	ldi	r30, 0x77	; 119
    1b72:	f1 e0       	ldi	r31, 0x01	; 1
    1b74:	af ea       	ldi	r26, 0xAF	; 175
    1b76:	b1 e0       	ldi	r27, 0x01	; 1
    1b78:	81 e8       	ldi	r24, 0x81	; 129
    1b7a:	91 e0       	ldi	r25, 0x01	; 1
					}
					else{
						for(int i = 0; i < 5; i++){						
							previous_errors_right[i] = 0;
    1b7c:	11 92       	st	Z+, r1
    1b7e:	11 92       	st	Z+, r1
							previous_errors_left[i] = 0;
    1b80:	1d 92       	st	X+, r1
    1b82:	1d 92       	st	X+, r1
				if(i2c_data[1]==0xf0){
					if(start==1){
						start=0;
					}
					else{
						for(int i = 0; i < 5; i++){						
    1b84:	e8 17       	cp	r30, r24
    1b86:	f9 07       	cpc	r31, r25
    1b88:	c9 f7       	brne	.-14     	; 0x1b7c <i2c_handel_data+0x22c>
							previous_errors_right[i] = 0;
							previous_errors_left[i] = 0;
						}
						start=1;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	90 93 6e 01 	sts	0x016E, r25
    1b92:	80 93 6d 01 	sts	0x016D, r24
						RGB_data = 0;
    1b96:	10 92 ad 01 	sts	0x01AD, r1
    1b9a:	66 c0       	rjmp	.+204    	; 0x1c68 <i2c_handel_data+0x318>
						  
					}
				}
				else if(i2c_data[1]==0x0f){
    1b9c:	8f 30       	cpi	r24, 0x0F	; 15
    1b9e:	f1 f4       	brne	.+60     	; 0x1bdc <i2c_handel_data+0x28c>
					if(drive_mode==1){
    1ba0:	80 91 6f 01 	lds	r24, 0x016F
    1ba4:	90 91 70 01 	lds	r25, 0x0170
    1ba8:	01 97       	sbiw	r24, 0x01	; 1
    1baa:	59 f4       	brne	.+22     	; 0x1bc2 <i2c_handel_data+0x272>
						PORTD |= (1 << PD1);
    1bac:	59 9a       	sbi	0x0b, 1	; 11
						PORTD &= ~(1 << PD0);
    1bae:	58 98       	cbi	0x0b, 0	; 11
						drive_mode=0;
    1bb0:	10 92 70 01 	sts	0x0170, r1
    1bb4:	10 92 6f 01 	sts	0x016F, r1
						start=0;
    1bb8:	10 92 6e 01 	sts	0x016E, r1
    1bbc:	10 92 6d 01 	sts	0x016D, r1
    1bc0:	53 c0       	rjmp	.+166    	; 0x1c68 <i2c_handel_data+0x318>
					}
					else{
						PORTD |= (1 << PD0);
    1bc2:	58 9a       	sbi	0x0b, 0	; 11
						PORTD &= ~(1 << PD1);
    1bc4:	59 98       	cbi	0x0b, 1	; 11
						drive_mode=1;
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	90 93 70 01 	sts	0x0170, r25
    1bce:	80 93 6f 01 	sts	0x016F, r24
						start=0;
    1bd2:	10 92 6e 01 	sts	0x016E, r1
    1bd6:	10 92 6d 01 	sts	0x016D, r1
    1bda:	46 c0       	rjmp	.+140    	; 0x1c68 <i2c_handel_data+0x318>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
    1bdc:	81 11       	cpse	r24, r1
    1bde:	1b c0       	rjmp	.+54     	; 0x1c16 <i2c_handel_data+0x2c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1be0:	96 e3       	ldi	r25, 0x36	; 54
    1be2:	9a 95       	dec	r25
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <i2c_handel_data+0x292>
    1be6:	00 00       	nop
					_delay_us(11);
					d_constant = i2c_data[2] ;
    1be8:	eb e8       	ldi	r30, 0x8B	; 139
    1bea:	f1 e0       	ldi	r31, 0x01	; 1
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	90 93 01 01 	sts	0x0101, r25
    1bf4:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3] ;
    1bf8:	23 81       	ldd	r18, Z+3	; 0x03
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	30 93 03 01 	sts	0x0103, r19
    1c00:	20 93 02 01 	sts	0x0102, r18
					if(d_constant == 180)
    1c04:	84 3b       	cpi	r24, 0xB4	; 180
    1c06:	91 05       	cpc	r25, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <i2c_handel_data+0x2bc>
					PORTD |= (1 << PD1);
    1c0a:	59 9a       	sbi	0x0b, 1	; 11
    1c0c:	26 e3       	ldi	r18, 0x36	; 54
    1c0e:	2a 95       	dec	r18
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <i2c_handel_data+0x2be>
    1c12:	00 00       	nop
    1c14:	29 c0       	rjmp	.+82     	; 0x1c68 <i2c_handel_data+0x318>
					_delay_us(11);
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	b9 f4       	brne	.+46     	; 0x1c48 <i2c_handel_data+0x2f8>
    1c1a:	81 e3       	ldi	r24, 0x31	; 49
    1c1c:	8a 95       	dec	r24
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <i2c_handel_data+0x2cc>
    1c20:	00 00       	nop

					_delay_us(10);
					d_constant_lab = i2c_data[2] ;
    1c22:	eb e8       	ldi	r30, 0x8B	; 139
    1c24:	f1 e0       	ldi	r31, 0x01	; 1
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	90 93 12 01 	sts	0x0112, r25
    1c2e:	80 93 11 01 	sts	0x0111, r24
					p_constant_lab = i2c_data[3] ;
    1c32:	83 81       	ldd	r24, Z+3	; 0x03
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	90 93 14 01 	sts	0x0114, r25
    1c3a:	80 93 13 01 	sts	0x0113, r24
    1c3e:	91 e3       	ldi	r25, 0x31	; 49
    1c40:	9a 95       	dec	r25
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <i2c_handel_data+0x2f0>
    1c44:	00 00       	nop
    1c46:	10 c0       	rjmp	.+32     	; 0x1c68 <i2c_handel_data+0x318>
					_delay_us(10);
	}
				else if(i2c_data[1]==0x02){
    1c48:	82 30       	cpi	r24, 0x02	; 2
    1c4a:	71 f4       	brne	.+28     	; 0x1c68 <i2c_handel_data+0x318>
					left = i2c_data[2] & 0xff;
    1c4c:	eb e8       	ldi	r30, 0x8B	; 139
    1c4e:	f1 e0       	ldi	r31, 0x01	; 1
    1c50:	82 81       	ldd	r24, Z+2	; 0x02
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	90 93 6c 01 	sts	0x016C, r25
    1c58:	80 93 6b 01 	sts	0x016B, r24
					right = i2c_data[3] & 0xff;
    1c5c:	83 81       	ldd	r24, Z+3	; 0x03
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	90 93 6a 01 	sts	0x016A, r25
    1c64:	80 93 69 01 	sts	0x0169, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
    1c68:	e8 9a       	sbi	0x1d, 0	; 29
    1c6a:	08 95       	ret
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
				break;
			case 0x01 ://avståndssensorer  plockar fram medianen av dom senaste 3 värdena ser krongligt ut men är bara hitta mittenvärdet och lägg det i distans_xxx
				distans_right_median[0] = i2c_data[3];
				if((distans_right_median[0]<distans_right_median[1] && distans_right_median[0]>distans_right_median[2])||(distans_right_median[0]>distans_right_median[1] && distans_right_median[0]<distans_right_median[2]))
    1c6c:	98 17       	cp	r25, r24
    1c6e:	08 f4       	brcc	.+2      	; 0x1c72 <i2c_handel_data+0x322>
    1c70:	a1 ce       	rjmp	.-702    	; 0x19b4 <i2c_handel_data+0x64>
    1c72:	ab ce       	rjmp	.-682    	; 0x19ca <i2c_handel_data+0x7a>
    1c74:	98 17       	cp	r25, r24
    1c76:	08 f4       	brcc	.+2      	; 0x1c7a <i2c_handel_data+0x32a>
    1c78:	9d ce       	rjmp	.-710    	; 0x19b4 <i2c_handel_data+0x64>
    1c7a:	ae ce       	rjmp	.-676    	; 0x19d8 <i2c_handel_data+0x88>
				distans_right_median[2]=distans_right_median[1];
				distans_right_median[1]=distans_right_median[0];
				
				
				distans_fram_median[0] = i2c_data[3];
				if((distans_fram_median[0]<distans_fram_median[1] && distans_fram_median[0]>distans_fram_median[2])||(distans_fram_median[0]>distans_fram_median[1] && distans_fram_median[0]<distans_fram_median[2]))
    1c7c:	98 17       	cp	r25, r24
    1c7e:	08 f4       	brcc	.+2      	; 0x1c82 <i2c_handel_data+0x332>
    1c80:	bf ce       	rjmp	.-642    	; 0x1a00 <i2c_handel_data+0xb0>
    1c82:	c9 ce       	rjmp	.-622    	; 0x1a16 <i2c_handel_data+0xc6>
    1c84:	98 17       	cp	r25, r24
    1c86:	08 f4       	brcc	.+2      	; 0x1c8a <i2c_handel_data+0x33a>
    1c88:	bb ce       	rjmp	.-650    	; 0x1a00 <i2c_handel_data+0xb0>
    1c8a:	cc ce       	rjmp	.-616    	; 0x1a24 <i2c_handel_data+0xd4>
				distans_fram_median[2]=distans_fram_median[1];
				distans_fram_median[1]=distans_fram_median[0];
				
				static byte distans_left_median[3];
				distans_left_median[0] = i2c_data[3];
				if((distans_left_median[0]<distans_left_median[1] && distans_left_median[0]>distans_left_median[2])||(distans_left_median[0]>distans_left_median[1] && distans_left_median[0]<distans_left_median[2]))
    1c8c:	98 17       	cp	r25, r24
    1c8e:	08 f4       	brcc	.+2      	; 0x1c92 <i2c_handel_data+0x342>
    1c90:	dd ce       	rjmp	.-582    	; 0x1a4c <i2c_handel_data+0xfc>
    1c92:	ee ce       	rjmp	.-548    	; 0x1a70 <i2c_handel_data+0x120>
    1c94:	98 17       	cp	r25, r24
    1c96:	08 f4       	brcc	.+2      	; 0x1c9a <i2c_handel_data+0x34a>
    1c98:	d9 ce       	rjmp	.-590    	; 0x1a4c <i2c_handel_data+0xfc>
    1c9a:	e3 ce       	rjmp	.-570    	; 0x1a62 <i2c_handel_data+0x112>
    1c9c:	08 95       	ret

00001c9e <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
    1c9e:	11 d9       	rcall	.-3550   	; 0xec2 <interrupt_init>
	board_init();
    1ca0:	0e 94 76 00 	call	0xec	; 0xec <board_init>
	initengine();
    1ca4:	a3 d8       	rcall	.-3770   	; 0xdec <initengine>
	timerinit();
    1ca6:	af d8       	rcall	.-3746   	; 0xe06 <timerinit>
	i2c_setup(1);
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	5c d9       	rcall	.-3400   	; 0xf64 <i2c_setup>
	sei();
    1cac:	78 94       	sei
	//***********Set motors speed value here *****************
	left=180;				// kanske räcker med en variable för båda om båda kör exakt lika fort
    1cae:	84 eb       	ldi	r24, 0xB4	; 180
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	90 93 6c 01 	sts	0x016C, r25
    1cb6:	80 93 6b 01 	sts	0x016B, r24
	right=170;
    1cba:	8a ea       	ldi	r24, 0xAA	; 170
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	90 93 6a 01 	sts	0x016A, r25
    1cc2:	80 93 69 01 	sts	0x0169, r24
	//********************************************************
	motor_left=left;
    1cc6:	84 eb       	ldi	r24, 0xB4	; 180
    1cc8:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
    1cca:	80 91 69 01 	lds	r24, 0x0169
    1cce:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
    1cd0:	3f de       	rcall	.-898    	; 0x1950 <i2c_handel_data>
		if(turning)
    1cd2:	80 91 5f 01 	lds	r24, 0x015F
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	fb cf       	rjmp	.-10     	; 0x1cd0 <main+0x32>
			;
		else if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
    1cda:	80 91 6f 01 	lds	r24, 0x016F
    1cde:	90 91 70 01 	lds	r25, 0x0170
    1ce2:	81 30       	cpi	r24, 0x01	; 1
    1ce4:	91 05       	cpc	r25, r1
    1ce6:	71 f4       	brne	.+28     	; 0x1d04 <main+0x66>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			//if((gyro_left == 1)|| (gyro_right == 1)){
			//	drive_mode = 0;
			//}
			if(start == 1){
    1ce8:	80 91 6d 01 	lds	r24, 0x016D
    1cec:	90 91 6e 01 	lds	r25, 0x016E
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	11 f4       	brne	.+4      	; 0x1cfa <main+0x5c>
				regulator();	
    1cf6:	3d dd       	rcall	.-1414   	; 0x1772 <regulator>
    1cf8:	eb cf       	rjmp	.-42     	; 0x1cd0 <main+0x32>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
    1cfa:	89 2b       	or	r24, r25
    1cfc:	49 f7       	brne	.-46     	; 0x1cd0 <main+0x32>
				motor_left=0;
    1cfe:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
    1d00:	18 bc       	out	0x28, r1	; 40
    1d02:	e6 cf       	rjmp	.-52     	; 0x1cd0 <main+0x32>
			}
		}
		else if(drive_mode==0){										// Drivemode is manual
    1d04:	89 2b       	or	r24, r25
    1d06:	21 f7       	brne	.-56     	; 0x1cd0 <main+0x32>
			PORTD |= (1 << PD1);
    1d08:	59 9a       	sbi	0x0b, 1	; 11
			manual_drive();
    1d0a:	c6 d9       	rcall	.-3188   	; 0x1098 <manual_drive>
    1d0c:	e1 cf       	rjmp	.-62     	; 0x1cd0 <main+0x32>

00001d0e <__subsf3>:
    1d0e:	50 58       	subi	r21, 0x80	; 128

00001d10 <__addsf3>:
    1d10:	bb 27       	eor	r27, r27
    1d12:	aa 27       	eor	r26, r26
    1d14:	0e d0       	rcall	.+28     	; 0x1d32 <__addsf3x>
    1d16:	75 c1       	rjmp	.+746    	; 0x2002 <__fp_round>
    1d18:	66 d1       	rcall	.+716    	; 0x1fe6 <__fp_pscA>
    1d1a:	30 f0       	brcs	.+12     	; 0x1d28 <__addsf3+0x18>
    1d1c:	6b d1       	rcall	.+726    	; 0x1ff4 <__fp_pscB>
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <__addsf3+0x18>
    1d20:	31 f4       	brne	.+12     	; 0x1d2e <__addsf3+0x1e>
    1d22:	9f 3f       	cpi	r25, 0xFF	; 255
    1d24:	11 f4       	brne	.+4      	; 0x1d2a <__addsf3+0x1a>
    1d26:	1e f4       	brtc	.+6      	; 0x1d2e <__addsf3+0x1e>
    1d28:	5b c1       	rjmp	.+694    	; 0x1fe0 <__fp_nan>
    1d2a:	0e f4       	brtc	.+2      	; 0x1d2e <__addsf3+0x1e>
    1d2c:	e0 95       	com	r30
    1d2e:	e7 fb       	bst	r30, 7
    1d30:	51 c1       	rjmp	.+674    	; 0x1fd4 <__fp_inf>

00001d32 <__addsf3x>:
    1d32:	e9 2f       	mov	r30, r25
    1d34:	77 d1       	rcall	.+750    	; 0x2024 <__fp_split3>
    1d36:	80 f3       	brcs	.-32     	; 0x1d18 <__addsf3+0x8>
    1d38:	ba 17       	cp	r27, r26
    1d3a:	62 07       	cpc	r22, r18
    1d3c:	73 07       	cpc	r23, r19
    1d3e:	84 07       	cpc	r24, r20
    1d40:	95 07       	cpc	r25, r21
    1d42:	18 f0       	brcs	.+6      	; 0x1d4a <__addsf3x+0x18>
    1d44:	71 f4       	brne	.+28     	; 0x1d62 <__addsf3x+0x30>
    1d46:	9e f5       	brtc	.+102    	; 0x1dae <__addsf3x+0x7c>
    1d48:	8f c1       	rjmp	.+798    	; 0x2068 <__fp_zero>
    1d4a:	0e f4       	brtc	.+2      	; 0x1d4e <__addsf3x+0x1c>
    1d4c:	e0 95       	com	r30
    1d4e:	0b 2e       	mov	r0, r27
    1d50:	ba 2f       	mov	r27, r26
    1d52:	a0 2d       	mov	r26, r0
    1d54:	0b 01       	movw	r0, r22
    1d56:	b9 01       	movw	r22, r18
    1d58:	90 01       	movw	r18, r0
    1d5a:	0c 01       	movw	r0, r24
    1d5c:	ca 01       	movw	r24, r20
    1d5e:	a0 01       	movw	r20, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	ff 27       	eor	r31, r31
    1d64:	59 1b       	sub	r21, r25
    1d66:	99 f0       	breq	.+38     	; 0x1d8e <__addsf3x+0x5c>
    1d68:	59 3f       	cpi	r21, 0xF9	; 249
    1d6a:	50 f4       	brcc	.+20     	; 0x1d80 <__addsf3x+0x4e>
    1d6c:	50 3e       	cpi	r21, 0xE0	; 224
    1d6e:	68 f1       	brcs	.+90     	; 0x1dca <__addsf3x+0x98>
    1d70:	1a 16       	cp	r1, r26
    1d72:	f0 40       	sbci	r31, 0x00	; 0
    1d74:	a2 2f       	mov	r26, r18
    1d76:	23 2f       	mov	r18, r19
    1d78:	34 2f       	mov	r19, r20
    1d7a:	44 27       	eor	r20, r20
    1d7c:	58 5f       	subi	r21, 0xF8	; 248
    1d7e:	f3 cf       	rjmp	.-26     	; 0x1d66 <__addsf3x+0x34>
    1d80:	46 95       	lsr	r20
    1d82:	37 95       	ror	r19
    1d84:	27 95       	ror	r18
    1d86:	a7 95       	ror	r26
    1d88:	f0 40       	sbci	r31, 0x00	; 0
    1d8a:	53 95       	inc	r21
    1d8c:	c9 f7       	brne	.-14     	; 0x1d80 <__addsf3x+0x4e>
    1d8e:	7e f4       	brtc	.+30     	; 0x1dae <__addsf3x+0x7c>
    1d90:	1f 16       	cp	r1, r31
    1d92:	ba 0b       	sbc	r27, r26
    1d94:	62 0b       	sbc	r22, r18
    1d96:	73 0b       	sbc	r23, r19
    1d98:	84 0b       	sbc	r24, r20
    1d9a:	ba f0       	brmi	.+46     	; 0x1dca <__addsf3x+0x98>
    1d9c:	91 50       	subi	r25, 0x01	; 1
    1d9e:	a1 f0       	breq	.+40     	; 0x1dc8 <__addsf3x+0x96>
    1da0:	ff 0f       	add	r31, r31
    1da2:	bb 1f       	adc	r27, r27
    1da4:	66 1f       	adc	r22, r22
    1da6:	77 1f       	adc	r23, r23
    1da8:	88 1f       	adc	r24, r24
    1daa:	c2 f7       	brpl	.-16     	; 0x1d9c <__addsf3x+0x6a>
    1dac:	0e c0       	rjmp	.+28     	; 0x1dca <__addsf3x+0x98>
    1dae:	ba 0f       	add	r27, r26
    1db0:	62 1f       	adc	r22, r18
    1db2:	73 1f       	adc	r23, r19
    1db4:	84 1f       	adc	r24, r20
    1db6:	48 f4       	brcc	.+18     	; 0x1dca <__addsf3x+0x98>
    1db8:	87 95       	ror	r24
    1dba:	77 95       	ror	r23
    1dbc:	67 95       	ror	r22
    1dbe:	b7 95       	ror	r27
    1dc0:	f7 95       	ror	r31
    1dc2:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc4:	08 f0       	brcs	.+2      	; 0x1dc8 <__addsf3x+0x96>
    1dc6:	b3 cf       	rjmp	.-154    	; 0x1d2e <__addsf3+0x1e>
    1dc8:	93 95       	inc	r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <__addsf3x+0x9e>
    1dce:	99 27       	eor	r25, r25
    1dd0:	ee 0f       	add	r30, r30
    1dd2:	97 95       	ror	r25
    1dd4:	87 95       	ror	r24
    1dd6:	08 95       	ret

00001dd8 <__cmpsf2>:
    1dd8:	d9 d0       	rcall	.+434    	; 0x1f8c <__fp_cmp>
    1dda:	08 f4       	brcc	.+2      	; 0x1dde <__cmpsf2+0x6>
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	08 95       	ret

00001de0 <__divsf3>:
    1de0:	0c d0       	rcall	.+24     	; 0x1dfa <__divsf3x>
    1de2:	0f c1       	rjmp	.+542    	; 0x2002 <__fp_round>
    1de4:	07 d1       	rcall	.+526    	; 0x1ff4 <__fp_pscB>
    1de6:	40 f0       	brcs	.+16     	; 0x1df8 <__divsf3+0x18>
    1de8:	fe d0       	rcall	.+508    	; 0x1fe6 <__fp_pscA>
    1dea:	30 f0       	brcs	.+12     	; 0x1df8 <__divsf3+0x18>
    1dec:	21 f4       	brne	.+8      	; 0x1df6 <__divsf3+0x16>
    1dee:	5f 3f       	cpi	r21, 0xFF	; 255
    1df0:	19 f0       	breq	.+6      	; 0x1df8 <__divsf3+0x18>
    1df2:	f0 c0       	rjmp	.+480    	; 0x1fd4 <__fp_inf>
    1df4:	51 11       	cpse	r21, r1
    1df6:	39 c1       	rjmp	.+626    	; 0x206a <__fp_szero>
    1df8:	f3 c0       	rjmp	.+486    	; 0x1fe0 <__fp_nan>

00001dfa <__divsf3x>:
    1dfa:	14 d1       	rcall	.+552    	; 0x2024 <__fp_split3>
    1dfc:	98 f3       	brcs	.-26     	; 0x1de4 <__divsf3+0x4>

00001dfe <__divsf3_pse>:
    1dfe:	99 23       	and	r25, r25
    1e00:	c9 f3       	breq	.-14     	; 0x1df4 <__divsf3+0x14>
    1e02:	55 23       	and	r21, r21
    1e04:	b1 f3       	breq	.-20     	; 0x1df2 <__divsf3+0x12>
    1e06:	95 1b       	sub	r25, r21
    1e08:	55 0b       	sbc	r21, r21
    1e0a:	bb 27       	eor	r27, r27
    1e0c:	aa 27       	eor	r26, r26
    1e0e:	62 17       	cp	r22, r18
    1e10:	73 07       	cpc	r23, r19
    1e12:	84 07       	cpc	r24, r20
    1e14:	38 f0       	brcs	.+14     	; 0x1e24 <__divsf3_pse+0x26>
    1e16:	9f 5f       	subi	r25, 0xFF	; 255
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	22 0f       	add	r18, r18
    1e1c:	33 1f       	adc	r19, r19
    1e1e:	44 1f       	adc	r20, r20
    1e20:	aa 1f       	adc	r26, r26
    1e22:	a9 f3       	breq	.-22     	; 0x1e0e <__divsf3_pse+0x10>
    1e24:	33 d0       	rcall	.+102    	; 0x1e8c <__divsf3_pse+0x8e>
    1e26:	0e 2e       	mov	r0, r30
    1e28:	3a f0       	brmi	.+14     	; 0x1e38 <__divsf3_pse+0x3a>
    1e2a:	e0 e8       	ldi	r30, 0x80	; 128
    1e2c:	30 d0       	rcall	.+96     	; 0x1e8e <__divsf3_pse+0x90>
    1e2e:	91 50       	subi	r25, 0x01	; 1
    1e30:	50 40       	sbci	r21, 0x00	; 0
    1e32:	e6 95       	lsr	r30
    1e34:	00 1c       	adc	r0, r0
    1e36:	ca f7       	brpl	.-14     	; 0x1e2a <__divsf3_pse+0x2c>
    1e38:	29 d0       	rcall	.+82     	; 0x1e8c <__divsf3_pse+0x8e>
    1e3a:	fe 2f       	mov	r31, r30
    1e3c:	27 d0       	rcall	.+78     	; 0x1e8c <__divsf3_pse+0x8e>
    1e3e:	66 0f       	add	r22, r22
    1e40:	77 1f       	adc	r23, r23
    1e42:	88 1f       	adc	r24, r24
    1e44:	bb 1f       	adc	r27, r27
    1e46:	26 17       	cp	r18, r22
    1e48:	37 07       	cpc	r19, r23
    1e4a:	48 07       	cpc	r20, r24
    1e4c:	ab 07       	cpc	r26, r27
    1e4e:	b0 e8       	ldi	r27, 0x80	; 128
    1e50:	09 f0       	breq	.+2      	; 0x1e54 <__divsf3_pse+0x56>
    1e52:	bb 0b       	sbc	r27, r27
    1e54:	80 2d       	mov	r24, r0
    1e56:	bf 01       	movw	r22, r30
    1e58:	ff 27       	eor	r31, r31
    1e5a:	93 58       	subi	r25, 0x83	; 131
    1e5c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e5e:	2a f0       	brmi	.+10     	; 0x1e6a <__divsf3_pse+0x6c>
    1e60:	9e 3f       	cpi	r25, 0xFE	; 254
    1e62:	51 05       	cpc	r21, r1
    1e64:	68 f0       	brcs	.+26     	; 0x1e80 <__divsf3_pse+0x82>
    1e66:	b6 c0       	rjmp	.+364    	; 0x1fd4 <__fp_inf>
    1e68:	00 c1       	rjmp	.+512    	; 0x206a <__fp_szero>
    1e6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e6c:	ec f3       	brlt	.-6      	; 0x1e68 <__divsf3_pse+0x6a>
    1e6e:	98 3e       	cpi	r25, 0xE8	; 232
    1e70:	dc f3       	brlt	.-10     	; 0x1e68 <__divsf3_pse+0x6a>
    1e72:	86 95       	lsr	r24
    1e74:	77 95       	ror	r23
    1e76:	67 95       	ror	r22
    1e78:	b7 95       	ror	r27
    1e7a:	f7 95       	ror	r31
    1e7c:	9f 5f       	subi	r25, 0xFF	; 255
    1e7e:	c9 f7       	brne	.-14     	; 0x1e72 <__divsf3_pse+0x74>
    1e80:	88 0f       	add	r24, r24
    1e82:	91 1d       	adc	r25, r1
    1e84:	96 95       	lsr	r25
    1e86:	87 95       	ror	r24
    1e88:	97 f9       	bld	r25, 7
    1e8a:	08 95       	ret
    1e8c:	e1 e0       	ldi	r30, 0x01	; 1
    1e8e:	66 0f       	add	r22, r22
    1e90:	77 1f       	adc	r23, r23
    1e92:	88 1f       	adc	r24, r24
    1e94:	bb 1f       	adc	r27, r27
    1e96:	62 17       	cp	r22, r18
    1e98:	73 07       	cpc	r23, r19
    1e9a:	84 07       	cpc	r24, r20
    1e9c:	ba 07       	cpc	r27, r26
    1e9e:	20 f0       	brcs	.+8      	; 0x1ea8 <__divsf3_pse+0xaa>
    1ea0:	62 1b       	sub	r22, r18
    1ea2:	73 0b       	sbc	r23, r19
    1ea4:	84 0b       	sbc	r24, r20
    1ea6:	ba 0b       	sbc	r27, r26
    1ea8:	ee 1f       	adc	r30, r30
    1eaa:	88 f7       	brcc	.-30     	; 0x1e8e <__divsf3_pse+0x90>
    1eac:	e0 95       	com	r30
    1eae:	08 95       	ret

00001eb0 <__fixsfsi>:
    1eb0:	04 d0       	rcall	.+8      	; 0x1eba <__fixunssfsi>
    1eb2:	68 94       	set
    1eb4:	b1 11       	cpse	r27, r1
    1eb6:	d9 c0       	rjmp	.+434    	; 0x206a <__fp_szero>
    1eb8:	08 95       	ret

00001eba <__fixunssfsi>:
    1eba:	bc d0       	rcall	.+376    	; 0x2034 <__fp_splitA>
    1ebc:	88 f0       	brcs	.+34     	; 0x1ee0 <__fixunssfsi+0x26>
    1ebe:	9f 57       	subi	r25, 0x7F	; 127
    1ec0:	90 f0       	brcs	.+36     	; 0x1ee6 <__fixunssfsi+0x2c>
    1ec2:	b9 2f       	mov	r27, r25
    1ec4:	99 27       	eor	r25, r25
    1ec6:	b7 51       	subi	r27, 0x17	; 23
    1ec8:	a0 f0       	brcs	.+40     	; 0x1ef2 <__fixunssfsi+0x38>
    1eca:	d1 f0       	breq	.+52     	; 0x1f00 <__fixunssfsi+0x46>
    1ecc:	66 0f       	add	r22, r22
    1ece:	77 1f       	adc	r23, r23
    1ed0:	88 1f       	adc	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	1a f0       	brmi	.+6      	; 0x1edc <__fixunssfsi+0x22>
    1ed6:	ba 95       	dec	r27
    1ed8:	c9 f7       	brne	.-14     	; 0x1ecc <__fixunssfsi+0x12>
    1eda:	12 c0       	rjmp	.+36     	; 0x1f00 <__fixunssfsi+0x46>
    1edc:	b1 30       	cpi	r27, 0x01	; 1
    1ede:	81 f0       	breq	.+32     	; 0x1f00 <__fixunssfsi+0x46>
    1ee0:	c3 d0       	rcall	.+390    	; 0x2068 <__fp_zero>
    1ee2:	b1 e0       	ldi	r27, 0x01	; 1
    1ee4:	08 95       	ret
    1ee6:	c0 c0       	rjmp	.+384    	; 0x2068 <__fp_zero>
    1ee8:	67 2f       	mov	r22, r23
    1eea:	78 2f       	mov	r23, r24
    1eec:	88 27       	eor	r24, r24
    1eee:	b8 5f       	subi	r27, 0xF8	; 248
    1ef0:	39 f0       	breq	.+14     	; 0x1f00 <__fixunssfsi+0x46>
    1ef2:	b9 3f       	cpi	r27, 0xF9	; 249
    1ef4:	cc f3       	brlt	.-14     	; 0x1ee8 <__fixunssfsi+0x2e>
    1ef6:	86 95       	lsr	r24
    1ef8:	77 95       	ror	r23
    1efa:	67 95       	ror	r22
    1efc:	b3 95       	inc	r27
    1efe:	d9 f7       	brne	.-10     	; 0x1ef6 <__fixunssfsi+0x3c>
    1f00:	3e f4       	brtc	.+14     	; 0x1f10 <__fixunssfsi+0x56>
    1f02:	90 95       	com	r25
    1f04:	80 95       	com	r24
    1f06:	70 95       	com	r23
    1f08:	61 95       	neg	r22
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	08 95       	ret

00001f12 <__floatunsisf>:
    1f12:	e8 94       	clt
    1f14:	09 c0       	rjmp	.+18     	; 0x1f28 <__floatsisf+0x12>

00001f16 <__floatsisf>:
    1f16:	97 fb       	bst	r25, 7
    1f18:	3e f4       	brtc	.+14     	; 0x1f28 <__floatsisf+0x12>
    1f1a:	90 95       	com	r25
    1f1c:	80 95       	com	r24
    1f1e:	70 95       	com	r23
    1f20:	61 95       	neg	r22
    1f22:	7f 4f       	sbci	r23, 0xFF	; 255
    1f24:	8f 4f       	sbci	r24, 0xFF	; 255
    1f26:	9f 4f       	sbci	r25, 0xFF	; 255
    1f28:	99 23       	and	r25, r25
    1f2a:	a9 f0       	breq	.+42     	; 0x1f56 <__floatsisf+0x40>
    1f2c:	f9 2f       	mov	r31, r25
    1f2e:	96 e9       	ldi	r25, 0x96	; 150
    1f30:	bb 27       	eor	r27, r27
    1f32:	93 95       	inc	r25
    1f34:	f6 95       	lsr	r31
    1f36:	87 95       	ror	r24
    1f38:	77 95       	ror	r23
    1f3a:	67 95       	ror	r22
    1f3c:	b7 95       	ror	r27
    1f3e:	f1 11       	cpse	r31, r1
    1f40:	f8 cf       	rjmp	.-16     	; 0x1f32 <__floatsisf+0x1c>
    1f42:	fa f4       	brpl	.+62     	; 0x1f82 <__floatsisf+0x6c>
    1f44:	bb 0f       	add	r27, r27
    1f46:	11 f4       	brne	.+4      	; 0x1f4c <__floatsisf+0x36>
    1f48:	60 ff       	sbrs	r22, 0
    1f4a:	1b c0       	rjmp	.+54     	; 0x1f82 <__floatsisf+0x6c>
    1f4c:	6f 5f       	subi	r22, 0xFF	; 255
    1f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f50:	8f 4f       	sbci	r24, 0xFF	; 255
    1f52:	9f 4f       	sbci	r25, 0xFF	; 255
    1f54:	16 c0       	rjmp	.+44     	; 0x1f82 <__floatsisf+0x6c>
    1f56:	88 23       	and	r24, r24
    1f58:	11 f0       	breq	.+4      	; 0x1f5e <__floatsisf+0x48>
    1f5a:	96 e9       	ldi	r25, 0x96	; 150
    1f5c:	11 c0       	rjmp	.+34     	; 0x1f80 <__floatsisf+0x6a>
    1f5e:	77 23       	and	r23, r23
    1f60:	21 f0       	breq	.+8      	; 0x1f6a <__floatsisf+0x54>
    1f62:	9e e8       	ldi	r25, 0x8E	; 142
    1f64:	87 2f       	mov	r24, r23
    1f66:	76 2f       	mov	r23, r22
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <__floatsisf+0x5e>
    1f6a:	66 23       	and	r22, r22
    1f6c:	71 f0       	breq	.+28     	; 0x1f8a <__floatsisf+0x74>
    1f6e:	96 e8       	ldi	r25, 0x86	; 134
    1f70:	86 2f       	mov	r24, r22
    1f72:	70 e0       	ldi	r23, 0x00	; 0
    1f74:	60 e0       	ldi	r22, 0x00	; 0
    1f76:	2a f0       	brmi	.+10     	; 0x1f82 <__floatsisf+0x6c>
    1f78:	9a 95       	dec	r25
    1f7a:	66 0f       	add	r22, r22
    1f7c:	77 1f       	adc	r23, r23
    1f7e:	88 1f       	adc	r24, r24
    1f80:	da f7       	brpl	.-10     	; 0x1f78 <__floatsisf+0x62>
    1f82:	88 0f       	add	r24, r24
    1f84:	96 95       	lsr	r25
    1f86:	87 95       	ror	r24
    1f88:	97 f9       	bld	r25, 7
    1f8a:	08 95       	ret

00001f8c <__fp_cmp>:
    1f8c:	99 0f       	add	r25, r25
    1f8e:	00 08       	sbc	r0, r0
    1f90:	55 0f       	add	r21, r21
    1f92:	aa 0b       	sbc	r26, r26
    1f94:	e0 e8       	ldi	r30, 0x80	; 128
    1f96:	fe ef       	ldi	r31, 0xFE	; 254
    1f98:	16 16       	cp	r1, r22
    1f9a:	17 06       	cpc	r1, r23
    1f9c:	e8 07       	cpc	r30, r24
    1f9e:	f9 07       	cpc	r31, r25
    1fa0:	c0 f0       	brcs	.+48     	; 0x1fd2 <__fp_cmp+0x46>
    1fa2:	12 16       	cp	r1, r18
    1fa4:	13 06       	cpc	r1, r19
    1fa6:	e4 07       	cpc	r30, r20
    1fa8:	f5 07       	cpc	r31, r21
    1faa:	98 f0       	brcs	.+38     	; 0x1fd2 <__fp_cmp+0x46>
    1fac:	62 1b       	sub	r22, r18
    1fae:	73 0b       	sbc	r23, r19
    1fb0:	84 0b       	sbc	r24, r20
    1fb2:	95 0b       	sbc	r25, r21
    1fb4:	39 f4       	brne	.+14     	; 0x1fc4 <__fp_cmp+0x38>
    1fb6:	0a 26       	eor	r0, r26
    1fb8:	61 f0       	breq	.+24     	; 0x1fd2 <__fp_cmp+0x46>
    1fba:	23 2b       	or	r18, r19
    1fbc:	24 2b       	or	r18, r20
    1fbe:	25 2b       	or	r18, r21
    1fc0:	21 f4       	brne	.+8      	; 0x1fca <__fp_cmp+0x3e>
    1fc2:	08 95       	ret
    1fc4:	0a 26       	eor	r0, r26
    1fc6:	09 f4       	brne	.+2      	; 0x1fca <__fp_cmp+0x3e>
    1fc8:	a1 40       	sbci	r26, 0x01	; 1
    1fca:	a6 95       	lsr	r26
    1fcc:	8f ef       	ldi	r24, 0xFF	; 255
    1fce:	81 1d       	adc	r24, r1
    1fd0:	81 1d       	adc	r24, r1
    1fd2:	08 95       	ret

00001fd4 <__fp_inf>:
    1fd4:	97 f9       	bld	r25, 7
    1fd6:	9f 67       	ori	r25, 0x7F	; 127
    1fd8:	80 e8       	ldi	r24, 0x80	; 128
    1fda:	70 e0       	ldi	r23, 0x00	; 0
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	08 95       	ret

00001fe0 <__fp_nan>:
    1fe0:	9f ef       	ldi	r25, 0xFF	; 255
    1fe2:	80 ec       	ldi	r24, 0xC0	; 192
    1fe4:	08 95       	ret

00001fe6 <__fp_pscA>:
    1fe6:	00 24       	eor	r0, r0
    1fe8:	0a 94       	dec	r0
    1fea:	16 16       	cp	r1, r22
    1fec:	17 06       	cpc	r1, r23
    1fee:	18 06       	cpc	r1, r24
    1ff0:	09 06       	cpc	r0, r25
    1ff2:	08 95       	ret

00001ff4 <__fp_pscB>:
    1ff4:	00 24       	eor	r0, r0
    1ff6:	0a 94       	dec	r0
    1ff8:	12 16       	cp	r1, r18
    1ffa:	13 06       	cpc	r1, r19
    1ffc:	14 06       	cpc	r1, r20
    1ffe:	05 06       	cpc	r0, r21
    2000:	08 95       	ret

00002002 <__fp_round>:
    2002:	09 2e       	mov	r0, r25
    2004:	03 94       	inc	r0
    2006:	00 0c       	add	r0, r0
    2008:	11 f4       	brne	.+4      	; 0x200e <__fp_round+0xc>
    200a:	88 23       	and	r24, r24
    200c:	52 f0       	brmi	.+20     	; 0x2022 <__fp_round+0x20>
    200e:	bb 0f       	add	r27, r27
    2010:	40 f4       	brcc	.+16     	; 0x2022 <__fp_round+0x20>
    2012:	bf 2b       	or	r27, r31
    2014:	11 f4       	brne	.+4      	; 0x201a <__fp_round+0x18>
    2016:	60 ff       	sbrs	r22, 0
    2018:	04 c0       	rjmp	.+8      	; 0x2022 <__fp_round+0x20>
    201a:	6f 5f       	subi	r22, 0xFF	; 255
    201c:	7f 4f       	sbci	r23, 0xFF	; 255
    201e:	8f 4f       	sbci	r24, 0xFF	; 255
    2020:	9f 4f       	sbci	r25, 0xFF	; 255
    2022:	08 95       	ret

00002024 <__fp_split3>:
    2024:	57 fd       	sbrc	r21, 7
    2026:	90 58       	subi	r25, 0x80	; 128
    2028:	44 0f       	add	r20, r20
    202a:	55 1f       	adc	r21, r21
    202c:	59 f0       	breq	.+22     	; 0x2044 <__fp_splitA+0x10>
    202e:	5f 3f       	cpi	r21, 0xFF	; 255
    2030:	71 f0       	breq	.+28     	; 0x204e <__fp_splitA+0x1a>
    2032:	47 95       	ror	r20

00002034 <__fp_splitA>:
    2034:	88 0f       	add	r24, r24
    2036:	97 fb       	bst	r25, 7
    2038:	99 1f       	adc	r25, r25
    203a:	61 f0       	breq	.+24     	; 0x2054 <__fp_splitA+0x20>
    203c:	9f 3f       	cpi	r25, 0xFF	; 255
    203e:	79 f0       	breq	.+30     	; 0x205e <__fp_splitA+0x2a>
    2040:	87 95       	ror	r24
    2042:	08 95       	ret
    2044:	12 16       	cp	r1, r18
    2046:	13 06       	cpc	r1, r19
    2048:	14 06       	cpc	r1, r20
    204a:	55 1f       	adc	r21, r21
    204c:	f2 cf       	rjmp	.-28     	; 0x2032 <__fp_split3+0xe>
    204e:	46 95       	lsr	r20
    2050:	f1 df       	rcall	.-30     	; 0x2034 <__fp_splitA>
    2052:	08 c0       	rjmp	.+16     	; 0x2064 <__fp_splitA+0x30>
    2054:	16 16       	cp	r1, r22
    2056:	17 06       	cpc	r1, r23
    2058:	18 06       	cpc	r1, r24
    205a:	99 1f       	adc	r25, r25
    205c:	f1 cf       	rjmp	.-30     	; 0x2040 <__fp_splitA+0xc>
    205e:	86 95       	lsr	r24
    2060:	71 05       	cpc	r23, r1
    2062:	61 05       	cpc	r22, r1
    2064:	08 94       	sec
    2066:	08 95       	ret

00002068 <__fp_zero>:
    2068:	e8 94       	clt

0000206a <__fp_szero>:
    206a:	bb 27       	eor	r27, r27
    206c:	66 27       	eor	r22, r22
    206e:	77 27       	eor	r23, r23
    2070:	cb 01       	movw	r24, r22
    2072:	97 f9       	bld	r25, 7
    2074:	08 95       	ret

00002076 <__gesf2>:
    2076:	8a df       	rcall	.-236    	; 0x1f8c <__fp_cmp>
    2078:	08 f4       	brcc	.+2      	; 0x207c <__gesf2+0x6>
    207a:	8f ef       	ldi	r24, 0xFF	; 255
    207c:	08 95       	ret

0000207e <__mulsf3>:
    207e:	0b d0       	rcall	.+22     	; 0x2096 <__mulsf3x>
    2080:	c0 cf       	rjmp	.-128    	; 0x2002 <__fp_round>
    2082:	b1 df       	rcall	.-158    	; 0x1fe6 <__fp_pscA>
    2084:	28 f0       	brcs	.+10     	; 0x2090 <__mulsf3+0x12>
    2086:	b6 df       	rcall	.-148    	; 0x1ff4 <__fp_pscB>
    2088:	18 f0       	brcs	.+6      	; 0x2090 <__mulsf3+0x12>
    208a:	95 23       	and	r25, r21
    208c:	09 f0       	breq	.+2      	; 0x2090 <__mulsf3+0x12>
    208e:	a2 cf       	rjmp	.-188    	; 0x1fd4 <__fp_inf>
    2090:	a7 cf       	rjmp	.-178    	; 0x1fe0 <__fp_nan>
    2092:	11 24       	eor	r1, r1
    2094:	ea cf       	rjmp	.-44     	; 0x206a <__fp_szero>

00002096 <__mulsf3x>:
    2096:	c6 df       	rcall	.-116    	; 0x2024 <__fp_split3>
    2098:	a0 f3       	brcs	.-24     	; 0x2082 <__mulsf3+0x4>

0000209a <__mulsf3_pse>:
    209a:	95 9f       	mul	r25, r21
    209c:	d1 f3       	breq	.-12     	; 0x2092 <__mulsf3+0x14>
    209e:	95 0f       	add	r25, r21
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	55 1f       	adc	r21, r21
    20a4:	62 9f       	mul	r22, r18
    20a6:	f0 01       	movw	r30, r0
    20a8:	72 9f       	mul	r23, r18
    20aa:	bb 27       	eor	r27, r27
    20ac:	f0 0d       	add	r31, r0
    20ae:	b1 1d       	adc	r27, r1
    20b0:	63 9f       	mul	r22, r19
    20b2:	aa 27       	eor	r26, r26
    20b4:	f0 0d       	add	r31, r0
    20b6:	b1 1d       	adc	r27, r1
    20b8:	aa 1f       	adc	r26, r26
    20ba:	64 9f       	mul	r22, r20
    20bc:	66 27       	eor	r22, r22
    20be:	b0 0d       	add	r27, r0
    20c0:	a1 1d       	adc	r26, r1
    20c2:	66 1f       	adc	r22, r22
    20c4:	82 9f       	mul	r24, r18
    20c6:	22 27       	eor	r18, r18
    20c8:	b0 0d       	add	r27, r0
    20ca:	a1 1d       	adc	r26, r1
    20cc:	62 1f       	adc	r22, r18
    20ce:	73 9f       	mul	r23, r19
    20d0:	b0 0d       	add	r27, r0
    20d2:	a1 1d       	adc	r26, r1
    20d4:	62 1f       	adc	r22, r18
    20d6:	83 9f       	mul	r24, r19
    20d8:	a0 0d       	add	r26, r0
    20da:	61 1d       	adc	r22, r1
    20dc:	22 1f       	adc	r18, r18
    20de:	74 9f       	mul	r23, r20
    20e0:	33 27       	eor	r19, r19
    20e2:	a0 0d       	add	r26, r0
    20e4:	61 1d       	adc	r22, r1
    20e6:	23 1f       	adc	r18, r19
    20e8:	84 9f       	mul	r24, r20
    20ea:	60 0d       	add	r22, r0
    20ec:	21 1d       	adc	r18, r1
    20ee:	82 2f       	mov	r24, r18
    20f0:	76 2f       	mov	r23, r22
    20f2:	6a 2f       	mov	r22, r26
    20f4:	11 24       	eor	r1, r1
    20f6:	9f 57       	subi	r25, 0x7F	; 127
    20f8:	50 40       	sbci	r21, 0x00	; 0
    20fa:	8a f0       	brmi	.+34     	; 0x211e <__mulsf3_pse+0x84>
    20fc:	e1 f0       	breq	.+56     	; 0x2136 <__mulsf3_pse+0x9c>
    20fe:	88 23       	and	r24, r24
    2100:	4a f0       	brmi	.+18     	; 0x2114 <__mulsf3_pse+0x7a>
    2102:	ee 0f       	add	r30, r30
    2104:	ff 1f       	adc	r31, r31
    2106:	bb 1f       	adc	r27, r27
    2108:	66 1f       	adc	r22, r22
    210a:	77 1f       	adc	r23, r23
    210c:	88 1f       	adc	r24, r24
    210e:	91 50       	subi	r25, 0x01	; 1
    2110:	50 40       	sbci	r21, 0x00	; 0
    2112:	a9 f7       	brne	.-22     	; 0x20fe <__mulsf3_pse+0x64>
    2114:	9e 3f       	cpi	r25, 0xFE	; 254
    2116:	51 05       	cpc	r21, r1
    2118:	70 f0       	brcs	.+28     	; 0x2136 <__mulsf3_pse+0x9c>
    211a:	5c cf       	rjmp	.-328    	; 0x1fd4 <__fp_inf>
    211c:	a6 cf       	rjmp	.-180    	; 0x206a <__fp_szero>
    211e:	5f 3f       	cpi	r21, 0xFF	; 255
    2120:	ec f3       	brlt	.-6      	; 0x211c <__mulsf3_pse+0x82>
    2122:	98 3e       	cpi	r25, 0xE8	; 232
    2124:	dc f3       	brlt	.-10     	; 0x211c <__mulsf3_pse+0x82>
    2126:	86 95       	lsr	r24
    2128:	77 95       	ror	r23
    212a:	67 95       	ror	r22
    212c:	b7 95       	ror	r27
    212e:	f7 95       	ror	r31
    2130:	e7 95       	ror	r30
    2132:	9f 5f       	subi	r25, 0xFF	; 255
    2134:	c1 f7       	brne	.-16     	; 0x2126 <__mulsf3_pse+0x8c>
    2136:	fe 2b       	or	r31, r30
    2138:	88 0f       	add	r24, r24
    213a:	91 1d       	adc	r25, r1
    213c:	96 95       	lsr	r25
    213e:	87 95       	ror	r24
    2140:	97 f9       	bld	r25, 7
    2142:	08 95       	ret

00002144 <__divmodhi4>:
    2144:	97 fb       	bst	r25, 7
    2146:	07 2e       	mov	r0, r23
    2148:	16 f4       	brtc	.+4      	; 0x214e <__divmodhi4+0xa>
    214a:	00 94       	com	r0
    214c:	06 d0       	rcall	.+12     	; 0x215a <__divmodhi4_neg1>
    214e:	77 fd       	sbrc	r23, 7
    2150:	08 d0       	rcall	.+16     	; 0x2162 <__divmodhi4_neg2>
    2152:	14 d0       	rcall	.+40     	; 0x217c <__udivmodhi4>
    2154:	07 fc       	sbrc	r0, 7
    2156:	05 d0       	rcall	.+10     	; 0x2162 <__divmodhi4_neg2>
    2158:	3e f4       	brtc	.+14     	; 0x2168 <__divmodhi4_exit>

0000215a <__divmodhi4_neg1>:
    215a:	90 95       	com	r25
    215c:	81 95       	neg	r24
    215e:	9f 4f       	sbci	r25, 0xFF	; 255
    2160:	08 95       	ret

00002162 <__divmodhi4_neg2>:
    2162:	70 95       	com	r23
    2164:	61 95       	neg	r22
    2166:	7f 4f       	sbci	r23, 0xFF	; 255

00002168 <__divmodhi4_exit>:
    2168:	08 95       	ret

0000216a <__tablejump2__>:
    216a:	ee 0f       	add	r30, r30
    216c:	ff 1f       	adc	r31, r31
    216e:	00 24       	eor	r0, r0
    2170:	00 1c       	adc	r0, r0
    2172:	0b be       	out	0x3b, r0	; 59
    2174:	07 90       	elpm	r0, Z+
    2176:	f6 91       	elpm	r31, Z
    2178:	e0 2d       	mov	r30, r0
    217a:	09 94       	ijmp

0000217c <__udivmodhi4>:
    217c:	aa 1b       	sub	r26, r26
    217e:	bb 1b       	sub	r27, r27
    2180:	51 e1       	ldi	r21, 0x11	; 17
    2182:	07 c0       	rjmp	.+14     	; 0x2192 <__udivmodhi4_ep>

00002184 <__udivmodhi4_loop>:
    2184:	aa 1f       	adc	r26, r26
    2186:	bb 1f       	adc	r27, r27
    2188:	a6 17       	cp	r26, r22
    218a:	b7 07       	cpc	r27, r23
    218c:	10 f0       	brcs	.+4      	; 0x2192 <__udivmodhi4_ep>
    218e:	a6 1b       	sub	r26, r22
    2190:	b7 0b       	sbc	r27, r23

00002192 <__udivmodhi4_ep>:
    2192:	88 1f       	adc	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	5a 95       	dec	r21
    2198:	a9 f7       	brne	.-22     	; 0x2184 <__udivmodhi4_loop>
    219a:	80 95       	com	r24
    219c:	90 95       	com	r25
    219e:	bc 01       	movw	r22, r24
    21a0:	cd 01       	movw	r24, r26
    21a2:	08 95       	ret

000021a4 <_exit>:
    21a4:	f8 94       	cli

000021a6 <__stop_program>:
    21a6:	ff cf       	rjmp	.-2      	; 0x21a6 <__stop_program>
