
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000009d4  00000a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  0080010c  0080010c  00000a74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bac  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e3  00000000  00000000  000017b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013b9  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010639  00000000  00000000  00003158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006fe  00000000  00000000  00013791  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00013e8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f0e  00000000  00000000  00013fdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	ad c3       	rjmp	.+1882   	; 0x760 <__vector_1>
   6:	00 00       	nop
   8:	6b c2       	rjmp	.+1238   	; 0x4e0 <__vector_2>
   a:	00 00       	nop
   c:	91 c2       	rjmp	.+1314   	; 0x530 <__vector_3>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	1b c2       	rjmp	.+1078   	; 0x46c <__vector_13>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	02 04       	cpc	r0, r2
  8e:	07 04       	cpc	r0, r7
  90:	23 04       	cpc	r2, r3
  92:	31 04       	cpc	r3, r1
  94:	35 04       	cpc	r3, r5
  96:	39 04       	cpc	r3, r9
  98:	75 04       	cpc	r7, r5
  9a:	3d 04       	cpc	r3, r13
  9c:	41 04       	cpc	r4, r1
  9e:	46 04       	cpc	r4, r6
  a0:	4e 04       	cpc	r4, r14
  a2:	56 04       	cpc	r5, r6
  a4:	5e 04       	cpc	r5, r14
  a6:	66 04       	cpc	r6, r6
  a8:	6e 04       	cpc	r6, r14

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	e4 ed       	ldi	r30, 0xD4	; 212
  be:	f9 e0       	ldi	r31, 0x09	; 9
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	ac 30       	cpi	r26, 0x0C	; 12
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	ac e0       	ldi	r26, 0x0C	; 12
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a2 35       	cpi	r26, 0x52	; 82
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	06 d4       	rcall	.+2060   	; 0x8ee <main>
  e2:	76 c4       	rjmp	.+2284   	; 0x9d0 <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  e6:	08 95       	ret

000000e8 <linje_get_error>:

void twoway_turn_lab(void){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
	if(!ongoing_turn ){    //---kör fram i korsningen för att prepa sväng
		sensor_front_tmp=sensor_front;
		drive_forward();
		turn_done=false;
  e8:	a0 91 43 01 	lds	r26, 0x0143
  ec:	b0 91 44 01 	lds	r27, 0x0144
  f0:	95 e0       	ldi	r25, 0x05	; 5
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	9d 01       	movw	r18, r26
  fe:	04 2e       	mov	r0, r20
 100:	02 c0       	rjmp	.+4      	; 0x106 <linje_get_error+0x1e>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <linje_get_error+0x1a>
 10a:	e2 2f       	mov	r30, r18
 10c:	e2 70       	andi	r30, 0x02	; 2
 10e:	e9 9f       	mul	r30, r25
 110:	80 0d       	add	r24, r0
 112:	11 24       	eor	r1, r1
 114:	22 70       	andi	r18, 0x02	; 2
 116:	33 27       	eor	r19, r19
 118:	62 0f       	add	r22, r18
 11a:	73 1f       	adc	r23, r19
 11c:	4e 5f       	subi	r20, 0xFE	; 254
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	91 50       	subi	r25, 0x01	; 1
 122:	46 31       	cpi	r20, 0x16	; 22
 124:	51 05       	cpc	r21, r1
 126:	51 f7       	brne	.-44     	; 0xfc <linje_get_error+0x14>
 128:	08 2e       	mov	r0, r24
 12a:	00 0c       	add	r0, r0
 12c:	99 0b       	sbc	r25, r25
 12e:	20 d4       	rcall	.+2112   	; 0x970 <__divmodhi4>
 130:	86 2f       	mov	r24, r22
 132:	08 95       	ret

00000134 <manual_drive>:
 134:	80 91 23 01 	lds	r24, 0x0123
 138:	90 91 24 01 	lds	r25, 0x0124
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	29 f4       	brne	.+10     	; 0x14a <manual_drive+0x16>
 140:	2d 98       	cbi	0x05, 5	; 5
 142:	2e 98       	cbi	0x05, 6	; 5
 144:	17 bc       	out	0x27, r1	; 39
 146:	18 bc       	out	0x28, r1	; 40
 148:	08 95       	ret
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	49 f4       	brne	.+18     	; 0x162 <manual_drive+0x2e>
 150:	2d 98       	cbi	0x05, 5	; 5
 152:	2e 98       	cbi	0x05, 6	; 5
 154:	80 91 2b 01 	lds	r24, 0x012B
 158:	87 bd       	out	0x27, r24	; 39
 15a:	80 91 29 01 	lds	r24, 0x0129
 15e:	88 bd       	out	0x28, r24	; 40
 160:	08 95       	ret
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	91 05       	cpc	r25, r1
 166:	59 f4       	brne	.+22     	; 0x17e <manual_drive+0x4a>
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 66       	ori	r24, 0x60	; 96
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	80 91 2b 01 	lds	r24, 0x012B
 172:	8d 50       	subi	r24, 0x0D	; 13
 174:	87 bd       	out	0x27, r24	; 39
 176:	80 91 29 01 	lds	r24, 0x0129
 17a:	88 bd       	out	0x28, r24	; 40
 17c:	08 95       	ret
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	91 05       	cpc	r25, r1
 182:	81 f4       	brne	.+32     	; 0x1a4 <manual_drive+0x70>
 184:	2d 98       	cbi	0x05, 5	; 5
 186:	2e 98       	cbi	0x05, 6	; 5
 188:	80 91 2b 01 	lds	r24, 0x012B
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	20 91 29 01 	lds	r18, 0x0129
 192:	90 91 2a 01 	lds	r25, 0x012A
 196:	82 2f       	mov	r24, r18
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	e9 d3       	rcall	.+2002   	; 0x970 <__divmodhi4>
 19e:	26 1b       	sub	r18, r22
 1a0:	28 bd       	out	0x28, r18	; 40
 1a2:	08 95       	ret
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 05       	cpc	r25, r1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <manual_drive+0x96>
 1aa:	2d 98       	cbi	0x05, 5	; 5
 1ac:	2e 98       	cbi	0x05, 6	; 5
 1ae:	20 91 2b 01 	lds	r18, 0x012B
 1b2:	90 91 2c 01 	lds	r25, 0x012C
 1b6:	82 2f       	mov	r24, r18
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	d9 d3       	rcall	.+1970   	; 0x970 <__divmodhi4>
 1be:	26 1b       	sub	r18, r22
 1c0:	27 bd       	out	0x27, r18	; 39
 1c2:	80 91 29 01 	lds	r24, 0x0129
 1c6:	88 bd       	out	0x28, r24	; 40
 1c8:	08 95       	ret
 1ca:	85 30       	cpi	r24, 0x05	; 5
 1cc:	91 05       	cpc	r25, r1
 1ce:	49 f4       	brne	.+18     	; 0x1e2 <manual_drive+0xae>
 1d0:	2d 98       	cbi	0x05, 5	; 5
 1d2:	2e 9a       	sbi	0x05, 6	; 5
 1d4:	80 91 2b 01 	lds	r24, 0x012B
 1d8:	87 bd       	out	0x27, r24	; 39
 1da:	80 91 29 01 	lds	r24, 0x0129
 1de:	88 bd       	out	0x28, r24	; 40
 1e0:	08 95       	ret
 1e2:	06 97       	sbiw	r24, 0x06	; 6
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <manual_drive+0xc4>
 1e6:	2e 98       	cbi	0x05, 6	; 5
 1e8:	2d 9a       	sbi	0x05, 5	; 5
 1ea:	80 91 2b 01 	lds	r24, 0x012B
 1ee:	87 bd       	out	0x27, r24	; 39
 1f0:	80 91 29 01 	lds	r24, 0x0129
 1f4:	88 bd       	out	0x28, r24	; 40
 1f6:	08 95       	ret
 1f8:	10 92 24 01 	sts	0x0124, r1
 1fc:	10 92 23 01 	sts	0x0123, r1
 200:	08 95       	ret

00000202 <labyreg>:
 202:	f8 94       	cli
 204:	80 91 45 01 	lds	r24, 0x0145
 208:	90 91 46 01 	lds	r25, 0x0146
 20c:	20 91 31 01 	lds	r18, 0x0131
 210:	30 91 32 01 	lds	r19, 0x0132
 214:	78 94       	sei
 216:	82 1b       	sub	r24, r18
 218:	93 0b       	sbc	r25, r19
 21a:	90 93 4f 01 	sts	0x014F, r25
 21e:	80 93 4e 01 	sts	0x014E, r24
 222:	20 91 21 01 	lds	r18, 0x0121
 226:	30 91 22 01 	lds	r19, 0x0122
 22a:	ac 01       	movw	r20, r24
 22c:	42 1b       	sub	r20, r18
 22e:	53 0b       	sbc	r21, r19
 230:	50 93 20 01 	sts	0x0120, r21
 234:	40 93 1f 01 	sts	0x011F, r20
 238:	20 91 08 01 	lds	r18, 0x0108
 23c:	30 91 09 01 	lds	r19, 0x0109
 240:	82 9f       	mul	r24, r18
 242:	b0 01       	movw	r22, r0
 244:	83 9f       	mul	r24, r19
 246:	70 0d       	add	r23, r0
 248:	92 9f       	mul	r25, r18
 24a:	70 0d       	add	r23, r0
 24c:	11 24       	eor	r1, r1
 24e:	e0 91 06 01 	lds	r30, 0x0106
 252:	f0 91 07 01 	lds	r31, 0x0107
 256:	4e 9f       	mul	r20, r30
 258:	90 01       	movw	r18, r0
 25a:	4f 9f       	mul	r20, r31
 25c:	30 0d       	add	r19, r0
 25e:	5e 9f       	mul	r21, r30
 260:	30 0d       	add	r19, r0
 262:	11 24       	eor	r1, r1
 264:	26 0f       	add	r18, r22
 266:	37 1f       	adc	r19, r23
 268:	30 93 4c 01 	sts	0x014C, r19
 26c:	20 93 4b 01 	sts	0x014B, r18
 270:	90 93 22 01 	sts	0x0122, r25
 274:	80 93 21 01 	sts	0x0121, r24
 278:	87 b5       	in	r24, 0x27	; 39
 27a:	86 95       	lsr	r24
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	28 17       	cp	r18, r24
 280:	39 07       	cpc	r19, r25
 282:	3c f0       	brlt	.+14     	; 0x292 <labyreg+0x90>
 284:	87 b5       	in	r24, 0x27	; 39
 286:	86 95       	lsr	r24
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 4c 01 	sts	0x014C, r25
 28e:	80 93 4b 01 	sts	0x014B, r24
 292:	88 b5       	in	r24, 0x28	; 40
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	91 95       	neg	r25
 298:	81 95       	neg	r24
 29a:	91 09       	sbc	r25, r1
 29c:	0a f4       	brpl	.+2      	; 0x2a0 <labyreg+0x9e>
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	95 95       	asr	r25
 2a2:	87 95       	ror	r24
 2a4:	20 91 4b 01 	lds	r18, 0x014B
 2a8:	30 91 4c 01 	lds	r19, 0x014C
 2ac:	82 17       	cp	r24, r18
 2ae:	93 07       	cpc	r25, r19
 2b0:	6c f0       	brlt	.+26     	; 0x2cc <labyreg+0xca>
 2b2:	88 b5       	in	r24, 0x28	; 40
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	91 95       	neg	r25
 2b8:	81 95       	neg	r24
 2ba:	91 09       	sbc	r25, r1
 2bc:	0a f4       	brpl	.+2      	; 0x2c0 <labyreg+0xbe>
 2be:	01 96       	adiw	r24, 0x01	; 1
 2c0:	95 95       	asr	r25
 2c2:	87 95       	ror	r24
 2c4:	90 93 4c 01 	sts	0x014C, r25
 2c8:	80 93 4b 01 	sts	0x014B, r24
 2cc:	80 91 4b 01 	lds	r24, 0x014B
 2d0:	90 91 4c 01 	lds	r25, 0x014C
 2d4:	18 16       	cp	r1, r24
 2d6:	19 06       	cpc	r1, r25
 2d8:	44 f4       	brge	.+16     	; 0x2ea <labyreg+0xe8>
 2da:	90 91 2b 01 	lds	r25, 0x012B
 2de:	98 1b       	sub	r25, r24
 2e0:	97 bd       	out	0x27, r25	; 39
 2e2:	80 91 29 01 	lds	r24, 0x0129
 2e6:	88 bd       	out	0x28, r24	; 40
 2e8:	08 95       	ret
 2ea:	99 23       	and	r25, r25
 2ec:	54 f4       	brge	.+20     	; 0x302 <labyreg+0x100>
 2ee:	80 91 2b 01 	lds	r24, 0x012B
 2f2:	87 bd       	out	0x27, r24	; 39
 2f4:	90 91 4b 01 	lds	r25, 0x014B
 2f8:	80 91 29 01 	lds	r24, 0x0129
 2fc:	89 0f       	add	r24, r25
 2fe:	88 bd       	out	0x28, r24	; 40
 300:	08 95       	ret
 302:	89 2b       	or	r24, r25
 304:	31 f4       	brne	.+12     	; 0x312 <labyreg+0x110>
 306:	80 91 2b 01 	lds	r24, 0x012B
 30a:	87 bd       	out	0x27, r24	; 39
 30c:	80 91 29 01 	lds	r24, 0x0129
 310:	88 bd       	out	0x28, r24	; 40
 312:	08 95       	ret

00000314 <linje>:
 314:	86 e0       	ldi	r24, 0x06	; 6
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	90 93 01 01 	sts	0x0101, r25
 31c:	80 93 00 01 	sts	0x0100, r24
 320:	f8 94       	cli
 322:	80 91 15 01 	lds	r24, 0x0115
 326:	90 91 16 01 	lds	r25, 0x0116
 32a:	78 94       	sei
 32c:	20 91 1d 01 	lds	r18, 0x011D
 330:	30 91 1e 01 	lds	r19, 0x011E
 334:	28 1b       	sub	r18, r24
 336:	39 0b       	sbc	r19, r25
 338:	30 93 1c 01 	sts	0x011C, r19
 33c:	20 93 1b 01 	sts	0x011B, r18
 340:	80 91 17 01 	lds	r24, 0x0117
 344:	90 91 18 01 	lds	r25, 0x0118
 348:	a9 01       	movw	r20, r18
 34a:	48 1b       	sub	r20, r24
 34c:	59 0b       	sbc	r21, r25
 34e:	50 93 20 01 	sts	0x0120, r21
 352:	40 93 1f 01 	sts	0x011F, r20
 356:	80 91 04 01 	lds	r24, 0x0104
 35a:	90 91 05 01 	lds	r25, 0x0105
 35e:	28 9f       	mul	r18, r24
 360:	b0 01       	movw	r22, r0
 362:	29 9f       	mul	r18, r25
 364:	70 0d       	add	r23, r0
 366:	38 9f       	mul	r19, r24
 368:	70 0d       	add	r23, r0
 36a:	11 24       	eor	r1, r1
 36c:	e0 91 02 01 	lds	r30, 0x0102
 370:	f0 91 03 01 	lds	r31, 0x0103
 374:	4e 9f       	mul	r20, r30
 376:	c0 01       	movw	r24, r0
 378:	4f 9f       	mul	r20, r31
 37a:	90 0d       	add	r25, r0
 37c:	5e 9f       	mul	r21, r30
 37e:	90 0d       	add	r25, r0
 380:	11 24       	eor	r1, r1
 382:	86 0f       	add	r24, r22
 384:	97 1f       	adc	r25, r23
 386:	60 91 00 01 	lds	r22, 0x0100
 38a:	70 91 01 01 	lds	r23, 0x0101
 38e:	f0 d2       	rcall	.+1504   	; 0x970 <__divmodhi4>
 390:	86 2f       	mov	r24, r22
 392:	97 2f       	mov	r25, r23
 394:	60 93 19 01 	sts	0x0119, r22
 398:	70 93 1a 01 	sts	0x011A, r23
 39c:	30 93 18 01 	sts	0x0118, r19
 3a0:	20 93 17 01 	sts	0x0117, r18
 3a4:	18 16       	cp	r1, r24
 3a6:	19 06       	cpc	r1, r25
 3a8:	44 f4       	brge	.+16     	; 0x3ba <linje+0xa6>
 3aa:	80 91 2b 01 	lds	r24, 0x012B
 3ae:	86 1b       	sub	r24, r22
 3b0:	87 bd       	out	0x27, r24	; 39
 3b2:	80 91 29 01 	lds	r24, 0x0129
 3b6:	88 bd       	out	0x28, r24	; 40
 3b8:	12 c0       	rjmp	.+36     	; 0x3de <linje+0xca>
 3ba:	99 23       	and	r25, r25
 3bc:	44 f4       	brge	.+16     	; 0x3ce <linje+0xba>
 3be:	80 91 29 01 	lds	r24, 0x0129
 3c2:	68 0f       	add	r22, r24
 3c4:	68 bd       	out	0x28, r22	; 40
 3c6:	80 91 2b 01 	lds	r24, 0x012B
 3ca:	87 bd       	out	0x27, r24	; 39
 3cc:	08 c0       	rjmp	.+16     	; 0x3de <linje+0xca>
 3ce:	89 2b       	or	r24, r25
 3d0:	31 f0       	breq	.+12     	; 0x3de <linje+0xca>
 3d2:	80 91 29 01 	lds	r24, 0x0129
 3d6:	88 bd       	out	0x28, r24	; 40
 3d8:	80 91 2b 01 	lds	r24, 0x012B
 3dc:	87 bd       	out	0x27, r24	; 39
 3de:	80 91 19 01 	lds	r24, 0x0119
 3e2:	90 91 1a 01 	lds	r25, 0x011A
 3e6:	90 93 14 01 	sts	0x0114, r25
 3ea:	80 93 13 01 	sts	0x0113, r24
 3ee:	08 95       	ret

000003f0 <linje_main>:
 3f0:	80 91 43 01 	lds	r24, 0x0143
 3f4:	90 91 44 01 	lds	r25, 0x0144
 3f8:	8c 7f       	andi	r24, 0xFC	; 252
 3fa:	90 93 44 01 	sts	0x0144, r25
 3fe:	80 93 43 01 	sts	0x0143, r24
 402:	72 de       	rcall	.-796    	; 0xe8 <linje_get_error>
 404:	08 2e       	mov	r0, r24
 406:	00 0c       	add	r0, r0
 408:	99 0b       	sbc	r25, r25
 40a:	90 93 16 01 	sts	0x0116, r25
 40e:	80 93 15 01 	sts	0x0115, r24
 412:	80 cf       	rjmp	.-256    	; 0x314 <linje>
 414:	08 95       	ret

00000416 <regulator>:
 416:	80 91 0a 01 	lds	r24, 0x010A
 41a:	90 91 0b 01 	lds	r25, 0x010B
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	11 f4       	brne	.+4      	; 0x426 <regulator+0x10>
 422:	e6 cf       	rjmp	.-52     	; 0x3f0 <linje_main>
 424:	08 95       	ret
 426:	ed ce       	rjmp	.-550    	; 0x202 <labyreg>
 428:	08 95       	ret

0000042a <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
 42a:	84 b5       	in	r24, 0x24	; 36
 42c:	83 6a       	ori	r24, 0xA3	; 163
 42e:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
 430:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
 432:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
 434:	85 b5       	in	r24, 0x25	; 37
 436:	83 60       	ori	r24, 0x03	; 3
 438:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
 43a:	88 e7       	ldi	r24, 0x78	; 120
 43c:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
 43e:	85 b1       	in	r24, 0x05	; 5
 440:	15 b8       	out	0x05, r1	; 5
 442:	08 95       	ret

00000444 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
 444:	83 e0       	ldi	r24, 0x03	; 3
 446:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
 448:	e1 e8       	ldi	r30, 0x81	; 129
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	8d 60       	ori	r24, 0x0D	; 13
 450:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
 452:	80 ea       	ldi	r24, 0xA0	; 160
 454:	95 e0       	ldi	r25, 0x05	; 5
 456:	90 93 89 00 	sts	0x0089, r25
 45a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 45e:	ef e6       	ldi	r30, 0x6F	; 111
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	82 60       	ori	r24, 0x02	; 2
 466:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
 468:	b1 9a       	sbi	0x16, 1	; 22
 46a:	08 95       	ret

0000046c <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	8f 93       	push	r24
 47c:	9f 93       	push	r25
	regler_ready=1;
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	90 93 28 01 	sts	0x0128, r25
 486:	80 93 27 01 	sts	0x0127, r24
	//if(counter_timer<10)
	//counter_timer++;
	count_arre++;				//array räknare
 48a:	80 91 10 01 	lds	r24, 0x0110
 48e:	90 91 11 01 	lds	r25, 0x0111
 492:	01 96       	adiw	r24, 0x01	; 1
 494:	90 93 11 01 	sts	0x0111, r25
 498:	80 93 10 01 	sts	0x0110, r24
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
 49c:	20 91 25 01 	lds	r18, 0x0125
 4a0:	30 91 26 01 	lds	r19, 0x0126
 4a4:	2f 5f       	subi	r18, 0xFF	; 255
 4a6:	3f 4f       	sbci	r19, 0xFF	; 255
 4a8:	30 93 26 01 	sts	0x0126, r19
 4ac:	20 93 25 01 	sts	0x0125, r18
	if(count_arre >= 29){
 4b0:	4d 97       	sbiw	r24, 0x1d	; 29
 4b2:	24 f0       	brlt	.+8      	; 0x4bc <__vector_13+0x50>
		count_arre = 0;
 4b4:	10 92 11 01 	sts	0x0111, r1
 4b8:	10 92 10 01 	sts	0x0110, r1
	}
}
 4bc:	9f 91       	pop	r25
 4be:	8f 91       	pop	r24
 4c0:	3f 91       	pop	r19
 4c2:	2f 91       	pop	r18
 4c4:	0f 90       	pop	r0
 4c6:	0f be       	out	0x3f, r0	; 63
 4c8:	0f 90       	pop	r0
 4ca:	1f 90       	pop	r1
 4cc:	18 95       	reti

000004ce <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
 4ce:	8d b3       	in	r24, 0x1d	; 29
 4d0:	86 60       	ori	r24, 0x06	; 6
 4d2:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
 4d4:	e9 e6       	ldi	r30, 0x69	; 105
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	80 81       	ld	r24, Z
 4da:	88 62       	ori	r24, 0x28	; 40
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
 4e0:	1f 92       	push	r1
 4e2:	0f 92       	push	r0
 4e4:	0f b6       	in	r0, 0x3f	; 63
 4e6:	0f 92       	push	r0
 4e8:	11 24       	eor	r1, r1
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
	if(drive_mode==1){
 4ee:	80 91 2f 01 	lds	r24, 0x012F
 4f2:	90 91 30 01 	lds	r25, 0x0130
 4f6:	01 97       	sbiw	r24, 0x01	; 1
 4f8:	39 f4       	brne	.+14     	; 0x508 <__vector_2+0x28>
		drive_mode=0;
 4fa:	10 92 30 01 	sts	0x0130, r1
 4fe:	10 92 2f 01 	sts	0x012F, r1
		PORTD |= (1 << PD1);
 502:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
 504:	58 98       	cbi	0x0b, 0	; 11
 506:	0c c0       	rjmp	.+24     	; 0x520 <__vector_2+0x40>
	}
	else{
		start=0;
 508:	10 92 2e 01 	sts	0x012E, r1
 50c:	10 92 2d 01 	sts	0x012D, r1
		drive_mode=1;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	90 93 30 01 	sts	0x0130, r25
 518:	80 93 2f 01 	sts	0x012F, r24
		PORTD |= (1 << PD0);
 51c:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
 51e:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
 520:	e1 9a       	sbi	0x1c, 1	; 28
}
 522:	9f 91       	pop	r25
 524:	8f 91       	pop	r24
 526:	0f 90       	pop	r0
 528:	0f be       	out	0x3f, r0	; 63
 52a:	0f 90       	pop	r0
 52c:	1f 90       	pop	r1
 52e:	18 95       	reti

00000530 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
 53c:	9f 93       	push	r25
	if(start==0){
 53e:	80 91 2d 01 	lds	r24, 0x012D
 542:	90 91 2e 01 	lds	r25, 0x012E
 546:	89 2b       	or	r24, r25
 548:	39 f4       	brne	.+14     	; 0x558 <__vector_3+0x28>
		start=1;
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	90 93 2e 01 	sts	0x012E, r25
 552:	80 93 2d 01 	sts	0x012D, r24
 556:	04 c0       	rjmp	.+8      	; 0x560 <__vector_3+0x30>
	}
	else{
		start=0;
 558:	10 92 2e 01 	sts	0x012E, r1
 55c:	10 92 2d 01 	sts	0x012D, r1
	}
	EIFR |= (1<< INTF2);
 560:	e2 9a       	sbi	0x1c, 2	; 28
}
 562:	9f 91       	pop	r25
 564:	8f 91       	pop	r24
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
 570:	88 23       	and	r24, r24
 572:	69 f0       	breq	.+26     	; 0x58e <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
 574:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
 576:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
 578:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
 57a:	e9 e6       	ldi	r30, 0x69	; 105
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	80 81       	ld	r24, Z
 580:	83 60       	ori	r24, 0x03	; 3
 582:	80 83       	st	Z, r24
		TWBR = 0x10;
 584:	80 e1       	ldi	r24, 0x10	; 16
 586:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 58a:	10 92 b9 00 	sts	0x00B9, r1
 58e:	08 95       	ret

00000590 <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){
 590:	8f 92       	push	r8
 592:	9f 92       	push	r9
 594:	af 92       	push	r10
 596:	bf 92       	push	r11
 598:	cf 92       	push	r12
 59a:	df 92       	push	r13
 59c:	ef 92       	push	r14
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
 5a8:	eb 01       	movw	r28, r22
 5aa:	08 81       	ld	r16, Y
 5ac:	02 95       	swap	r16
 5ae:	0f 70       	andi	r16, 0x0F	; 15
 5b0:	10 e0       	ldi	r17, 0x00	; 0
 5b2:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
 5b4:	68 94       	set
 5b6:	ee 24       	eor	r14, r14
 5b8:	e3 f8       	bld	r14, 3
 5ba:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 5c0:	ec eb       	ldi	r30, 0xBC	; 188
 5c2:	f0 e0       	ldi	r31, 0x00	; 0
 5c4:	0f 2e       	mov	r0, r31
 5c6:	f4 ea       	ldi	r31, 0xA4	; 164
 5c8:	df 2e       	mov	r13, r31
 5ca:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
 5cc:	a9 eb       	ldi	r26, 0xB9	; 185
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 5d0:	8e 7f       	andi	r24, 0xFE	; 254
 5d2:	c8 2e       	mov	r12, r24
 5d4:	6b eb       	ldi	r22, 0xBB	; 187
 5d6:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 5d8:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;
 5da:	68 94       	set
 5dc:	aa 24       	eor	r10, r10
 5de:	a4 f8       	bld	r10, 4
 5e0:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 5e2:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 5e4:	90 81       	ld	r25, Z
 5e6:	99 23       	and	r25, r25
 5e8:	ec f7       	brge	.-6      	; 0x5e4 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status en start
 5ea:	2c 91       	ld	r18, X
 5ec:	28 7f       	andi	r18, 0xF8	; 248
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	2e 15       	cp	r18, r14
 5f2:	3f 05       	cpc	r19, r15
 5f4:	69 f5       	brne	.+90     	; 0x650 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 5f6:	eb 01       	movw	r28, r22
 5f8:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 5fa:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 5fc:	90 81       	ld	r25, Z
 5fe:	99 23       	and	r25, r25
 600:	ec f7       	brge	.-6      	; 0x5fc <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18)
 602:	9c 91       	ld	r25, X
 604:	98 7f       	andi	r25, 0xF8	; 248
 606:	98 31       	cpi	r25, 0x18	; 24
 608:	29 f0       	breq	.+10     	; 0x614 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 60a:	84 e9       	ldi	r24, 0x94	; 148
 60c:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	1f c0       	rjmp	.+62     	; 0x652 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];
 614:	e4 01       	movw	r28, r8
 616:	99 91       	ld	r25, Y+
 618:	4e 01       	movw	r8, r28
 61a:	eb 01       	movw	r28, r22
 61c:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
 61e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
 620:	90 81       	ld	r25, Z
 622:	99 23       	and	r25, r25
 624:	ec f7       	brge	.-6      	; 0x620 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
 626:	9c 91       	ld	r25, X
 628:	98 7f       	andi	r25, 0xF8	; 248
 62a:	98 32       	cpi	r25, 0x28	; 40
 62c:	29 f0       	breq	.+10     	; 0x638 <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 62e:	84 e9       	ldi	r24, 0x94	; 148
 630:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	0d c0       	rjmp	.+26     	; 0x652 <i2c_send+0xc2>
	}
	counter++;
 638:	4f 5f       	subi	r20, 0xFF	; 255
 63a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;
 63c:	ea 2c       	mov	r14, r10
 63e:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);
 640:	04 17       	cp	r16, r20
 642:	15 07       	cpc	r17, r21
 644:	74 f6       	brge	.-100    	; 0x5e2 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 646:	84 e9       	ldi	r24, 0x94	; 148
 648:	80 93 bc 00 	sts	0x00BC, r24
	return true;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	01 c0       	rjmp	.+2      	; 0x652 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
		return false;		
 650:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;
	}while (counter <= number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	df 90       	pop	r13
 660:	cf 90       	pop	r12
 662:	bf 90       	pop	r11
 664:	af 90       	pop	r10
 666:	9f 90       	pop	r9
 668:	8f 90       	pop	r8
 66a:	08 95       	ret

0000066c <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 66c:	ec eb       	ldi	r30, 0xBC	; 188
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	90 81       	ld	r25, Z
 672:	94 6a       	ori	r25, 0xA4	; 164
 674:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 676:	90 81       	ld	r25, Z
 678:	99 23       	and	r25, r25
 67a:	ec f7       	brge	.-6      	; 0x676 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
 67c:	90 91 b9 00 	lds	r25, 0x00B9
 680:	98 7f       	andi	r25, 0xF8	; 248
 682:	98 30       	cpi	r25, 0x08	; 8
 684:	29 f0       	breq	.+10     	; 0x690 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 686:	84 e9       	ldi	r24, 0x94	; 148
 688:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	08 95       	ret
	}
	TWDR = prossesor | 0x01;
 690:	81 60       	ori	r24, 0x01	; 1
 692:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 696:	84 e8       	ldi	r24, 0x84	; 132
 698:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 69c:	ec eb       	ldi	r30, 0xBC	; 188
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	88 23       	and	r24, r24
 6a4:	ec f7       	brge	.-6      	; 0x6a0 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK)
 6a6:	80 91 b9 00 	lds	r24, 0x00B9
 6aa:	88 7f       	andi	r24, 0xF8	; 248
 6ac:	80 34       	cpi	r24, 0x40	; 64
 6ae:	29 f0       	breq	.+10     	; 0x6ba <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6b0:	84 e9       	ldi	r24, 0x94	; 148
 6b2:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
 6ba:	ec eb       	ldi	r30, 0xBC	; 188
 6bc:	f0 e0       	ldi	r31, 0x00	; 0
 6be:	80 81       	ld	r24, Z
 6c0:	84 68       	ori	r24, 0x84	; 132
 6c2:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 6c4:	80 81       	ld	r24, Z
 6c6:	88 23       	and	r24, r24
 6c8:	ec f7       	brge	.-6      	; 0x6c4 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR;
 6ca:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6ce:	94 e9       	ldi	r25, 0x94	; 148
 6d0:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 6d4:	08 95       	ret

000006d6 <i2c_store_data>:

void i2c_store_data(byte data)
{
	static int counter;
	static int size;
	if(counter == 0){
 6d6:	20 91 0e 01 	lds	r18, 0x010E
 6da:	30 91 0f 01 	lds	r19, 0x010F
 6de:	21 15       	cp	r18, r1
 6e0:	31 05       	cpc	r19, r1
 6e2:	89 f4       	brne	.+34     	; 0x706 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
 6e4:	28 2f       	mov	r18, r24
 6e6:	22 95       	swap	r18
 6e8:	2f 70       	andi	r18, 0x0F	; 15
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	30 93 0d 01 	sts	0x010D, r19
 6f0:	20 93 0c 01 	sts	0x010C, r18
		i2c_data[counter] = data;
 6f4:	80 93 34 01 	sts	0x0134, r24
		counter++;
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	90 93 0f 01 	sts	0x010F, r25
 700:	80 93 0e 01 	sts	0x010E, r24
 704:	18 c0       	rjmp	.+48     	; 0x736 <i2c_store_data+0x60>
	}
	else if(counter < size+1){
 706:	40 91 0c 01 	lds	r20, 0x010C
 70a:	50 91 0d 01 	lds	r21, 0x010D
 70e:	4f 5f       	subi	r20, 0xFF	; 255
 710:	5f 4f       	sbci	r21, 0xFF	; 255
 712:	24 17       	cp	r18, r20
 714:	35 07       	cpc	r19, r21
 716:	5c f4       	brge	.+22     	; 0x72e <i2c_store_data+0x58>
		i2c_data[counter] = data;
 718:	f9 01       	movw	r30, r18
 71a:	ec 5c       	subi	r30, 0xCC	; 204
 71c:	fe 4f       	sbci	r31, 0xFE	; 254
 71e:	80 83       	st	Z, r24
		counter++;
 720:	2f 5f       	subi	r18, 0xFF	; 255
 722:	3f 4f       	sbci	r19, 0xFF	; 255
 724:	30 93 0f 01 	sts	0x010F, r19
 728:	20 93 0e 01 	sts	0x010E, r18
 72c:	04 c0       	rjmp	.+8      	; 0x736 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
 72e:	f9 01       	movw	r30, r18
 730:	ec 5c       	subi	r30, 0xCC	; 204
 732:	fe 4f       	sbci	r31, 0xFE	; 254
 734:	80 83       	st	Z, r24
	}
	if(counter>=size+1){
 736:	80 91 0c 01 	lds	r24, 0x010C
 73a:	90 91 0d 01 	lds	r25, 0x010D
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	20 91 0e 01 	lds	r18, 0x010E
 744:	30 91 0f 01 	lds	r19, 0x010F
 748:	28 17       	cp	r18, r24
 74a:	39 07       	cpc	r19, r25
 74c:	44 f0       	brlt	.+16     	; 0x75e <i2c_store_data+0x88>
		i2c_newdata = true;
 74e:	81 e0       	ldi	r24, 0x01	; 1
 750:	80 93 12 01 	sts	0x0112, r24
		counter = 0;
 754:	10 92 0f 01 	sts	0x010F, r1
 758:	10 92 0e 01 	sts	0x010E, r1
		EIMSK &= ~(1<<INT0);
 75c:	e8 98       	cbi	0x1d, 0	; 29
 75e:	08 95       	ret

00000760 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)
{	
 760:	1f 92       	push	r1
 762:	0f 92       	push	r0
 764:	0f b6       	in	r0, 0x3f	; 63
 766:	0f 92       	push	r0
 768:	11 24       	eor	r1, r1
 76a:	0b b6       	in	r0, 0x3b	; 59
 76c:	0f 92       	push	r0
 76e:	2f 93       	push	r18
 770:	3f 93       	push	r19
 772:	4f 93       	push	r20
 774:	5f 93       	push	r21
 776:	6f 93       	push	r22
 778:	7f 93       	push	r23
 77a:	8f 93       	push	r24
 77c:	9f 93       	push	r25
 77e:	af 93       	push	r26
 780:	bf 93       	push	r27
 782:	ef 93       	push	r30
 784:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 786:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
 788:	36 9b       	sbis	0x06, 6	; 6
 78a:	04 c0       	rjmp	.+8      	; 0x794 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // processor 1
 78c:	82 e0       	ldi	r24, 0x02	; 2
 78e:	6e df       	rcall	.-292    	; 0x66c <i2c_recive>
 790:	a2 df       	rcall	.-188    	; 0x6d6 <i2c_store_data>
 792:	05 c0       	rjmp	.+10     	; 0x79e <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  PINC&(1<< PC7)>0
 794:	37 9b       	sbis	0x06, 7	; 6
 796:	03 c0       	rjmp	.+6      	; 0x79e <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // processor 3
 798:	86 e0       	ldi	r24, 0x06	; 6
 79a:	68 df       	rcall	.-304    	; 0x66c <i2c_recive>
 79c:	9c df       	rcall	.-200    	; 0x6d6 <i2c_store_data>
	}
}
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	7f 91       	pop	r23
 7ac:	6f 91       	pop	r22
 7ae:	5f 91       	pop	r21
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	0f 90       	pop	r0
 7b8:	0b be       	out	0x3b, r0	; 59
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){
	if(i2c_newdata==true)
 7c4:	80 91 12 01 	lds	r24, 0x0112
 7c8:	88 23       	and	r24, r24
 7ca:	09 f4       	brne	.+2      	; 0x7ce <i2c_handel_data+0xa>
 7cc:	8f c0       	rjmp	.+286    	; 0x8ec <i2c_handel_data+0x128>
	{
		i2c_newdata=false;
 7ce:	10 92 12 01 	sts	0x0112, r1
		if(!((i2c_data[0]>>3)&0x01)){
 7d2:	80 91 34 01 	lds	r24, 0x0134
 7d6:	83 fd       	sbrc	r24, 3
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <i2c_handel_data+0x24>
 7da:	84 e6       	ldi	r24, 0x64	; 100
 7dc:	8a 95       	dec	r24
 7de:	f1 f7       	brne	.-4      	; 0x7dc <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
 7e0:	64 e3       	ldi	r22, 0x34	; 52
 7e2:	71 e0       	ldi	r23, 0x01	; 1
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	d4 de       	rcall	.-600    	; 0x590 <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
 7e8:	80 91 34 01 	lds	r24, 0x0134
 7ec:	e8 2f       	mov	r30, r24
 7ee:	ef 70       	andi	r30, 0x0F	; 15
 7f0:	8e 2f       	mov	r24, r30
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	8f 30       	cpi	r24, 0x0F	; 15
 7f6:	91 05       	cpc	r25, r1
 7f8:	08 f0       	brcs	.+2      	; 0x7fc <i2c_handel_data+0x38>
 7fa:	77 c0       	rjmp	.+238    	; 0x8ea <i2c_handel_data+0x126>
 7fc:	fc 01       	movw	r30, r24
 7fe:	ea 5b       	subi	r30, 0xBA	; 186
 800:	ff 4f       	sbci	r31, 0xFF	; 255
 802:	c9 c0       	rjmp	.+402    	; 0x996 <__tablejump2__>
			case 0x00 :
				batteri=i2c_data[1],i2c_data[2];
 804:	80 91 35 01 	lds	r24, 0x0135
 808:	80 93 4d 01 	sts	0x014D, r24
				break;
 80c:	6e c0       	rjmp	.+220    	; 0x8ea <i2c_handel_data+0x126>
			case 0x01 :
				//PORTD ^= (1 << PD0);
				sensor_right = i2c_data[3];
 80e:	e4 e3       	ldi	r30, 0x34	; 52
 810:	f1 e0       	ldi	r31, 0x01	; 1
 812:	83 81       	ldd	r24, Z+3	; 0x03
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	90 93 46 01 	sts	0x0146, r25
 81a:	80 93 45 01 	sts	0x0145, r24
				//distans_right=i2c_data[3];
				distans_fram = i2c_data[2];
 81e:	22 81       	ldd	r18, Z+2	; 0x02
 820:	20 93 47 01 	sts	0x0147, r18
				sensor_left = i2c_data[1];
 824:	21 81       	ldd	r18, Z+1	; 0x01
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	30 93 32 01 	sts	0x0132, r19
 82c:	20 93 31 01 	sts	0x0131, r18
				if(sensor_right > 20)
 830:	85 31       	cpi	r24, 0x15	; 21
 832:	91 05       	cpc	r25, r1
 834:	14 f0       	brlt	.+4      	; 0x83a <i2c_handel_data+0x76>
					PORTD |= (1 << PD0);
 836:	58 9a       	sbi	0x0b, 0	; 11
 838:	58 c0       	rjmp	.+176    	; 0x8ea <i2c_handel_data+0x126>
				else if(sensor_right > 30)
 83a:	4f 97       	sbiw	r24, 0x1f	; 31
 83c:	14 f0       	brlt	.+4      	; 0x842 <i2c_handel_data+0x7e>
					PORTD &= ~(1 << PD0);
 83e:	58 98       	cbi	0x0b, 0	; 11
 840:	54 c0       	rjmp	.+168    	; 0x8ea <i2c_handel_data+0x126>
				else
				PORTD &= ~(1 << PD0);
 842:	58 98       	cbi	0x0b, 0	; 11
 844:	52 c0       	rjmp	.+164    	; 0x8ea <i2c_handel_data+0x126>
				//distans_left=i2c_data[1];
				break;
			case 0x02 :
				Reflex_data=(i2c_data[3]<<16)+(i2c_data[2]<<8)+i2c_data[1];
 846:	e4 e3       	ldi	r30, 0x34	; 52
 848:	f1 e0       	ldi	r31, 0x01	; 1
 84a:	82 81       	ldd	r24, Z+2	; 0x02
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	98 2f       	mov	r25, r24
 850:	88 27       	eor	r24, r24
 852:	21 81       	ldd	r18, Z+1	; 0x01
 854:	82 0f       	add	r24, r18
 856:	91 1d       	adc	r25, r1
 858:	90 93 44 01 	sts	0x0144, r25
 85c:	80 93 43 01 	sts	0x0143, r24
				break;
 860:	44 c0       	rjmp	.+136    	; 0x8ea <i2c_handel_data+0x126>
			case 0x03 :
				RGB_data=1;//"röd";"
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 50 01 	sts	0x0150, r24
				break;
 868:	40 c0       	rjmp	.+128    	; 0x8ea <i2c_handel_data+0x126>
			case 0x04 :
				RGB_data=2;//"grön";
 86a:	82 e0       	ldi	r24, 0x02	; 2
 86c:	80 93 50 01 	sts	0x0150, r24
				break;		
 870:	3c c0       	rjmp	.+120    	; 0x8ea <i2c_handel_data+0x126>
			case 0x05 :
				RGB_data=3;//"blå";
 872:	83 e0       	ldi	r24, 0x03	; 3
 874:	80 93 50 01 	sts	0x0150, r24
				break;
 878:	38 c0       	rjmp	.+112    	; 0x8ea <i2c_handel_data+0x126>
			case 0x06 :
			
				break;
			case 0x07 :
				gyro_90=true;
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	80 93 33 01 	sts	0x0133, r24
				break;
 880:	34 c0       	rjmp	.+104    	; 0x8ea <i2c_handel_data+0x126>
			case 0x08 :
				manual_function=0;
 882:	10 92 24 01 	sts	0x0124, r1
 886:	10 92 23 01 	sts	0x0123, r1
				break;
 88a:	2f c0       	rjmp	.+94     	; 0x8ea <i2c_handel_data+0x126>
			case 0x09 :
				manual_function=1;
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	90 93 24 01 	sts	0x0124, r25
 894:	80 93 23 01 	sts	0x0123, r24
				
				PORTD |= (1 << PD0); // heej
 898:	58 9a       	sbi	0x0b, 0	; 11
				break;
 89a:	27 c0       	rjmp	.+78     	; 0x8ea <i2c_handel_data+0x126>
			case 0x0a :
			PORTD |= (1 << PD0); // heej
 89c:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=2;
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	90 93 24 01 	sts	0x0124, r25
 8a6:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8aa:	1f c0       	rjmp	.+62     	; 0x8ea <i2c_handel_data+0x126>
			case 0x0b :
			PORTD |= (1 << PD0); // heej
 8ac:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=4;
 8ae:	84 e0       	ldi	r24, 0x04	; 4
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	90 93 24 01 	sts	0x0124, r25
 8b6:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8ba:	17 c0       	rjmp	.+46     	; 0x8ea <i2c_handel_data+0x126>
			case 0x0c :
			PORTD |= (1 << PD0); // heej
 8bc:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=3;
 8be:	83 e0       	ldi	r24, 0x03	; 3
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	90 93 24 01 	sts	0x0124, r25
 8c6:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8ca:	0f c0       	rjmp	.+30     	; 0x8ea <i2c_handel_data+0x126>
			case 0x0d :
			PORTD |= (1 << PD0); // heej
 8cc:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=6;
 8ce:	86 e0       	ldi	r24, 0x06	; 6
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	90 93 24 01 	sts	0x0124, r25
 8d6:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <i2c_handel_data+0x126>
			case 0x0e :
			PORTD |= (1 << PD0); // heej
 8dc:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=5;
 8de:	85 e0       	ldi	r24, 0x05	; 5
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	90 93 24 01 	sts	0x0124, r25
 8e6:	80 93 23 01 	sts	0x0123, r24
						
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
 8ea:	e8 9a       	sbi	0x1d, 0	; 29
 8ec:	08 95       	ret

000008ee <main>:
				5,  4,  3,  2, 0 };
//*********************************for test only

int main(void)
{
	interrupt_init();
 8ee:	ef dd       	rcall	.-1058   	; 0x4ce <interrupt_init>
	board_init();
 8f0:	fa db       	rcall	.-2060   	; 0xe6 <board_init>
	initengine();
 8f2:	9b dd       	rcall	.-1226   	; 0x42a <initengine>
	timerinit();
 8f4:	a7 dd       	rcall	.-1202   	; 0x444 <timerinit>
	i2c_setup(1);
 8f6:	81 e0       	ldi	r24, 0x01	; 1
 8f8:	3b de       	rcall	.-906    	; 0x570 <i2c_setup>
	sei();
 8fa:	78 94       	sei
	//***********Set motors speed value here *****************
	left=100/2;//100;				// kanske räcker med en variable för båda om båda kör exakt lika fort
 8fc:	82 e3       	ldi	r24, 0x32	; 50
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	90 93 2c 01 	sts	0x012C, r25
 904:	80 93 2b 01 	sts	0x012B, r24
	right=93/2;//93;
 908:	8e e2       	ldi	r24, 0x2E	; 46
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	90 93 2a 01 	sts	0x012A, r25
 910:	80 93 29 01 	sts	0x0129, r24
	//********************************************************
	motor_left=left;      
 914:	82 e3       	ldi	r24, 0x32	; 50
 916:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
 918:	80 91 29 01 	lds	r24, 0x0129
 91c:	88 bd       	out	0x28, r24	; 40
	byte data2[1];
	data1[0]=0x12;
	data1[1]=0x0f;
	data2[0]=0x04;
	while(1){
		i2c_handel_data();  //test av fregulito	
 91e:	52 df       	rcall	.-348    	; 0x7c4 <i2c_handel_data>
			if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
 920:	80 91 2f 01 	lds	r24, 0x012F
 924:	90 91 30 01 	lds	r25, 0x0130
 928:	81 30       	cpi	r24, 0x01	; 1
 92a:	91 05       	cpc	r25, r1
 92c:	e9 f4       	brne	.+58     	; 0x968 <main+0x7a>
				PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
 92e:	2d 98       	cbi	0x05, 5	; 5
				PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
 930:	2e 98       	cbi	0x05, 6	; 5
				//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
				if(regler_ready==1 && start == 1){
 932:	80 91 27 01 	lds	r24, 0x0127
 936:	90 91 28 01 	lds	r25, 0x0128
 93a:	01 97       	sbiw	r24, 0x01	; 1
 93c:	61 f4       	brne	.+24     	; 0x956 <main+0x68>
 93e:	80 91 2d 01 	lds	r24, 0x012D
 942:	90 91 2e 01 	lds	r25, 0x012E
 946:	01 97       	sbiw	r24, 0x01	; 1
 948:	31 f4       	brne	.+12     	; 0x956 <main+0x68>
					regulator();
 94a:	65 dd       	rcall	.-1334   	; 0x416 <regulator>
					regler_ready=0;	
 94c:	10 92 28 01 	sts	0x0128, r1
 950:	10 92 27 01 	sts	0x0127, r1
 954:	e4 cf       	rjmp	.-56     	; 0x91e <main+0x30>
				}
				else if(start == 0){					// if start is zero then turn off the auto, stops motors
 956:	80 91 2d 01 	lds	r24, 0x012D
 95a:	90 91 2e 01 	lds	r25, 0x012E
 95e:	89 2b       	or	r24, r25
 960:	f1 f6       	brne	.-68     	; 0x91e <main+0x30>
					motor_left=0;
 962:	17 bc       	out	0x27, r1	; 39
					motor_right=0;
 964:	18 bc       	out	0x28, r1	; 40
 966:	db cf       	rjmp	.-74     	; 0x91e <main+0x30>
				}
			}
			else if(drive_mode==0){										// Drivemode is manual
 968:	89 2b       	or	r24, r25
 96a:	c9 f6       	brne	.-78     	; 0x91e <main+0x30>
				manual_drive();
 96c:	e3 db       	rcall	.-2106   	; 0x134 <manual_drive>
 96e:	d7 cf       	rjmp	.-82     	; 0x91e <main+0x30>

00000970 <__divmodhi4>:
 970:	97 fb       	bst	r25, 7
 972:	07 2e       	mov	r0, r23
 974:	16 f4       	brtc	.+4      	; 0x97a <__divmodhi4+0xa>
 976:	00 94       	com	r0
 978:	06 d0       	rcall	.+12     	; 0x986 <__divmodhi4_neg1>
 97a:	77 fd       	sbrc	r23, 7
 97c:	08 d0       	rcall	.+16     	; 0x98e <__divmodhi4_neg2>
 97e:	14 d0       	rcall	.+40     	; 0x9a8 <__udivmodhi4>
 980:	07 fc       	sbrc	r0, 7
 982:	05 d0       	rcall	.+10     	; 0x98e <__divmodhi4_neg2>
 984:	3e f4       	brtc	.+14     	; 0x994 <__divmodhi4_exit>

00000986 <__divmodhi4_neg1>:
 986:	90 95       	com	r25
 988:	81 95       	neg	r24
 98a:	9f 4f       	sbci	r25, 0xFF	; 255
 98c:	08 95       	ret

0000098e <__divmodhi4_neg2>:
 98e:	70 95       	com	r23
 990:	61 95       	neg	r22
 992:	7f 4f       	sbci	r23, 0xFF	; 255

00000994 <__divmodhi4_exit>:
 994:	08 95       	ret

00000996 <__tablejump2__>:
 996:	ee 0f       	add	r30, r30
 998:	ff 1f       	adc	r31, r31
 99a:	00 24       	eor	r0, r0
 99c:	00 1c       	adc	r0, r0
 99e:	0b be       	out	0x3b, r0	; 59
 9a0:	07 90       	elpm	r0, Z+
 9a2:	f6 91       	elpm	r31, Z
 9a4:	e0 2d       	mov	r30, r0
 9a6:	09 94       	ijmp

000009a8 <__udivmodhi4>:
 9a8:	aa 1b       	sub	r26, r26
 9aa:	bb 1b       	sub	r27, r27
 9ac:	51 e1       	ldi	r21, 0x11	; 17
 9ae:	07 c0       	rjmp	.+14     	; 0x9be <__udivmodhi4_ep>

000009b0 <__udivmodhi4_loop>:
 9b0:	aa 1f       	adc	r26, r26
 9b2:	bb 1f       	adc	r27, r27
 9b4:	a6 17       	cp	r26, r22
 9b6:	b7 07       	cpc	r27, r23
 9b8:	10 f0       	brcs	.+4      	; 0x9be <__udivmodhi4_ep>
 9ba:	a6 1b       	sub	r26, r22
 9bc:	b7 0b       	sbc	r27, r23

000009be <__udivmodhi4_ep>:
 9be:	88 1f       	adc	r24, r24
 9c0:	99 1f       	adc	r25, r25
 9c2:	5a 95       	dec	r21
 9c4:	a9 f7       	brne	.-22     	; 0x9b0 <__udivmodhi4_loop>
 9c6:	80 95       	com	r24
 9c8:	90 95       	com	r25
 9ca:	bc 01       	movw	r22, r24
 9cc:	cd 01       	movw	r24, r26
 9ce:	08 95       	ret

000009d0 <_exit>:
 9d0:	f8 94       	cli

000009d2 <__stop_program>:
 9d2:	ff cf       	rjmp	.-2      	; 0x9d2 <__stop_program>
