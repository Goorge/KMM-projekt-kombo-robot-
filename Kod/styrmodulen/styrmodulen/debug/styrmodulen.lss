
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000ac6  00000b5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000044  0080010e  0080010e  00000b68  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b3d  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e5  00000000  00000000  0000183d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013fb  00000000  00000000  00001b22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  00002f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010631  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000765  00000000  00000000  0001385d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00013fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f0e  00000000  00000000  00014112  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	d9 c3       	rjmp	.+1970   	; 0x7b8 <__vector_1>
   6:	00 00       	nop
   8:	97 c2       	rjmp	.+1326   	; 0x538 <__vector_2>
   a:	00 00       	nop
   c:	bd c2       	rjmp	.+1402   	; 0x588 <__vector_3>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	5b c2       	rjmp	.+1206   	; 0x4ec <__vector_13>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2a 04       	cpc	r2, r10
  8e:	2f 04       	cpc	r2, r15
  90:	41 04       	cpc	r4, r1
  92:	4f 04       	cpc	r4, r15
  94:	53 04       	cpc	r5, r3
  96:	57 04       	cpc	r5, r7
  98:	ee 04       	cpc	r14, r14
  9a:	5b 04       	cpc	r5, r11
  9c:	5f 04       	cpc	r5, r15
  9e:	64 04       	cpc	r6, r4
  a0:	6b 04       	cpc	r6, r11
  a2:	72 04       	cpc	r7, r2
  a4:	79 04       	cpc	r7, r9
  a6:	80 04       	cpc	r8, r0
  a8:	87 04       	cpc	r8, r7
  aa:	8e 04       	cpc	r8, r14

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e4       	ldi	r29, 0x40	; 64
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 ec       	ldi	r30, 0xC6	; 198
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	ae 30       	cpi	r26, 0x0E	; 14
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	ae e0       	ldi	r26, 0x0E	; 14
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a2 35       	cpi	r26, 0x52	; 82
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	7e d4       	rcall	.+2300   	; 0x9e0 <main>
  e4:	ee c4       	rjmp	.+2524   	; 0xac2 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  e8:	08 95       	ret

000000ea <linje_get_error>:

void twoway_turn_lab(void){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
	if(!ongoing_turn ){    //---kör fram i korsningen för att prepa sväng
		sensor_front_tmp=sensor_front;
		drive_forward();
		turn_done=false;
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	00 91 43 01 	lds	r16, 0x0143
  f6:	10 91 44 01 	lds	r17, 0x0144
  fa:	20 e0       	ldi	r18, 0x00	; 0
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	70 e0       	ldi	r23, 0x00	; 0
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	c5 e0       	ldi	r28, 0x05	; 5
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	a9 01       	movw	r20, r18
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	f8 01       	movw	r30, r16
 112:	02 c0       	rjmp	.+4      	; 0x118 <linje_get_error+0x2e>
 114:	f5 95       	asr	r31
 116:	e7 95       	ror	r30
 118:	4a 95       	dec	r20
 11a:	e2 f7       	brpl	.-8      	; 0x114 <linje_get_error+0x2a>
 11c:	af 01       	movw	r20, r30
 11e:	43 70       	andi	r20, 0x03	; 3
 120:	55 27       	eor	r21, r21
 122:	de 01       	movw	r26, r28
 124:	a2 1b       	sub	r26, r18
 126:	b3 0b       	sbc	r27, r19
 128:	4a 9f       	mul	r20, r26
 12a:	f0 01       	movw	r30, r0
 12c:	4b 9f       	mul	r20, r27
 12e:	f0 0d       	add	r31, r0
 130:	5a 9f       	mul	r21, r26
 132:	f0 0d       	add	r31, r0
 134:	11 24       	eor	r1, r1
 136:	8e 0f       	add	r24, r30
 138:	9f 1f       	adc	r25, r31
 13a:	64 0f       	add	r22, r20
 13c:	75 1f       	adc	r23, r21
 13e:	2f 5f       	subi	r18, 0xFF	; 255
 140:	3f 4f       	sbci	r19, 0xFF	; 255
 142:	2b 30       	cpi	r18, 0x0B	; 11
 144:	31 05       	cpc	r19, r1
 146:	09 f7       	brne	.-62     	; 0x10a <linje_get_error+0x20>
 148:	8c d4       	rcall	.+2328   	; 0xa62 <__divmodhi4>
 14a:	cb 01       	movw	r24, r22
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	1f 91       	pop	r17
 152:	0f 91       	pop	r16
 154:	08 95       	ret

00000156 <manual_drive>:
 156:	80 91 23 01 	lds	r24, 0x0123
 15a:	90 91 24 01 	lds	r25, 0x0124
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	29 f4       	brne	.+10     	; 0x16c <manual_drive+0x16>
 162:	2d 98       	cbi	0x05, 5	; 5
 164:	2e 98       	cbi	0x05, 6	; 5
 166:	17 bc       	out	0x27, r1	; 39
 168:	18 bc       	out	0x28, r1	; 40
 16a:	08 95       	ret
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	91 05       	cpc	r25, r1
 170:	49 f4       	brne	.+18     	; 0x184 <manual_drive+0x2e>
 172:	2d 98       	cbi	0x05, 5	; 5
 174:	2e 98       	cbi	0x05, 6	; 5
 176:	80 91 2b 01 	lds	r24, 0x012B
 17a:	87 bd       	out	0x27, r24	; 39
 17c:	80 91 29 01 	lds	r24, 0x0129
 180:	88 bd       	out	0x28, r24	; 40
 182:	08 95       	ret
 184:	82 30       	cpi	r24, 0x02	; 2
 186:	91 05       	cpc	r25, r1
 188:	59 f4       	brne	.+22     	; 0x1a0 <manual_drive+0x4a>
 18a:	85 b1       	in	r24, 0x05	; 5
 18c:	80 66       	ori	r24, 0x60	; 96
 18e:	85 b9       	out	0x05, r24	; 5
 190:	80 91 2b 01 	lds	r24, 0x012B
 194:	8d 50       	subi	r24, 0x0D	; 13
 196:	87 bd       	out	0x27, r24	; 39
 198:	80 91 29 01 	lds	r24, 0x0129
 19c:	88 bd       	out	0x28, r24	; 40
 19e:	08 95       	ret
 1a0:	83 30       	cpi	r24, 0x03	; 3
 1a2:	91 05       	cpc	r25, r1
 1a4:	81 f4       	brne	.+32     	; 0x1c6 <manual_drive+0x70>
 1a6:	2d 98       	cbi	0x05, 5	; 5
 1a8:	2e 98       	cbi	0x05, 6	; 5
 1aa:	80 91 2b 01 	lds	r24, 0x012B
 1ae:	87 bd       	out	0x27, r24	; 39
 1b0:	20 91 29 01 	lds	r18, 0x0129
 1b4:	90 91 2a 01 	lds	r25, 0x012A
 1b8:	82 2f       	mov	r24, r18
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	70 e0       	ldi	r23, 0x00	; 0
 1be:	51 d4       	rcall	.+2210   	; 0xa62 <__divmodhi4>
 1c0:	26 1b       	sub	r18, r22
 1c2:	28 bd       	out	0x28, r18	; 40
 1c4:	08 95       	ret
 1c6:	84 30       	cpi	r24, 0x04	; 4
 1c8:	91 05       	cpc	r25, r1
 1ca:	81 f4       	brne	.+32     	; 0x1ec <manual_drive+0x96>
 1cc:	2d 98       	cbi	0x05, 5	; 5
 1ce:	2e 98       	cbi	0x05, 6	; 5
 1d0:	20 91 2b 01 	lds	r18, 0x012B
 1d4:	90 91 2c 01 	lds	r25, 0x012C
 1d8:	82 2f       	mov	r24, r18
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	41 d4       	rcall	.+2178   	; 0xa62 <__divmodhi4>
 1e0:	26 1b       	sub	r18, r22
 1e2:	27 bd       	out	0x27, r18	; 39
 1e4:	80 91 29 01 	lds	r24, 0x0129
 1e8:	88 bd       	out	0x28, r24	; 40
 1ea:	08 95       	ret
 1ec:	85 30       	cpi	r24, 0x05	; 5
 1ee:	91 05       	cpc	r25, r1
 1f0:	49 f4       	brne	.+18     	; 0x204 <manual_drive+0xae>
 1f2:	2d 98       	cbi	0x05, 5	; 5
 1f4:	2e 9a       	sbi	0x05, 6	; 5
 1f6:	80 91 2b 01 	lds	r24, 0x012B
 1fa:	87 bd       	out	0x27, r24	; 39
 1fc:	80 91 29 01 	lds	r24, 0x0129
 200:	88 bd       	out	0x28, r24	; 40
 202:	08 95       	ret
 204:	06 97       	sbiw	r24, 0x06	; 6
 206:	49 f4       	brne	.+18     	; 0x21a <manual_drive+0xc4>
 208:	2e 98       	cbi	0x05, 6	; 5
 20a:	2d 9a       	sbi	0x05, 5	; 5
 20c:	80 91 2b 01 	lds	r24, 0x012B
 210:	87 bd       	out	0x27, r24	; 39
 212:	80 91 29 01 	lds	r24, 0x0129
 216:	88 bd       	out	0x28, r24	; 40
 218:	08 95       	ret
 21a:	10 92 24 01 	sts	0x0124, r1
 21e:	10 92 23 01 	sts	0x0123, r1
 222:	08 95       	ret

00000224 <labyreg>:
 224:	f8 94       	cli
 226:	20 91 45 01 	lds	r18, 0x0145
 22a:	30 91 46 01 	lds	r19, 0x0146
 22e:	78 94       	sei
 230:	80 91 06 01 	lds	r24, 0x0106
 234:	90 91 07 01 	lds	r25, 0x0107
 238:	82 1b       	sub	r24, r18
 23a:	93 0b       	sbc	r25, r19
 23c:	90 93 4f 01 	sts	0x014F, r25
 240:	80 93 4e 01 	sts	0x014E, r24
 244:	20 91 21 01 	lds	r18, 0x0121
 248:	30 91 22 01 	lds	r19, 0x0122
 24c:	ac 01       	movw	r20, r24
 24e:	42 1b       	sub	r20, r18
 250:	53 0b       	sbc	r21, r19
 252:	50 93 20 01 	sts	0x0120, r21
 256:	40 93 1f 01 	sts	0x011F, r20
 25a:	20 91 0a 01 	lds	r18, 0x010A
 25e:	30 91 0b 01 	lds	r19, 0x010B
 262:	82 9f       	mul	r24, r18
 264:	b0 01       	movw	r22, r0
 266:	83 9f       	mul	r24, r19
 268:	70 0d       	add	r23, r0
 26a:	92 9f       	mul	r25, r18
 26c:	70 0d       	add	r23, r0
 26e:	11 24       	eor	r1, r1
 270:	e0 91 08 01 	lds	r30, 0x0108
 274:	f0 91 09 01 	lds	r31, 0x0109
 278:	4e 9f       	mul	r20, r30
 27a:	90 01       	movw	r18, r0
 27c:	4f 9f       	mul	r20, r31
 27e:	30 0d       	add	r19, r0
 280:	5e 9f       	mul	r21, r30
 282:	30 0d       	add	r19, r0
 284:	11 24       	eor	r1, r1
 286:	26 0f       	add	r18, r22
 288:	37 1f       	adc	r19, r23
 28a:	30 93 4c 01 	sts	0x014C, r19
 28e:	20 93 4b 01 	sts	0x014B, r18
 292:	90 93 22 01 	sts	0x0122, r25
 296:	80 93 21 01 	sts	0x0121, r24
 29a:	87 b5       	in	r24, 0x27	; 39
 29c:	86 95       	lsr	r24
 29e:	86 95       	lsr	r24
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	28 17       	cp	r18, r24
 2a4:	39 07       	cpc	r19, r25
 2a6:	44 f0       	brlt	.+16     	; 0x2b8 <labyreg+0x94>
 2a8:	87 b5       	in	r24, 0x27	; 39
 2aa:	86 95       	lsr	r24
 2ac:	86 95       	lsr	r24
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	90 93 4c 01 	sts	0x014C, r25
 2b4:	80 93 4b 01 	sts	0x014B, r24
 2b8:	88 b5       	in	r24, 0x28	; 40
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	91 95       	neg	r25
 2be:	81 95       	neg	r24
 2c0:	91 09       	sbc	r25, r1
 2c2:	0a f4       	brpl	.+2      	; 0x2c6 <labyreg+0xa2>
 2c4:	03 96       	adiw	r24, 0x03	; 3
 2c6:	95 95       	asr	r25
 2c8:	87 95       	ror	r24
 2ca:	95 95       	asr	r25
 2cc:	87 95       	ror	r24
 2ce:	20 91 4b 01 	lds	r18, 0x014B
 2d2:	30 91 4c 01 	lds	r19, 0x014C
 2d6:	82 17       	cp	r24, r18
 2d8:	93 07       	cpc	r25, r19
 2da:	7c f0       	brlt	.+30     	; 0x2fa <labyreg+0xd6>
 2dc:	88 b5       	in	r24, 0x28	; 40
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	91 95       	neg	r25
 2e2:	81 95       	neg	r24
 2e4:	91 09       	sbc	r25, r1
 2e6:	0a f4       	brpl	.+2      	; 0x2ea <labyreg+0xc6>
 2e8:	03 96       	adiw	r24, 0x03	; 3
 2ea:	95 95       	asr	r25
 2ec:	87 95       	ror	r24
 2ee:	95 95       	asr	r25
 2f0:	87 95       	ror	r24
 2f2:	90 93 4c 01 	sts	0x014C, r25
 2f6:	80 93 4b 01 	sts	0x014B, r24
 2fa:	80 91 4b 01 	lds	r24, 0x014B
 2fe:	90 91 4c 01 	lds	r25, 0x014C
 302:	18 16       	cp	r1, r24
 304:	19 06       	cpc	r1, r25
 306:	44 f4       	brge	.+16     	; 0x318 <labyreg+0xf4>
 308:	90 91 2b 01 	lds	r25, 0x012B
 30c:	98 1b       	sub	r25, r24
 30e:	97 bd       	out	0x27, r25	; 39
 310:	80 91 29 01 	lds	r24, 0x0129
 314:	88 bd       	out	0x28, r24	; 40
 316:	08 95       	ret
 318:	99 23       	and	r25, r25
 31a:	54 f4       	brge	.+20     	; 0x330 <labyreg+0x10c>
 31c:	80 91 2b 01 	lds	r24, 0x012B
 320:	87 bd       	out	0x27, r24	; 39
 322:	90 91 4b 01 	lds	r25, 0x014B
 326:	80 91 29 01 	lds	r24, 0x0129
 32a:	89 0f       	add	r24, r25
 32c:	88 bd       	out	0x28, r24	; 40
 32e:	08 95       	ret
 330:	89 2b       	or	r24, r25
 332:	31 f4       	brne	.+12     	; 0x340 <labyreg+0x11c>
 334:	80 91 2b 01 	lds	r24, 0x012B
 338:	87 bd       	out	0x27, r24	; 39
 33a:	80 91 29 01 	lds	r24, 0x0129
 33e:	88 bd       	out	0x28, r24	; 40
 340:	08 95       	ret

00000342 <linje>:
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	90 93 14 01 	sts	0x0114, r25
 34a:	80 93 13 01 	sts	0x0113, r24
 34e:	f8 94       	cli
 350:	80 91 15 01 	lds	r24, 0x0115
 354:	90 91 16 01 	lds	r25, 0x0116
 358:	78 94       	sei
 35a:	20 91 1d 01 	lds	r18, 0x011D
 35e:	30 91 1e 01 	lds	r19, 0x011E
 362:	28 1b       	sub	r18, r24
 364:	39 0b       	sbc	r19, r25
 366:	30 93 1c 01 	sts	0x011C, r19
 36a:	20 93 1b 01 	sts	0x011B, r18
 36e:	80 91 17 01 	lds	r24, 0x0117
 372:	90 91 18 01 	lds	r25, 0x0118
 376:	b9 01       	movw	r22, r18
 378:	68 1b       	sub	r22, r24
 37a:	79 0b       	sbc	r23, r25
 37c:	80 91 00 01 	lds	r24, 0x0100
 380:	90 91 01 01 	lds	r25, 0x0101
 384:	68 9f       	mul	r22, r24
 386:	a0 01       	movw	r20, r0
 388:	69 9f       	mul	r22, r25
 38a:	50 0d       	add	r21, r0
 38c:	78 9f       	mul	r23, r24
 38e:	50 0d       	add	r21, r0
 390:	11 24       	eor	r1, r1
 392:	50 93 20 01 	sts	0x0120, r21
 396:	40 93 1f 01 	sts	0x011F, r20
 39a:	80 91 04 01 	lds	r24, 0x0104
 39e:	90 91 05 01 	lds	r25, 0x0105
 3a2:	28 9f       	mul	r18, r24
 3a4:	b0 01       	movw	r22, r0
 3a6:	29 9f       	mul	r18, r25
 3a8:	70 0d       	add	r23, r0
 3aa:	38 9f       	mul	r19, r24
 3ac:	70 0d       	add	r23, r0
 3ae:	11 24       	eor	r1, r1
 3b0:	e0 91 02 01 	lds	r30, 0x0102
 3b4:	f0 91 03 01 	lds	r31, 0x0103
 3b8:	4e 9f       	mul	r20, r30
 3ba:	c0 01       	movw	r24, r0
 3bc:	4f 9f       	mul	r20, r31
 3be:	90 0d       	add	r25, r0
 3c0:	5e 9f       	mul	r21, r30
 3c2:	90 0d       	add	r25, r0
 3c4:	11 24       	eor	r1, r1
 3c6:	86 0f       	add	r24, r22
 3c8:	97 1f       	adc	r25, r23
 3ca:	60 91 13 01 	lds	r22, 0x0113
 3ce:	70 91 14 01 	lds	r23, 0x0114
 3d2:	47 d3       	rcall	.+1678   	; 0xa62 <__divmodhi4>
 3d4:	cb 01       	movw	r24, r22
 3d6:	70 93 1a 01 	sts	0x011A, r23
 3da:	60 93 19 01 	sts	0x0119, r22
 3de:	30 93 18 01 	sts	0x0118, r19
 3e2:	20 93 17 01 	sts	0x0117, r18
 3e6:	99 23       	and	r25, r25
 3e8:	fc f4       	brge	.+62     	; 0x428 <linje+0xe6>
 3ea:	99 23       	and	r25, r25
 3ec:	24 f4       	brge	.+8      	; 0x3f6 <linje+0xb4>
 3ee:	88 27       	eor	r24, r24
 3f0:	99 27       	eor	r25, r25
 3f2:	86 1b       	sub	r24, r22
 3f4:	97 0b       	sbc	r25, r23
 3f6:	20 91 29 01 	lds	r18, 0x0129
 3fa:	30 91 2a 01 	lds	r19, 0x012A
 3fe:	82 17       	cp	r24, r18
 400:	93 07       	cpc	r25, r19
 402:	44 f0       	brlt	.+16     	; 0x414 <linje+0xd2>
 404:	10 92 1a 01 	sts	0x011A, r1
 408:	10 92 19 01 	sts	0x0119, r1
 40c:	80 91 2b 01 	lds	r24, 0x012B
 410:	87 bd       	out	0x27, r24	; 39
 412:	35 c0       	rjmp	.+106    	; 0x47e <linje+0x13c>
 414:	80 91 2b 01 	lds	r24, 0x012B
 418:	87 bd       	out	0x27, r24	; 39
 41a:	90 91 19 01 	lds	r25, 0x0119
 41e:	80 91 29 01 	lds	r24, 0x0129
 422:	89 0f       	add	r24, r25
 424:	88 bd       	out	0x28, r24	; 40
 426:	2b c0       	rjmp	.+86     	; 0x47e <linje+0x13c>
 428:	18 16       	cp	r1, r24
 42a:	19 06       	cpc	r1, r25
 42c:	04 f5       	brge	.+64     	; 0x46e <linje+0x12c>
 42e:	cb 01       	movw	r24, r22
 430:	99 23       	and	r25, r25
 432:	24 f4       	brge	.+8      	; 0x43c <linje+0xfa>
 434:	88 27       	eor	r24, r24
 436:	99 27       	eor	r25, r25
 438:	86 1b       	sub	r24, r22
 43a:	97 0b       	sbc	r25, r23
 43c:	20 91 2b 01 	lds	r18, 0x012B
 440:	30 91 2c 01 	lds	r19, 0x012C
 444:	82 17       	cp	r24, r18
 446:	93 07       	cpc	r25, r19
 448:	44 f0       	brlt	.+16     	; 0x45a <linje+0x118>
 44a:	10 92 1a 01 	sts	0x011A, r1
 44e:	10 92 19 01 	sts	0x0119, r1
 452:	80 91 29 01 	lds	r24, 0x0129
 456:	87 bd       	out	0x27, r24	; 39
 458:	12 c0       	rjmp	.+36     	; 0x47e <linje+0x13c>
 45a:	80 91 29 01 	lds	r24, 0x0129
 45e:	88 bd       	out	0x28, r24	; 40
 460:	80 91 2b 01 	lds	r24, 0x012B
 464:	90 91 19 01 	lds	r25, 0x0119
 468:	89 1b       	sub	r24, r25
 46a:	87 bd       	out	0x27, r24	; 39
 46c:	08 c0       	rjmp	.+16     	; 0x47e <linje+0x13c>
 46e:	89 2b       	or	r24, r25
 470:	31 f4       	brne	.+12     	; 0x47e <linje+0x13c>
 472:	80 91 2b 01 	lds	r24, 0x012B
 476:	87 bd       	out	0x27, r24	; 39
 478:	80 91 29 01 	lds	r24, 0x0129
 47c:	88 bd       	out	0x28, r24	; 40
 47e:	9b b1       	in	r25, 0x0b	; 11
 480:	82 e0       	ldi	r24, 0x02	; 2
 482:	89 27       	eor	r24, r25
 484:	8b b9       	out	0x0b, r24	; 11
 486:	08 95       	ret

00000488 <linje_main>:
 488:	30 de       	rcall	.-928    	; 0xea <linje_get_error>
 48a:	90 93 16 01 	sts	0x0116, r25
 48e:	80 93 15 01 	sts	0x0115, r24
 492:	57 cf       	rjmp	.-338    	; 0x342 <linje>
 494:	08 95       	ret

00000496 <regulator>:
 496:	80 91 0c 01 	lds	r24, 0x010C
 49a:	90 91 0d 01 	lds	r25, 0x010D
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	11 f4       	brne	.+4      	; 0x4a6 <regulator+0x10>
 4a2:	f2 cf       	rjmp	.-28     	; 0x488 <linje_main>
 4a4:	08 95       	ret
 4a6:	be ce       	rjmp	.-644    	; 0x224 <labyreg>
 4a8:	08 95       	ret

000004aa <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
 4aa:	84 b5       	in	r24, 0x24	; 36
 4ac:	83 6a       	ori	r24, 0xA3	; 163
 4ae:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
 4b0:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
 4b2:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
 4b4:	85 b5       	in	r24, 0x25	; 37
 4b6:	83 60       	ori	r24, 0x03	; 3
 4b8:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
 4ba:	88 e7       	ldi	r24, 0x78	; 120
 4bc:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
 4be:	85 b1       	in	r24, 0x05	; 5
 4c0:	15 b8       	out	0x05, r1	; 5
 4c2:	08 95       	ret

000004c4 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
 4c4:	83 e0       	ldi	r24, 0x03	; 3
 4c6:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
 4c8:	e1 e8       	ldi	r30, 0x81	; 129
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	80 81       	ld	r24, Z
 4ce:	8d 60       	ori	r24, 0x0D	; 13
 4d0:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
 4d2:	80 ea       	ldi	r24, 0xA0	; 160
 4d4:	95 e0       	ldi	r25, 0x05	; 5
 4d6:	90 93 89 00 	sts	0x0089, r25
 4da:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 4de:	ef e6       	ldi	r30, 0x6F	; 111
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	82 60       	ori	r24, 0x02	; 2
 4e6:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
 4e8:	b1 9a       	sbi	0x16, 1	; 22
 4ea:	08 95       	ret

000004ec <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
 4ec:	1f 92       	push	r1
 4ee:	0f 92       	push	r0
 4f0:	0f b6       	in	r0, 0x3f	; 63
 4f2:	0f 92       	push	r0
 4f4:	11 24       	eor	r1, r1
 4f6:	8f 93       	push	r24
 4f8:	9f 93       	push	r25
	regler_ready=1;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	90 93 28 01 	sts	0x0128, r25
 502:	80 93 27 01 	sts	0x0127, r24
	//if(counter_timer<10)
	//counter_timer++;
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
 506:	80 91 25 01 	lds	r24, 0x0125
 50a:	90 91 26 01 	lds	r25, 0x0126
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	90 93 26 01 	sts	0x0126, r25
 514:	80 93 25 01 	sts	0x0125, r24
}
 518:	9f 91       	pop	r25
 51a:	8f 91       	pop	r24
 51c:	0f 90       	pop	r0
 51e:	0f be       	out	0x3f, r0	; 63
 520:	0f 90       	pop	r0
 522:	1f 90       	pop	r1
 524:	18 95       	reti

00000526 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
 526:	8d b3       	in	r24, 0x1d	; 29
 528:	86 60       	ori	r24, 0x06	; 6
 52a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
 52c:	e9 e6       	ldi	r30, 0x69	; 105
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	88 62       	ori	r24, 0x28	; 40
 534:	80 83       	st	Z, r24
 536:	08 95       	ret

00000538 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
 538:	1f 92       	push	r1
 53a:	0f 92       	push	r0
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	0f 92       	push	r0
 540:	11 24       	eor	r1, r1
 542:	8f 93       	push	r24
 544:	9f 93       	push	r25
	if(drive_mode==1){
 546:	80 91 2f 01 	lds	r24, 0x012F
 54a:	90 91 30 01 	lds	r25, 0x0130
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	39 f4       	brne	.+14     	; 0x560 <__vector_2+0x28>
		drive_mode=0;
 552:	10 92 30 01 	sts	0x0130, r1
 556:	10 92 2f 01 	sts	0x012F, r1
		PORTD |= (1 << PD1);
 55a:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
 55c:	58 98       	cbi	0x0b, 0	; 11
 55e:	0c c0       	rjmp	.+24     	; 0x578 <__vector_2+0x40>
	}
	else{
		start=0;
 560:	10 92 2e 01 	sts	0x012E, r1
 564:	10 92 2d 01 	sts	0x012D, r1
		drive_mode=1;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	90 93 30 01 	sts	0x0130, r25
 570:	80 93 2f 01 	sts	0x012F, r24
		PORTD |= (1 << PD0);
 574:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
 576:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
 578:	e1 9a       	sbi	0x1c, 1	; 28
}
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
	if(start==0){
 596:	80 91 2d 01 	lds	r24, 0x012D
 59a:	90 91 2e 01 	lds	r25, 0x012E
 59e:	89 2b       	or	r24, r25
 5a0:	39 f4       	brne	.+14     	; 0x5b0 <__vector_3+0x28>
		start=1;
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	90 93 2e 01 	sts	0x012E, r25
 5aa:	80 93 2d 01 	sts	0x012D, r24
 5ae:	04 c0       	rjmp	.+8      	; 0x5b8 <__vector_3+0x30>
	}
	else{
		start=0;
 5b0:	10 92 2e 01 	sts	0x012E, r1
 5b4:	10 92 2d 01 	sts	0x012D, r1
	}
	EIFR |= (1<< INTF2);
 5b8:	e2 9a       	sbi	0x1c, 2	; 28
}
 5ba:	9f 91       	pop	r25
 5bc:	8f 91       	pop	r24
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
 5c8:	88 23       	and	r24, r24
 5ca:	69 f0       	breq	.+26     	; 0x5e6 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
 5cc:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
 5ce:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
 5d0:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
 5d2:	e9 e6       	ldi	r30, 0x69	; 105
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	83 60       	ori	r24, 0x03	; 3
 5da:	80 83       	st	Z, r24
		TWBR = 0x10;
 5dc:	80 e1       	ldi	r24, 0x10	; 16
 5de:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 5e2:	10 92 b9 00 	sts	0x00B9, r1
 5e6:	08 95       	ret

000005e8 <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){
 5e8:	8f 92       	push	r8
 5ea:	9f 92       	push	r9
 5ec:	af 92       	push	r10
 5ee:	bf 92       	push	r11
 5f0:	cf 92       	push	r12
 5f2:	df 92       	push	r13
 5f4:	ef 92       	push	r14
 5f6:	ff 92       	push	r15
 5f8:	0f 93       	push	r16
 5fa:	1f 93       	push	r17
 5fc:	cf 93       	push	r28
 5fe:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
 600:	eb 01       	movw	r28, r22
 602:	08 81       	ld	r16, Y
 604:	02 95       	swap	r16
 606:	0f 70       	andi	r16, 0x0F	; 15
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
 60c:	68 94       	set
 60e:	ee 24       	eor	r14, r14
 610:	e3 f8       	bld	r14, 3
 612:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
 614:	40 e0       	ldi	r20, 0x00	; 0
 616:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 618:	ec eb       	ldi	r30, 0xBC	; 188
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	0f 2e       	mov	r0, r31
 61e:	f4 ea       	ldi	r31, 0xA4	; 164
 620:	df 2e       	mov	r13, r31
 622:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
 624:	a9 eb       	ldi	r26, 0xB9	; 185
 626:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 628:	8e 7f       	andi	r24, 0xFE	; 254
 62a:	c8 2e       	mov	r12, r24
 62c:	6b eb       	ldi	r22, 0xBB	; 187
 62e:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 630:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;
 632:	68 94       	set
 634:	aa 24       	eor	r10, r10
 636:	a4 f8       	bld	r10, 4
 638:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 63a:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 63c:	90 81       	ld	r25, Z
 63e:	99 23       	and	r25, r25
 640:	ec f7       	brge	.-6      	; 0x63c <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status en start
 642:	2c 91       	ld	r18, X
 644:	28 7f       	andi	r18, 0xF8	; 248
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	2e 15       	cp	r18, r14
 64a:	3f 05       	cpc	r19, r15
 64c:	69 f5       	brne	.+90     	; 0x6a8 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 64e:	eb 01       	movw	r28, r22
 650:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 652:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 654:	90 81       	ld	r25, Z
 656:	99 23       	and	r25, r25
 658:	ec f7       	brge	.-6      	; 0x654 <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18)
 65a:	9c 91       	ld	r25, X
 65c:	98 7f       	andi	r25, 0xF8	; 248
 65e:	98 31       	cpi	r25, 0x18	; 24
 660:	29 f0       	breq	.+10     	; 0x66c <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 662:	84 e9       	ldi	r24, 0x94	; 148
 664:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 668:	80 e0       	ldi	r24, 0x00	; 0
 66a:	1f c0       	rjmp	.+62     	; 0x6aa <i2c_send+0xc2>
	}
		
	TWDR = data[counter];
 66c:	e4 01       	movw	r28, r8
 66e:	99 91       	ld	r25, Y+
 670:	4e 01       	movw	r8, r28
 672:	eb 01       	movw	r28, r22
 674:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
 676:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
 678:	90 81       	ld	r25, Z
 67a:	99 23       	and	r25, r25
 67c:	ec f7       	brge	.-6      	; 0x678 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
 67e:	9c 91       	ld	r25, X
 680:	98 7f       	andi	r25, 0xF8	; 248
 682:	98 32       	cpi	r25, 0x28	; 40
 684:	29 f0       	breq	.+10     	; 0x690 <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 686:	84 e9       	ldi	r24, 0x94	; 148
 688:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	0d c0       	rjmp	.+26     	; 0x6aa <i2c_send+0xc2>
	}
	counter++;
 690:	4f 5f       	subi	r20, 0xFF	; 255
 692:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;
 694:	ea 2c       	mov	r14, r10
 696:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);
 698:	04 17       	cp	r16, r20
 69a:	15 07       	cpc	r17, r21
 69c:	74 f6       	brge	.-100    	; 0x63a <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 69e:	84 e9       	ldi	r24, 0x94	; 148
 6a0:	80 93 bc 00 	sts	0x00BC, r24
	return true;
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	01 c0       	rjmp	.+2      	; 0x6aa <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
		return false;		
 6a8:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;
	}while (counter <= number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	ef 90       	pop	r14
 6b6:	df 90       	pop	r13
 6b8:	cf 90       	pop	r12
 6ba:	bf 90       	pop	r11
 6bc:	af 90       	pop	r10
 6be:	9f 90       	pop	r9
 6c0:	8f 90       	pop	r8
 6c2:	08 95       	ret

000006c4 <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 6c4:	ec eb       	ldi	r30, 0xBC	; 188
 6c6:	f0 e0       	ldi	r31, 0x00	; 0
 6c8:	90 81       	ld	r25, Z
 6ca:	94 6a       	ori	r25, 0xA4	; 164
 6cc:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 6ce:	90 81       	ld	r25, Z
 6d0:	99 23       	and	r25, r25
 6d2:	ec f7       	brge	.-6      	; 0x6ce <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
 6d4:	90 91 b9 00 	lds	r25, 0x00B9
 6d8:	98 7f       	andi	r25, 0xF8	; 248
 6da:	98 30       	cpi	r25, 0x08	; 8
 6dc:	29 f0       	breq	.+10     	; 0x6e8 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6de:	84 e9       	ldi	r24, 0x94	; 148
 6e0:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	08 95       	ret
	}
	TWDR = prossesor | 0x01;
 6e8:	81 60       	ori	r24, 0x01	; 1
 6ea:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 6ee:	84 e8       	ldi	r24, 0x84	; 132
 6f0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 6f4:	ec eb       	ldi	r30, 0xBC	; 188
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	88 23       	and	r24, r24
 6fc:	ec f7       	brge	.-6      	; 0x6f8 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK)
 6fe:	80 91 b9 00 	lds	r24, 0x00B9
 702:	88 7f       	andi	r24, 0xF8	; 248
 704:	80 34       	cpi	r24, 0x40	; 64
 706:	29 f0       	breq	.+10     	; 0x712 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 708:	84 e9       	ldi	r24, 0x94	; 148
 70a:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
 712:	ec eb       	ldi	r30, 0xBC	; 188
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	84 68       	ori	r24, 0x84	; 132
 71a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 71c:	80 81       	ld	r24, Z
 71e:	88 23       	and	r24, r24
 720:	ec f7       	brge	.-6      	; 0x71c <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR;
 722:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 726:	94 e9       	ldi	r25, 0x94	; 148
 728:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 72c:	08 95       	ret

0000072e <i2c_store_data>:

void i2c_store_data(byte data)
{
	static int counter;
	static int size;
	if(counter == 0){
 72e:	20 91 10 01 	lds	r18, 0x0110
 732:	30 91 11 01 	lds	r19, 0x0111
 736:	21 15       	cp	r18, r1
 738:	31 05       	cpc	r19, r1
 73a:	89 f4       	brne	.+34     	; 0x75e <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
 73c:	28 2f       	mov	r18, r24
 73e:	22 95       	swap	r18
 740:	2f 70       	andi	r18, 0x0F	; 15
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	30 93 0f 01 	sts	0x010F, r19
 748:	20 93 0e 01 	sts	0x010E, r18
		i2c_data[counter] = data;
 74c:	80 93 34 01 	sts	0x0134, r24
		counter++;
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	90 93 11 01 	sts	0x0111, r25
 758:	80 93 10 01 	sts	0x0110, r24
 75c:	18 c0       	rjmp	.+48     	; 0x78e <i2c_store_data+0x60>
	}
	else if(counter < size+1){
 75e:	40 91 0e 01 	lds	r20, 0x010E
 762:	50 91 0f 01 	lds	r21, 0x010F
 766:	4f 5f       	subi	r20, 0xFF	; 255
 768:	5f 4f       	sbci	r21, 0xFF	; 255
 76a:	24 17       	cp	r18, r20
 76c:	35 07       	cpc	r19, r21
 76e:	5c f4       	brge	.+22     	; 0x786 <i2c_store_data+0x58>
		i2c_data[counter] = data;
 770:	f9 01       	movw	r30, r18
 772:	ec 5c       	subi	r30, 0xCC	; 204
 774:	fe 4f       	sbci	r31, 0xFE	; 254
 776:	80 83       	st	Z, r24
		counter++;
 778:	2f 5f       	subi	r18, 0xFF	; 255
 77a:	3f 4f       	sbci	r19, 0xFF	; 255
 77c:	30 93 11 01 	sts	0x0111, r19
 780:	20 93 10 01 	sts	0x0110, r18
 784:	04 c0       	rjmp	.+8      	; 0x78e <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
 786:	f9 01       	movw	r30, r18
 788:	ec 5c       	subi	r30, 0xCC	; 204
 78a:	fe 4f       	sbci	r31, 0xFE	; 254
 78c:	80 83       	st	Z, r24
	}
	if(counter>=size+1){
 78e:	80 91 0e 01 	lds	r24, 0x010E
 792:	90 91 0f 01 	lds	r25, 0x010F
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	20 91 10 01 	lds	r18, 0x0110
 79c:	30 91 11 01 	lds	r19, 0x0111
 7a0:	28 17       	cp	r18, r24
 7a2:	39 07       	cpc	r19, r25
 7a4:	44 f0       	brlt	.+16     	; 0x7b6 <i2c_store_data+0x88>
		i2c_newdata = true;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	80 93 12 01 	sts	0x0112, r24
		counter = 0;
 7ac:	10 92 11 01 	sts	0x0111, r1
 7b0:	10 92 10 01 	sts	0x0110, r1
		EIMSK &= ~(1<<INT0);
 7b4:	e8 98       	cbi	0x1d, 0	; 29
 7b6:	08 95       	ret

000007b8 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)
{	
 7b8:	1f 92       	push	r1
 7ba:	0f 92       	push	r0
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	0f 92       	push	r0
 7c0:	11 24       	eor	r1, r1
 7c2:	0b b6       	in	r0, 0x3b	; 59
 7c4:	0f 92       	push	r0
 7c6:	2f 93       	push	r18
 7c8:	3f 93       	push	r19
 7ca:	4f 93       	push	r20
 7cc:	5f 93       	push	r21
 7ce:	6f 93       	push	r22
 7d0:	7f 93       	push	r23
 7d2:	8f 93       	push	r24
 7d4:	9f 93       	push	r25
 7d6:	af 93       	push	r26
 7d8:	bf 93       	push	r27
 7da:	ef 93       	push	r30
 7dc:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7de:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
 7e0:	36 9b       	sbis	0x06, 6	; 6
 7e2:	04 c0       	rjmp	.+8      	; 0x7ec <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // processor 1
 7e4:	82 e0       	ldi	r24, 0x02	; 2
 7e6:	6e df       	rcall	.-292    	; 0x6c4 <i2c_recive>
 7e8:	a2 df       	rcall	.-188    	; 0x72e <i2c_store_data>
 7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  PINC&(1<< PC7)>0
 7ec:	37 9b       	sbis	0x06, 7	; 6
 7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // processor 3
 7f0:	86 e0       	ldi	r24, 0x06	; 6
 7f2:	68 df       	rcall	.-304    	; 0x6c4 <i2c_recive>
 7f4:	9c df       	rcall	.-200    	; 0x72e <i2c_store_data>
	}
}
 7f6:	ff 91       	pop	r31
 7f8:	ef 91       	pop	r30
 7fa:	bf 91       	pop	r27
 7fc:	af 91       	pop	r26
 7fe:	9f 91       	pop	r25
 800:	8f 91       	pop	r24
 802:	7f 91       	pop	r23
 804:	6f 91       	pop	r22
 806:	5f 91       	pop	r21
 808:	4f 91       	pop	r20
 80a:	3f 91       	pop	r19
 80c:	2f 91       	pop	r18
 80e:	0f 90       	pop	r0
 810:	0b be       	out	0x3b, r0	; 59
 812:	0f 90       	pop	r0
 814:	0f be       	out	0x3f, r0	; 63
 816:	0f 90       	pop	r0
 818:	1f 90       	pop	r1
 81a:	18 95       	reti

0000081c <i2c_handel_data>:
	}

}

void i2c_handel_data(void){
	if(i2c_newdata==true)
 81c:	80 91 12 01 	lds	r24, 0x0112
 820:	88 23       	and	r24, r24
 822:	09 f4       	brne	.+2      	; 0x826 <i2c_handel_data+0xa>
 824:	dc c0       	rjmp	.+440    	; 0x9de <i2c_handel_data+0x1c2>
	{
		i2c_newdata=false;
 826:	10 92 12 01 	sts	0x0112, r1
		if(!((i2c_data[0]>>3)&0x01)){
 82a:	80 91 34 01 	lds	r24, 0x0134
 82e:	83 fd       	sbrc	r24, 3
 830:	07 c0       	rjmp	.+14     	; 0x840 <i2c_handel_data+0x24>
 832:	84 e6       	ldi	r24, 0x64	; 100
 834:	8a 95       	dec	r24
 836:	f1 f7       	brne	.-4      	; 0x834 <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
 838:	64 e3       	ldi	r22, 0x34	; 52
 83a:	71 e0       	ldi	r23, 0x01	; 1
 83c:	82 e0       	ldi	r24, 0x02	; 2
 83e:	d4 de       	rcall	.-600    	; 0x5e8 <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
 840:	80 91 34 01 	lds	r24, 0x0134
 844:	e8 2f       	mov	r30, r24
 846:	ef 70       	andi	r30, 0x0F	; 15
 848:	8e 2f       	mov	r24, r30
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	fc 01       	movw	r30, r24
 84e:	ea 5b       	subi	r30, 0xBA	; 186
 850:	ff 4f       	sbci	r31, 0xFF	; 255
 852:	1a c1       	rjmp	.+564    	; 0xa88 <__tablejump2__>
			case 0x00 :
				batteri=i2c_data[1],i2c_data[2];
 854:	80 91 35 01 	lds	r24, 0x0135
 858:	80 93 4d 01 	sts	0x014D, r24
				break;
 85c:	bf c0       	rjmp	.+382    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x01 :
				//PORTD ^= (1 << PD0);
				sensor_right = i2c_data[3];
 85e:	e4 e3       	ldi	r30, 0x34	; 52
 860:	f1 e0       	ldi	r31, 0x01	; 1
 862:	83 81       	ldd	r24, Z+3	; 0x03
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	90 93 46 01 	sts	0x0146, r25
 86a:	80 93 45 01 	sts	0x0145, r24
				//distans_right=i2c_data[3];
				distans_fram = i2c_data[2];
 86e:	82 81       	ldd	r24, Z+2	; 0x02
 870:	80 93 47 01 	sts	0x0147, r24
				sensor_left = i2c_data[1];
 874:	81 81       	ldd	r24, Z+1	; 0x01
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	90 93 32 01 	sts	0x0132, r25
 87c:	80 93 31 01 	sts	0x0131, r24
				//else if(sensor_right > 30)
					//PORTD &= ~(1 << PD0);
				//else
				//PORTD &= ~(1 << PD0);
				//distans_left=i2c_data[1];
				break;
 880:	ad c0       	rjmp	.+346    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x02 :
				Reflex_data=(i2c_data[3]<<16)+(i2c_data[2]<<8)+i2c_data[1];
 882:	e4 e3       	ldi	r30, 0x34	; 52
 884:	f1 e0       	ldi	r31, 0x01	; 1
 886:	82 81       	ldd	r24, Z+2	; 0x02
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	98 2f       	mov	r25, r24
 88c:	88 27       	eor	r24, r24
 88e:	21 81       	ldd	r18, Z+1	; 0x01
 890:	82 0f       	add	r24, r18
 892:	91 1d       	adc	r25, r1
 894:	90 93 44 01 	sts	0x0144, r25
 898:	80 93 43 01 	sts	0x0143, r24
				//PORTD ^= (1 << PD0); // heej
				break;
 89c:	9f c0       	rjmp	.+318    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x03 :
				RGB_data=1;//"röd";"
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	80 93 50 01 	sts	0x0150, r24
				break;
 8a4:	9b c0       	rjmp	.+310    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x04 :
				RGB_data=2;//"grön";
 8a6:	82 e0       	ldi	r24, 0x02	; 2
 8a8:	80 93 50 01 	sts	0x0150, r24
				break;		
 8ac:	97 c0       	rjmp	.+302    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x05 :
				RGB_data=3;//"blå";
 8ae:	83 e0       	ldi	r24, 0x03	; 3
 8b0:	80 93 50 01 	sts	0x0150, r24
				break;
 8b4:	93 c0       	rjmp	.+294    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x06 :
			
				break;
			case 0x07 :
				gyro_90=true;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	80 93 33 01 	sts	0x0133, r24
				break;
 8bc:	8f c0       	rjmp	.+286    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x08 :
				manual_function=0;
 8be:	10 92 24 01 	sts	0x0124, r1
 8c2:	10 92 23 01 	sts	0x0123, r1
				break;
 8c6:	8a c0       	rjmp	.+276    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x09 :
				manual_function=1;
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	90 93 24 01 	sts	0x0124, r25
 8d0:	80 93 23 01 	sts	0x0123, r24
				
				//PORTD |= (1 << PD0); // heej
				break;
 8d4:	83 c0       	rjmp	.+262    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x0a :
			//PORTD |= (1 << PD0); // heej
				manual_function=2;
 8d6:	82 e0       	ldi	r24, 0x02	; 2
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	90 93 24 01 	sts	0x0124, r25
 8de:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8e2:	7c c0       	rjmp	.+248    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x0b :
			//PORTD |= (1 << PD0); // heej
				manual_function=4;
 8e4:	84 e0       	ldi	r24, 0x04	; 4
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	90 93 24 01 	sts	0x0124, r25
 8ec:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8f0:	75 c0       	rjmp	.+234    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x0c :
			//PORTD |= (1 << PD0); // heej
				manual_function=3;
 8f2:	83 e0       	ldi	r24, 0x03	; 3
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	90 93 24 01 	sts	0x0124, r25
 8fa:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8fe:	6e c0       	rjmp	.+220    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x0d :
			//PORTD |= (1 << PD0); // heej
				manual_function=6;
 900:	86 e0       	ldi	r24, 0x06	; 6
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	90 93 24 01 	sts	0x0124, r25
 908:	80 93 23 01 	sts	0x0123, r24
				
				break;
 90c:	67 c0       	rjmp	.+206    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x0e :
			//PORTD |= (1 << PD0); // heej
				manual_function=5;
 90e:	85 e0       	ldi	r24, 0x05	; 5
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	90 93 24 01 	sts	0x0124, r25
 916:	80 93 23 01 	sts	0x0123, r24
				
				break;
 91a:	60 c0       	rjmp	.+192    	; 0x9dc <i2c_handel_data+0x1c0>
			case 0x0f :							// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på)
				if(i2c_data[1]==0xf0){
 91c:	80 91 35 01 	lds	r24, 0x0135
 920:	80 3f       	cpi	r24, 0xF0	; 240
 922:	91 f4       	brne	.+36     	; 0x948 <i2c_handel_data+0x12c>
					if(start==1){
 924:	80 91 2d 01 	lds	r24, 0x012D
 928:	90 91 2e 01 	lds	r25, 0x012E
 92c:	01 97       	sbiw	r24, 0x01	; 1
 92e:	29 f4       	brne	.+10     	; 0x93a <i2c_handel_data+0x11e>
						start=0;
 930:	10 92 2e 01 	sts	0x012E, r1
 934:	10 92 2d 01 	sts	0x012D, r1
 938:	51 c0       	rjmp	.+162    	; 0x9dc <i2c_handel_data+0x1c0>
					}
					else{
						start=1;
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	90 93 2e 01 	sts	0x012E, r25
 942:	80 93 2d 01 	sts	0x012D, r24
 946:	4a c0       	rjmp	.+148    	; 0x9dc <i2c_handel_data+0x1c0>
					}
				}
				else if(i2c_data[1]==0x0f){
 948:	8f 30       	cpi	r24, 0x0F	; 15
 94a:	b1 f4       	brne	.+44     	; 0x978 <i2c_handel_data+0x15c>
					if(drive_mode==1){
 94c:	80 91 2f 01 	lds	r24, 0x012F
 950:	90 91 30 01 	lds	r25, 0x0130
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	49 f4       	brne	.+18     	; 0x96a <i2c_handel_data+0x14e>
						drive_mode=0;
 958:	10 92 30 01 	sts	0x0130, r1
 95c:	10 92 2f 01 	sts	0x012F, r1
						start=0;
 960:	10 92 2e 01 	sts	0x012E, r1
 964:	10 92 2d 01 	sts	0x012D, r1
 968:	39 c0       	rjmp	.+114    	; 0x9dc <i2c_handel_data+0x1c0>
					}
					else{
						drive_mode=1;
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	90 e0       	ldi	r25, 0x00	; 0
 96e:	90 93 30 01 	sts	0x0130, r25
 972:	80 93 2f 01 	sts	0x012F, r24
 976:	32 c0       	rjmp	.+100    	; 0x9dc <i2c_handel_data+0x1c0>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
 978:	81 11       	cpse	r24, r1
 97a:	0f c0       	rjmp	.+30     	; 0x99a <i2c_handel_data+0x17e>
					d_constant = i2c_data[2];
 97c:	e4 e3       	ldi	r30, 0x34	; 52
 97e:	f1 e0       	ldi	r31, 0x01	; 1
 980:	82 81       	ldd	r24, Z+2	; 0x02
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	90 93 03 01 	sts	0x0103, r25
 988:	80 93 02 01 	sts	0x0102, r24
					p_constant = i2c_data[3];
 98c:	83 81       	ldd	r24, Z+3	; 0x03
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	90 93 05 01 	sts	0x0105, r25
 994:	80 93 04 01 	sts	0x0104, r24
 998:	21 c0       	rjmp	.+66     	; 0x9dc <i2c_handel_data+0x1c0>
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
 99a:	81 30       	cpi	r24, 0x01	; 1
 99c:	79 f4       	brne	.+30     	; 0x9bc <i2c_handel_data+0x1a0>
					d_constant_lab = i2c_data[2];
 99e:	e4 e3       	ldi	r30, 0x34	; 52
 9a0:	f1 e0       	ldi	r31, 0x01	; 1
 9a2:	82 81       	ldd	r24, Z+2	; 0x02
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	90 93 09 01 	sts	0x0109, r25
 9aa:	80 93 08 01 	sts	0x0108, r24
					p_constant_lab = i2c_data[3];
 9ae:	83 81       	ldd	r24, Z+3	; 0x03
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	90 93 0b 01 	sts	0x010B, r25
 9b6:	80 93 0a 01 	sts	0x010A, r24
 9ba:	10 c0       	rjmp	.+32     	; 0x9dc <i2c_handel_data+0x1c0>
				}
				else if(i2c_data[1]==0x02){
 9bc:	82 30       	cpi	r24, 0x02	; 2
 9be:	71 f4       	brne	.+28     	; 0x9dc <i2c_handel_data+0x1c0>
					left = i2c_data[2];
 9c0:	e4 e3       	ldi	r30, 0x34	; 52
 9c2:	f1 e0       	ldi	r31, 0x01	; 1
 9c4:	82 81       	ldd	r24, Z+2	; 0x02
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	90 93 2c 01 	sts	0x012C, r25
 9cc:	80 93 2b 01 	sts	0x012B, r24
					right = i2c_data[3];
 9d0:	83 81       	ldd	r24, Z+3	; 0x03
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	90 93 2a 01 	sts	0x012A, r25
 9d8:	80 93 29 01 	sts	0x0129, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
 9dc:	e8 9a       	sbi	0x1d, 0	; 29
 9de:	08 95       	ret

000009e0 <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
 9e0:	a2 dd       	rcall	.-1212   	; 0x526 <interrupt_init>
	board_init();
 9e2:	82 db       	rcall	.-2300   	; 0xe8 <board_init>
	initengine();
 9e4:	62 dd       	rcall	.-1340   	; 0x4aa <initengine>
	timerinit();
 9e6:	6e dd       	rcall	.-1316   	; 0x4c4 <timerinit>
	i2c_setup(1);
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	ee dd       	rcall	.-1060   	; 0x5c8 <i2c_setup>
	sei();
 9ec:	78 94       	sei
	//***********Set motors speed value here *****************
	left=50;//100;				// kanske räcker med en variable för båda om båda kör exakt lika fort
 9ee:	82 e3       	ldi	r24, 0x32	; 50
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	90 93 2c 01 	sts	0x012C, r25
 9f6:	80 93 2b 01 	sts	0x012B, r24
	right=47;//93;
 9fa:	8f e2       	ldi	r24, 0x2F	; 47
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	90 93 2a 01 	sts	0x012A, r25
 a02:	80 93 29 01 	sts	0x0129, r24
	//********************************************************
	motor_left=left;
 a06:	82 e3       	ldi	r24, 0x32	; 50
 a08:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
 a0a:	80 91 29 01 	lds	r24, 0x0129
 a0e:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
 a10:	05 df       	rcall	.-502    	; 0x81c <i2c_handel_data>
			
			if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
 a12:	80 91 2f 01 	lds	r24, 0x012F
 a16:	90 91 30 01 	lds	r25, 0x0130
 a1a:	81 30       	cpi	r24, 0x01	; 1
 a1c:	91 05       	cpc	r25, r1
 a1e:	e9 f4       	brne	.+58     	; 0xa5a <main+0x7a>
				PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
 a20:	2d 98       	cbi	0x05, 5	; 5
				PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
 a22:	2e 98       	cbi	0x05, 6	; 5
				//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
				if(regler_ready==1 && start == 1){
 a24:	80 91 27 01 	lds	r24, 0x0127
 a28:	90 91 28 01 	lds	r25, 0x0128
 a2c:	01 97       	sbiw	r24, 0x01	; 1
 a2e:	61 f4       	brne	.+24     	; 0xa48 <main+0x68>
 a30:	80 91 2d 01 	lds	r24, 0x012D
 a34:	90 91 2e 01 	lds	r25, 0x012E
 a38:	01 97       	sbiw	r24, 0x01	; 1
 a3a:	31 f4       	brne	.+12     	; 0xa48 <main+0x68>
					regulator();
 a3c:	2c dd       	rcall	.-1448   	; 0x496 <regulator>
					regler_ready=0;	
 a3e:	10 92 28 01 	sts	0x0128, r1
 a42:	10 92 27 01 	sts	0x0127, r1
 a46:	e4 cf       	rjmp	.-56     	; 0xa10 <main+0x30>
				}
				else if(start == 0){					// if start is zero then turn off the auto, stops motors
 a48:	80 91 2d 01 	lds	r24, 0x012D
 a4c:	90 91 2e 01 	lds	r25, 0x012E
 a50:	89 2b       	or	r24, r25
 a52:	f1 f6       	brne	.-68     	; 0xa10 <main+0x30>
					motor_left=0;
 a54:	17 bc       	out	0x27, r1	; 39
					motor_right=0;
 a56:	18 bc       	out	0x28, r1	; 40
 a58:	db cf       	rjmp	.-74     	; 0xa10 <main+0x30>
				}
			}
			else if(drive_mode==0){										// Drivemode is manual
 a5a:	89 2b       	or	r24, r25
 a5c:	c9 f6       	brne	.-78     	; 0xa10 <main+0x30>
				manual_drive();
 a5e:	7b db       	rcall	.-2314   	; 0x156 <manual_drive>
 a60:	d7 cf       	rjmp	.-82     	; 0xa10 <main+0x30>

00000a62 <__divmodhi4>:
 a62:	97 fb       	bst	r25, 7
 a64:	07 2e       	mov	r0, r23
 a66:	16 f4       	brtc	.+4      	; 0xa6c <__divmodhi4+0xa>
 a68:	00 94       	com	r0
 a6a:	06 d0       	rcall	.+12     	; 0xa78 <__divmodhi4_neg1>
 a6c:	77 fd       	sbrc	r23, 7
 a6e:	08 d0       	rcall	.+16     	; 0xa80 <__divmodhi4_neg2>
 a70:	14 d0       	rcall	.+40     	; 0xa9a <__udivmodhi4>
 a72:	07 fc       	sbrc	r0, 7
 a74:	05 d0       	rcall	.+10     	; 0xa80 <__divmodhi4_neg2>
 a76:	3e f4       	brtc	.+14     	; 0xa86 <__divmodhi4_exit>

00000a78 <__divmodhi4_neg1>:
 a78:	90 95       	com	r25
 a7a:	81 95       	neg	r24
 a7c:	9f 4f       	sbci	r25, 0xFF	; 255
 a7e:	08 95       	ret

00000a80 <__divmodhi4_neg2>:
 a80:	70 95       	com	r23
 a82:	61 95       	neg	r22
 a84:	7f 4f       	sbci	r23, 0xFF	; 255

00000a86 <__divmodhi4_exit>:
 a86:	08 95       	ret

00000a88 <__tablejump2__>:
 a88:	ee 0f       	add	r30, r30
 a8a:	ff 1f       	adc	r31, r31
 a8c:	00 24       	eor	r0, r0
 a8e:	00 1c       	adc	r0, r0
 a90:	0b be       	out	0x3b, r0	; 59
 a92:	07 90       	elpm	r0, Z+
 a94:	f6 91       	elpm	r31, Z
 a96:	e0 2d       	mov	r30, r0
 a98:	09 94       	ijmp

00000a9a <__udivmodhi4>:
 a9a:	aa 1b       	sub	r26, r26
 a9c:	bb 1b       	sub	r27, r27
 a9e:	51 e1       	ldi	r21, 0x11	; 17
 aa0:	07 c0       	rjmp	.+14     	; 0xab0 <__udivmodhi4_ep>

00000aa2 <__udivmodhi4_loop>:
 aa2:	aa 1f       	adc	r26, r26
 aa4:	bb 1f       	adc	r27, r27
 aa6:	a6 17       	cp	r26, r22
 aa8:	b7 07       	cpc	r27, r23
 aaa:	10 f0       	brcs	.+4      	; 0xab0 <__udivmodhi4_ep>
 aac:	a6 1b       	sub	r26, r22
 aae:	b7 0b       	sbc	r27, r23

00000ab0 <__udivmodhi4_ep>:
 ab0:	88 1f       	adc	r24, r24
 ab2:	99 1f       	adc	r25, r25
 ab4:	5a 95       	dec	r21
 ab6:	a9 f7       	brne	.-22     	; 0xaa2 <__udivmodhi4_loop>
 ab8:	80 95       	com	r24
 aba:	90 95       	com	r25
 abc:	bc 01       	movw	r22, r24
 abe:	cd 01       	movw	r24, r26
 ac0:	08 95       	ret

00000ac2 <_exit>:
 ac2:	f8 94       	cli

00000ac4 <__stop_program>:
 ac4:	ff cf       	rjmp	.-2      	; 0xac4 <__stop_program>
