
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000220e  000022a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000220e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bc  00800120  00800120  000022c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015c9  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000350  00000000  00000000  00003a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001faa  00000000  00000000  00003d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00005d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000109b6  00000000  00000000  0000622c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cbe  00000000  00000000  00016be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000188a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  000189e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_1>
       8:	2e c7       	rjmp	.+3676   	; 0xe66 <__vector_2>
       a:	00 00       	nop
       c:	54 c7       	rjmp	.+3752   	; 0xeb6 <__vector_3>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	b9 c6       	rjmp	.+3442   	; 0xda8 <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1e 0d       	add	r17, r14
      8e:	23 0d       	add	r18, r3
      90:	9c 0d       	add	r25, r12
      92:	b6 0d       	add	r27, r6
      94:	ba 0d       	add	r27, r10
      96:	be 0d       	add	r27, r14
      98:	c2 0d       	add	r28, r2
      9a:	93 0e       	add	r9, r19
      9c:	d9 0d       	add	r29, r9
      9e:	de 0d       	add	r29, r14
      a0:	e5 0d       	add	r30, r5
      a2:	ec 0d       	add	r30, r12
      a4:	f3 0d       	add	r31, r3
      a6:	fa 0d       	add	r31, r10
      a8:	01 0e       	add	r0, r17
      aa:	08 0e       	add	r0, r24

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ee e0       	ldi	r30, 0x0E	; 14
      c0:	f2 e2       	ldi	r31, 0x22	; 34
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a0 32       	cpi	r26, 0x20	; 32
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a0 e2       	ldi	r26, 0x20	; 32
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	ac 3d       	cpi	r26, 0xDC	; 220
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <main>
      e6:	0c 94 05 11 	jmp	0x220a	; 0x220a <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
      ec:	08 95       	ret

000000ee <linje_get_error>:
	return styr_fel;
}



int linje_get_error(){
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	float styr_fel=0;
	fel_antal=0;
     112:	10 92 5d 01 	sts	0x015D, r1
     116:	10 92 5c 01 	sts	0x015C, r1
	cli();
     11a:	f8 94       	cli
	int Reflex_data_tmp = Reflex_data;
     11c:	80 90 99 01 	lds	r8, 0x0199
     120:	90 90 9a 01 	lds	r9, 0x019A
	int Reflex_data2_tmp = Reflex_data2;
     124:	20 90 c2 01 	lds	r2, 0x01C2
     128:	30 90 c3 01 	lds	r3, 0x01C3
	sei();
     12c:	78 94       	sei
     12e:	c0 90 5c 01 	lds	r12, 0x015C
     132:	d0 90 5d 01 	lds	r13, 0x015D
     136:	05 e0       	ldi	r16, 0x05	; 5
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	d0 e0       	ldi	r29, 0x00	; 0
}



int linje_get_error(){
	float styr_fel=0;
     13e:	41 2c       	mov	r4, r1
     140:	51 2c       	mov	r5, r1
     142:	32 01       	movw	r6, r4
     144:	0f 2e       	mov	r0, r31
     146:	f5 e0       	ldi	r31, 0x05	; 5
     148:	af 2e       	mov	r10, r31
     14a:	b1 2c       	mov	r11, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	c5 01       	movw	r24, r10
     150:	80 1b       	sub	r24, r16
     152:	91 0b       	sbc	r25, r17
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
	{
		if(i < 8){ //första 8 sensorenrna
     154:	08 97       	sbiw	r24, 0x08	; 8
     156:	14 f5       	brge	.+68     	; 0x19c <linje_get_error+0xae>
			styr_fel += ((5-i) * ((Reflex_data_tmp>>(i*2))&3));
     158:	74 01       	movw	r14, r8
     15a:	0c 2e       	mov	r0, r28
     15c:	02 c0       	rjmp	.+4      	; 0x162 <linje_get_error+0x74>
     15e:	f5 94       	asr	r15
     160:	e7 94       	ror	r14
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <linje_get_error+0x70>
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	e8 22       	and	r14, r24
     16a:	ff 24       	eor	r15, r15
     16c:	0e 9d       	mul	r16, r14
     16e:	b0 01       	movw	r22, r0
     170:	0f 9d       	mul	r16, r15
     172:	70 0d       	add	r23, r0
     174:	1e 9d       	mul	r17, r14
     176:	70 0d       	add	r23, r0
     178:	11 24       	eor	r1, r1
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     186:	9b 01       	movw	r18, r22
     188:	ac 01       	movw	r20, r24
     18a:	c3 01       	movw	r24, r6
     18c:	b2 01       	movw	r22, r4
     18e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__addsf3>
     192:	2b 01       	movw	r4, r22
     194:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data_tmp>>(i*2))&0x3);
     196:	ce 0c       	add	r12, r14
     198:	df 1c       	adc	r13, r15
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <linje_get_error+0xf2>
     19c:	ce 01       	movw	r24, r28
     19e:	40 97       	sbiw	r24, 0x10	; 16
		}
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
     1a0:	71 01       	movw	r14, r2
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <linje_get_error+0xba>
     1a4:	f5 94       	asr	r15
     1a6:	e7 94       	ror	r14
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <linje_get_error+0xb6>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	e8 22       	and	r14, r24
     1b0:	ff 24       	eor	r15, r15
     1b2:	0e 9d       	mul	r16, r14
     1b4:	b0 01       	movw	r22, r0
     1b6:	0f 9d       	mul	r16, r15
     1b8:	70 0d       	add	r23, r0
     1ba:	1e 9d       	mul	r17, r14
     1bc:	70 0d       	add	r23, r0
     1be:	11 24       	eor	r1, r1
     1c0:	07 2e       	mov	r0, r23
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__addsf3>
     1d8:	2b 01       	movw	r4, r22
     1da:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
     1dc:	ce 0c       	add	r12, r14
     1de:	df 1c       	adc	r13, r15
     1e0:	22 96       	adiw	r28, 0x02	; 2
     1e2:	01 50       	subi	r16, 0x01	; 1
     1e4:	11 09       	sbc	r17, r1
	fel_antal=0;
	cli();
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
     1e6:	c6 31       	cpi	r28, 0x16	; 22
     1e8:	d1 05       	cpc	r29, r1
     1ea:	09 f0       	breq	.+2      	; 0x1ee <linje_get_error+0x100>
     1ec:	b0 cf       	rjmp	.-160    	; 0x14e <linje_get_error+0x60>
     1ee:	d0 92 5d 01 	sts	0x015D, r13
     1f2:	c0 92 5c 01 	sts	0x015C, r12
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
     1f6:	c1 14       	cp	r12, r1
     1f8:	d1 04       	cpc	r13, r1
     1fa:	69 f0       	breq	.+26     	; 0x216 <linje_get_error+0x128>
		styr_fel = 0; //kan inte dela med 0, specialfall
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
     1fc:	b6 01       	movw	r22, r12
     1fe:	dd 0c       	add	r13, r13
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divsf3>
     214:	03 c0       	rjmp	.+6      	; 0x21c <linje_get_error+0x12e>
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
		styr_fel = 0; //kan inte dela med 0, specialfall
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
	return styr_fel;
     21c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixsfsi>
}
     220:	cb 01       	movw	r24, r22
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
     232:	bf 90       	pop	r11
     234:	af 90       	pop	r10
     236:	9f 90       	pop	r9
     238:	8f 90       	pop	r8
     23a:	7f 90       	pop	r7
     23c:	6f 90       	pop	r6
     23e:	5f 90       	pop	r5
     240:	4f 90       	pop	r4
     242:	3f 90       	pop	r3
     244:	2f 90       	pop	r2
     246:	08 95       	ret

00000248 <linje_RGBsveng>:
	}
	
}

signed char linje_RGBsveng() //om RGB ger utslag
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	cli();
     24c:	f8 94       	cli
	signed char styr_fel=0x00;
	int Reflex_data_tmp = Reflex_data;
     24e:	40 91 99 01 	lds	r20, 0x0199
     252:	50 91 9a 01 	lds	r21, 0x019A
	int Reflex_data2_tmp = Reflex_data2;
     256:	60 91 c2 01 	lds	r22, 0x01C2
     25a:	70 91 c3 01 	lds	r23, 0x01C3
	sei();
     25e:	78 94       	sei
		time=0;
	}
	else // fortsätt med RGB sväng
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
     260:	80 91 ac 01 	lds	r24, 0x01AC
     264:	88 23       	and	r24, r24
     266:	09 f4       	brne	.+2      	; 0x26a <linje_RGBsveng+0x22>
     268:	a3 c0       	rjmp	.+326    	; 0x3b0 <linje_RGBsveng+0x168>
     26a:	20 91 5a 01 	lds	r18, 0x015A
     26e:	30 91 5b 01 	lds	r19, 0x015B
     272:	23 2b       	or	r18, r19
     274:	b1 f4       	brne	.+44     	; 0x2a2 <linje_RGBsveng+0x5a>
     276:	20 91 56 01 	lds	r18, 0x0156
     27a:	30 91 57 01 	lds	r19, 0x0157
     27e:	23 2b       	or	r18, r19
     280:	81 f4       	brne	.+32     	; 0x2a2 <linje_RGBsveng+0x5a>
		counter_timer_line_RGB = 0;
     282:	10 92 67 01 	sts	0x0167, r1
     286:	10 92 66 01 	sts	0x0166, r1
		RGB_reset_timer = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 5b 01 	sts	0x015B, r25
     292:	80 93 5a 01 	sts	0x015A, r24
		RGB_force = 1;
     296:	90 93 57 01 	sts	0x0157, r25
     29a:	80 93 56 01 	sts	0x0156, r24
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     29e:	80 e0       	ldi	r24, 0x00	; 0
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
     2a0:	8e c0       	rjmp	.+284    	; 0x3be <linje_RGBsveng+0x176>
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     2a2:	20 91 66 01 	lds	r18, 0x0166
     2a6:	30 91 67 01 	lds	r19, 0x0167
     2aa:	24 30       	cpi	r18, 0x04	; 4
     2ac:	31 05       	cpc	r19, r1
     2ae:	0c f0       	brlt	.+2      	; 0x2b2 <linje_RGBsveng+0x6a>
     2b0:	6f c0       	rjmp	.+222    	; 0x390 <linje_RGBsveng+0x148>
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	71 f5       	brne	.+92     	; 0x312 <linje_RGBsveng+0xca>
     2b6:	a0 ef       	ldi	r26, 0xF0	; 240
     2b8:	bf ef       	ldi	r27, 0xFF	; 255
     2ba:	2b ef       	ldi	r18, 0xFB	; 251
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
			
			for(int i=0;i<11;i++)
			{
				if (styr_fel==0){
     2c2:	81 11       	cpse	r24, r1
     2c4:	1f c0       	rjmp	.+62     	; 0x304 <linje_RGBsveng+0xbc>
					if(i < 8){ //första 8 sensorenrna
     2c6:	e8 30       	cpi	r30, 0x08	; 8
     2c8:	f1 05       	cpc	r31, r1
     2ca:	84 f4       	brge	.+32     	; 0x2ec <linje_RGBsveng+0xa4>
     2cc:	cf 01       	movw	r24, r30
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     2d2:	ea 01       	movw	r28, r20
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <linje_RGBsveng+0x92>
     2d6:	d5 95       	asr	r29
     2d8:	c7 95       	ror	r28
     2da:	8a 95       	dec	r24
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <linje_RGBsveng+0x8e>
     2de:	ce 01       	movw	r24, r28
     2e0:	86 95       	lsr	r24
     2e2:	81 70       	andi	r24, 0x01	; 1
     2e4:	28 9f       	mul	r18, r24
     2e6:	80 2d       	mov	r24, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <linje_RGBsveng+0xbc>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     2ec:	cb 01       	movw	r24, r22
     2ee:	0a 2e       	mov	r0, r26
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <linje_RGBsveng+0xae>
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	0a 94       	dec	r0
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <linje_RGBsveng+0xaa>
     2fa:	86 95       	lsr	r24
     2fc:	81 70       	andi	r24, 0x01	; 1
     2fe:	28 9f       	mul	r18, r24
     300:	80 2d       	mov	r24, r0
     302:	11 24       	eor	r1, r1
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
			
			for(int i=0;i<11;i++)
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	12 96       	adiw	r26, 0x02	; 2
     30a:	26 30       	cpi	r18, 0x06	; 6
     30c:	d1 f6       	brne	.-76     	; 0x2c2 <linje_RGBsveng+0x7a>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
		styr_fel = -3;
     30e:	8d ef       	ldi	r24, 0xFD	; 253
     310:	56 c0       	rjmp	.+172    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data==2){ //raktfram
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	69 f4       	brne	.+26     	; 0x330 <linje_RGBsveng+0xe8>
			
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
     316:	40 7f       	andi	r20, 0xF0	; 240
     318:	50 93 9a 01 	sts	0x019A, r21
     31c:	40 93 99 01 	sts	0x0199, r20
			Reflex_data2 = Reflex_data2_tmp & 0x03;
     320:	63 70       	andi	r22, 0x03	; 3
     322:	77 27       	eor	r23, r23
     324:	70 93 c3 01 	sts	0x01C3, r23
     328:	60 93 c2 01 	sts	0x01C2, r22
			return linje_get_error();
     32c:	e0 de       	rcall	.-576    	; 0xee <linje_get_error>
     32e:	47 c0       	rjmp	.+142    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	d1 f5       	brne	.+116    	; 0x3a8 <linje_RGBsveng+0x160>
     334:	a6 e0       	ldi	r26, 0x06	; 6
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e6 e0       	ldi	r30, 0x06	; 6
     33a:	8b e0       	ldi	r24, 0x0B	; 11
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 e0       	ldi	r18, 0x00	; 0
			for(int i=11;i>0;i--){
				if (styr_fel == 0){
     340:	21 11       	cpse	r18, r1
     342:	1f c0       	rjmp	.+62     	; 0x382 <linje_RGBsveng+0x13a>
					if(i < 8){ //första 8 sensorenrna
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	91 05       	cpc	r25, r1
     348:	84 f4       	brge	.+32     	; 0x36a <linje_RGBsveng+0x122>
     34a:	9c 01       	movw	r18, r24
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     350:	ea 01       	movw	r28, r20
     352:	02 c0       	rjmp	.+4      	; 0x358 <linje_RGBsveng+0x110>
     354:	d5 95       	asr	r29
     356:	c7 95       	ror	r28
     358:	2a 95       	dec	r18
     35a:	e2 f7       	brpl	.-8      	; 0x354 <linje_RGBsveng+0x10c>
     35c:	9e 01       	movw	r18, r28
     35e:	26 95       	lsr	r18
     360:	21 70       	andi	r18, 0x01	; 1
     362:	e2 9f       	mul	r30, r18
     364:	20 2d       	mov	r18, r0
     366:	11 24       	eor	r1, r1
     368:	0c c0       	rjmp	.+24     	; 0x382 <linje_RGBsveng+0x13a>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     36a:	9b 01       	movw	r18, r22
     36c:	0a 2e       	mov	r0, r26
     36e:	02 c0       	rjmp	.+4      	; 0x374 <linje_RGBsveng+0x12c>
     370:	35 95       	asr	r19
     372:	27 95       	ror	r18
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <linje_RGBsveng+0x128>
     378:	26 95       	lsr	r18
     37a:	21 70       	andi	r18, 0x01	; 1
     37c:	e2 9f       	mul	r30, r18
     37e:	20 2d       	mov	r18, r0
     380:	11 24       	eor	r1, r1
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	e1 50       	subi	r30, 0x01	; 1
     386:	12 97       	sbiw	r26, 0x02	; 2
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
			Reflex_data2 = Reflex_data2_tmp & 0x03;
			return linje_get_error();
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
			for(int i=11;i>0;i--){
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	d1 f6       	brne	.-76     	; 0x340 <linje_RGBsveng+0xf8>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
			styr_fel = 3;
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	17 c0       	rjmp	.+46     	; 0x3be <linje_RGBsveng+0x176>
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
		}
	}
	else{
		RGB_data=0;
     390:	10 92 ac 01 	sts	0x01AC, r1
		RGB_reset_timer = 0;
     394:	10 92 5b 01 	sts	0x015B, r1
     398:	10 92 5a 01 	sts	0x015A, r1
		RGB_force = 0;
     39c:	10 92 57 01 	sts	0x0157, r1
     3a0:	10 92 56 01 	sts	0x0156, r1
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <linje_RGBsveng+0x176>
				}
			}
			styr_fel = 3;
		}
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <linje_RGBsveng+0x176>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <linje_RGBsveng+0x176>
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     3b0:	80 91 66 01 	lds	r24, 0x0166
     3b4:	90 91 67 01 	lds	r25, 0x0167
     3b8:	04 97       	sbiw	r24, 0x04	; 4
     3ba:	c4 f3       	brlt	.-16     	; 0x3ac <linje_RGBsveng+0x164>
     3bc:	e9 cf       	rjmp	.-46     	; 0x390 <linje_RGBsveng+0x148>
		RGB_force = 0;
		
	}
	 
	return styr_fel;
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sekvens_goal_detekted>:
bool sekvens_goal_detekted(){
	//int fel_antal=0;
	#ifndef time
		static int prew_fel_antal=0;
	#endif
	linje_get_error();		// Borde uppdatera fel_antal
     3c4:	94 de       	rcall	.-728    	; 0xee <linje_get_error>
	if(fel_antal>28){		// om robbot paserar tejp på tvären 
     3c6:	80 91 5c 01 	lds	r24, 0x015C
     3ca:	90 91 5d 01 	lds	r25, 0x015D
     3ce:	8d 31       	cpi	r24, 0x1D	; 29
     3d0:	91 05       	cpc	r25, r1
     3d2:	5c f0       	brlt	.+22     	; 0x3ea <sekvens_goal_detekted+0x26>
		PORTD |= (1 << PD1);
     3d4:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     3d6:	80 91 5c 01 	lds	r24, 0x015C
     3da:	90 91 5d 01 	lds	r25, 0x015D
     3de:	90 93 25 01 	sts	0x0125, r25
     3e2:	80 93 24 01 	sts	0x0124, r24
		return true;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	08 95       	ret
	}
	else if(prew_fel_antal+fel_antal>36 && prew_fel_antal <=28 && RGB_data==0){
     3ea:	20 91 24 01 	lds	r18, 0x0124
     3ee:	30 91 25 01 	lds	r19, 0x0125
     3f2:	ac 01       	movw	r20, r24
     3f4:	42 0f       	add	r20, r18
     3f6:	53 1f       	adc	r21, r19
     3f8:	45 32       	cpi	r20, 0x25	; 37
     3fa:	51 05       	cpc	r21, r1
     3fc:	94 f0       	brlt	.+36     	; 0x422 <sekvens_goal_detekted+0x5e>
     3fe:	2d 31       	cpi	r18, 0x1D	; 29
     400:	31 05       	cpc	r19, r1
     402:	7c f4       	brge	.+30     	; 0x422 <sekvens_goal_detekted+0x5e>
     404:	20 91 ac 01 	lds	r18, 0x01AC
     408:	21 11       	cpse	r18, r1
     40a:	0b c0       	rjmp	.+22     	; 0x422 <sekvens_goal_detekted+0x5e>
		PORTD |= (1 << PD1);
     40c:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     40e:	80 91 5c 01 	lds	r24, 0x015C
     412:	90 91 5d 01 	lds	r25, 0x015D
     416:	90 93 25 01 	sts	0x0125, r25
     41a:	80 93 24 01 	sts	0x0124, r24
		return true;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret
	}
	else{
		prew_fel_antal=fel_antal;
     422:	90 93 25 01 	sts	0x0125, r25
     426:	80 93 24 01 	sts	0x0124, r24
		return false;
     42a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(fel_antal>3 & fel_antal < 7 & max-min > 5 & max-min < 8) // måste kalibreras bör nog vara && ?
		return true;
	return false;
	*/
}
     42c:	08 95       	ret

0000042e <detect_goal>:
bool detect_goal(){// brettar om robotten är i mål eller inte
		#ifndef time
			static int time;
			static int count;
		#endif
		linje_get_error();		// Borde uppdatera fel_antal
     42e:	5f de       	rcall	.-834    	; 0xee <linje_get_error>
	int goal_timer = 5;  //10 funkar 8/10
	
	if((Goal_reset_timer == 0) && (sekvens_goal_detekted() == true)){		
     430:	80 91 58 01 	lds	r24, 0x0158
     434:	90 91 59 01 	lds	r25, 0x0159
     438:	89 2b       	or	r24, r25
     43a:	69 f4       	brne	.+26     	; 0x456 <detect_goal+0x28>
     43c:	c3 df       	rcall	.-122    	; 0x3c4 <sekvens_goal_detekted>
     43e:	88 23       	and	r24, r24
     440:	51 f0       	breq	.+20     	; 0x456 <detect_goal+0x28>
		Goal_reset_timer = 1;	
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 59 01 	sts	0x0159, r25
     44a:	80 93 58 01 	sts	0x0158, r24
		counter_timer_line_goal = 0;																						// Nollar timern som sitter i timerintrerruptet, ISR för timern sker 10ggr per sekund						
     44e:	10 92 63 01 	sts	0x0163, r1
     452:	10 92 62 01 	sts	0x0162, r1
	}	
	if((sekvens_goal_detekted() == true) && ((count == 0) | (count == 2)) && (counter_timer_line_goal < goal_timer)){		//linje 1(count=0) eller 2(count=2) upptäkt procid
     456:	b6 df       	rcall	.-148    	; 0x3c4 <sekvens_goal_detekted>
     458:	88 23       	and	r24, r24
     45a:	d1 f0       	breq	.+52     	; 0x490 <detect_goal+0x62>
     45c:	80 91 26 01 	lds	r24, 0x0126
     460:	90 91 27 01 	lds	r25, 0x0127
     464:	9c 01       	movw	r18, r24
     466:	2d 7f       	andi	r18, 0xFD	; 253
     468:	23 2b       	or	r18, r19
     46a:	91 f4       	brne	.+36     	; 0x490 <detect_goal+0x62>
     46c:	20 91 62 01 	lds	r18, 0x0162
     470:	30 91 63 01 	lds	r19, 0x0163
     474:	25 30       	cpi	r18, 0x05	; 5
     476:	31 05       	cpc	r19, r1
     478:	5c f4       	brge	.+22     	; 0x490 <detect_goal+0x62>
		count++;
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 27 01 	sts	0x0127, r25
     480:	80 93 26 01 	sts	0x0126, r24
		PORTD ^= (1 << PD1);
     484:	9b b1       	in	r25, 0x0b	; 11
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	89 27       	eor	r24, r25
     48a:	8b b9       	out	0x0b, r24	; 11
		return false;
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == false) && ((count == 1) | (count == 3)) && (counter_timer_line_goal < goal_timer)){	// mellanrum mellan linje 1-2(count=1) eller 2-3(count=3) upptäkt
     490:	99 df       	rcall	.-206    	; 0x3c4 <sekvens_goal_detekted>
     492:	81 11       	cpse	r24, r1
     494:	1b c0       	rjmp	.+54     	; 0x4cc <detect_goal+0x9e>
     496:	20 91 26 01 	lds	r18, 0x0126
     49a:	30 91 27 01 	lds	r19, 0x0127
     49e:	a9 01       	movw	r20, r18
     4a0:	4d 7f       	andi	r20, 0xFD	; 253
     4a2:	41 30       	cpi	r20, 0x01	; 1
     4a4:	51 05       	cpc	r21, r1
     4a6:	91 f4       	brne	.+36     	; 0x4cc <detect_goal+0x9e>
     4a8:	40 91 62 01 	lds	r20, 0x0162
     4ac:	50 91 63 01 	lds	r21, 0x0163
     4b0:	45 30       	cpi	r20, 0x05	; 5
     4b2:	51 05       	cpc	r21, r1
     4b4:	5c f4       	brge	.+22     	; 0x4cc <detect_goal+0x9e>
		count++;
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	30 93 27 01 	sts	0x0127, r19
     4be:	20 93 26 01 	sts	0x0126, r18
		PORTD ^= (1 << PD1);
     4c2:	2b b1       	in	r18, 0x0b	; 11
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	92 27       	eor	r25, r18
     4c8:	9b b9       	out	0x0b, r25	; 11
		return false;																		
     4ca:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == true) && (count == 4)  && (counter_timer_line_goal < goal_timer)){					//linje 3 upptäkt indikerar mål
     4cc:	7b df       	rcall	.-266    	; 0x3c4 <sekvens_goal_detekted>
     4ce:	88 23       	and	r24, r24
     4d0:	e1 f0       	breq	.+56     	; 0x50a <detect_goal+0xdc>
     4d2:	80 91 26 01 	lds	r24, 0x0126
     4d6:	90 91 27 01 	lds	r25, 0x0127
     4da:	04 97       	sbiw	r24, 0x04	; 4
     4dc:	b1 f4       	brne	.+44     	; 0x50a <detect_goal+0xdc>
     4de:	80 91 62 01 	lds	r24, 0x0162
     4e2:	90 91 63 01 	lds	r25, 0x0163
     4e6:	05 97       	sbiw	r24, 0x05	; 5
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <detect_goal+0xbe>
     4ea:	3f c0       	rjmp	.+126    	; 0x56a <detect_goal+0x13c>
		//Goal_reset_timer = 0;
		//return true;
		PORTD ^= (1 << PD1);
     4ec:	9b b1       	in	r25, 0x0b	; 11
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	89 27       	eor	r24, r25
     4f2:	8b b9       	out	0x0b, r24	; 11
		count++;
     4f4:	80 91 26 01 	lds	r24, 0x0126
     4f8:	90 91 27 01 	lds	r25, 0x0127
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	90 93 27 01 	sts	0x0127, r25
     502:	80 93 26 01 	sts	0x0126, r24
		return false;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret
	}
	else if((Reflex_data == 0 && Reflex_data2==0) && (count == 5)  && (counter_timer_line_goal < goal_timer)){
     50a:	80 91 99 01 	lds	r24, 0x0199
     50e:	90 91 9a 01 	lds	r25, 0x019A
     512:	89 2b       	or	r24, r25
     514:	c9 f4       	brne	.+50     	; 0x548 <detect_goal+0x11a>
     516:	80 91 c2 01 	lds	r24, 0x01C2
     51a:	90 91 c3 01 	lds	r25, 0x01C3
     51e:	89 2b       	or	r24, r25
     520:	99 f4       	brne	.+38     	; 0x548 <detect_goal+0x11a>
     522:	80 91 26 01 	lds	r24, 0x0126
     526:	90 91 27 01 	lds	r25, 0x0127
     52a:	05 97       	sbiw	r24, 0x05	; 5
     52c:	69 f4       	brne	.+26     	; 0x548 <detect_goal+0x11a>
     52e:	80 91 62 01 	lds	r24, 0x0162
     532:	90 91 63 01 	lds	r25, 0x0163
     536:	05 97       	sbiw	r24, 0x05	; 5
     538:	6c f4       	brge	.+26     	; 0x554 <detect_goal+0x126>
		Goal_reset_timer = 0;
     53a:	10 92 59 01 	sts	0x0159, r1
     53e:	10 92 58 01 	sts	0x0158, r1
		PORTD |= (1 << PD1);
     542:	59 9a       	sbi	0x0b, 1	; 11
		return true;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret
	}
	else if(counter_timer_line_goal >= goal_timer){																			// Timeout, tiden har passerat. Alltså inget mål utan bara en T korsning
     548:	80 91 62 01 	lds	r24, 0x0162
     54c:	90 91 63 01 	lds	r25, 0x0163
     550:	05 97       	sbiw	r24, 0x05	; 5
     552:	54 f0       	brlt	.+20     	; 0x568 <detect_goal+0x13a>
		count = 0;
     554:	10 92 27 01 	sts	0x0127, r1
     558:	10 92 26 01 	sts	0x0126, r1
		Goal_reset_timer = 0;
     55c:	10 92 59 01 	sts	0x0159, r1
     560:	10 92 58 01 	sts	0x0158, r1
		return false;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	08 95       	ret
     568:	08 95       	ret
		//return true;
		PORTD ^= (1 << PD1);
		count++;
		return false;
	}
	else if((Reflex_data == 0 && Reflex_data2==0) && (count == 5)  && (counter_timer_line_goal < goal_timer)){
     56a:	80 91 99 01 	lds	r24, 0x0199
     56e:	90 91 9a 01 	lds	r25, 0x019A
     572:	89 2b       	or	r24, r25
     574:	79 f7       	brne	.-34     	; 0x554 <detect_goal+0x126>
     576:	e8 cf       	rjmp	.-48     	; 0x548 <detect_goal+0x11a>

00000578 <detect_labyrint>:
bool detect_labyrint(){ //om robboten har kommmit in i en labyrint 
		#ifndef time
			static int time;
		#endif
		
	if(distans_left<30 && distans_right<30 && fel_antal==0){ // om det finns väggar på båda sidor     
     578:	80 91 a5 01 	lds	r24, 0x01A5
     57c:	8e 31       	cpi	r24, 0x1E	; 30
     57e:	68 f4       	brcc	.+26     	; 0x59a <detect_labyrint+0x22>
     580:	80 91 ad 01 	lds	r24, 0x01AD
     584:	8e 31       	cpi	r24, 0x1E	; 30
     586:	58 f4       	brcc	.+22     	; 0x59e <detect_labyrint+0x26>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	20 91 5c 01 	lds	r18, 0x015C
     58e:	30 91 5d 01 	lds	r19, 0x015D
     592:	23 2b       	or	r18, r19
     594:	29 f0       	breq	.+10     	; 0x5a0 <detect_labyrint+0x28>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	08 95       	ret
		}*/
		
	}
	else{ // det var ingen labyrint
		//time = 0;
		return false;
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	08 95       	ret
     59e:	80 e0       	ldi	r24, 0x00	; 0
	}
     5a0:	08 95       	ret

000005a2 <stand_still>:
	PORTB &= ~(1 << PB1);
	
}

void stand_still(void){
	PORTB &= ~(1 << motor_dir_left);
     5a2:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     5a4:	2d 98       	cbi	0x05, 5	; 5
	motor_left = 0;
     5a6:	17 bc       	out	0x27, r1	; 39
	motor_right = 0;
     5a8:	18 bc       	out	0x28, r1	; 40
     5aa:	08 95       	ret

000005ac <drive_forward>:
}

void drive_forward(void){
	PORTB &= ~(1 << motor_dir_left);
     5ac:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     5ae:	2d 98       	cbi	0x05, 5	; 5
	motor_left = laby_left_speed;
     5b0:	80 91 15 01 	lds	r24, 0x0115
     5b4:	87 bd       	out	0x27, r24	; 39
	motor_right = laby_right_speed;
     5b6:	80 91 13 01 	lds	r24, 0x0113
     5ba:	88 bd       	out	0x28, r24	; 40
     5bc:	08 95       	ret

000005be <turn_left>:
}

void turn_left(void){
	PORTB &= ~(1 << motor_dir_right);
     5be:	2d 98       	cbi	0x05, 5	; 5
	PORTB |= (1 << motor_dir_left);
     5c0:	2e 9a       	sbi	0x05, 6	; 5
	motor_left = 60;//80;//60left;
     5c2:	8c e3       	ldi	r24, 0x3C	; 60
     5c4:	87 bd       	out	0x27, r24	; 39
	motor_right = 55;//70;//55right;
     5c6:	87 e3       	ldi	r24, 0x37	; 55
     5c8:	88 bd       	out	0x28, r24	; 40
     5ca:	08 95       	ret

000005cc <turn_right>:
}

void turn_right(void){
	PORTB |= (1 << motor_dir_right);
     5cc:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motor_dir_left);
     5ce:	2e 98       	cbi	0x05, 6	; 5
	motor_left = 57;//80;//57left;
     5d0:	89 e3       	ldi	r24, 0x39	; 57
     5d2:	87 bd       	out	0x27, r24	; 39
	motor_right = 52;//52right;
     5d4:	84 e3       	ldi	r24, 0x34	; 52
     5d6:	88 bd       	out	0x28, r24	; 40
     5d8:	08 95       	ret

000005da <PD_for_lab>:
int number_of_errors = 2;
int previous_errors_left[10];
int previous_errors_right[10];
int error_count = 0;

void PD_for_lab(int distance_left, int distance_right, int distance_front){
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
     5f2:	8c 01       	movw	r16, r24
     5f4:	06 1b       	sub	r16, r22
     5f6:	17 0b       	sbc	r17, r23
     5f8:	10 93 ab 01 	sts	0x01AB, r17
     5fc:	00 93 aa 01 	sts	0x01AA, r16
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
     600:	c0 91 4a 01 	lds	r28, 0x014A
     604:	d0 91 4b 01 	lds	r29, 0x014B
     608:	cc 0f       	add	r28, r28
     60a:	dd 1f       	adc	r29, r29
     60c:	ca 58       	subi	r28, 0x8A	; 138
     60e:	de 4f       	sbci	r29, 0xFE	; 254
     610:	88 81       	ld	r24, Y
     612:	99 81       	ldd	r25, Y+1	; 0x01
     614:	b8 01       	movw	r22, r16
     616:	68 1b       	sub	r22, r24
     618:	79 0b       	sbc	r23, r25
     61a:	07 2e       	mov	r0, r23
     61c:	00 0c       	add	r0, r0
     61e:	88 0b       	sbc	r24, r24
     620:	99 0b       	sbc	r25, r25
     622:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     626:	6b 01       	movw	r12, r22
     628:	7c 01       	movw	r14, r24
     62a:	60 93 4c 01 	sts	0x014C, r22
     62e:	70 93 4d 01 	sts	0x014D, r23
     632:	80 93 4e 01 	sts	0x014E, r24
     636:	90 93 4f 01 	sts	0x014F, r25
	/*if (derivate < 3 && derivate > -3)
		derivate = 0;*/
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
     63a:	80 91 11 01 	lds	r24, 0x0111
     63e:	90 91 12 01 	lds	r25, 0x0112
     642:	08 9f       	mul	r16, r24
     644:	b0 01       	movw	r22, r0
     646:	09 9f       	mul	r16, r25
     648:	70 0d       	add	r23, r0
     64a:	18 9f       	mul	r17, r24
     64c:	70 0d       	add	r23, r0
     64e:	11 24       	eor	r1, r1
     650:	07 2e       	mov	r0, r23
     652:	00 0c       	add	r0, r0
     654:	88 0b       	sbc	r24, r24
     656:	99 0b       	sbc	r25, r25
     658:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     65c:	4b 01       	movw	r8, r22
     65e:	5c 01       	movw	r10, r24
     660:	60 91 0f 01 	lds	r22, 0x010F
     664:	70 91 10 01 	lds	r23, 0x0110
     668:	07 2e       	mov	r0, r23
     66a:	00 0c       	add	r0, r0
     66c:	88 0b       	sbc	r24, r24
     66e:	99 0b       	sbc	r25, r25
     670:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	c7 01       	movw	r24, r14
     67a:	b6 01       	movw	r22, r12
     67c:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulsf3>
     680:	9b 01       	movw	r18, r22
     682:	ac 01       	movw	r20, r24
     684:	c5 01       	movw	r24, r10
     686:	b4 01       	movw	r22, r8
     688:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__addsf3>
     68c:	20 e0       	ldi	r18, 0x00	; 0
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	40 e2       	ldi	r20, 0x20	; 32
     692:	51 e4       	ldi	r21, 0x41	; 65
     694:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divsf3>
     698:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixsfsi>
     69c:	70 93 c5 01 	sts	0x01C5, r23
     6a0:	60 93 c4 01 	sts	0x01C4, r22
	previous_errors_right[error_count] = current_error_lab;
     6a4:	19 83       	std	Y+1, r17	; 0x01
     6a6:	08 83       	st	Y, r16
	
	if(output_right >= 0){
     6a8:	77 23       	and	r23, r23
     6aa:	bc f0       	brlt	.+46     	; 0x6da <PD_for_lab+0x100>
		motor_right = laby_right_speed;
     6ac:	80 91 13 01 	lds	r24, 0x0113
     6b0:	88 bd       	out	0x28, r24	; 40
		if(output_right > laby_left_speed)
     6b2:	80 91 15 01 	lds	r24, 0x0115
     6b6:	90 91 16 01 	lds	r25, 0x0116
     6ba:	20 91 c4 01 	lds	r18, 0x01C4
     6be:	30 91 c5 01 	lds	r19, 0x01C5
     6c2:	82 17       	cp	r24, r18
     6c4:	93 07       	cpc	r25, r19
     6c6:	24 f4       	brge	.+8      	; 0x6d0 <PD_for_lab+0xf6>
			output_right = laby_left_speed;
     6c8:	90 93 c5 01 	sts	0x01C5, r25
     6cc:	80 93 c4 01 	sts	0x01C4, r24
		motor_left = laby_left_speed - output_right;	
     6d0:	90 91 c4 01 	lds	r25, 0x01C4
     6d4:	89 1b       	sub	r24, r25
     6d6:	87 bd       	out	0x27, r24	; 39
     6d8:	1a c0       	rjmp	.+52     	; 0x70e <PD_for_lab+0x134>
	}
	else if(output_right < 0){
		motor_left = laby_left_speed;
     6da:	80 91 15 01 	lds	r24, 0x0115
     6de:	87 bd       	out	0x27, r24	; 39
		if(output_right < -laby_right_speed)
     6e0:	80 91 13 01 	lds	r24, 0x0113
     6e4:	90 91 14 01 	lds	r25, 0x0114
     6e8:	22 27       	eor	r18, r18
     6ea:	33 27       	eor	r19, r19
     6ec:	28 1b       	sub	r18, r24
     6ee:	39 0b       	sbc	r19, r25
     6f0:	40 91 c4 01 	lds	r20, 0x01C4
     6f4:	50 91 c5 01 	lds	r21, 0x01C5
     6f8:	42 17       	cp	r20, r18
     6fa:	53 07       	cpc	r21, r19
     6fc:	24 f4       	brge	.+8      	; 0x706 <PD_for_lab+0x12c>
			output_right = -laby_right_speed;
     6fe:	30 93 c5 01 	sts	0x01C5, r19
     702:	20 93 c4 01 	sts	0x01C4, r18
		motor_right = laby_right_speed + output_right;	
     706:	90 91 c4 01 	lds	r25, 0x01C4
     70a:	89 0f       	add	r24, r25
     70c:	88 bd       	out	0x28, r24	; 40
	//if(error_count == 0)
	//	PORTD ^= (1 << PD0);
	
	//motor_left = left + output_left;
	//motor_right = right + output_right;
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	9f 90       	pop	r9
     724:	8f 90       	pop	r8
     726:	08 95       	ret

00000728 <drive_forward_left>:

short regulate_side = 0;



void drive_forward_left(int distance , int distance_front){
     728:	4f 92       	push	r4
     72a:	5f 92       	push	r5
     72c:	6f 92       	push	r6
     72e:	7f 92       	push	r7
     730:	8f 92       	push	r8
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	ef 92       	push	r14
     73a:	ff 92       	push	r15
     73c:	0f 93       	push	r16
     73e:	1f 93       	push	r17
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     744:	00 91 0d 01 	lds	r16, 0x010D
     748:	10 91 0e 01 	lds	r17, 0x010E
     74c:	08 1b       	sub	r16, r24
     74e:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     750:	c0 91 4a 01 	lds	r28, 0x014A
     754:	d0 91 4b 01 	lds	r29, 0x014B
     758:	ce 01       	movw	r24, r28
     75a:	88 0f       	add	r24, r24
     75c:	99 1f       	adc	r25, r25
     75e:	9c 01       	movw	r18, r24
     760:	2a 53       	subi	r18, 0x3A	; 58
     762:	3e 4f       	sbci	r19, 0xFE	; 254
     764:	79 01       	movw	r14, r18
     766:	d9 01       	movw	r26, r18
     768:	8d 91       	ld	r24, X+
     76a:	9c 91       	ld	r25, X
     76c:	b8 01       	movw	r22, r16
     76e:	68 1b       	sub	r22, r24
     770:	79 0b       	sbc	r23, r25
     772:	07 2e       	mov	r0, r23
     774:	00 0c       	add	r0, r0
     776:	88 0b       	sbc	r24, r24
     778:	99 0b       	sbc	r25, r25
     77a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     77e:	4b 01       	movw	r8, r22
     780:	5c 01       	movw	r10, r24
     782:	60 93 4c 01 	sts	0x014C, r22
     786:	70 93 4d 01 	sts	0x014D, r23
     78a:	80 93 4e 01 	sts	0x014E, r24
     78e:	90 93 4f 01 	sts	0x014F, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     792:	80 91 0a 01 	lds	r24, 0x010A
     796:	90 91 0b 01 	lds	r25, 0x010B
     79a:	08 9f       	mul	r16, r24
     79c:	b0 01       	movw	r22, r0
     79e:	09 9f       	mul	r16, r25
     7a0:	70 0d       	add	r23, r0
     7a2:	18 9f       	mul	r17, r24
     7a4:	70 0d       	add	r23, r0
     7a6:	11 24       	eor	r1, r1
     7a8:	07 2e       	mov	r0, r23
     7aa:	00 0c       	add	r0, r0
     7ac:	88 0b       	sbc	r24, r24
     7ae:	99 0b       	sbc	r25, r25
     7b0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     7b4:	2b 01       	movw	r4, r22
     7b6:	3c 01       	movw	r6, r24
     7b8:	60 91 08 01 	lds	r22, 0x0108
     7bc:	70 91 09 01 	lds	r23, 0x0109
     7c0:	07 2e       	mov	r0, r23
     7c2:	00 0c       	add	r0, r0
     7c4:	88 0b       	sbc	r24, r24
     7c6:	99 0b       	sbc	r25, r25
     7c8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     7cc:	9b 01       	movw	r18, r22
     7ce:	ac 01       	movw	r20, r24
     7d0:	c5 01       	movw	r24, r10
     7d2:	b4 01       	movw	r22, r8
     7d4:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulsf3>
     7d8:	9b 01       	movw	r18, r22
     7da:	ac 01       	movw	r20, r24
     7dc:	c3 01       	movw	r24, r6
     7de:	b2 01       	movw	r22, r4
     7e0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__addsf3>
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e2       	ldi	r20, 0x20	; 32
     7ea:	51 e4       	ldi	r21, 0x41	; 65
     7ec:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divsf3>
     7f0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixsfsi>
     7f4:	fb 01       	movw	r30, r22
	previous_errors[error_count] = current_error;
     7f6:	d7 01       	movw	r26, r14
     7f8:	0d 93       	st	X+, r16
     7fa:	1c 93       	st	X, r17
	
	if(++error_count >= number_of_errors_sc)
     7fc:	21 96       	adiw	r28, 0x01	; 1
     7fe:	d0 93 4b 01 	sts	0x014B, r29
     802:	c0 93 4a 01 	sts	0x014A, r28
     806:	20 91 04 01 	lds	r18, 0x0104
     80a:	30 91 05 01 	lds	r19, 0x0105
     80e:	c2 17       	cp	r28, r18
     810:	d3 07       	cpc	r29, r19
     812:	24 f0       	brlt	.+8      	; 0x81c <drive_forward_left+0xf4>
		error_count=0;
     814:	10 92 4b 01 	sts	0x014B, r1
     818:	10 92 4a 01 	sts	0x014A, r1
	
	if(output <= (-laby_left_speed))
     81c:	20 91 15 01 	lds	r18, 0x0115
     820:	30 91 16 01 	lds	r19, 0x0116
     824:	44 27       	eor	r20, r20
     826:	55 27       	eor	r21, r21
     828:	42 1b       	sub	r20, r18
     82a:	53 0b       	sbc	r21, r19
     82c:	4e 17       	cp	r20, r30
     82e:	5f 07       	cpc	r21, r31
     830:	4c f4       	brge	.+18     	; 0x844 <drive_forward_left+0x11c>
		output = -laby_left_speed;
	
	else if(output >= laby_right_speed)
     832:	e0 91 13 01 	lds	r30, 0x0113
     836:	f0 91 14 01 	lds	r31, 0x0114
     83a:	ab 01       	movw	r20, r22
     83c:	e6 17       	cp	r30, r22
     83e:	f7 07       	cpc	r31, r23
     840:	0c f4       	brge	.+2      	; 0x844 <drive_forward_left+0x11c>
     842:	af 01       	movw	r20, r30
		output=laby_right_speed;
	
	if(output <= 0){
     844:	14 16       	cp	r1, r20
     846:	15 06       	cpc	r1, r21
     848:	4c f0       	brlt	.+18     	; 0x85c <drive_forward_left+0x134>
		motor_right = laby_right_speed;
     84a:	90 91 13 01 	lds	r25, 0x0113
     84e:	98 bd       	out	0x28, r25	; 40
		motor_left = laby_left_speed + output;
     850:	90 91 15 01 	lds	r25, 0x0115
     854:	89 2f       	mov	r24, r25
     856:	84 0f       	add	r24, r20
     858:	87 bd       	out	0x27, r24	; 39
     85a:	06 c0       	rjmp	.+12     	; 0x868 <drive_forward_left+0x140>
	}
	else{ 
		motor_left = laby_left_speed;
     85c:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed - output;	
     85e:	90 91 13 01 	lds	r25, 0x0113
     862:	89 2f       	mov	r24, r25
     864:	84 1b       	sub	r24, r20
     866:	88 bd       	out	0x28, r24	; 40
	}
}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	bf 90       	pop	r11
     876:	af 90       	pop	r10
     878:	9f 90       	pop	r9
     87a:	8f 90       	pop	r8
     87c:	7f 90       	pop	r7
     87e:	6f 90       	pop	r6
     880:	5f 90       	pop	r5
     882:	4f 90       	pop	r4
     884:	08 95       	ret

00000886 <drive_forward_right>:



void drive_forward_right(int distance, int distance_front){
     886:	4f 92       	push	r4
     888:	5f 92       	push	r5
     88a:	6f 92       	push	r6
     88c:	7f 92       	push	r7
     88e:	8f 92       	push	r8
     890:	9f 92       	push	r9
     892:	af 92       	push	r10
     894:	bf 92       	push	r11
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     8a2:	00 91 0d 01 	lds	r16, 0x010D
     8a6:	10 91 0e 01 	lds	r17, 0x010E
     8aa:	08 1b       	sub	r16, r24
     8ac:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     8ae:	c0 91 4a 01 	lds	r28, 0x014A
     8b2:	d0 91 4b 01 	lds	r29, 0x014B
     8b6:	ce 01       	movw	r24, r28
     8b8:	88 0f       	add	r24, r24
     8ba:	99 1f       	adc	r25, r25
     8bc:	9c 01       	movw	r18, r24
     8be:	2a 53       	subi	r18, 0x3A	; 58
     8c0:	3e 4f       	sbci	r19, 0xFE	; 254
     8c2:	79 01       	movw	r14, r18
     8c4:	f9 01       	movw	r30, r18
     8c6:	80 81       	ld	r24, Z
     8c8:	91 81       	ldd	r25, Z+1	; 0x01
     8ca:	b8 01       	movw	r22, r16
     8cc:	68 1b       	sub	r22, r24
     8ce:	79 0b       	sbc	r23, r25
     8d0:	07 2e       	mov	r0, r23
     8d2:	00 0c       	add	r0, r0
     8d4:	88 0b       	sbc	r24, r24
     8d6:	99 0b       	sbc	r25, r25
     8d8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     8dc:	4b 01       	movw	r8, r22
     8de:	5c 01       	movw	r10, r24
     8e0:	60 93 4c 01 	sts	0x014C, r22
     8e4:	70 93 4d 01 	sts	0x014D, r23
     8e8:	80 93 4e 01 	sts	0x014E, r24
     8ec:	90 93 4f 01 	sts	0x014F, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     8f0:	80 91 0a 01 	lds	r24, 0x010A
     8f4:	90 91 0b 01 	lds	r25, 0x010B
     8f8:	08 9f       	mul	r16, r24
     8fa:	b0 01       	movw	r22, r0
     8fc:	09 9f       	mul	r16, r25
     8fe:	70 0d       	add	r23, r0
     900:	18 9f       	mul	r17, r24
     902:	70 0d       	add	r23, r0
     904:	11 24       	eor	r1, r1
     906:	07 2e       	mov	r0, r23
     908:	00 0c       	add	r0, r0
     90a:	88 0b       	sbc	r24, r24
     90c:	99 0b       	sbc	r25, r25
     90e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     912:	2b 01       	movw	r4, r22
     914:	3c 01       	movw	r6, r24
     916:	60 91 08 01 	lds	r22, 0x0108
     91a:	70 91 09 01 	lds	r23, 0x0109
     91e:	07 2e       	mov	r0, r23
     920:	00 0c       	add	r0, r0
     922:	88 0b       	sbc	r24, r24
     924:	99 0b       	sbc	r25, r25
     926:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     92a:	9b 01       	movw	r18, r22
     92c:	ac 01       	movw	r20, r24
     92e:	c5 01       	movw	r24, r10
     930:	b4 01       	movw	r22, r8
     932:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulsf3>
     936:	9b 01       	movw	r18, r22
     938:	ac 01       	movw	r20, r24
     93a:	c3 01       	movw	r24, r6
     93c:	b2 01       	movw	r22, r4
     93e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__addsf3>
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	40 e2       	ldi	r20, 0x20	; 32
     948:	51 e4       	ldi	r21, 0x41	; 65
     94a:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__divsf3>
     94e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixsfsi>
     952:	ab 01       	movw	r20, r22
	previous_errors[error_count] = current_error;
     954:	f7 01       	movw	r30, r14
     956:	11 83       	std	Z+1, r17	; 0x01
     958:	00 83       	st	Z, r16


	if(++error_count >= number_of_errors_sc)
     95a:	21 96       	adiw	r28, 0x01	; 1
     95c:	d0 93 4b 01 	sts	0x014B, r29
     960:	c0 93 4a 01 	sts	0x014A, r28
     964:	20 91 04 01 	lds	r18, 0x0104
     968:	30 91 05 01 	lds	r19, 0x0105
     96c:	c2 17       	cp	r28, r18
     96e:	d3 07       	cpc	r29, r19
     970:	24 f0       	brlt	.+8      	; 0x97a <drive_forward_right+0xf4>
		error_count = 0;
     972:	10 92 4b 01 	sts	0x014B, r1
     976:	10 92 4a 01 	sts	0x014A, r1
	
	if(output >= (laby_left_speed))
     97a:	20 91 15 01 	lds	r18, 0x0115
     97e:	30 91 16 01 	lds	r19, 0x0116
     982:	42 17       	cp	r20, r18
     984:	53 07       	cpc	r21, r19
     986:	64 f4       	brge	.+24     	; 0x9a0 <drive_forward_right+0x11a>
		output = laby_left_speed;
	
	else if(output <= -laby_right_speed)
     988:	40 91 13 01 	lds	r20, 0x0113
     98c:	50 91 14 01 	lds	r21, 0x0114
     990:	51 95       	neg	r21
     992:	41 95       	neg	r20
     994:	51 09       	sbc	r21, r1
     996:	64 17       	cp	r22, r20
     998:	75 07       	cpc	r23, r21
     99a:	1c f4       	brge	.+6      	; 0x9a2 <drive_forward_right+0x11c>
     99c:	ba 01       	movw	r22, r20
     99e:	01 c0       	rjmp	.+2      	; 0x9a2 <drive_forward_right+0x11c>

	if(++error_count >= number_of_errors_sc)
		error_count = 0;
	
	if(output >= (laby_left_speed))
		output = laby_left_speed;
     9a0:	b9 01       	movw	r22, r18
	
	else if(output <= -laby_right_speed)
		output = -laby_right_speed;
	
	if(output >= 0){
     9a2:	77 23       	and	r23, r23
     9a4:	44 f0       	brlt	.+16     	; 0x9b6 <drive_forward_right+0x130>
		motor_right = laby_right_speed;
     9a6:	80 91 13 01 	lds	r24, 0x0113
     9aa:	88 bd       	out	0x28, r24	; 40
		motor_left = laby_left_speed - output;
     9ac:	80 91 15 01 	lds	r24, 0x0115
     9b0:	86 1b       	sub	r24, r22
     9b2:	87 bd       	out	0x27, r24	; 39
     9b4:	05 c0       	rjmp	.+10     	; 0x9c0 <drive_forward_right+0x13a>
	}
	else{
		motor_left = laby_left_speed;
     9b6:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed + output;
     9b8:	80 91 13 01 	lds	r24, 0x0113
     9bc:	68 0f       	add	r22, r24
     9be:	68 bd       	out	0x28, r22	; 40
		motor_left = 57;//80;//57left;
		motor_right = 52;//52right;
		_delay_ms(80);	
		stand_still();
	}*/
}
     9c0:	df 91       	pop	r29
     9c2:	cf 91       	pop	r28
     9c4:	1f 91       	pop	r17
     9c6:	0f 91       	pop	r16
     9c8:	ff 90       	pop	r15
     9ca:	ef 90       	pop	r14
     9cc:	bf 90       	pop	r11
     9ce:	af 90       	pop	r10
     9d0:	9f 90       	pop	r9
     9d2:	8f 90       	pop	r8
     9d4:	7f 90       	pop	r7
     9d6:	6f 90       	pop	r6
     9d8:	5f 90       	pop	r5
     9da:	4f 90       	pop	r4
     9dc:	08 95       	ret

000009de <linje>:
float current_position = 0;



	 
void linje(void){
     9de:	4f 92       	push	r4
     9e0:	5f 92       	push	r5
     9e2:	6f 92       	push	r6
     9e4:	7f 92       	push	r7
     9e6:	8f 92       	push	r8
     9e8:	9f 92       	push	r9
     9ea:	af 92       	push	r10
     9ec:	bf 92       	push	r11
     9ee:	cf 92       	push	r12
     9f0:	df 92       	push	r13
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
	cli();
     9f6:	f8 94       	cli
	int current_position_tmp = current_position;
     9f8:	60 91 29 01 	lds	r22, 0x0129
     9fc:	70 91 2a 01 	lds	r23, 0x012A
     a00:	80 91 2b 01 	lds	r24, 0x012B
     a04:	90 91 2c 01 	lds	r25, 0x012C
     a08:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixsfsi>
	sei();
     a0c:	78 94       	sei
	
	current_error = setpoint - current_position_tmp;
     a0e:	20 91 37 01 	lds	r18, 0x0137
     a12:	30 91 38 01 	lds	r19, 0x0138
     a16:	a9 01       	movw	r20, r18
     a18:	46 1b       	sub	r20, r22
     a1a:	57 0b       	sbc	r21, r23
     a1c:	ba 01       	movw	r22, r20
     a1e:	07 2e       	mov	r0, r23
     a20:	00 0c       	add	r0, r0
     a22:	88 0b       	sbc	r24, r24
     a24:	99 0b       	sbc	r25, r25
     a26:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     a2a:	6b 01       	movw	r12, r22
     a2c:	7c 01       	movw	r14, r24
     a2e:	60 93 33 01 	sts	0x0133, r22
     a32:	70 93 34 01 	sts	0x0134, r23
     a36:	80 93 35 01 	sts	0x0135, r24
     a3a:	90 93 36 01 	sts	0x0136, r25
	derivate = (current_error -previous_error);					// Tror det var dt som saknades fÃ¶r derivatan
     a3e:	20 91 2d 01 	lds	r18, 0x012D
     a42:	30 91 2e 01 	lds	r19, 0x012E
     a46:	40 91 2f 01 	lds	r20, 0x012F
     a4a:	50 91 30 01 	lds	r21, 0x0130
     a4e:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <__subsf3>
     a52:	4b 01       	movw	r8, r22
     a54:	5c 01       	movw	r10, r24
     a56:	60 93 4c 01 	sts	0x014C, r22
     a5a:	70 93 4d 01 	sts	0x014D, r23
     a5e:	80 93 4e 01 	sts	0x014E, r24
     a62:	90 93 4f 01 	sts	0x014F, r25
	output = (p_constant * current_error + d_constant * derivate);
     a66:	60 91 02 01 	lds	r22, 0x0102
     a6a:	70 91 03 01 	lds	r23, 0x0103
     a6e:	07 2e       	mov	r0, r23
     a70:	00 0c       	add	r0, r0
     a72:	88 0b       	sbc	r24, r24
     a74:	99 0b       	sbc	r25, r25
     a76:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	c7 01       	movw	r24, r14
     a80:	b6 01       	movw	r22, r12
     a82:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulsf3>
     a86:	2b 01       	movw	r4, r22
     a88:	3c 01       	movw	r6, r24
     a8a:	60 91 00 01 	lds	r22, 0x0100
     a8e:	70 91 01 01 	lds	r23, 0x0101
     a92:	07 2e       	mov	r0, r23
     a94:	00 0c       	add	r0, r0
     a96:	88 0b       	sbc	r24, r24
     a98:	99 0b       	sbc	r25, r25
     a9a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	c5 01       	movw	r24, r10
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__mulsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	c3 01       	movw	r24, r6
     ab0:	b2 01       	movw	r22, r4
     ab2:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <__addsf3>
     ab6:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <__fixsfsi>
     aba:	9b 01       	movw	r18, r22
     abc:	70 93 32 01 	sts	0x0132, r23
     ac0:	60 93 31 01 	sts	0x0131, r22
	previous_error = current_error;
     ac4:	c0 92 2d 01 	sts	0x012D, r12
     ac8:	d0 92 2e 01 	sts	0x012E, r13
     acc:	e0 92 2f 01 	sts	0x012F, r14
     ad0:	f0 92 30 01 	sts	0x0130, r15
//***********************************
//Reglering
//***********************************
		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     ad4:	40 91 5c 01 	lds	r20, 0x015C
     ad8:	50 91 5d 01 	lds	r21, 0x015D
     adc:	45 2b       	or	r20, r21
     ade:	e9 f4       	brne	.+58     	; 0xb1a <linje+0x13c>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     ae0:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= (1 << motor_dir_right);
     ae2:	2d 9a       	sbi	0x05, 5	; 5
		motor_left = left/(2 * RGB_slow);
     ae4:	60 91 17 01 	lds	r22, 0x0117
     ae8:	70 91 18 01 	lds	r23, 0x0118
     aec:	66 0f       	add	r22, r22
     aee:	77 1f       	adc	r23, r23
     af0:	80 91 6a 01 	lds	r24, 0x016A
     af4:	90 91 6b 01 	lds	r25, 0x016B
     af8:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     afc:	67 bd       	out	0x27, r22	; 39
		motor_right = right/(2 * RGB_slow);
     afe:	60 91 17 01 	lds	r22, 0x0117
     b02:	70 91 18 01 	lds	r23, 0x0118
     b06:	66 0f       	add	r22, r22
     b08:	77 1f       	adc	r23, r23
     b0a:	80 91 68 01 	lds	r24, 0x0168
     b0e:	90 91 69 01 	lds	r25, 0x0169
     b12:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     b16:	68 bd       	out	0x28, r22	; 40
     b18:	c3 c0       	rjmp	.+390    	; 0xca0 <linje+0x2c2>
	}
	else if(output < 0){							// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     b1a:	77 23       	and	r23, r23
     b1c:	0c f0       	brlt	.+2      	; 0xb20 <linje+0x142>
     b1e:	57 c0       	rjmp	.+174    	; 0xbce <linje+0x1f0>
		if(abs(output) >= (right / RGB_slow)){					// FÃ¶r att unvika mÃ¤ttnad i regleringen
     b20:	9b 01       	movw	r18, r22
     b22:	77 23       	and	r23, r23
     b24:	24 f4       	brge	.+8      	; 0xb2e <linje+0x150>
     b26:	22 27       	eor	r18, r18
     b28:	33 27       	eor	r19, r19
     b2a:	26 1b       	sub	r18, r22
     b2c:	37 0b       	sbc	r19, r23
     b2e:	80 91 68 01 	lds	r24, 0x0168
     b32:	90 91 69 01 	lds	r25, 0x0169
     b36:	60 91 17 01 	lds	r22, 0x0117
     b3a:	70 91 18 01 	lds	r23, 0x0118
     b3e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     b42:	26 17       	cp	r18, r22
     b44:	37 07       	cpc	r19, r23
     b46:	24 f1       	brlt	.+72     	; 0xb90 <linje+0x1b2>
			//PORTB |= (1 << motor_dir_left);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  
     b48:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   
     b4a:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left / RGB_slow;
     b4c:	80 91 6a 01 	lds	r24, 0x016A
     b50:	90 91 6b 01 	lds	r25, 0x016B
     b54:	60 91 17 01 	lds	r22, 0x0117
     b58:	70 91 18 01 	lds	r23, 0x0118
     b5c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     b60:	67 bd       	out	0x27, r22	; 39
			motor_right = (abs(output)- right) / RGB_slow;
     b62:	80 91 31 01 	lds	r24, 0x0131
     b66:	90 91 32 01 	lds	r25, 0x0132
     b6a:	99 23       	and	r25, r25
     b6c:	1c f4       	brge	.+6      	; 0xb74 <linje+0x196>
     b6e:	91 95       	neg	r25
     b70:	81 95       	neg	r24
     b72:	91 09       	sbc	r25, r1
     b74:	20 91 68 01 	lds	r18, 0x0168
     b78:	30 91 69 01 	lds	r19, 0x0169
     b7c:	82 1b       	sub	r24, r18
     b7e:	93 0b       	sbc	r25, r19
     b80:	60 91 17 01 	lds	r22, 0x0117
     b84:	70 91 18 01 	lds	r23, 0x0118
     b88:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     b8c:	68 bd       	out	0x28, r22	; 40
     b8e:	88 c0       	rjmp	.+272    	; 0xca0 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     b90:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     b92:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left / RGB_slow;
     b94:	80 91 6a 01 	lds	r24, 0x016A
     b98:	90 91 6b 01 	lds	r25, 0x016B
     b9c:	60 91 17 01 	lds	r22, 0x0117
     ba0:	70 91 18 01 	lds	r23, 0x0118
     ba4:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     ba8:	67 bd       	out	0x27, r22	; 39
			motor_right = (right + output) / RGB_slow;
     baa:	20 91 68 01 	lds	r18, 0x0168
     bae:	30 91 69 01 	lds	r19, 0x0169
     bb2:	80 91 31 01 	lds	r24, 0x0131
     bb6:	90 91 32 01 	lds	r25, 0x0132
     bba:	82 0f       	add	r24, r18
     bbc:	93 1f       	adc	r25, r19
     bbe:	60 91 17 01 	lds	r22, 0x0117
     bc2:	70 91 18 01 	lds	r23, 0x0118
     bc6:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     bca:	68 bd       	out	0x28, r22	; 40
     bcc:	69 c0       	rjmp	.+210    	; 0xca0 <linje+0x2c2>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     bce:	16 16       	cp	r1, r22
     bd0:	17 06       	cpc	r1, r23
     bd2:	0c f0       	brlt	.+2      	; 0xbd6 <linje+0x1f8>
     bd4:	4b c0       	rjmp	.+150    	; 0xc6c <linje+0x28e>
		if(output >= (left / RGB_slow)){							// FÃ¶r att unvika mÃ¤ttnad i regleringen
     bd6:	80 91 6a 01 	lds	r24, 0x016A
     bda:	90 91 6b 01 	lds	r25, 0x016B
     bde:	60 91 17 01 	lds	r22, 0x0117
     be2:	70 91 18 01 	lds	r23, 0x0118
     be6:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     bea:	26 17       	cp	r18, r22
     bec:	37 07       	cpc	r19, r23
     bee:	fc f0       	brlt	.+62     	; 0xc2e <linje+0x250>
			//PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_left);			// Set motor direction to backward  
     bf0:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   
     bf2:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     bf4:	80 91 68 01 	lds	r24, 0x0168
     bf8:	90 91 69 01 	lds	r25, 0x0169
     bfc:	60 91 17 01 	lds	r22, 0x0117
     c00:	70 91 18 01 	lds	r23, 0x0118
     c04:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     c08:	68 bd       	out	0x28, r22	; 40
			motor_left = (output - left) / RGB_slow;
     c0a:	80 91 31 01 	lds	r24, 0x0131
     c0e:	90 91 32 01 	lds	r25, 0x0132
     c12:	20 91 6a 01 	lds	r18, 0x016A
     c16:	30 91 6b 01 	lds	r19, 0x016B
     c1a:	82 1b       	sub	r24, r18
     c1c:	93 0b       	sbc	r25, r19
     c1e:	60 91 17 01 	lds	r22, 0x0117
     c22:	70 91 18 01 	lds	r23, 0x0118
     c26:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     c2a:	67 bd       	out	0x27, r22	; 39
     c2c:	39 c0       	rjmp	.+114    	; 0xca0 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     c2e:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     c30:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     c32:	80 91 68 01 	lds	r24, 0x0168
     c36:	90 91 69 01 	lds	r25, 0x0169
     c3a:	60 91 17 01 	lds	r22, 0x0117
     c3e:	70 91 18 01 	lds	r23, 0x0118
     c42:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     c46:	68 bd       	out	0x28, r22	; 40
			motor_left = (left - output) / RGB_slow;
     c48:	80 91 6a 01 	lds	r24, 0x016A
     c4c:	90 91 6b 01 	lds	r25, 0x016B
     c50:	20 91 31 01 	lds	r18, 0x0131
     c54:	30 91 32 01 	lds	r19, 0x0132
     c58:	82 1b       	sub	r24, r18
     c5a:	93 0b       	sbc	r25, r19
     c5c:	60 91 17 01 	lds	r22, 0x0117
     c60:	70 91 18 01 	lds	r23, 0x0118
     c64:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     c68:	67 bd       	out	0x27, r22	; 39
     c6a:	1a c0       	rjmp	.+52     	; 0xca0 <linje+0x2c2>
		}
	}
	else if(output==0){
     c6c:	67 2b       	or	r22, r23
     c6e:	c1 f4       	brne	.+48     	; 0xca0 <linje+0x2c2>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     c70:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     c72:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left / RGB_slow;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     c74:	80 91 6a 01 	lds	r24, 0x016A
     c78:	90 91 6b 01 	lds	r25, 0x016B
     c7c:	60 91 17 01 	lds	r22, 0x0117
     c80:	70 91 18 01 	lds	r23, 0x0118
     c84:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     c88:	67 bd       	out	0x27, r22	; 39
		motor_right = right / RGB_slow;
     c8a:	80 91 68 01 	lds	r24, 0x0168
     c8e:	90 91 69 01 	lds	r25, 0x0169
     c92:	60 91 17 01 	lds	r22, 0x0117
     c96:	70 91 18 01 	lds	r23, 0x0118
     c9a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
     c9e:	68 bd       	out	0x28, r22	; 40
	}
}
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	bf 90       	pop	r11
     caa:	af 90       	pop	r10
     cac:	9f 90       	pop	r9
     cae:	8f 90       	pop	r8
     cb0:	7f 90       	pop	r7
     cb2:	6f 90       	pop	r6
     cb4:	5f 90       	pop	r5
     cb6:	4f 90       	pop	r4
     cb8:	08 95       	ret

00000cba <linje_main>:
int RGB_slow = 1;
int RGB_force = 0;

void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	RGB_slow = 1;
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	90 93 18 01 	sts	0x0118, r25
     cc2:	80 93 17 01 	sts	0x0117, r24
	/*if(distans_fram<34){
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
		PORTD |= (1 << PD1);
		PORTD |= (1 << PD0);
	}
	else*/ if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     cc6:	80 91 ac 01 	lds	r24, 0x01AC
     cca:	81 50       	subi	r24, 0x01	; 1
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	c0 f4       	brcc	.+48     	; 0xd00 <linje_main+0x46>
		current_position=linje_RGBsveng();
     cd0:	bb da       	rcall	.-2698   	; 0x248 <linje_RGBsveng>
     cd2:	68 2f       	mov	r22, r24
     cd4:	88 0f       	add	r24, r24
     cd6:	77 0b       	sbc	r23, r23
     cd8:	88 0b       	sbc	r24, r24
     cda:	99 0b       	sbc	r25, r25
     cdc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     ce0:	60 93 29 01 	sts	0x0129, r22
     ce4:	70 93 2a 01 	sts	0x012A, r23
     ce8:	80 93 2b 01 	sts	0x012B, r24
     cec:	90 93 2c 01 	sts	0x012C, r25
		RGB_slow = 2;
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	90 93 18 01 	sts	0x0118, r25
     cf8:	80 93 17 01 	sts	0x0117, r24
		linje();
     cfc:	70 ce       	rjmp	.-800    	; 0x9de <linje>
     cfe:	08 95       	ret
	}
	else if(detect_goal()){
     d00:	96 db       	rcall	.-2260   	; 0x42e <detect_goal>
     d02:	88 23       	and	r24, r24
     d04:	b1 f0       	breq	.+44     	; 0xd32 <linje_main+0x78>
		//kör rakt fram tills paserat mål förhoppnngsvis
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     d06:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     d08:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left;
     d0a:	80 91 6a 01 	lds	r24, 0x016A
     d0e:	87 bd       	out	0x27, r24	; 39
		motor_right = right;
     d10:	80 91 68 01 	lds	r24, 0x0168
     d14:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d16:	2f ef       	ldi	r18, 0xFF	; 255
     d18:	8f ef       	ldi	r24, 0xFF	; 255
     d1a:	91 e1       	ldi	r25, 0x11	; 17
     d1c:	21 50       	subi	r18, 0x01	; 1
     d1e:	80 40       	sbci	r24, 0x00	; 0
     d20:	90 40       	sbci	r25, 0x00	; 0
     d22:	e1 f7       	brne	.-8      	; 0xd1c <linje_main+0x62>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <linje_main+0x6c>
     d26:	00 00       	nop
		_delay_ms(400);
		start=0;
     d28:	10 92 6d 01 	sts	0x016D, r1
     d2c:	10 92 6c 01 	sts	0x016C, r1
     d30:	08 95       	ret
		//PORTD |= (1 << PD1);
		//signalera i mål och stanna
	}
	else if(detect_labyrint()){
     d32:	22 dc       	rcall	.-1980   	; 0x578 <detect_labyrint>
     d34:	88 23       	and	r24, r24
     d36:	31 f0       	breq	.+12     	; 0xd44 <linje_main+0x8a>
		PORTD |= (1 << PD0);
     d38:	58 9a       	sbi	0x0b, 0	; 11
		//start = 0;
		regulator_mode=0; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
     d3a:	10 92 1a 01 	sts	0x011A, r1
     d3e:	10 92 19 01 	sts	0x0119, r1
     d42:	08 95       	ret
	}
	else{
		current_position=linje_get_error();
     d44:	d4 d9       	rcall	.-3160   	; 0xee <linje_get_error>
     d46:	bc 01       	movw	r22, r24
     d48:	99 0f       	add	r25, r25
     d4a:	88 0b       	sbc	r24, r24
     d4c:	99 0b       	sbc	r25, r25
     d4e:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__floatsisf>
     d52:	60 93 29 01 	sts	0x0129, r22
     d56:	70 93 2a 01 	sts	0x012A, r23
     d5a:	80 93 2b 01 	sts	0x012B, r24
     d5e:	90 93 2c 01 	sts	0x012C, r25
		linje();
     d62:	3d ce       	rjmp	.-902    	; 0x9de <linje>
     d64:	08 95       	ret

00000d66 <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     d66:	84 b5       	in	r24, 0x24	; 36
     d68:	83 6a       	ori	r24, 0xA3	; 163
     d6a:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     d6c:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     d6e:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     d70:	85 b5       	in	r24, 0x25	; 37
     d72:	83 60       	ori	r24, 0x03	; 3
     d74:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     d76:	88 e7       	ldi	r24, 0x78	; 120
     d78:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     d7a:	85 b1       	in	r24, 0x05	; 5
     d7c:	15 b8       	out	0x05, r1	; 5
     d7e:	08 95       	ret

00000d80 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     d84:	e1 e8       	ldi	r30, 0x81	; 129
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	8d 60       	ori	r24, 0x0D	; 13
     d8c:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     d8e:	80 ea       	ldi	r24, 0xA0	; 160
     d90:	95 e0       	ldi	r25, 0x05	; 5
     d92:	90 93 89 00 	sts	0x0089, r25
     d96:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     d9a:	ef e6       	ldi	r30, 0x6F	; 111
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	82 60       	ori	r24, 0x02	; 2
     da2:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     da4:	b1 9a       	sbi	0x16, 1	; 22
     da6:	08 95       	ret

00000da8 <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     da8:	1f 92       	push	r1
     daa:	0f 92       	push	r0
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	0f 92       	push	r0
     db0:	11 24       	eor	r1, r1
     db2:	8f 93       	push	r24
     db4:	9f 93       	push	r25
	//regler_ready=1;
	if(turn_delay < 10)
     db6:	80 91 1b 01 	lds	r24, 0x011B
     dba:	90 91 1c 01 	lds	r25, 0x011C
     dbe:	8a 30       	cpi	r24, 0x0A	; 10
     dc0:	91 05       	cpc	r25, r1
     dc2:	2c f4       	brge	.+10     	; 0xdce <__vector_13+0x26>
		turn_delay++;
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	90 93 1c 01 	sts	0x011C, r25
     dca:	80 93 1b 01 	sts	0x011B, r24
	
	updaterad_labyrint = true;
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	80 93 5f 01 	sts	0x015F, r24
	counter_timer_line_lab++;
     dd4:	80 91 64 01 	lds	r24, 0x0164
     dd8:	90 91 65 01 	lds	r25, 0x0165
     ddc:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_lab >= 50){
     dde:	82 33       	cpi	r24, 0x32	; 50
     de0:	91 05       	cpc	r25, r1
     de2:	2c f4       	brge	.+10     	; 0xdee <__vector_13+0x46>
	//regler_ready=1;
	if(turn_delay < 10)
		turn_delay++;
	
	updaterad_labyrint = true;
	counter_timer_line_lab++;
     de4:	90 93 65 01 	sts	0x0165, r25
     de8:	80 93 64 01 	sts	0x0164, r24
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <__vector_13+0x52>
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
     dee:	82 e3       	ldi	r24, 0x32	; 50
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	90 93 65 01 	sts	0x0165, r25
     df6:	80 93 64 01 	sts	0x0164, r24
	}
	counter_timer_line_RGB++;
     dfa:	80 91 66 01 	lds	r24, 0x0166
     dfe:	90 91 67 01 	lds	r25, 0x0167
     e02:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_RGB >= 50){			
     e04:	82 33       	cpi	r24, 0x32	; 50
     e06:	91 05       	cpc	r25, r1
     e08:	2c f4       	brge	.+10     	; 0xe14 <__vector_13+0x6c>
	updaterad_labyrint = true;
	counter_timer_line_lab++;
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
	}
	counter_timer_line_RGB++;
     e0a:	90 93 67 01 	sts	0x0167, r25
     e0e:	80 93 66 01 	sts	0x0166, r24
     e12:	06 c0       	rjmp	.+12     	; 0xe20 <__vector_13+0x78>
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
     e14:	82 e3       	ldi	r24, 0x32	; 50
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	90 93 67 01 	sts	0x0167, r25
     e1c:	80 93 66 01 	sts	0x0166, r24
	}
	counter_timer_line_goal++;
     e20:	80 91 62 01 	lds	r24, 0x0162
     e24:	90 91 63 01 	lds	r25, 0x0163
     e28:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_goal >= 50)
     e2a:	82 33       	cpi	r24, 0x32	; 50
     e2c:	91 05       	cpc	r25, r1
     e2e:	2c f4       	brge	.+10     	; 0xe3a <__vector_13+0x92>
	}
	counter_timer_line_RGB++;
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
	}
	counter_timer_line_goal++;
     e30:	90 93 63 01 	sts	0x0163, r25
     e34:	80 93 62 01 	sts	0x0162, r24
     e38:	06 c0       	rjmp	.+12     	; 0xe46 <__vector_13+0x9e>
	if(counter_timer_line_goal >= 50)
		counter_timer_line_goal = 50;
     e3a:	82 e3       	ldi	r24, 0x32	; 50
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	90 93 63 01 	sts	0x0163, r25
     e42:	80 93 62 01 	sts	0x0162, r24
		
	//count_waypoint++;			//räknare för att köra ur svängar i labyrinter
}
     e46:	9f 91       	pop	r25
     e48:	8f 91       	pop	r24
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	0f 90       	pop	r0
     e50:	1f 90       	pop	r1
     e52:	18 95       	reti

00000e54 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     e54:	8d b3       	in	r24, 0x1d	; 29
     e56:	86 60       	ori	r24, 0x06	; 6
     e58:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     e5a:	e9 e6       	ldi	r30, 0x69	; 105
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	88 62       	ori	r24, 0x28	; 40
     e62:	80 83       	st	Z, r24
     e64:	08 95       	ret

00000e66 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     e66:	1f 92       	push	r1
     e68:	0f 92       	push	r0
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	0f 92       	push	r0
     e6e:	11 24       	eor	r1, r1
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
	if(drive_mode==1){
     e74:	80 91 6e 01 	lds	r24, 0x016E
     e78:	90 91 6f 01 	lds	r25, 0x016F
     e7c:	01 97       	sbiw	r24, 0x01	; 1
     e7e:	39 f4       	brne	.+14     	; 0xe8e <__vector_2+0x28>
		drive_mode=0;
     e80:	10 92 6f 01 	sts	0x016F, r1
     e84:	10 92 6e 01 	sts	0x016E, r1
		PORTD |= (1 << PD1);
     e88:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     e8a:	58 98       	cbi	0x0b, 0	; 11
     e8c:	0c c0       	rjmp	.+24     	; 0xea6 <__vector_2+0x40>
	}
	else{
		start=0;
     e8e:	10 92 6d 01 	sts	0x016D, r1
     e92:	10 92 6c 01 	sts	0x016C, r1
		drive_mode=1;
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	90 93 6f 01 	sts	0x016F, r25
     e9e:	80 93 6e 01 	sts	0x016E, r24
		PORTD |= (1 << PD0);
     ea2:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     ea4:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     ea6:	e1 9a       	sbi	0x1c, 1	; 28
}
     ea8:	9f 91       	pop	r25
     eaa:	8f 91       	pop	r24
     eac:	0f 90       	pop	r0
     eae:	0f be       	out	0x3f, r0	; 63
     eb0:	0f 90       	pop	r0
     eb2:	1f 90       	pop	r1
     eb4:	18 95       	reti

00000eb6 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     eb6:	1f 92       	push	r1
     eb8:	0f 92       	push	r0
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	0f 92       	push	r0
     ebe:	11 24       	eor	r1, r1
     ec0:	8f 93       	push	r24
     ec2:	9f 93       	push	r25
	if(start==0){
     ec4:	80 91 6c 01 	lds	r24, 0x016C
     ec8:	90 91 6d 01 	lds	r25, 0x016D
     ecc:	89 2b       	or	r24, r25
     ece:	39 f4       	brne	.+14     	; 0xede <__vector_3+0x28>
		start=1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	90 93 6d 01 	sts	0x016D, r25
     ed8:	80 93 6c 01 	sts	0x016C, r24
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <__vector_3+0x30>
	}
	else{
		start=0;
     ede:	10 92 6d 01 	sts	0x016D, r1
     ee2:	10 92 6c 01 	sts	0x016C, r1
	}
	EIFR |= (1<< INTF2);
     ee6:	e2 9a       	sbi	0x1c, 2	; 28
}
     ee8:	9f 91       	pop	r25
     eea:	8f 91       	pop	r24
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     ef6:	88 23       	and	r24, r24
     ef8:	69 f0       	breq	.+26     	; 0xf14 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     efa:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     efc:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     efe:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     f00:	e9 e6       	ldi	r30, 0x69	; 105
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	83 60       	ori	r24, 0x03	; 3
     f08:	80 83       	st	Z, r24
		TWBR = 0x10;
     f0a:	80 e1       	ldi	r24, 0x10	; 16
     f0c:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     f10:	10 92 b9 00 	sts	0x00B9, r1
     f14:	08 95       	ret

00000f16 <i2c_send>:
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     f16:	8f 92       	push	r8
     f18:	9f 92       	push	r9
     f1a:	af 92       	push	r10
     f1c:	bf 92       	push	r11
     f1e:	cf 92       	push	r12
     f20:	df 92       	push	r13
     f22:	ef 92       	push	r14
     f24:	ff 92       	push	r15
     f26:	0f 93       	push	r16
     f28:	1f 93       	push	r17
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     f2e:	eb 01       	movw	r28, r22
     f30:	08 81       	ld	r16, Y
     f32:	02 95       	swap	r16
     f34:	0f 70       	andi	r16, 0x0F	; 15
     f36:	10 e0       	ldi	r17, 0x00	; 0
     f38:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     f3a:	68 94       	set
     f3c:	ee 24       	eor	r14, r14
     f3e:	e3 f8       	bld	r14, 3
     f40:	f1 2c       	mov	r15, r1
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     f42:	40 e0       	ldi	r20, 0x00	; 0
     f44:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     f46:	ec eb       	ldi	r30, 0xBC	; 188
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	0f 2e       	mov	r0, r31
     f4c:	f4 ea       	ldi	r31, 0xA4	; 164
     f4e:	df 2e       	mov	r13, r31
     f50:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     f52:	a9 eb       	ldi	r26, 0xB9	; 185
     f54:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     f56:	8e 7f       	andi	r24, 0xFE	; 254
     f58:	c8 2e       	mov	r12, r24
     f5a:	6b eb       	ldi	r22, 0xBB	; 187
     f5c:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     f5e:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     f60:	68 94       	set
     f62:	aa 24       	eor	r10, r10
     f64:	a4 f8       	bld	r10, 4
     f66:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     f68:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     f6a:	90 81       	ld	r25, Z
     f6c:	99 23       	and	r25, r25
     f6e:	ec f7       	brge	.-6      	; 0xf6a <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     f70:	2c 91       	ld	r18, X
     f72:	28 7f       	andi	r18, 0xF8	; 248
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	2e 15       	cp	r18, r14
     f78:	3f 05       	cpc	r19, r15
     f7a:	69 f5       	brne	.+90     	; 0xfd6 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     f7c:	eb 01       	movw	r28, r22
     f7e:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     f80:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
     f82:	90 81       	ld	r25, Z
     f84:	99 23       	and	r25, r25
     f86:	ec f7       	brge	.-6      	; 0xf82 <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
     f88:	9c 91       	ld	r25, X
     f8a:	98 7f       	andi	r25, 0xF8	; 248
     f8c:	98 31       	cpi	r25, 0x18	; 24
     f8e:	29 f0       	breq	.+10     	; 0xf9a <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     f90:	84 e9       	ldi	r24, 0x94	; 148
     f92:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	1f c0       	rjmp	.+62     	; 0xfd8 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
     f9a:	e4 01       	movw	r28, r8
     f9c:	99 91       	ld	r25, Y+
     f9e:	4e 01       	movw	r8, r28
     fa0:	eb 01       	movw	r28, r22
     fa2:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
     fa4:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
     fa6:	90 81       	ld	r25, Z
     fa8:	99 23       	and	r25, r25
     faa:	ec f7       	brge	.-6      	; 0xfa6 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
     fac:	9c 91       	ld	r25, X
     fae:	98 7f       	andi	r25, 0xF8	; 248
     fb0:	98 32       	cpi	r25, 0x28	; 40
     fb2:	29 f0       	breq	.+10     	; 0xfbe <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     fb4:	84 e9       	ldi	r24, 0x94	; 148
     fb6:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0d c0       	rjmp	.+26     	; 0xfd8 <i2c_send+0xc2>
	}
	counter++;
     fbe:	4f 5f       	subi	r20, 0xFF	; 255
     fc0:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     fc2:	ea 2c       	mov	r14, r10
     fc4:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
     fc6:	04 17       	cp	r16, r20
     fc8:	15 07       	cpc	r17, r21
     fca:	74 f6       	brge	.-100    	; 0xf68 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     fcc:	84 e9       	ldi	r24, 0x94	; 148
     fce:	80 93 bc 00 	sts	0x00BC, r24
	return true;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
     fd6:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	1f 91       	pop	r17
     fde:	0f 91       	pop	r16
     fe0:	ff 90       	pop	r15
     fe2:	ef 90       	pop	r14
     fe4:	df 90       	pop	r13
     fe6:	cf 90       	pop	r12
     fe8:	bf 90       	pop	r11
     fea:	af 90       	pop	r10
     fec:	9f 90       	pop	r9
     fee:	8f 90       	pop	r8
     ff0:	08 95       	ret

00000ff2 <req_gyro_turn>:
int gyro_left = 0;
int gyro_right = 0;
int laby_left_speed = 100;
int laby_right_speed = 93;

void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	1f 92       	push	r1
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
	byte data[1] = { 0x07 };
     ffc:	87 e0       	ldi	r24, 0x07	; 7
     ffe:	89 83       	std	Y+1, r24	; 0x01
	i2c_send(0x06, data);
    1000:	be 01       	movw	r22, r28
    1002:	6f 5f       	subi	r22, 0xFF	; 255
    1004:	7f 4f       	sbci	r23, 0xFF	; 255
    1006:	86 e0       	ldi	r24, 0x06	; 6
    1008:	86 df       	rcall	.-244    	; 0xf16 <i2c_send>
	turning = true;
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	80 93 5e 01 	sts	0x015E, r24
	turn_delay = 0;
    1010:	10 92 1c 01 	sts	0x011C, r1
    1014:	10 92 1b 01 	sts	0x011B, r1
	while(turn_delay < 2){
		PORTB |= (1 << PB1);
    1018:	29 9a       	sbi	0x05, 1	; 5
void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
	byte data[1] = { 0x07 };
	i2c_send(0x06, data);
	turning = true;
	turn_delay = 0;
	while(turn_delay < 2){
    101a:	80 91 1b 01 	lds	r24, 0x011B
    101e:	90 91 1c 01 	lds	r25, 0x011C
    1022:	02 97       	sbiw	r24, 0x02	; 2
    1024:	cc f3       	brlt	.-14     	; 0x1018 <req_gyro_turn+0x26>
		PORTB |= (1 << PB1);
	}
	PORTB &= ~(1 << PB1);
    1026:	29 98       	cbi	0x05, 1	; 5
	
}
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <manual_drive>:
//Funktioner fÃ¶r att styra robot fÃ¶r hÃ¶ger/vÃ¤nster eller framÃ¥t
//--------------------------------------------------------------

void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
    1030:	20 91 52 01 	lds	r18, 0x0152
    1034:	30 91 53 01 	lds	r19, 0x0153
    1038:	21 30       	cpi	r18, 0x01	; 1
    103a:	31 05       	cpc	r19, r1
    103c:	49 f4       	brne	.+18     	; 0x1050 <manual_drive+0x20>
				req_gyro_turn();											// Request gyroturn
				turn_left();												// Turn motors on for left spin						
				gyro_left = 1;												
			}
			else if(gyro_left == 1){					// 90 turn done
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
    103e:	10 92 55 01 	sts	0x0155, r1
    1042:	10 92 54 01 	sts	0x0154, r1
				gyro_left = 0;
    1046:	10 92 53 01 	sts	0x0153, r1
    104a:	10 92 52 01 	sts	0x0152, r1
    104e:	08 95       	ret
void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
			manual_function = 6;
		}
		else if(gyro_right == 1){
    1050:	80 91 50 01 	lds	r24, 0x0150
    1054:	90 91 51 01 	lds	r25, 0x0151
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	71 f4       	brne	.+28     	; 0x1078 <manual_drive+0x48>
			manual_function = 5;	
    105c:	85 e0       	ldi	r24, 0x05	; 5
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	90 93 55 01 	sts	0x0155, r25
    1064:	80 93 54 01 	sts	0x0154, r24
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    1068:	80 91 50 01 	lds	r24, 0x0150
    106c:	90 91 51 01 	lds	r25, 0x0151
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	09 f0       	breq	.+2      	; 0x1076 <manual_drive+0x46>
    1074:	5b c0       	rjmp	.+182    	; 0x112c <manual_drive+0xfc>
    1076:	51 c0       	rjmp	.+162    	; 0x111a <manual_drive+0xea>
		}
		else if(gyro_right == 1){
			manual_function = 5;	
		}
		//*******************************
		if(manual_function == 0){											// Stand still = dont dare to move
    1078:	80 91 54 01 	lds	r24, 0x0154
    107c:	90 91 55 01 	lds	r25, 0x0155
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	29 f4       	brne	.+10     	; 0x108e <manual_drive+0x5e>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    1084:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1086:	2d 98       	cbi	0x05, 5	; 5
			motor_left = 0;
    1088:	17 bc       	out	0x27, r1	; 39
			motor_right = 0;
    108a:	18 bc       	out	0x28, r1	; 40
    108c:	08 95       	ret
		}
		else if(manual_function == 1){										// Forward
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	91 05       	cpc	r25, r1
    1092:	49 f4       	brne	.+18     	; 0x10a6 <manual_drive+0x76>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    1094:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1096:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    1098:	80 91 6a 01 	lds	r24, 0x016A
    109c:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    109e:	80 91 68 01 	lds	r24, 0x0168
    10a2:	88 bd       	out	0x28, r24	; 40
    10a4:	08 95       	ret
		}
		else if(manual_function == 2){										// Backward
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	91 05       	cpc	r25, r1
    10aa:	59 f4       	brne	.+22     	; 0x10c2 <manual_drive+0x92>
			PORTB |= (1 << motor_dir_left) | (1 << motor_dir_right);		// Set motor direction to backward
    10ac:	85 b1       	in	r24, 0x05	; 5
    10ae:	80 66       	ori	r24, 0x60	; 96
    10b0:	85 b9       	out	0x05, r24	; 5
			motor_left = left-13;											// -n for adjusting so the motors "speed" are the same :D :D  ***Change depends on speed :D***
    10b2:	80 91 6a 01 	lds	r24, 0x016A
    10b6:	8d 50       	subi	r24, 0x0D	; 13
    10b8:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    10ba:	80 91 68 01 	lds	r24, 0x0168
    10be:	88 bd       	out	0x28, r24	; 40
    10c0:	08 95       	ret
		}
		else if(manual_function == 3){										// Rightforward
    10c2:	83 30       	cpi	r24, 0x03	; 3
    10c4:	91 05       	cpc	r25, r1
    10c6:	89 f4       	brne	.+34     	; 0x10ea <manual_drive+0xba>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10c8:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10ca:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    10cc:	80 91 6a 01 	lds	r24, 0x016A
    10d0:	87 bd       	out	0x27, r24	; 39
			motor_right = (right - (right/3));								// Speed value minus one third of the speedvalue
    10d2:	20 91 68 01 	lds	r18, 0x0168
    10d6:	90 91 69 01 	lds	r25, 0x0169
    10da:	82 2f       	mov	r24, r18
    10dc:	63 e0       	ldi	r22, 0x03	; 3
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
    10e4:	26 1b       	sub	r18, r22
    10e6:	28 bd       	out	0x28, r18	; 40
    10e8:	08 95       	ret
		}
		else if(manual_function == 4){										// Leftforward
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	91 05       	cpc	r25, r1
    10ee:	89 f4       	brne	.+34     	; 0x1112 <manual_drive+0xe2>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10f0:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10f2:	2d 98       	cbi	0x05, 5	; 5
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
    10f4:	20 91 6a 01 	lds	r18, 0x016A
    10f8:	90 91 6b 01 	lds	r25, 0x016B
    10fc:	82 2f       	mov	r24, r18
    10fe:	63 e0       	ldi	r22, 0x03	; 3
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	0e 94 d5 10 	call	0x21aa	; 0x21aa <__divmodhi4>
    1106:	26 1b       	sub	r18, r22
    1108:	27 bd       	out	0x27, r18	; 39
			motor_right = right;
    110a:	80 91 68 01 	lds	r24, 0x0168
    110e:	88 bd       	out	0x28, r24	; 40
    1110:	08 95       	ret
		}
		else if(manual_function == 5){										// Spin right
    1112:	85 30       	cpi	r24, 0x05	; 5
    1114:	91 05       	cpc	r25, r1
    1116:	a9 f4       	brne	.+42     	; 0x1142 <manual_drive+0x112>
    1118:	26 c0       	rjmp	.+76     	; 0x1166 <manual_drive+0x136>
			if(gyro_right == 0){											// Only once when pressed
				req_gyro_turn();											// Request gyroturn
    111a:	6b df       	rcall	.-298    	; 0xff2 <req_gyro_turn>
				turn_right();												// Turn motors on for left spin	
    111c:	57 da       	rcall	.-2898   	; 0x5cc <turn_right>
				gyro_right = 1; 
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	90 93 51 01 	sts	0x0151, r25
    1126:	80 93 50 01 	sts	0x0150, r24
    112a:	08 95       	ret
			}
			else if(gyro_right == 1){				// 90 turn done
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	09 f5       	brne	.+66     	; 0x1172 <manual_drive+0x142>
				manual_function = 0;										// kan behÃ¶vas nollstÃ¤llning av funktion (probably not)
    1130:	10 92 55 01 	sts	0x0155, r1
    1134:	10 92 54 01 	sts	0x0154, r1
				gyro_right = 0;												
    1138:	10 92 51 01 	sts	0x0151, r1
    113c:	10 92 50 01 	sts	0x0150, r1
    1140:	08 95       	ret
			}
		}
		else if(manual_function == 6){										// Spin left
    1142:	06 97       	sbiw	r24, 0x06	; 6
    1144:	59 f4       	brne	.+22     	; 0x115c <manual_drive+0x12c>
			if(gyro_left == 0){												// Only once when pressed
    1146:	23 2b       	or	r18, r19
    1148:	a1 f4       	brne	.+40     	; 0x1172 <manual_drive+0x142>
				req_gyro_turn();											// Request gyroturn
    114a:	53 df       	rcall	.-346    	; 0xff2 <req_gyro_turn>
				turn_left();												// Turn motors on for left spin						
    114c:	38 da       	rcall	.-2960   	; 0x5be <turn_left>
				gyro_left = 1;												
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 53 01 	sts	0x0153, r25
    1156:	80 93 52 01 	sts	0x0152, r24
    115a:	08 95       	ret
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
				gyro_left = 0;
			}
		}
		else{
			manual_function=0;												// why not :D 
    115c:	10 92 55 01 	sts	0x0155, r1
    1160:	10 92 54 01 	sts	0x0154, r1
    1164:	08 95       	ret
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    1166:	80 91 50 01 	lds	r24, 0x0150
    116a:	90 91 51 01 	lds	r25, 0x0151
    116e:	89 2b       	or	r24, r25
    1170:	a1 f2       	breq	.-88     	; 0x111a <manual_drive+0xea>
    1172:	08 95       	ret

00001174 <waypoint_lab>:

//-------------------------------------
//Funktioner som kommer styra roboten vid specialfall som tillexempel t-korsning eller en vanlig sväng
//-------------------------------------
void waypoint_lab(int distance_left,int distance_right,int distance_front,int st_value){ //t-korsning 
    1174:	fc 01       	movw	r30, r24
    1176:	db 01       	movw	r26, r22
	//PORTD ^= ( 1 << PD1 );
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    1178:	90 91 48 01 	lds	r25, 0x0148
    117c:	91 11       	cpse	r25, r1
    117e:	6a c0       	rjmp	.+212    	; 0x1254 <waypoint_lab+0xe0>
    1180:	80 91 06 01 	lds	r24, 0x0106
    1184:	90 91 07 01 	lds	r25, 0x0107
    1188:	84 17       	cp	r24, r20
    118a:	95 07       	cpc	r25, r21
    118c:	24 f4       	brge	.+8      	; 0x1196 <waypoint_lab+0x22>
		drive_forward();
    118e:	0e da       	rcall	.-3044   	; 0x5ac <drive_forward>
		turn_done = false;
    1190:	10 92 47 01 	sts	0x0147, r1
    1194:	08 95       	ret
	}
	
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		ongoing_turn = true;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	80 93 48 01 	sts	0x0148, r24
		start_turn = true;
    119c:	80 93 49 01 	sts	0x0149, r24
		turn_done = false;
    11a0:	10 92 47 01 	sts	0x0147, r1
		stand_still();
    11a4:	fe c9       	rjmp	.-3076   	; 0x5a2 <stand_still>
    11a6:	08 95       	ret
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
		
		if(RGB_data == 3){					//RGB_data="blå" alltså sväng vänster vänster=blå
    11a8:	80 91 ac 01 	lds	r24, 0x01AC
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	49 f4       	brne	.+18     	; 0x11c2 <waypoint_lab+0x4e>
			req_gyro_turn();
    11b0:	20 df       	rcall	.-448    	; 0xff2 <req_gyro_turn>
			turn_left();
    11b2:	05 da       	rcall	.-3062   	; 0x5be <turn_left>
			regulate_side = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	90 93 40 01 	sts	0x0140, r25
    11bc:	80 93 3f 01 	sts	0x013F, r24
    11c0:	08 c0       	rjmp	.+16     	; 0x11d2 <waypoint_lab+0x5e>
		}
		else {
			req_gyro_turn();
    11c2:	17 df       	rcall	.-466    	; 0xff2 <req_gyro_turn>
			turn_right();
    11c4:	03 da       	rcall	.-3066   	; 0x5cc <turn_right>
			regulate_side = 2;					//RGB_data="röd" alltså sväng höger
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	90 93 40 01 	sts	0x0140, r25
    11ce:	80 93 3f 01 	sts	0x013F, r24
		}
		start_turn = false;					//Säger att svängen har inledits för att inte gå in i den här if-satsen igen
    11d2:	10 92 49 01 	sts	0x0149, r1
		
		for(int i = 0 ; i < number_of_errors_sc; i++)
    11d6:	20 91 04 01 	lds	r18, 0x0104
    11da:	30 91 05 01 	lds	r19, 0x0105
    11de:	12 16       	cp	r1, r18
    11e0:	13 06       	cpc	r1, r19
    11e2:	0c f0       	brlt	.+2      	; 0x11e6 <waypoint_lab+0x72>
    11e4:	40 c0       	rjmp	.+128    	; 0x1266 <waypoint_lab+0xf2>
    11e6:	e6 ec       	ldi	r30, 0xC6	; 198
    11e8:	f1 e0       	ldi	r31, 0x01	; 1
    11ea:	80 e0       	ldi	r24, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
			previous_errors[i] = 0;
    11ee:	11 92       	st	Z+, r1
    11f0:	11 92       	st	Z+, r1
			turn_right();
			regulate_side = 2;					//RGB_data="röd" alltså sväng höger
		}
		start_turn = false;					//Säger att svängen har inledits för att inte gå in i den här if-satsen igen
		
		for(int i = 0 ; i < number_of_errors_sc; i++)
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	82 17       	cp	r24, r18
    11f6:	93 07       	cpc	r25, r19
    11f8:	d4 f3       	brlt	.-12     	; 0x11ee <waypoint_lab+0x7a>
    11fa:	08 95       	ret
			previous_errors[i] = 0;
	}
	
	else if(ongoing_turn && !turning && (distance_left > st_value || distance_right > st_value)){	//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    11fc:	80 91 5e 01 	lds	r24, 0x015E
    1200:	81 11       	cpse	r24, r1
    1202:	17 c0       	rjmp	.+46     	; 0x1232 <waypoint_lab+0xbe>
    1204:	2e 17       	cp	r18, r30
    1206:	3f 07       	cpc	r19, r31
    1208:	1c f0       	brlt	.+6      	; 0x1210 <waypoint_lab+0x9c>
    120a:	2a 17       	cp	r18, r26
    120c:	3b 07       	cpc	r19, r27
    120e:	3c f5       	brge	.+78     	; 0x125e <waypoint_lab+0xea>
		turn_done = true;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	80 93 47 01 	sts	0x0147, r24
		//count_waypoint = 0;
		//drive_forward(); // Byt till att reglera mot vägg
		
		if(regulate_side == 1)
    1216:	80 91 3f 01 	lds	r24, 0x013F
    121a:	90 91 40 01 	lds	r25, 0x0140
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	21 f4       	brne	.+8      	; 0x122a <waypoint_lab+0xb6>
			drive_forward_right(distance_right, distance_front);
    1222:	ba 01       	movw	r22, r20
    1224:	cd 01       	movw	r24, r26
    1226:	2f cb       	rjmp	.-2466   	; 0x886 <drive_forward_right>
    1228:	08 95       	ret
		else
			drive_forward_left(distance_left, distance_front);
    122a:	ba 01       	movw	r22, r20
    122c:	cf 01       	movw	r24, r30
    122e:	7c ca       	rjmp	.-2824   	; 0x728 <drive_forward_left>
    1230:	08 95       	ret
	}
	
	else if(ongoing_turn && turn_done && distance_right <= st_value && distance_left <= st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1232:	80 91 47 01 	lds	r24, 0x0147
    1236:	88 23       	and	r24, r24
    1238:	b1 f0       	breq	.+44     	; 0x1266 <waypoint_lab+0xf2>
    123a:	2a 17       	cp	r18, r26
    123c:	3b 07       	cpc	r19, r27
    123e:	9c f0       	brlt	.+38     	; 0x1266 <waypoint_lab+0xf2>
    1240:	2e 17       	cp	r18, r30
    1242:	3f 07       	cpc	r19, r31
    1244:	84 f0       	brlt	.+32     	; 0x1266 <waypoint_lab+0xf2>
		waypoint = false;						
    1246:	10 92 3e 01 	sts	0x013E, r1
		ongoing_turn = false;
    124a:	10 92 48 01 	sts	0x0148, r1
		prepare_special_case = false;
    124e:	10 92 45 01 	sts	0x0145, r1
    1252:	08 95       	ret
		start_turn = true;
		turn_done = false;
		stand_still();
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
    1254:	80 91 49 01 	lds	r24, 0x0149
    1258:	81 11       	cpse	r24, r1
    125a:	a6 cf       	rjmp	.-180    	; 0x11a8 <waypoint_lab+0x34>
    125c:	cf cf       	rjmp	.-98     	; 0x11fc <waypoint_lab+0x88>
			drive_forward_right(distance_right, distance_front);
		else
			drive_forward_left(distance_left, distance_front);
	}
	
	else if(ongoing_turn && turn_done && distance_right <= st_value && distance_left <= st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    125e:	80 91 47 01 	lds	r24, 0x0147
    1262:	81 11       	cpse	r24, r1
    1264:	f0 cf       	rjmp	.-32     	; 0x1246 <waypoint_lab+0xd2>
    1266:	08 95       	ret

00001268 <oneway_turn_lab>:
		ongoing_turn = false;
		prepare_special_case = false;
	}
}

void oneway_turn_lab(int distance_left,int distance_right,int distance_front,int st_value){//roboten kommer fram till en enkel kurva antingen till höger eller vänster
    1268:	0f 93       	push	r16
    126a:	1f 93       	push	r17
    126c:	cf 93       	push	r28
    126e:	df 93       	push	r29
    1270:	ec 01       	movw	r28, r24
    1272:	8b 01       	movw	r16, r22
	PORTD ^= ( 1 << PD0 );
    1274:	9b b1       	in	r25, 0x0b	; 11
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	98 27       	eor	r25, r24
    127a:	9b b9       	out	0x0b, r25	; 11
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    127c:	80 91 48 01 	lds	r24, 0x0148
    1280:	81 11       	cpse	r24, r1
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <oneway_turn_lab+0x44>
    1284:	80 91 06 01 	lds	r24, 0x0106
    1288:	90 91 07 01 	lds	r25, 0x0107
    128c:	84 17       	cp	r24, r20
    128e:	95 07       	cpc	r25, r21
    1290:	24 f4       	brge	.+8      	; 0x129a <oneway_turn_lab+0x32>
		drive_forward();
    1292:	8c d9       	rcall	.-3304   	; 0x5ac <drive_forward>
		turn_done = false;
    1294:	10 92 47 01 	sts	0x0147, r1
    1298:	61 c0       	rjmp	.+194    	; 0x135c <oneway_turn_lab+0xf4>
	}
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		turn_done = false;
    129a:	10 92 47 01 	sts	0x0147, r1
		ongoing_turn = true;
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	80 93 48 01 	sts	0x0148, r24
		start_turn = true;
    12a4:	80 93 49 01 	sts	0x0149, r24
		stand_still();
    12a8:	7c d9       	rcall	.-3336   	; 0x5a2 <stand_still>
    12aa:	58 c0       	rjmp	.+176    	; 0x135c <oneway_turn_lab+0xf4>
	}
	else if(start_turn){	
    12ac:	80 91 49 01 	lds	r24, 0x0149
    12b0:	88 23       	and	r24, r24
    12b2:	69 f1       	breq	.+90     	; 0x130e <oneway_turn_lab+0xa6>
		start_turn = false;									//Roboten är inne i kurvan och redo o svänga 
    12b4:	10 92 49 01 	sts	0x0149, r1
		if(distance_left > st_value){						//Kollar avstånd till höger och vänster för att -												//se vilket håll det ska svängas och inleder sedan sväng
    12b8:	2c 17       	cp	r18, r28
    12ba:	3d 07       	cpc	r19, r29
    12bc:	84 f4       	brge	.+32     	; 0x12de <oneway_turn_lab+0x76>
			req_gyro_turn();
    12be:	99 de       	rcall	.-718    	; 0xff2 <req_gyro_turn>
			turn_left();
    12c0:	7e d9       	rcall	.-3332   	; 0x5be <turn_left>
			regulate_side = 1;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	90 93 40 01 	sts	0x0140, r25
    12ca:	80 93 3f 01 	sts	0x013F, r24
			req_gyro_turn();
			turn_right();
			regulate_side = 2;
		}
												// Signalerar att sväng har	inledits för att inte gå in i denna if igen
		for(int i = 0 ; i < number_of_errors_sc; i++)
    12ce:	40 91 04 01 	lds	r20, 0x0104
    12d2:	50 91 05 01 	lds	r21, 0x0105
    12d6:	14 16       	cp	r1, r20
    12d8:	15 06       	cpc	r1, r21
    12da:	6c f0       	brlt	.+26     	; 0x12f6 <oneway_turn_lab+0x8e>
    12dc:	3f c0       	rjmp	.+126    	; 0x135c <oneway_turn_lab+0xf4>
		if(distance_left > st_value){						//Kollar avstånd till höger och vänster för att -												//se vilket håll det ska svängas och inleder sedan sväng
			req_gyro_turn();
			turn_left();
			regulate_side = 1;
		}
		else if(distance_right > st_value){
    12de:	26 17       	cp	r18, r22
    12e0:	37 07       	cpc	r19, r23
    12e2:	ac f7       	brge	.-22     	; 0x12ce <oneway_turn_lab+0x66>
			req_gyro_turn();
    12e4:	86 de       	rcall	.-756    	; 0xff2 <req_gyro_turn>
			turn_right();
    12e6:	72 d9       	rcall	.-3356   	; 0x5cc <turn_right>
			regulate_side = 2;
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	90 93 40 01 	sts	0x0140, r25
    12f0:	80 93 3f 01 	sts	0x013F, r24
    12f4:	ec cf       	rjmp	.-40     	; 0x12ce <oneway_turn_lab+0x66>
    12f6:	e6 ec       	ldi	r30, 0xC6	; 198
    12f8:	f1 e0       	ldi	r31, 0x01	; 1
		}
												// Signalerar att sväng har	inledits för att inte gå in i denna if igen
		for(int i = 0 ; i < number_of_errors_sc; i++)
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
			previous_errors[i] = 0;
    12fe:	11 92       	st	Z+, r1
    1300:	11 92       	st	Z+, r1
			req_gyro_turn();
			turn_right();
			regulate_side = 2;
		}
												// Signalerar att sväng har	inledits för att inte gå in i denna if igen
		for(int i = 0 ; i < number_of_errors_sc; i++)
    1302:	2f 5f       	subi	r18, 0xFF	; 255
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	24 17       	cp	r18, r20
    1308:	35 07       	cpc	r19, r21
    130a:	cc f3       	brlt	.-14     	; 0x12fe <oneway_turn_lab+0x96>
    130c:	27 c0       	rjmp	.+78     	; 0x135c <oneway_turn_lab+0xf4>
		//previous_right = 0;
		//previous_left = 0;
		//return;
	}
	
	else if(ongoing_turn && !turn_done && (distance_left > st_value || distance_right > st_value)){					//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    130e:	80 91 47 01 	lds	r24, 0x0147
    1312:	81 11       	cpse	r24, r1
    1314:	23 c0       	rjmp	.+70     	; 0x135c <oneway_turn_lab+0xf4>
    1316:	2c 17       	cp	r18, r28
    1318:	3d 07       	cpc	r19, r29
    131a:	1c f0       	brlt	.+6      	; 0x1322 <oneway_turn_lab+0xba>
    131c:	26 17       	cp	r18, r22
    131e:	37 07       	cpc	r19, r23
    1320:	74 f4       	brge	.+28     	; 0x133e <oneway_turn_lab+0xd6>
		//count_waypoint = 0; //oneway_turn
		//gyro_turn = 0;
		//drive_forward();
		//drive_forward();
		
		if(regulate_side == 1)
    1322:	80 91 3f 01 	lds	r24, 0x013F
    1326:	90 91 40 01 	lds	r25, 0x0140
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	21 f4       	brne	.+8      	; 0x1336 <oneway_turn_lab+0xce>
			drive_forward_right(distance_right, distance_front);
    132e:	ba 01       	movw	r22, r20
    1330:	c8 01       	movw	r24, r16
    1332:	a9 da       	rcall	.-2734   	; 0x886 <drive_forward_right>
    1334:	13 c0       	rjmp	.+38     	; 0x135c <oneway_turn_lab+0xf4>
		else 
			drive_forward_left(distance_left, distance_front);	
    1336:	ba 01       	movw	r22, r20
    1338:	ce 01       	movw	r24, r28
    133a:	f6 d9       	rcall	.-3092   	; 0x728 <drive_forward_left>
    133c:	0f c0       	rjmp	.+30     	; 0x135c <oneway_turn_lab+0xf4>
		//drive_forward(); // Byt till left eller right beroende på riktning
	}
	
	else if(!turn_done && distance_left < st_value && distance_right < st_value /*&& previous_left < st_value && previous_right < st_value*/){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    133e:	c2 17       	cp	r28, r18
    1340:	d3 07       	cpc	r29, r19
    1342:	64 f4       	brge	.+24     	; 0x135c <oneway_turn_lab+0xf4>
    1344:	62 17       	cp	r22, r18
    1346:	73 07       	cpc	r23, r19
    1348:	4c f4       	brge	.+18     	; 0x135c <oneway_turn_lab+0xf4>
		turn_done = true;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	80 93 47 01 	sts	0x0147, r24
		oneway_turn = false;
    1350:	10 92 3d 01 	sts	0x013D, r1
		ongoing_turn = false;
    1354:	10 92 48 01 	sts	0x0148, r1
		//PORTD ^= (1 << PD0);
		prepare_special_case = false;
    1358:	10 92 45 01 	sts	0x0145, r1
	}
	previous_right = distance_right;
    135c:	10 93 44 01 	sts	0x0144, r17
    1360:	00 93 43 01 	sts	0x0143, r16
	previous_left = distance_left;
    1364:	d0 93 42 01 	sts	0x0142, r29
    1368:	c0 93 41 01 	sts	0x0141, r28
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	1f 91       	pop	r17
    1372:	0f 91       	pop	r16
    1374:	08 95       	ret

00001376 <twoway_turn_left_lab>:


//Måste testas
void twoway_turn_left_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram	
    1376:	0f 93       	push	r16
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	ec 01       	movw	r28, r24
    1380:	8b 01       	movw	r16, r22
	PORTD |= (1 << PD1);
    1382:	59 9a       	sbi	0x0b, 1	; 11
	if(!ongoing_turn /*&& ++count_waypoint <= 1*/){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1384:	80 91 48 01 	lds	r24, 0x0148
    1388:	81 11       	cpse	r24, r1
    138a:	0b c0       	rjmp	.+22     	; 0x13a2 <twoway_turn_left_lab+0x2c>
		ongoing_turn = true;
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	80 93 48 01 	sts	0x0148, r24
		start_turn = true;
    1392:	80 93 49 01 	sts	0x0149, r24
		stand_still();
    1396:	05 d9       	rcall	.-3574   	; 0x5a2 <stand_still>
		turn_done = false;
    1398:	10 92 47 01 	sts	0x0147, r1
		first_time = false;
    139c:	10 92 0c 01 	sts	0x010C, r1
    13a0:	90 c0       	rjmp	.+288    	; 0x14c2 <twoway_turn_left_lab+0x14c>
		//count_waypoint = 0;
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    13a2:	80 91 49 01 	lds	r24, 0x0149
    13a6:	88 23       	and	r24, r24
    13a8:	61 f1       	breq	.+88     	; 0x1402 <twoway_turn_left_lab+0x8c>
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    13aa:	10 92 49 01 	sts	0x0149, r1
		if(RGB_data != 3){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    13ae:	80 91 ac 01 	lds	r24, 0x01AC
    13b2:	83 30       	cpi	r24, 0x03	; 3
    13b4:	d9 f0       	breq	.+54     	; 0x13ec <twoway_turn_left_lab+0x76>
			//drive_forward();
			
			for(int i = 0 ; i < number_of_errors_sc; i++)
    13b6:	a0 91 04 01 	lds	r26, 0x0104
    13ba:	b0 91 05 01 	lds	r27, 0x0105
    13be:	1a 16       	cp	r1, r26
    13c0:	1b 06       	cpc	r1, r27
    13c2:	5c f4       	brge	.+22     	; 0x13da <twoway_turn_left_lab+0x64>
    13c4:	e6 ec       	ldi	r30, 0xC6	; 198
    13c6:	f1 e0       	ldi	r31, 0x01	; 1
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
			previous_errors[i] = 0;
    13cc:	11 92       	st	Z+, r1
    13ce:	11 92       	st	Z+, r1
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
		if(RGB_data != 3){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
			//drive_forward();
			
			for(int i = 0 ; i < number_of_errors_sc; i++)
    13d0:	2f 5f       	subi	r18, 0xFF	; 255
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	2a 17       	cp	r18, r26
    13d6:	3b 07       	cpc	r19, r27
    13d8:	cc f3       	brlt	.-14     	; 0x13cc <twoway_turn_left_lab+0x56>
			previous_errors[i] = 0;
					
			drive_forward_right(distance_right, distance_front);
    13da:	ba 01       	movw	r22, r20
    13dc:	c8 01       	movw	r24, r16
    13de:	53 da       	rcall	.-2906   	; 0x886 <drive_forward_right>
			turn_done = true;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	80 93 47 01 	sts	0x0147, r24
			regler_against_wall = true;
    13e6:	80 93 46 01 	sts	0x0146, r24
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <twoway_turn_left_lab+0x7a>
			}
		else {						//RGB säger att roboten ska svänga vänster så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    13ec:	02 de       	rcall	.-1020   	; 0xff2 <req_gyro_turn>
			turn_left();
    13ee:	e7 d8       	rcall	.-3634   	; 0x5be <turn_left>
		}
			
		previous_right = 0;
    13f0:	10 92 44 01 	sts	0x0144, r1
    13f4:	10 92 43 01 	sts	0x0143, r1
		previous_left = 0;
    13f8:	10 92 42 01 	sts	0x0142, r1
    13fc:	10 92 41 01 	sts	0x0141, r1
		return;
    1400:	6f c0       	rjmp	.+222    	; 0x14e0 <twoway_turn_left_lab+0x16a>
	}
	
	// Rakt fram11
	else if(regler_against_wall && (distance_left > st_value )){
    1402:	80 91 46 01 	lds	r24, 0x0146
    1406:	88 23       	and	r24, r24
    1408:	41 f0       	breq	.+16     	; 0x141a <twoway_turn_left_lab+0xa4>
    140a:	2c 17       	cp	r18, r28
    140c:	3d 07       	cpc	r19, r29
    140e:	0c f0       	brlt	.+2      	; 0x1412 <twoway_turn_left_lab+0x9c>
    1410:	61 c0       	rjmp	.+194    	; 0x14d4 <twoway_turn_left_lab+0x15e>
		//drive_forward();
		drive_forward_right(distance_right, distance_front);
    1412:	ba 01       	movw	r22, r20
    1414:	c8 01       	movw	r24, r16
    1416:	37 da       	rcall	.-2962   	; 0x886 <drive_forward_right>
    1418:	54 c0       	rjmp	.+168    	; 0x14c2 <twoway_turn_left_lab+0x14c>
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    141a:	80 91 ac 01 	lds	r24, 0x01AC
    141e:	83 30       	cpi	r24, 0x03	; 3
    1420:	19 f1       	breq	.+70     	; 0x1468 <twoway_turn_left_lab+0xf2>
    1422:	2c 17       	cp	r18, r28
    1424:	3d 07       	cpc	r19, r29
    1426:	4c f1       	brlt	.+82     	; 0x147a <twoway_turn_left_lab+0x104>
    1428:	20 17       	cp	r18, r16
    142a:	31 07       	cpc	r19, r17
    142c:	34 f1       	brlt	.+76     	; 0x147a <twoway_turn_left_lab+0x104>
    142e:	80 91 41 01 	lds	r24, 0x0141
    1432:	90 91 42 01 	lds	r25, 0x0142
    1436:	82 17       	cp	r24, r18
    1438:	93 07       	cpc	r25, r19
    143a:	fc f4       	brge	.+62     	; 0x147a <twoway_turn_left_lab+0x104>
    143c:	80 91 43 01 	lds	r24, 0x0143
    1440:	90 91 44 01 	lds	r25, 0x0144
    1444:	82 17       	cp	r24, r18
    1446:	93 07       	cpc	r25, r19
    1448:	c4 f4       	brge	.+48     	; 0x147a <twoway_turn_left_lab+0x104>
		twoway_turn_left = false;
    144a:	10 92 3c 01 	sts	0x013C, r1
		first_time = true;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    1454:	10 92 48 01 	sts	0x0148, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    1458:	10 92 ac 01 	sts	0x01AC, r1
		regler_against_wall = false;
    145c:	10 92 46 01 	sts	0x0146, r1
		PORTD &= ~(1 << PD1);
    1460:	59 98       	cbi	0x0b, 1	; 11
		prepare_special_case = false;
    1462:	10 92 45 01 	sts	0x0145, r1
    1466:	2d c0       	rjmp	.+90     	; 0x14c2 <twoway_turn_left_lab+0x14c>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data == 3 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    1468:	80 91 47 01 	lds	r24, 0x0147
    146c:	81 11       	cpse	r24, r1
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <twoway_turn_left_lab+0x10c>
		turn_done = true;
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	80 93 47 01 	sts	0x0147, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    1476:	9a d8       	rcall	.-3788   	; 0x5ac <drive_forward>
    1478:	24 c0       	rjmp	.+72     	; 0x14c2 <twoway_turn_left_lab+0x14c>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    147a:	80 91 47 01 	lds	r24, 0x0147
    147e:	88 23       	and	r24, r24
    1480:	01 f1       	breq	.+64     	; 0x14c2 <twoway_turn_left_lab+0x14c>
    1482:	c2 17       	cp	r28, r18
    1484:	d3 07       	cpc	r29, r19
    1486:	ec f4       	brge	.+58     	; 0x14c2 <twoway_turn_left_lab+0x14c>
    1488:	02 17       	cp	r16, r18
    148a:	13 07       	cpc	r17, r19
    148c:	d4 f4       	brge	.+52     	; 0x14c2 <twoway_turn_left_lab+0x14c>
    148e:	80 91 41 01 	lds	r24, 0x0141
    1492:	90 91 42 01 	lds	r25, 0x0142
    1496:	82 17       	cp	r24, r18
    1498:	93 07       	cpc	r25, r19
    149a:	9c f4       	brge	.+38     	; 0x14c2 <twoway_turn_left_lab+0x14c>
    149c:	80 91 43 01 	lds	r24, 0x0143
    14a0:	90 91 44 01 	lds	r25, 0x0144
    14a4:	82 17       	cp	r24, r18
    14a6:	93 07       	cpc	r25, r19
    14a8:	64 f4       	brge	.+24     	; 0x14c2 <twoway_turn_left_lab+0x14c>
		twoway_turn_left = false;
    14aa:	10 92 3c 01 	sts	0x013C, r1
		PORTD &= ~(1 << PD1);
    14ae:	59 98       	cbi	0x0b, 1	; 11
		ongoing_turn = false;
    14b0:	10 92 48 01 	sts	0x0148, r1
		first_time = true;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    14ba:	10 92 45 01 	sts	0x0145, r1
		RGB_data = 0;
    14be:	10 92 ac 01 	sts	0x01AC, r1
	}
	previous_right = distance_right;
    14c2:	10 93 44 01 	sts	0x0144, r17
    14c6:	00 93 43 01 	sts	0x0143, r16
	previous_left = distance_left;	
    14ca:	d0 93 42 01 	sts	0x0142, r29
    14ce:	c0 93 41 01 	sts	0x0141, r28
    14d2:	06 c0       	rjmp	.+12     	; 0x14e0 <twoway_turn_left_lab+0x16a>
	else if(regler_against_wall && (distance_left > st_value )){
		//drive_forward();
		drive_forward_right(distance_right, distance_front);
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    14d4:	80 91 ac 01 	lds	r24, 0x01AC
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	09 f0       	breq	.+2      	; 0x14de <twoway_turn_left_lab+0x168>
    14dc:	a5 cf       	rjmp	.-182    	; 0x1428 <twoway_turn_left_lab+0xb2>
    14de:	c4 cf       	rjmp	.-120    	; 0x1468 <twoway_turn_left_lab+0xf2>
		prepare_special_case = false;
		RGB_data = 0;
	}
	previous_right = distance_right;
	previous_left = distance_left;	
}
    14e0:	df 91       	pop	r29
    14e2:	cf 91       	pop	r28
    14e4:	1f 91       	pop	r17
    14e6:	0f 91       	pop	r16
    14e8:	08 95       	ret

000014ea <twoway_turn_right_lab>:


//INTE KLAR + måste testas
void twoway_turn_right_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	ec 01       	movw	r28, r24
    14f4:	8b 01       	movw	r16, r22
	++count_waypoint;
    14f6:	e0 91 1d 01 	lds	r30, 0x011D
    14fa:	f0 91 1e 01 	lds	r31, 0x011E
    14fe:	31 96       	adiw	r30, 0x01	; 1
    1500:	f0 93 1e 01 	sts	0x011E, r31
    1504:	e0 93 1d 01 	sts	0x011D, r30
	if(first_time){    //---kör fram i korsningen för att prepa sväng
    1508:	80 91 0c 01 	lds	r24, 0x010C
    150c:	88 23       	and	r24, r24
    150e:	61 f0       	breq	.+24     	; 0x1528 <twoway_turn_right_lab+0x3e>
		drive_forward();
    1510:	4d d8       	rcall	.-3942   	; 0x5ac <drive_forward>
		turn_done = false;
    1512:	10 92 47 01 	sts	0x0147, r1
		first_time = false;
    1516:	10 92 0c 01 	sts	0x010C, r1
		count_waypoint = 0;
    151a:	10 92 1e 01 	sts	0x011E, r1
    151e:	10 92 1d 01 	sts	0x011D, r1
		ongoing_turn = false;
    1522:	10 92 48 01 	sts	0x0148, r1
    1526:	82 c0       	rjmp	.+260    	; 0x162c <twoway_turn_right_lab+0x142>
	}
	else if(!ongoing_turn && count_waypoint>= 1){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1528:	80 91 48 01 	lds	r24, 0x0148
    152c:	81 11       	cpse	r24, r1
    152e:	0a c0       	rjmp	.+20     	; 0x1544 <twoway_turn_right_lab+0x5a>
    1530:	1e 16       	cp	r1, r30
    1532:	1f 06       	cpc	r1, r31
    1534:	3c f4       	brge	.+14     	; 0x1544 <twoway_turn_right_lab+0x5a>
		ongoing_turn = true;
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	80 93 48 01 	sts	0x0148, r24
		start_turn = true;
    153c:	80 93 49 01 	sts	0x0149, r24
		stand_still();
    1540:	30 d8       	rcall	.-4000   	; 0x5a2 <stand_still>
    1542:	74 c0       	rjmp	.+232    	; 0x162c <twoway_turn_right_lab+0x142>
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1544:	90 91 49 01 	lds	r25, 0x0149
    1548:	99 23       	and	r25, r25
    154a:	69 f1       	breq	.+90     	; 0x15a6 <twoway_turn_right_lab+0xbc>
		if(RGB_data == 2 || RGB_data == 3 ){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    154c:	80 91 ac 01 	lds	r24, 0x01AC
    1550:	82 50       	subi	r24, 0x02	; 2
    1552:	82 30       	cpi	r24, 0x02	; 2
    1554:	d8 f4       	brcc	.+54     	; 0x158c <twoway_turn_right_lab+0xa2>
			for(int i = 0 ; i < number_of_errors_sc; i++)
    1556:	80 91 04 01 	lds	r24, 0x0104
    155a:	90 91 05 01 	lds	r25, 0x0105
    155e:	18 16       	cp	r1, r24
    1560:	19 06       	cpc	r1, r25
    1562:	5c f4       	brge	.+22     	; 0x157a <twoway_turn_right_lab+0x90>
    1564:	e6 ec       	ldi	r30, 0xC6	; 198
    1566:	f1 e0       	ldi	r31, 0x01	; 1
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
			previous_errors[i] = 0;
    156c:	11 92       	st	Z+, r1
    156e:	11 92       	st	Z+, r1
		start_turn = true;
		stand_still();
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
		if(RGB_data == 2 || RGB_data == 3 ){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
			for(int i = 0 ; i < number_of_errors_sc; i++)
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	3f 4f       	sbci	r19, 0xFF	; 255
    1574:	28 17       	cp	r18, r24
    1576:	39 07       	cpc	r19, r25
    1578:	cc f3       	brlt	.-14     	; 0x156c <twoway_turn_right_lab+0x82>
			previous_errors[i] = 0;
		
			drive_forward_left(distance_left, distance_front);
    157a:	ba 01       	movw	r22, r20
    157c:	ce 01       	movw	r24, r28
    157e:	d4 d8       	rcall	.-3672   	; 0x728 <drive_forward_left>
			//drive_forward();
			turn_done = true;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	80 93 47 01 	sts	0x0147, r24
			regler_against_wall = true;
    1586:	80 93 46 01 	sts	0x0146, r24
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <twoway_turn_right_lab+0xa6>
		}
		else {						//RGB säger att roboten ska svänga höger så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    158c:	32 dd       	rcall	.-1436   	; 0xff2 <req_gyro_turn>
			turn_right();
    158e:	1e d8       	rcall	.-4036   	; 0x5cc <turn_right>
		}	
		previous_right = 0;
    1590:	10 92 44 01 	sts	0x0144, r1
    1594:	10 92 43 01 	sts	0x0143, r1
		previous_left = 0;
    1598:	10 92 42 01 	sts	0x0142, r1
    159c:	10 92 41 01 	sts	0x0141, r1
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    15a0:	10 92 49 01 	sts	0x0149, r1
		return;
    15a4:	54 c0       	rjmp	.+168    	; 0x164e <twoway_turn_right_lab+0x164>
	}
	
	// Rakt fram
	else if(regler_against_wall && (distance_right > st_value )){
    15a6:	90 91 46 01 	lds	r25, 0x0146
    15aa:	99 23       	and	r25, r25
    15ac:	39 f0       	breq	.+14     	; 0x15bc <twoway_turn_right_lab+0xd2>
    15ae:	20 17       	cp	r18, r16
    15b0:	31 07       	cpc	r19, r17
    15b2:	24 f4       	brge	.+8      	; 0x15bc <twoway_turn_right_lab+0xd2>
		//drive_forward();
		drive_forward_left(distance_left, distance_front);
    15b4:	ba 01       	movw	r22, r20
    15b6:	ce 01       	movw	r24, r28
    15b8:	b7 d8       	rcall	.-3730   	; 0x728 <drive_forward_left>
    15ba:	38 c0       	rjmp	.+112    	; 0x162c <twoway_turn_right_lab+0x142>
	}
	
	else if(RGB_data == 2 && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    15bc:	90 91 ac 01 	lds	r25, 0x01AC
    15c0:	92 30       	cpi	r25, 0x02	; 2
    15c2:	e9 f5       	brne	.+122    	; 0x163e <twoway_turn_right_lab+0x154>
    15c4:	c2 17       	cp	r28, r18
    15c6:	d3 07       	cpc	r29, r19
    15c8:	8c f5       	brge	.+98     	; 0x162c <twoway_turn_right_lab+0x142>
    15ca:	02 17       	cp	r16, r18
    15cc:	13 07       	cpc	r17, r19
    15ce:	74 f5       	brge	.+92     	; 0x162c <twoway_turn_right_lab+0x142>
    15d0:	24 17       	cp	r18, r20
    15d2:	35 07       	cpc	r19, r21
    15d4:	bc f5       	brge	.+110    	; 0x1644 <twoway_turn_right_lab+0x15a>
		twoway_turn_right = false;
    15d6:	10 92 3b 01 	sts	0x013B, r1
		first_time = true;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    15e0:	10 92 48 01 	sts	0x0148, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    15e4:	10 92 ac 01 	sts	0x01AC, r1
		regler_against_wall = false;
    15e8:	10 92 46 01 	sts	0x0146, r1
		prepare_special_case = false;
    15ec:	10 92 45 01 	sts	0x0145, r1
    15f0:	1d c0       	rjmp	.+58     	; 0x162c <twoway_turn_right_lab+0x142>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    15f2:	80 91 47 01 	lds	r24, 0x0147
    15f6:	81 11       	cpse	r24, r1
    15f8:	0a c0       	rjmp	.+20     	; 0x160e <twoway_turn_right_lab+0x124>
		turn_done = true;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 47 01 	sts	0x0147, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    1600:	0e 94 d6 02 	call	0x5ac	; 0x5ac <drive_forward>
    1604:	13 c0       	rjmp	.+38     	; 0x162c <twoway_turn_right_lab+0x142>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1606:	80 91 47 01 	lds	r24, 0x0147
    160a:	88 23       	and	r24, r24
    160c:	79 f0       	breq	.+30     	; 0x162c <twoway_turn_right_lab+0x142>
    160e:	c2 17       	cp	r28, r18
    1610:	d3 07       	cpc	r29, r19
    1612:	64 f4       	brge	.+24     	; 0x162c <twoway_turn_right_lab+0x142>
    1614:	02 17       	cp	r16, r18
    1616:	13 07       	cpc	r17, r19
    1618:	4c f4       	brge	.+18     	; 0x162c <twoway_turn_right_lab+0x142>
		twoway_turn_right = false;
    161a:	10 92 3b 01 	sts	0x013B, r1
		ongoing_turn = false;
    161e:	10 92 48 01 	sts	0x0148, r1
		first_time = true;
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    1628:	10 92 45 01 	sts	0x0145, r1
	}
	previous_right = distance_right;
    162c:	10 93 44 01 	sts	0x0144, r17
    1630:	00 93 43 01 	sts	0x0143, r16
	previous_left = distance_left;
    1634:	d0 93 42 01 	sts	0x0142, r29
    1638:	c0 93 41 01 	sts	0x0141, r28
    163c:	08 c0       	rjmp	.+16     	; 0x164e <twoway_turn_right_lab+0x164>
		regler_against_wall = false;
		prepare_special_case = false;
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    163e:	81 11       	cpse	r24, r1
    1640:	d8 cf       	rjmp	.-80     	; 0x15f2 <twoway_turn_right_lab+0x108>
    1642:	e1 cf       	rjmp	.-62     	; 0x1606 <twoway_turn_right_lab+0x11c>
		turn_done = true;
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1644:	80 91 47 01 	lds	r24, 0x0147
    1648:	88 23       	and	r24, r24
    164a:	81 f3       	breq	.-32     	; 0x162c <twoway_turn_right_lab+0x142>
    164c:	e6 cf       	rjmp	.-52     	; 0x161a <twoway_turn_right_lab+0x130>
		first_time = true;
		prepare_special_case = false;
	}
	previous_right = distance_right;
	previous_left = distance_left;
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	08 95       	ret

00001658 <labyreg>:
int sensor_left;
int sensor_right;
int tejp_counter = 0;
                 
void labyreg(){
	cli();
    1658:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
    165a:	40 91 9f 01 	lds	r20, 0x019F
    165e:	50 e0       	ldi	r21, 0x00	; 0
	int sensor_right_tmp = distans_right;
    1660:	60 91 ad 01 	lds	r22, 0x01AD
    1664:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
    1666:	80 91 a5 01 	lds	r24, 0x01A5
    166a:	90 e0       	ldi	r25, 0x00	; 0
	sei();
    166c:	78 94       	sei
	int st_value_front = 40;
	/*if(true)      //testplats för reglering
		drive_forward_right(sensor_right_tmp, sensor_front_tmp);
	
	else*/ 
	if(Reflex_data != 0 || Reflex_data2 != 0){
    166e:	20 91 99 01 	lds	r18, 0x0199
    1672:	30 91 9a 01 	lds	r19, 0x019A
    1676:	23 2b       	or	r18, r19
    1678:	31 f4       	brne	.+12     	; 0x1686 <labyreg+0x2e>
    167a:	20 91 c2 01 	lds	r18, 0x01C2
    167e:	30 91 c3 01 	lds	r19, 0x01C3
    1682:	23 2b       	or	r18, r19
    1684:	a1 f0       	breq	.+40     	; 0x16ae <labyreg+0x56>
		tejp_counter++;
    1686:	20 91 39 01 	lds	r18, 0x0139
    168a:	30 91 3a 01 	lds	r19, 0x013A
    168e:	2f 5f       	subi	r18, 0xFF	; 255
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	30 93 3a 01 	sts	0x013A, r19
    1696:	20 93 39 01 	sts	0x0139, r18
		if(tejp_counter >= 3)
    169a:	23 30       	cpi	r18, 0x03	; 3
    169c:	31 05       	cpc	r19, r1
    169e:	5c f0       	brlt	.+22     	; 0x16b6 <labyreg+0x5e>
			regulator_mode = 1;
    16a0:	21 e0       	ldi	r18, 0x01	; 1
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	30 93 1a 01 	sts	0x011A, r19
    16a8:	20 93 19 01 	sts	0x0119, r18
    16ac:	04 c0       	rjmp	.+8      	; 0x16b6 <labyreg+0x5e>
	}
	
	else if(Reflex_data == 0 && Reflex_data2 == 0)
		tejp_counter = 0;
    16ae:	10 92 3a 01 	sts	0x013A, r1
    16b2:	10 92 39 01 	sts	0x0139, r1

	if(waypoint){
    16b6:	20 91 3e 01 	lds	r18, 0x013E
    16ba:	22 23       	and	r18, r18
    16bc:	21 f0       	breq	.+8      	; 0x16c6 <labyreg+0x6e>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16be:	28 e2       	ldi	r18, 0x28	; 40
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	58 cd       	rjmp	.-1360   	; 0x1174 <waypoint_lab>
		return;	
    16c4:	08 95       	ret
	}
	else if(oneway_turn){
    16c6:	20 91 3d 01 	lds	r18, 0x013D
    16ca:	22 23       	and	r18, r18
    16cc:	21 f0       	breq	.+8      	; 0x16d6 <labyreg+0x7e>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16ce:	28 e2       	ldi	r18, 0x28	; 40
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	ca cd       	rjmp	.-1132   	; 0x1268 <oneway_turn_lab>
		return;
    16d4:	08 95       	ret
	}
	else if(twoway_turn_left){
    16d6:	20 91 3c 01 	lds	r18, 0x013C
    16da:	22 23       	and	r18, r18
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <labyreg+0x8e>
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16de:	28 e2       	ldi	r18, 0x28	; 40
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	49 ce       	rjmp	.-878    	; 0x1376 <twoway_turn_left_lab>
		return;
    16e4:	08 95       	ret
	}
	else if(twoway_turn_right){
    16e6:	20 91 3b 01 	lds	r18, 0x013B
    16ea:	22 23       	and	r18, r18
    16ec:	21 f0       	breq	.+8      	; 0x16f6 <labyreg+0x9e>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16ee:	28 e2       	ldi	r18, 0x28	; 40
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	fb ce       	rjmp	.-522    	; 0x14ea <twoway_turn_right_lab>
		return;
    16f4:	08 95       	ret
	}	
	
	else if(count_waypoint < 4){
    16f6:	20 91 1d 01 	lds	r18, 0x011D
    16fa:	30 91 1e 01 	lds	r19, 0x011E
    16fe:	24 30       	cpi	r18, 0x04	; 4
    1700:	31 05       	cpc	r19, r1
    1702:	ac f4       	brge	.+42     	; 0x172e <labyreg+0xd6>
		count_waypoint++;
		if(sensor_front_tmp <= 35)
    1704:	44 32       	cpi	r20, 0x24	; 36
    1706:	51 05       	cpc	r21, r1
    1708:	3c f0       	brlt	.+14     	; 0x1718 <labyreg+0xc0>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
		return;
	}	
	
	else if(count_waypoint < 4){
		count_waypoint++;
    170a:	2f 5f       	subi	r18, 0xFF	; 255
    170c:	3f 4f       	sbci	r19, 0xFF	; 255
    170e:	30 93 1e 01 	sts	0x011E, r19
    1712:	20 93 1d 01 	sts	0x011D, r18
    1716:	06 c0       	rjmp	.+12     	; 0x1724 <labyreg+0xcc>
		if(sensor_front_tmp <= 35)
			count_waypoint = 4;
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	90 93 1e 01 	sts	0x011E, r25
    1720:	80 93 1d 01 	sts	0x011D, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1724:	81 e3       	ldi	r24, 0x31	; 49
    1726:	8a 95       	dec	r24
    1728:	f1 f7       	brne	.-4      	; 0x1726 <labyreg+0xce>
    172a:	00 00       	nop
    172c:	08 95       	ret
		_delay_us(10);
	}
	//återvändsgränd
	else if(sensor_left_tmp < st_value && sensor_front_tmp <= 35 && sensor_right_tmp < st_value){
    172e:	88 32       	cpi	r24, 0x28	; 40
    1730:	91 05       	cpc	r25, r1
    1732:	b4 f4       	brge	.+44     	; 0x1760 <labyreg+0x108>
    1734:	44 32       	cpi	r20, 0x24	; 36
    1736:	51 05       	cpc	r21, r1
    1738:	64 f4       	brge	.+24     	; 0x1752 <labyreg+0xfa>
    173a:	68 32       	cpi	r22, 0x28	; 40
    173c:	71 05       	cpc	r23, r1
    173e:	0c f0       	brlt	.+2      	; 0x1742 <labyreg+0xea>
    1740:	68 c0       	rjmp	.+208    	; 0x1812 <labyreg+0x1ba>
		req_gyro_turn();
    1742:	57 dc       	rcall	.-1874   	; 0xff2 <req_gyro_turn>
		turn_right();//	output_right = -right;//motor_right = 0;
    1744:	0e 94 e6 02 	call	0x5cc	; 0x5cc <turn_right>
		PORTD ^= (1 << PD0);
    1748:	9b b1       	in	r25, 0x0b	; 11
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	89 27       	eor	r24, r25
    174e:	8b b9       	out	0x0b, r24	; 11
    1750:	08 95       	ret
	}
	// Normalfall
	else if(sensor_left_tmp < st_value/* && sensor_front_tmp > 30*/ && sensor_right_tmp < st_value){
    1752:	68 32       	cpi	r22, 0x28	; 40
    1754:	71 05       	cpc	r23, r1
    1756:	0c f0       	brlt	.+2      	; 0x175a <labyreg+0x102>
    1758:	5c c0       	rjmp	.+184    	; 0x1812 <labyreg+0x1ba>
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
    175a:	0c 94 ed 02 	jmp	0x5da	; 0x5da <PD_for_lab>
    175e:	08 95       	ret
	}
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case /*sensor_front_tmp >= st_value_front*/){
    1760:	20 91 45 01 	lds	r18, 0x0145
    1764:	21 11       	cpse	r18, r1
    1766:	0a c0       	rjmp	.+20     	; 0x177c <labyreg+0x124>
		prepare_special_case = true;
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	80 93 45 01 	sts	0x0145, r24
		count_waypoint = 0;
    176e:	10 92 1e 01 	sts	0x011E, r1
    1772:	10 92 1d 01 	sts	0x011D, r1
		if(!sensor_front_tmp <= 35)
			drive_forward();
    1776:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <drive_forward>
    177a:	08 95       	ret
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
    177c:	88 32       	cpi	r24, 0x28	; 40
    177e:	91 05       	cpc	r25, r1
    1780:	0c f0       	brlt	.+2      	; 0x1784 <labyreg+0x12c>
    1782:	50 c0       	rjmp	.+160    	; 0x1824 <labyreg+0x1cc>
    1784:	48 32       	cpi	r20, 0x28	; 40
    1786:	51 05       	cpc	r21, r1
    1788:	0c f0       	brlt	.+2      	; 0x178c <labyreg+0x134>
    178a:	48 c0       	rjmp	.+144    	; 0x181c <labyreg+0x1c4>
    178c:	69 32       	cpi	r22, 0x29	; 41
    178e:	71 05       	cpc	r23, r1
    1790:	c4 f1       	brlt	.+112    	; 0x1802 <labyreg+0x1aa>
    1792:	06 c0       	rjmp	.+12     	; 0x17a0 <labyreg+0x148>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    1794:	48 32       	cpi	r20, 0x28	; 40
    1796:	51 05       	cpc	r21, r1
    1798:	a4 f4       	brge	.+40     	; 0x17c2 <labyreg+0x16a>
    179a:	68 32       	cpi	r22, 0x28	; 40
    179c:	71 05       	cpc	r23, r1
    179e:	3c f4       	brge	.+14     	; 0x17ae <labyreg+0x156>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    17a0:	28 e2       	ldi	r18, 0x28	; 40
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	61 dd       	rcall	.-1342   	; 0x1268 <oneway_turn_lab>
		oneway_turn = true;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	80 93 3d 01 	sts	0x013D, r24
    17ac:	08 95       	ret
		
	}
	
	//t-korsning rakt framifrån
	else if((sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value))	{	
    17ae:	69 32       	cpi	r22, 0x29	; 41
    17b0:	71 05       	cpc	r23, r1
    17b2:	3c f0       	brlt	.+14     	; 0x17c2 <labyreg+0x16a>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    17b4:	28 e2       	ldi	r18, 0x28	; 40
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	dd dc       	rcall	.-1606   	; 0x1174 <waypoint_lab>
		waypoint = true;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	80 93 3e 01 	sts	0x013E, r24
    17c0:	08 95       	ret
		//PORTD |= (1 << PD1);
		
	}
	
	// T-korsning där roboten kan köra framåt eller åt vänster
	else if(sensor_left_tmp > st_value && sensor_front_tmp > st_value_front && sensor_right_tmp < st_value){
    17c2:	49 32       	cpi	r20, 0x29	; 41
    17c4:	51 05       	cpc	r21, r1
    17c6:	d4 f0       	brlt	.+52     	; 0x17fc <labyreg+0x1a4>
    17c8:	68 32       	cpi	r22, 0x28	; 40
    17ca:	71 05       	cpc	r23, r1
    17cc:	f4 f4       	brge	.+60     	; 0x180a <labyreg+0x1b2>
		twoway_turn_left = true;
    17ce:	21 e0       	ldi	r18, 0x01	; 1
    17d0:	20 93 3c 01 	sts	0x013C, r18
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    17d4:	28 e2       	ldi	r18, 0x28	; 40
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	ce cd       	rjmp	.-1124   	; 0x1376 <twoway_turn_left_lab>
    17da:	08 95       	ret
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    17dc:	88 32       	cpi	r24, 0x28	; 40
    17de:	91 05       	cpc	r25, r1
    17e0:	6c f4       	brge	.+26     	; 0x17fc <labyreg+0x1a4>
    17e2:	49 32       	cpi	r20, 0x29	; 41
    17e4:	51 05       	cpc	r21, r1
    17e6:	54 f0       	brlt	.+20     	; 0x17fc <labyreg+0x1a4>
    17e8:	69 32       	cpi	r22, 0x29	; 41
    17ea:	71 05       	cpc	r23, r1
    17ec:	3c f0       	brlt	.+14     	; 0x17fc <labyreg+0x1a4>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    17ee:	28 e2       	ldi	r18, 0x28	; 40
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	7b de       	rcall	.-778    	; 0x14ea <twoway_turn_right_lab>
		twoway_turn_right = true;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	80 93 3b 01 	sts	0x013B, r24
    17fa:	08 95       	ret
	}
	else{
		stand_still();
    17fc:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <stand_still>
    1800:	08 95       	ret
			drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    1802:	89 32       	cpi	r24, 0x29	; 41
    1804:	91 05       	cpc	r25, r1
    1806:	9c f4       	brge	.+38     	; 0x182e <labyreg+0x1d6>
    1808:	ec cf       	rjmp	.-40     	; 0x17e2 <labyreg+0x18a>
		twoway_turn_left = true;
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    180a:	88 32       	cpi	r24, 0x28	; 40
    180c:	91 05       	cpc	r25, r1
    180e:	64 f3       	brlt	.-40     	; 0x17e8 <labyreg+0x190>
    1810:	f5 cf       	rjmp	.-22     	; 0x17fc <labyreg+0x1a4>
	else if(sensor_left_tmp < st_value/* && sensor_front_tmp > 30*/ && sensor_right_tmp < st_value){
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
	}
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case /*sensor_front_tmp >= st_value_front*/){
    1812:	20 91 45 01 	lds	r18, 0x0145
    1816:	21 11       	cpse	r18, r1
    1818:	b5 cf       	rjmp	.-150    	; 0x1784 <labyreg+0x12c>
    181a:	a6 cf       	rjmp	.-180    	; 0x1768 <labyreg+0x110>
			drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    181c:	89 32       	cpi	r24, 0x29	; 41
    181e:	91 05       	cpc	r25, r1
    1820:	84 f6       	brge	.-96     	; 0x17c2 <labyreg+0x16a>
    1822:	dc cf       	rjmp	.-72     	; 0x17dc <labyreg+0x184>
    1824:	89 32       	cpi	r24, 0x29	; 41
    1826:	91 05       	cpc	r25, r1
    1828:	0c f0       	brlt	.+2      	; 0x182c <labyreg+0x1d4>
    182a:	b4 cf       	rjmp	.-152    	; 0x1794 <labyreg+0x13c>
    182c:	e7 cf       	rjmp	.-50     	; 0x17fc <labyreg+0x1a4>
    182e:	68 32       	cpi	r22, 0x28	; 40
    1830:	71 05       	cpc	r23, r1
    1832:	3c f6       	brge	.-114    	; 0x17c2 <labyreg+0x16a>
    1834:	b5 cf       	rjmp	.-150    	; 0x17a0 <labyreg+0x148>

00001836 <regulator>:
		//motor_right = 60;
		//PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
		//PORTB |= (1 << motor_dir_left);									// Set motor direction to backward
//	}

	if((regulator_mode == 1) && (regler_ready_linje == 1)){
    1836:	80 91 19 01 	lds	r24, 0x0119
    183a:	90 91 1a 01 	lds	r25, 0x011A
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	91 05       	cpc	r25, r1
    1842:	e9 f4       	brne	.+58     	; 0x187e <regulator+0x48>
    1844:	80 91 60 01 	lds	r24, 0x0160
    1848:	90 91 61 01 	lds	r25, 0x0161
    184c:	01 97       	sbiw	r24, 0x01	; 1
    184e:	41 f5       	brne	.+80     	; 0x18a0 <regulator+0x6a>
		left=180;				// kanske rÃ¤cker med en variable fÃ¶r bÃ¥da om bÃ¥da kÃ¶r exakt lika fort
    1850:	84 eb       	ldi	r24, 0xB4	; 180
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	90 93 6b 01 	sts	0x016B, r25
    1858:	80 93 6a 01 	sts	0x016A, r24
		right=170;
    185c:	8a ea       	ldi	r24, 0xAA	; 170
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	90 93 69 01 	sts	0x0169, r25
    1864:	80 93 68 01 	sts	0x0168, r24
		motor_left=left;
    1868:	84 eb       	ldi	r24, 0xB4	; 180
    186a:	87 bd       	out	0x27, r24	; 39
		motor_right=right;
    186c:	80 91 68 01 	lds	r24, 0x0168
    1870:	88 bd       	out	0x28, r24	; 40
		linje_main();
    1872:	23 da       	rcall	.-3002   	; 0xcba <linje_main>
		regler_ready_linje = 0;
    1874:	10 92 61 01 	sts	0x0161, r1
    1878:	10 92 60 01 	sts	0x0160, r1
    187c:	08 95       	ret
	}

	else if(regulator_mode == 0){	
    187e:	89 2b       	or	r24, r25
    1880:	79 f4       	brne	.+30     	; 0x18a0 <regulator+0x6a>
		
		PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1882:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_left);	
    1884:	2e 98       	cbi	0x05, 6	; 5

		if(updaterad_labyrint == true && turn_delay >= 10){
    1886:	80 91 5f 01 	lds	r24, 0x015F
    188a:	88 23       	and	r24, r24
    188c:	49 f0       	breq	.+18     	; 0x18a0 <regulator+0x6a>
    188e:	80 91 1b 01 	lds	r24, 0x011B
    1892:	90 91 1c 01 	lds	r25, 0x011C
    1896:	0a 97       	sbiw	r24, 0x0a	; 10
    1898:	1c f0       	brlt	.+6      	; 0x18a0 <regulator+0x6a>
		
			updaterad_labyrint = false;
    189a:	10 92 5f 01 	sts	0x015F, r1
			labyreg();//kalla pÃ¥ labyrint funktion
    189e:	dc ce       	rjmp	.-584    	; 0x1658 <labyreg>
    18a0:	08 95       	ret

000018a2 <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
    18a2:	ec eb       	ldi	r30, 0xBC	; 188
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	90 81       	ld	r25, Z
    18a8:	94 6a       	ori	r25, 0xA4	; 164
    18aa:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
    18ac:	90 81       	ld	r25, Z
    18ae:	99 23       	and	r25, r25
    18b0:	ec f7       	brge	.-6      	; 0x18ac <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
    18b2:	90 91 b9 00 	lds	r25, 0x00B9
    18b6:	98 7f       	andi	r25, 0xF8	; 248
    18b8:	98 30       	cpi	r25, 0x08	; 8
    18ba:	29 f0       	breq	.+10     	; 0x18c6 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    18bc:	84 e9       	ldi	r24, 0x94	; 148
    18be:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
    18c6:	81 60       	ori	r24, 0x01	; 1
    18c8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    18cc:	84 e8       	ldi	r24, 0x84	; 132
    18ce:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
    18d2:	ec eb       	ldi	r30, 0xBC	; 188
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	88 23       	and	r24, r24
    18da:	ec f7       	brge	.-6      	; 0x18d6 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
    18dc:	80 91 b9 00 	lds	r24, 0x00B9
    18e0:	88 7f       	andi	r24, 0xF8	; 248
    18e2:	80 34       	cpi	r24, 0x40	; 64
    18e4:	29 f0       	breq	.+10     	; 0x18f0 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    18e6:	84 e9       	ldi	r24, 0x94	; 148
    18e8:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
    18f0:	ec eb       	ldi	r30, 0xBC	; 188
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	84 68       	ori	r24, 0x84	; 132
    18f8:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    18fa:	80 81       	ld	r24, Z
    18fc:	88 23       	and	r24, r24
    18fe:	ec f7       	brge	.-6      	; 0x18fa <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data = TWDR; //ta emot data 
    1900:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1904:	94 e9       	ldi	r25, 0x94	; 148
    1906:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
    190a:	08 95       	ret

0000190c <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
    190c:	20 91 22 01 	lds	r18, 0x0122
    1910:	30 91 23 01 	lds	r19, 0x0123
    1914:	21 15       	cp	r18, r1
    1916:	31 05       	cpc	r19, r1
    1918:	89 f4       	brne	.+34     	; 0x193c <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
    191a:	28 2f       	mov	r18, r24
    191c:	22 95       	swap	r18
    191e:	2f 70       	andi	r18, 0x0F	; 15
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	30 93 21 01 	sts	0x0121, r19
    1926:	20 93 20 01 	sts	0x0120, r18
		i2c_data[counter] = data;
    192a:	80 93 8a 01 	sts	0x018A, r24
		counter++;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	90 93 23 01 	sts	0x0123, r25
    1936:	80 93 22 01 	sts	0x0122, r24
    193a:	18 c0       	rjmp	.+48     	; 0x196c <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
    193c:	40 91 20 01 	lds	r20, 0x0120
    1940:	50 91 21 01 	lds	r21, 0x0121
    1944:	4f 5f       	subi	r20, 0xFF	; 255
    1946:	5f 4f       	sbci	r21, 0xFF	; 255
    1948:	24 17       	cp	r18, r20
    194a:	35 07       	cpc	r19, r21
    194c:	5c f4       	brge	.+22     	; 0x1964 <i2c_store_data+0x58>
		i2c_data[counter] = data;
    194e:	f9 01       	movw	r30, r18
    1950:	e6 57       	subi	r30, 0x76	; 118
    1952:	fe 4f       	sbci	r31, 0xFE	; 254
    1954:	80 83       	st	Z, r24
		counter++;
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	30 93 23 01 	sts	0x0123, r19
    195e:	20 93 22 01 	sts	0x0122, r18
    1962:	04 c0       	rjmp	.+8      	; 0x196c <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
    1964:	f9 01       	movw	r30, r18
    1966:	e6 57       	subi	r30, 0x76	; 118
    1968:	fe 4f       	sbci	r31, 0xFE	; 254
    196a:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
    196c:	80 91 20 01 	lds	r24, 0x0120
    1970:	90 91 21 01 	lds	r25, 0x0121
    1974:	01 96       	adiw	r24, 0x01	; 1
    1976:	20 91 22 01 	lds	r18, 0x0122
    197a:	30 91 23 01 	lds	r19, 0x0123
    197e:	28 17       	cp	r18, r24
    1980:	39 07       	cpc	r19, r25
    1982:	44 f0       	brlt	.+16     	; 0x1994 <i2c_store_data+0x88>
		i2c_newdata = true;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	80 93 28 01 	sts	0x0128, r24
		counter = 0;
    198a:	10 92 23 01 	sts	0x0123, r1
    198e:	10 92 22 01 	sts	0x0122, r1
		EIMSK &= ~(1<<INT0);
    1992:	e8 98       	cbi	0x1d, 0	; 29
    1994:	08 95       	ret

00001996 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	0f 92       	push	r0
    199e:	11 24       	eor	r1, r1
    19a0:	0b b6       	in	r0, 0x3b	; 59
    19a2:	0f 92       	push	r0
    19a4:	2f 93       	push	r18
    19a6:	3f 93       	push	r19
    19a8:	4f 93       	push	r20
    19aa:	5f 93       	push	r21
    19ac:	6f 93       	push	r22
    19ae:	7f 93       	push	r23
    19b0:	8f 93       	push	r24
    19b2:	9f 93       	push	r25
    19b4:	af 93       	push	r26
    19b6:	bf 93       	push	r27
    19b8:	ef 93       	push	r30
    19ba:	ff 93       	push	r31
    19bc:	85 e0       	ldi	r24, 0x05	; 5
    19be:	8a 95       	dec	r24
    19c0:	f1 f7       	brne	.-4      	; 0x19be <__vector_1+0x28>
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
    19c2:	36 9b       	sbis	0x06, 6	; 6
    19c4:	04 c0       	rjmp	.+8      	; 0x19ce <__vector_1+0x38>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	6c df       	rcall	.-296    	; 0x18a2 <i2c_recive>
    19ca:	a0 df       	rcall	.-192    	; 0x190c <i2c_store_data>
    19cc:	05 c0       	rjmp	.+10     	; 0x19d8 <__vector_1+0x42>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
    19ce:	37 9b       	sbis	0x06, 7	; 6
    19d0:	03 c0       	rjmp	.+6      	; 0x19d8 <__vector_1+0x42>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
    19d2:	86 e0       	ldi	r24, 0x06	; 6
    19d4:	66 df       	rcall	.-308    	; 0x18a2 <i2c_recive>
    19d6:	9a df       	rcall	.-204    	; 0x190c <i2c_store_data>
	}
}
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0b be       	out	0x3b, r0	; 59
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
    19fe:	80 91 28 01 	lds	r24, 0x0128
    1a02:	88 23       	and	r24, r24
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <i2c_handel_data+0xa>
    1a06:	a9 c1       	rjmp	.+850    	; 0x1d5a <i2c_handel_data+0x35c>
	{
		i2c_newdata=false;
    1a08:	10 92 28 01 	sts	0x0128, r1
		if(!((i2c_data[0]>>3)&0x01)){
    1a0c:	80 91 8a 01 	lds	r24, 0x018A
    1a10:	83 fd       	sbrc	r24, 3
    1a12:	0a c0       	rjmp	.+20     	; 0x1a28 <i2c_handel_data+0x2a>
    1a14:	81 e5       	ldi	r24, 0x51	; 81
    1a16:	94 e0       	ldi	r25, 0x04	; 4
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <i2c_handel_data+0x1a>
    1a1c:	00 c0       	rjmp	.+0      	; 0x1a1e <i2c_handel_data+0x20>
    1a1e:	00 00       	nop
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
    1a20:	6a e8       	ldi	r22, 0x8A	; 138
    1a22:	71 e0       	ldi	r23, 0x01	; 1
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	77 da       	rcall	.-2834   	; 0xf16 <i2c_send>
		}
		
		switch (i2c_data[0] & 0x0f){
    1a28:	80 91 8a 01 	lds	r24, 0x018A
    1a2c:	e8 2f       	mov	r30, r24
    1a2e:	ef 70       	andi	r30, 0x0F	; 15
    1a30:	8e 2f       	mov	r24, r30
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	fc 01       	movw	r30, r24
    1a36:	ea 5b       	subi	r30, 0xBA	; 186
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	ca c3       	rjmp	.+1940   	; 0x21d0 <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
    1a3c:	80 91 8b 01 	lds	r24, 0x018B
    1a40:	80 93 a9 01 	sts	0x01A9, r24
				break;
    1a44:	70 c1       	rjmp	.+736    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x01 ://avståndssensorer  plockar fram medianen av dom senaste 3 värdena ser krongligt ut men är bara hitta mittenvärdet och lägg det i distans_xxx
				//distans_right = i2c_data[3];
				//distans_fram = i2c_data[2];
				//distans_left = i2c_data[1];
				distans_right_median[0] = i2c_data[3];
    1a46:	80 91 8d 01 	lds	r24, 0x018D
    1a4a:	e6 ea       	ldi	r30, 0xA6	; 166
    1a4c:	f1 e0       	ldi	r31, 0x01	; 1
    1a4e:	80 83       	st	Z, r24
				if((distans_right_median[0]<distans_right_median[1] && distans_right_median[0]>distans_right_median[2])||(distans_right_median[0]>distans_right_median[1] && distans_right_median[0]<distans_right_median[2]))
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	89 17       	cp	r24, r25
    1a54:	08 f0       	brcs	.+2      	; 0x1a58 <i2c_handel_data+0x5a>
    1a56:	6d c1       	rjmp	.+730    	; 0x1d32 <i2c_handel_data+0x334>
    1a58:	20 91 a8 01 	lds	r18, 0x01A8
    1a5c:	28 17       	cp	r18, r24
    1a5e:	28 f0       	brcs	.+10     	; 0x1a6a <i2c_handel_data+0x6c>
    1a60:	64 c1       	rjmp	.+712    	; 0x1d2a <i2c_handel_data+0x32c>
    1a62:	20 91 a8 01 	lds	r18, 0x01A8
    1a66:	82 17       	cp	r24, r18
    1a68:	18 f4       	brcc	.+6      	; 0x1a70 <i2c_handel_data+0x72>
					distans_right=distans_right_median[0];
    1a6a:	80 93 ad 01 	sts	0x01AD, r24
    1a6e:	0f c0       	rjmp	.+30     	; 0x1a8e <i2c_handel_data+0x90>
				else if((distans_right_median[1]<distans_right_median[0] && distans_right_median[1]>distans_right_median[2])||(distans_right_median[1]>distans_right_median[0] && distans_right_median[1]<distans_right_median[2]))
    1a70:	29 17       	cp	r18, r25
    1a72:	30 f0       	brcs	.+12     	; 0x1a80 <i2c_handel_data+0x82>
    1a74:	89 17       	cp	r24, r25
    1a76:	38 f4       	brcc	.+14     	; 0x1a86 <i2c_handel_data+0x88>
    1a78:	20 91 a8 01 	lds	r18, 0x01A8
    1a7c:	92 17       	cp	r25, r18
    1a7e:	18 f4       	brcc	.+6      	; 0x1a86 <i2c_handel_data+0x88>
					distans_right=distans_right_median[1];
    1a80:	90 93 ad 01 	sts	0x01AD, r25
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <i2c_handel_data+0x90>
				else
					distans_right=distans_right_median[2];
    1a86:	20 91 a8 01 	lds	r18, 0x01A8
    1a8a:	20 93 ad 01 	sts	0x01AD, r18
				distans_right_median[2]=distans_right_median[1];
    1a8e:	e6 ea       	ldi	r30, 0xA6	; 166
    1a90:	f1 e0       	ldi	r31, 0x01	; 1
    1a92:	92 83       	std	Z+2, r25	; 0x02
				distans_right_median[1]=distans_right_median[0];
    1a94:	81 83       	std	Z+1, r24	; 0x01
		
				distans_fram_median[0] = i2c_data[2];
    1a96:	80 91 8c 01 	lds	r24, 0x018C
    1a9a:	e2 ea       	ldi	r30, 0xA2	; 162
    1a9c:	f1 e0       	ldi	r31, 0x01	; 1
    1a9e:	80 83       	st	Z, r24
				if((distans_fram_median[0]<distans_fram_median[1] && distans_fram_median[0]>distans_fram_median[2])||(distans_fram_median[0]>distans_fram_median[1] && distans_fram_median[0]<distans_fram_median[2]))
    1aa0:	91 81       	ldd	r25, Z+1	; 0x01
    1aa2:	89 17       	cp	r24, r25
    1aa4:	08 f0       	brcs	.+2      	; 0x1aa8 <i2c_handel_data+0xaa>
    1aa6:	4d c1       	rjmp	.+666    	; 0x1d42 <i2c_handel_data+0x344>
    1aa8:	20 91 a4 01 	lds	r18, 0x01A4
    1aac:	28 17       	cp	r18, r24
    1aae:	28 f0       	brcs	.+10     	; 0x1aba <i2c_handel_data+0xbc>
    1ab0:	44 c1       	rjmp	.+648    	; 0x1d3a <i2c_handel_data+0x33c>
    1ab2:	20 91 a4 01 	lds	r18, 0x01A4
    1ab6:	82 17       	cp	r24, r18
    1ab8:	18 f4       	brcc	.+6      	; 0x1ac0 <i2c_handel_data+0xc2>
					distans_fram=distans_fram_median[0];
    1aba:	80 93 9f 01 	sts	0x019F, r24
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <i2c_handel_data+0xe0>
				else if((distans_fram_median[1]<distans_fram_median[0] && distans_fram_median[1]>distans_fram_median[2])||(distans_fram_median[1]>distans_fram_median[0] && distans_fram_median[1]<distans_fram_median[2]))
    1ac0:	29 17       	cp	r18, r25
    1ac2:	30 f0       	brcs	.+12     	; 0x1ad0 <i2c_handel_data+0xd2>
    1ac4:	89 17       	cp	r24, r25
    1ac6:	38 f4       	brcc	.+14     	; 0x1ad6 <i2c_handel_data+0xd8>
    1ac8:	20 91 a4 01 	lds	r18, 0x01A4
    1acc:	92 17       	cp	r25, r18
    1ace:	18 f4       	brcc	.+6      	; 0x1ad6 <i2c_handel_data+0xd8>
					distans_fram=distans_fram_median[1];
    1ad0:	90 93 9f 01 	sts	0x019F, r25
    1ad4:	04 c0       	rjmp	.+8      	; 0x1ade <i2c_handel_data+0xe0>
				else
					distans_fram=distans_fram_median[2];
    1ad6:	20 91 a4 01 	lds	r18, 0x01A4
    1ada:	20 93 9f 01 	sts	0x019F, r18
				distans_fram_median[2]=distans_fram_median[1];
    1ade:	e2 ea       	ldi	r30, 0xA2	; 162
    1ae0:	f1 e0       	ldi	r31, 0x01	; 1
    1ae2:	92 83       	std	Z+2, r25	; 0x02
				distans_fram_median[1]=distans_fram_median[0];
    1ae4:	81 83       	std	Z+1, r24	; 0x01
				
				distans_left_median[0] = i2c_data[1];
    1ae6:	80 91 8b 01 	lds	r24, 0x018B
    1aea:	e0 e7       	ldi	r30, 0x70	; 112
    1aec:	f1 e0       	ldi	r31, 0x01	; 1
    1aee:	80 83       	st	Z, r24
				if((distans_left_median[0]<distans_left_median[1] && distans_left_median[0]>distans_left_median[2])||(distans_left_median[0]>distans_left_median[1] && distans_left_median[0]<distans_left_median[2]))
    1af0:	91 81       	ldd	r25, Z+1	; 0x01
    1af2:	89 17       	cp	r24, r25
    1af4:	08 f0       	brcs	.+2      	; 0x1af8 <i2c_handel_data+0xfa>
    1af6:	29 c1       	rjmp	.+594    	; 0x1d4a <i2c_handel_data+0x34c>
    1af8:	20 91 72 01 	lds	r18, 0x0172
    1afc:	28 17       	cp	r18, r24
    1afe:	28 f0       	brcs	.+10     	; 0x1b0a <i2c_handel_data+0x10c>
    1b00:	28 c1       	rjmp	.+592    	; 0x1d52 <i2c_handel_data+0x354>
    1b02:	20 91 72 01 	lds	r18, 0x0172
    1b06:	82 17       	cp	r24, r18
    1b08:	18 f4       	brcc	.+6      	; 0x1b10 <i2c_handel_data+0x112>
					distans_left=distans_left_median[0];
    1b0a:	80 93 a5 01 	sts	0x01A5, r24
    1b0e:	0f c0       	rjmp	.+30     	; 0x1b2e <i2c_handel_data+0x130>
				else if((distans_left_median[1]<distans_left_median[0] && distans_left_median[1]>distans_left_median[2])||(distans_left_median[1]>distans_left_median[0] && distans_left_median[1]<distans_left_median[2]))
    1b10:	29 17       	cp	r18, r25
    1b12:	30 f0       	brcs	.+12     	; 0x1b20 <i2c_handel_data+0x122>
    1b14:	89 17       	cp	r24, r25
    1b16:	38 f4       	brcc	.+14     	; 0x1b26 <i2c_handel_data+0x128>
    1b18:	20 91 72 01 	lds	r18, 0x0172
    1b1c:	92 17       	cp	r25, r18
    1b1e:	18 f4       	brcc	.+6      	; 0x1b26 <i2c_handel_data+0x128>
					distans_left=distans_left_median[1];
    1b20:	90 93 a5 01 	sts	0x01A5, r25
    1b24:	04 c0       	rjmp	.+8      	; 0x1b2e <i2c_handel_data+0x130>
				else
					distans_left=distans_left_median[2];
    1b26:	20 91 72 01 	lds	r18, 0x0172
    1b2a:	20 93 a5 01 	sts	0x01A5, r18
				distans_left_median[2]=distans_left_median[1];
    1b2e:	e0 e7       	ldi	r30, 0x70	; 112
    1b30:	f1 e0       	ldi	r31, 0x01	; 1
    1b32:	92 83       	std	Z+2, r25	; 0x02
				distans_left_median[1]=distans_left_median[0];
    1b34:	81 83       	std	Z+1, r24	; 0x01
				//updaterad_labyrint = true;
				break;
    1b36:	f7 c0       	rjmp	.+494    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x02 :// refelxsensor data
				regler_ready_linje = 1;					// Ny data har lästs in då uppdaterar vi regleringen
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	90 93 61 01 	sts	0x0161, r25
    1b40:	80 93 60 01 	sts	0x0160, r24
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
    1b44:	ea e8       	ldi	r30, 0x8A	; 138
    1b46:	f1 e0       	ldi	r31, 0x01	; 1
    1b48:	82 81       	ldd	r24, Z+2	; 0x02
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	98 2f       	mov	r25, r24
    1b4e:	88 27       	eor	r24, r24
    1b50:	21 81       	ldd	r18, Z+1	; 0x01
    1b52:	82 0f       	add	r24, r18
    1b54:	91 1d       	adc	r25, r1
    1b56:	90 93 9a 01 	sts	0x019A, r25
    1b5a:	80 93 99 01 	sts	0x0199, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
    1b5e:	83 81       	ldd	r24, Z+3	; 0x03
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	90 93 c3 01 	sts	0x01C3, r25
    1b66:	80 93 c2 01 	sts	0x01C2, r24
				break;
    1b6a:	dd c0       	rjmp	.+442    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x03 :
				RGB_data=1;//"röd";"
    1b6c:	81 e0       	ldi	r24, 0x01	; 1
    1b6e:	80 93 ac 01 	sts	0x01AC, r24
				break;
    1b72:	d9 c0       	rjmp	.+434    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x04 :
				RGB_data=2;//"grön";
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	80 93 ac 01 	sts	0x01AC, r24
				break;		
    1b7a:	d5 c0       	rjmp	.+426    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x05 :
				RGB_data=3;//"blå";
    1b7c:	83 e0       	ldi	r24, 0x03	; 3
    1b7e:	80 93 ac 01 	sts	0x01AC, r24
				break;
    1b82:	d1 c0       	rjmp	.+418    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x06 : // gyro klart
				gyro_90 = true;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 75 01 	sts	0x0175, r24
				turning = false;
    1b8a:	10 92 5e 01 	sts	0x015E, r1
				motor_right = 0;
    1b8e:	18 bc       	out	0x28, r1	; 40
				motor_left = 0;
    1b90:	17 bc       	out	0x27, r1	; 39
				updaterad_labyrint = false;
    1b92:	10 92 5f 01 	sts	0x015F, r1
				turn_delay = 0;
    1b96:	10 92 1c 01 	sts	0x011C, r1
    1b9a:	10 92 1b 01 	sts	0x011B, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b9e:	9f ef       	ldi	r25, 0xFF	; 255
    1ba0:	2f e7       	ldi	r18, 0x7F	; 127
    1ba2:	86 e1       	ldi	r24, 0x16	; 22
    1ba4:	91 50       	subi	r25, 0x01	; 1
    1ba6:	20 40       	sbci	r18, 0x00	; 0
    1ba8:	80 40       	sbci	r24, 0x00	; 0
    1baa:	e1 f7       	brne	.-8      	; 0x1ba4 <i2c_handel_data+0x1a6>
    1bac:	00 c0       	rjmp	.+0      	; 0x1bae <i2c_handel_data+0x1b0>
    1bae:	00 00       	nop
    1bb0:	ba c0       	rjmp	.+372    	; 0x1d26 <i2c_handel_data+0x328>
				break;
			case 0x07 :// gyro data
				// Kod vi skickar till sensor
				break;
			case 0x08 : // manuel stå still
				manual_function=0;
    1bb2:	10 92 55 01 	sts	0x0155, r1
    1bb6:	10 92 54 01 	sts	0x0154, r1
				break;
    1bba:	b5 c0       	rjmp	.+362    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	90 93 55 01 	sts	0x0155, r25
    1bc4:	80 93 54 01 	sts	0x0154, r24
				break;
    1bc8:	ae c0       	rjmp	.+348    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	90 93 55 01 	sts	0x0155, r25
    1bd2:	80 93 54 01 	sts	0x0154, r24
				break;
    1bd6:	a7 c0       	rjmp	.+334    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x0b ://manuel vänster fram
				manual_function=4;
    1bd8:	84 e0       	ldi	r24, 0x04	; 4
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	90 93 55 01 	sts	0x0155, r25
    1be0:	80 93 54 01 	sts	0x0154, r24
				break;
    1be4:	a0 c0       	rjmp	.+320    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x0c ://manuel höger fram
				manual_function=3;
    1be6:	83 e0       	ldi	r24, 0x03	; 3
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	90 93 55 01 	sts	0x0155, r25
    1bee:	80 93 54 01 	sts	0x0154, r24
				break;
    1bf2:	99 c0       	rjmp	.+306    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
    1bf4:	86 e0       	ldi	r24, 0x06	; 6
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	90 93 55 01 	sts	0x0155, r25
    1bfc:	80 93 54 01 	sts	0x0154, r24
				break;
    1c00:	92 c0       	rjmp	.+292    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
    1c02:	85 e0       	ldi	r24, 0x05	; 5
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	90 93 55 01 	sts	0x0155, r25
    1c0a:	80 93 54 01 	sts	0x0154, r24
				break;
    1c0e:	8b c0       	rjmp	.+278    	; 0x1d26 <i2c_handel_data+0x328>
			case 0x0f :	// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
    1c10:	80 91 8b 01 	lds	r24, 0x018B
    1c14:	80 3f       	cpi	r24, 0xF0	; 240
    1c16:	09 f5       	brne	.+66     	; 0x1c5a <i2c_handel_data+0x25c>
					if(start==1){
    1c18:	80 91 6c 01 	lds	r24, 0x016C
    1c1c:	90 91 6d 01 	lds	r25, 0x016D
    1c20:	01 97       	sbiw	r24, 0x01	; 1
    1c22:	29 f4       	brne	.+10     	; 0x1c2e <i2c_handel_data+0x230>
						start=0;
    1c24:	10 92 6d 01 	sts	0x016D, r1
    1c28:	10 92 6c 01 	sts	0x016C, r1
    1c2c:	7c c0       	rjmp	.+248    	; 0x1d26 <i2c_handel_data+0x328>
    1c2e:	e6 e7       	ldi	r30, 0x76	; 118
    1c30:	f1 e0       	ldi	r31, 0x01	; 1
    1c32:	ae ea       	ldi	r26, 0xAE	; 174
    1c34:	b1 e0       	ldi	r27, 0x01	; 1
    1c36:	80 e8       	ldi	r24, 0x80	; 128
    1c38:	91 e0       	ldi	r25, 0x01	; 1
					}
					else{
						for(int i = 0; i < 5; i++){						
							previous_errors_right[i] = 0;
    1c3a:	11 92       	st	Z+, r1
    1c3c:	11 92       	st	Z+, r1
							previous_errors_left[i] = 0;
    1c3e:	1d 92       	st	X+, r1
    1c40:	1d 92       	st	X+, r1
				if(i2c_data[1]==0xf0){
					if(start==1){
						start=0;
					}
					else{
						for(int i = 0; i < 5; i++){						
    1c42:	e8 17       	cp	r30, r24
    1c44:	f9 07       	cpc	r31, r25
    1c46:	c9 f7       	brne	.-14     	; 0x1c3a <i2c_handel_data+0x23c>
							previous_errors_right[i] = 0;
							previous_errors_left[i] = 0;
						}
						start=1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	90 93 6d 01 	sts	0x016D, r25
    1c50:	80 93 6c 01 	sts	0x016C, r24
						RGB_data = 0;
    1c54:	10 92 ac 01 	sts	0x01AC, r1
    1c58:	66 c0       	rjmp	.+204    	; 0x1d26 <i2c_handel_data+0x328>
						  
					}
				}
				else if(i2c_data[1]==0x0f){
    1c5a:	8f 30       	cpi	r24, 0x0F	; 15
    1c5c:	f1 f4       	brne	.+60     	; 0x1c9a <i2c_handel_data+0x29c>
					if(drive_mode==1){
    1c5e:	80 91 6e 01 	lds	r24, 0x016E
    1c62:	90 91 6f 01 	lds	r25, 0x016F
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	59 f4       	brne	.+22     	; 0x1c80 <i2c_handel_data+0x282>
						PORTD |= (1 << PD1);
    1c6a:	59 9a       	sbi	0x0b, 1	; 11
						PORTD &= ~(1 << PD0);
    1c6c:	58 98       	cbi	0x0b, 0	; 11
						drive_mode=0;
    1c6e:	10 92 6f 01 	sts	0x016F, r1
    1c72:	10 92 6e 01 	sts	0x016E, r1
						start=0;
    1c76:	10 92 6d 01 	sts	0x016D, r1
    1c7a:	10 92 6c 01 	sts	0x016C, r1
    1c7e:	53 c0       	rjmp	.+166    	; 0x1d26 <i2c_handel_data+0x328>
					}
					else{
						PORTD |= (1 << PD0);
    1c80:	58 9a       	sbi	0x0b, 0	; 11
						PORTD &= ~(1 << PD1);
    1c82:	59 98       	cbi	0x0b, 1	; 11
						drive_mode=1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	90 93 6f 01 	sts	0x016F, r25
    1c8c:	80 93 6e 01 	sts	0x016E, r24
						start=0;
    1c90:	10 92 6d 01 	sts	0x016D, r1
    1c94:	10 92 6c 01 	sts	0x016C, r1
    1c98:	46 c0       	rjmp	.+140    	; 0x1d26 <i2c_handel_data+0x328>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	1b c0       	rjmp	.+54     	; 0x1cd4 <i2c_handel_data+0x2d6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c9e:	96 e3       	ldi	r25, 0x36	; 54
    1ca0:	9a 95       	dec	r25
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <i2c_handel_data+0x2a2>
    1ca4:	00 00       	nop
					_delay_us(11);
					d_constant = i2c_data[2] ;
    1ca6:	ea e8       	ldi	r30, 0x8A	; 138
    1ca8:	f1 e0       	ldi	r31, 0x01	; 1
    1caa:	82 81       	ldd	r24, Z+2	; 0x02
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	90 93 01 01 	sts	0x0101, r25
    1cb2:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3] ;
    1cb6:	23 81       	ldd	r18, Z+3	; 0x03
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	30 93 03 01 	sts	0x0103, r19
    1cbe:	20 93 02 01 	sts	0x0102, r18
					if(d_constant == 180)
    1cc2:	84 3b       	cpi	r24, 0xB4	; 180
    1cc4:	91 05       	cpc	r25, r1
    1cc6:	09 f4       	brne	.+2      	; 0x1cca <i2c_handel_data+0x2cc>
					PORTD |= (1 << PD1);
    1cc8:	59 9a       	sbi	0x0b, 1	; 11
    1cca:	26 e3       	ldi	r18, 0x36	; 54
    1ccc:	2a 95       	dec	r18
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <i2c_handel_data+0x2ce>
    1cd0:	00 00       	nop
    1cd2:	29 c0       	rjmp	.+82     	; 0x1d26 <i2c_handel_data+0x328>
					_delay_us(11);
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
    1cd4:	81 30       	cpi	r24, 0x01	; 1
    1cd6:	b9 f4       	brne	.+46     	; 0x1d06 <i2c_handel_data+0x308>
    1cd8:	81 e3       	ldi	r24, 0x31	; 49
    1cda:	8a 95       	dec	r24
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <i2c_handel_data+0x2dc>
    1cde:	00 00       	nop

					_delay_us(10);
					d_constant_lab = i2c_data[3] ;
    1ce0:	ea e8       	ldi	r30, 0x8A	; 138
    1ce2:	f1 e0       	ldi	r31, 0x01	; 1
    1ce4:	83 81       	ldd	r24, Z+3	; 0x03
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	90 93 10 01 	sts	0x0110, r25
    1cec:	80 93 0f 01 	sts	0x010F, r24
					p_constant_lab = i2c_data[2] ;
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	90 93 12 01 	sts	0x0112, r25
    1cf8:	80 93 11 01 	sts	0x0111, r24
    1cfc:	91 e3       	ldi	r25, 0x31	; 49
    1cfe:	9a 95       	dec	r25
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <i2c_handel_data+0x300>
    1d02:	00 00       	nop
    1d04:	10 c0       	rjmp	.+32     	; 0x1d26 <i2c_handel_data+0x328>
					//p_wall = i2c_data[2] ;
					//d_wall = i2c_data[3] ;
					_delay_us(10);
	}
				else if(i2c_data[1]==0x02){
    1d06:	82 30       	cpi	r24, 0x02	; 2
    1d08:	71 f4       	brne	.+28     	; 0x1d26 <i2c_handel_data+0x328>
					left = i2c_data[2] & 0xff;
    1d0a:	ea e8       	ldi	r30, 0x8A	; 138
    1d0c:	f1 e0       	ldi	r31, 0x01	; 1
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	90 93 6b 01 	sts	0x016B, r25
    1d16:	80 93 6a 01 	sts	0x016A, r24
					right = i2c_data[3] & 0xff;
    1d1a:	83 81       	ldd	r24, Z+3	; 0x03
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	90 93 69 01 	sts	0x0169, r25
    1d22:	80 93 68 01 	sts	0x0168, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
    1d26:	e8 9a       	sbi	0x1d, 0	; 29
    1d28:	08 95       	ret
			case 0x01 ://avståndssensorer  plockar fram medianen av dom senaste 3 värdena ser krongligt ut men är bara hitta mittenvärdet och lägg det i distans_xxx
				//distans_right = i2c_data[3];
				//distans_fram = i2c_data[2];
				//distans_left = i2c_data[1];
				distans_right_median[0] = i2c_data[3];
				if((distans_right_median[0]<distans_right_median[1] && distans_right_median[0]>distans_right_median[2])||(distans_right_median[0]>distans_right_median[1] && distans_right_median[0]<distans_right_median[2]))
    1d2a:	98 17       	cp	r25, r24
    1d2c:	08 f4       	brcc	.+2      	; 0x1d30 <i2c_handel_data+0x332>
    1d2e:	99 ce       	rjmp	.-718    	; 0x1a62 <i2c_handel_data+0x64>
    1d30:	a3 ce       	rjmp	.-698    	; 0x1a78 <i2c_handel_data+0x7a>
    1d32:	98 17       	cp	r25, r24
    1d34:	08 f4       	brcc	.+2      	; 0x1d38 <i2c_handel_data+0x33a>
    1d36:	95 ce       	rjmp	.-726    	; 0x1a62 <i2c_handel_data+0x64>
    1d38:	a6 ce       	rjmp	.-692    	; 0x1a86 <i2c_handel_data+0x88>
					distans_right=distans_right_median[2];
				distans_right_median[2]=distans_right_median[1];
				distans_right_median[1]=distans_right_median[0];
		
				distans_fram_median[0] = i2c_data[2];
				if((distans_fram_median[0]<distans_fram_median[1] && distans_fram_median[0]>distans_fram_median[2])||(distans_fram_median[0]>distans_fram_median[1] && distans_fram_median[0]<distans_fram_median[2]))
    1d3a:	98 17       	cp	r25, r24
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <i2c_handel_data+0x342>
    1d3e:	b9 ce       	rjmp	.-654    	; 0x1ab2 <i2c_handel_data+0xb4>
    1d40:	c3 ce       	rjmp	.-634    	; 0x1ac8 <i2c_handel_data+0xca>
    1d42:	98 17       	cp	r25, r24
    1d44:	08 f4       	brcc	.+2      	; 0x1d48 <i2c_handel_data+0x34a>
    1d46:	b5 ce       	rjmp	.-662    	; 0x1ab2 <i2c_handel_data+0xb4>
    1d48:	c6 ce       	rjmp	.-628    	; 0x1ad6 <i2c_handel_data+0xd8>
					distans_fram=distans_fram_median[2];
				distans_fram_median[2]=distans_fram_median[1];
				distans_fram_median[1]=distans_fram_median[0];
				
				distans_left_median[0] = i2c_data[1];
				if((distans_left_median[0]<distans_left_median[1] && distans_left_median[0]>distans_left_median[2])||(distans_left_median[0]>distans_left_median[1] && distans_left_median[0]<distans_left_median[2]))
    1d4a:	98 17       	cp	r25, r24
    1d4c:	08 f4       	brcc	.+2      	; 0x1d50 <i2c_handel_data+0x352>
    1d4e:	d9 ce       	rjmp	.-590    	; 0x1b02 <i2c_handel_data+0x104>
    1d50:	ea ce       	rjmp	.-556    	; 0x1b26 <i2c_handel_data+0x128>
    1d52:	98 17       	cp	r25, r24
    1d54:	08 f4       	brcc	.+2      	; 0x1d58 <i2c_handel_data+0x35a>
    1d56:	d5 ce       	rjmp	.-598    	; 0x1b02 <i2c_handel_data+0x104>
    1d58:	df ce       	rjmp	.-578    	; 0x1b18 <i2c_handel_data+0x11a>
    1d5a:	08 95       	ret

00001d5c <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
    1d5c:	7b d8       	rcall	.-3850   	; 0xe54 <interrupt_init>
	board_init();
    1d5e:	0e 94 76 00 	call	0xec	; 0xec <board_init>
	initengine();
    1d62:	01 d8       	rcall	.-4094   	; 0xd66 <initengine>
	timerinit();
    1d64:	0d d8       	rcall	.-4070   	; 0xd80 <timerinit>
	i2c_setup(1);
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	c6 d8       	rcall	.-3700   	; 0xef6 <i2c_setup>
	sei();
    1d6a:	78 94       	sei
	//***********Set motors speed value here *****************
	left=180;				// kanske räcker med en variable för båda om båda kör exakt lika fort
    1d6c:	84 eb       	ldi	r24, 0xB4	; 180
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	90 93 6b 01 	sts	0x016B, r25
    1d74:	80 93 6a 01 	sts	0x016A, r24
	right=170;
    1d78:	8a ea       	ldi	r24, 0xAA	; 170
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	90 93 69 01 	sts	0x0169, r25
    1d80:	80 93 68 01 	sts	0x0168, r24
	//********************************************************
	motor_left=left;
    1d84:	84 eb       	ldi	r24, 0xB4	; 180
    1d86:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
    1d88:	80 91 68 01 	lds	r24, 0x0168
    1d8c:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
    1d8e:	37 de       	rcall	.-914    	; 0x19fe <i2c_handel_data>
		if(turning)
    1d90:	80 91 5e 01 	lds	r24, 0x015E
    1d94:	81 11       	cpse	r24, r1
    1d96:	fb cf       	rjmp	.-10     	; 0x1d8e <main+0x32>
			;
		else if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
    1d98:	80 91 6e 01 	lds	r24, 0x016E
    1d9c:	90 91 6f 01 	lds	r25, 0x016F
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	91 05       	cpc	r25, r1
    1da4:	71 f4       	brne	.+28     	; 0x1dc2 <main+0x66>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			//if((gyro_left == 1)|| (gyro_right == 1)){
			//	drive_mode = 0;
			//}
			if(start == 1){
    1da6:	80 91 6c 01 	lds	r24, 0x016C
    1daa:	90 91 6d 01 	lds	r25, 0x016D
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	91 05       	cpc	r25, r1
    1db2:	11 f4       	brne	.+4      	; 0x1db8 <main+0x5c>
				regulator();	
    1db4:	40 dd       	rcall	.-1408   	; 0x1836 <regulator>
    1db6:	eb cf       	rjmp	.-42     	; 0x1d8e <main+0x32>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
    1db8:	89 2b       	or	r24, r25
    1dba:	49 f7       	brne	.-46     	; 0x1d8e <main+0x32>
				motor_left=0;
    1dbc:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
    1dbe:	18 bc       	out	0x28, r1	; 40
    1dc0:	e6 cf       	rjmp	.-52     	; 0x1d8e <main+0x32>
			}
		}
		else if(drive_mode==0){										// Drivemode is manual
    1dc2:	89 2b       	or	r24, r25
    1dc4:	21 f7       	brne	.-56     	; 0x1d8e <main+0x32>
			PORTD |= (1 << PD1);
    1dc6:	59 9a       	sbi	0x0b, 1	; 11
			manual_drive();
    1dc8:	33 d9       	rcall	.-3482   	; 0x1030 <manual_drive>
    1dca:	e1 cf       	rjmp	.-62     	; 0x1d8e <main+0x32>

00001dcc <__subsf3>:
    1dcc:	50 58       	subi	r21, 0x80	; 128

00001dce <__addsf3>:
    1dce:	bb 27       	eor	r27, r27
    1dd0:	aa 27       	eor	r26, r26
    1dd2:	0e d0       	rcall	.+28     	; 0x1df0 <__addsf3x>
    1dd4:	4d c1       	rjmp	.+666    	; 0x2070 <__fp_round>
    1dd6:	3e d1       	rcall	.+636    	; 0x2054 <__fp_pscA>
    1dd8:	30 f0       	brcs	.+12     	; 0x1de6 <__addsf3+0x18>
    1dda:	43 d1       	rcall	.+646    	; 0x2062 <__fp_pscB>
    1ddc:	20 f0       	brcs	.+8      	; 0x1de6 <__addsf3+0x18>
    1dde:	31 f4       	brne	.+12     	; 0x1dec <__addsf3+0x1e>
    1de0:	9f 3f       	cpi	r25, 0xFF	; 255
    1de2:	11 f4       	brne	.+4      	; 0x1de8 <__addsf3+0x1a>
    1de4:	1e f4       	brtc	.+6      	; 0x1dec <__addsf3+0x1e>
    1de6:	33 c1       	rjmp	.+614    	; 0x204e <__fp_nan>
    1de8:	0e f4       	brtc	.+2      	; 0x1dec <__addsf3+0x1e>
    1dea:	e0 95       	com	r30
    1dec:	e7 fb       	bst	r30, 7
    1dee:	29 c1       	rjmp	.+594    	; 0x2042 <__fp_inf>

00001df0 <__addsf3x>:
    1df0:	e9 2f       	mov	r30, r25
    1df2:	4f d1       	rcall	.+670    	; 0x2092 <__fp_split3>
    1df4:	80 f3       	brcs	.-32     	; 0x1dd6 <__addsf3+0x8>
    1df6:	ba 17       	cp	r27, r26
    1df8:	62 07       	cpc	r22, r18
    1dfa:	73 07       	cpc	r23, r19
    1dfc:	84 07       	cpc	r24, r20
    1dfe:	95 07       	cpc	r25, r21
    1e00:	18 f0       	brcs	.+6      	; 0x1e08 <__addsf3x+0x18>
    1e02:	71 f4       	brne	.+28     	; 0x1e20 <__addsf3x+0x30>
    1e04:	9e f5       	brtc	.+102    	; 0x1e6c <__addsf3x+0x7c>
    1e06:	67 c1       	rjmp	.+718    	; 0x20d6 <__fp_zero>
    1e08:	0e f4       	brtc	.+2      	; 0x1e0c <__addsf3x+0x1c>
    1e0a:	e0 95       	com	r30
    1e0c:	0b 2e       	mov	r0, r27
    1e0e:	ba 2f       	mov	r27, r26
    1e10:	a0 2d       	mov	r26, r0
    1e12:	0b 01       	movw	r0, r22
    1e14:	b9 01       	movw	r22, r18
    1e16:	90 01       	movw	r18, r0
    1e18:	0c 01       	movw	r0, r24
    1e1a:	ca 01       	movw	r24, r20
    1e1c:	a0 01       	movw	r20, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	ff 27       	eor	r31, r31
    1e22:	59 1b       	sub	r21, r25
    1e24:	99 f0       	breq	.+38     	; 0x1e4c <__addsf3x+0x5c>
    1e26:	59 3f       	cpi	r21, 0xF9	; 249
    1e28:	50 f4       	brcc	.+20     	; 0x1e3e <__addsf3x+0x4e>
    1e2a:	50 3e       	cpi	r21, 0xE0	; 224
    1e2c:	68 f1       	brcs	.+90     	; 0x1e88 <__addsf3x+0x98>
    1e2e:	1a 16       	cp	r1, r26
    1e30:	f0 40       	sbci	r31, 0x00	; 0
    1e32:	a2 2f       	mov	r26, r18
    1e34:	23 2f       	mov	r18, r19
    1e36:	34 2f       	mov	r19, r20
    1e38:	44 27       	eor	r20, r20
    1e3a:	58 5f       	subi	r21, 0xF8	; 248
    1e3c:	f3 cf       	rjmp	.-26     	; 0x1e24 <__addsf3x+0x34>
    1e3e:	46 95       	lsr	r20
    1e40:	37 95       	ror	r19
    1e42:	27 95       	ror	r18
    1e44:	a7 95       	ror	r26
    1e46:	f0 40       	sbci	r31, 0x00	; 0
    1e48:	53 95       	inc	r21
    1e4a:	c9 f7       	brne	.-14     	; 0x1e3e <__addsf3x+0x4e>
    1e4c:	7e f4       	brtc	.+30     	; 0x1e6c <__addsf3x+0x7c>
    1e4e:	1f 16       	cp	r1, r31
    1e50:	ba 0b       	sbc	r27, r26
    1e52:	62 0b       	sbc	r22, r18
    1e54:	73 0b       	sbc	r23, r19
    1e56:	84 0b       	sbc	r24, r20
    1e58:	ba f0       	brmi	.+46     	; 0x1e88 <__addsf3x+0x98>
    1e5a:	91 50       	subi	r25, 0x01	; 1
    1e5c:	a1 f0       	breq	.+40     	; 0x1e86 <__addsf3x+0x96>
    1e5e:	ff 0f       	add	r31, r31
    1e60:	bb 1f       	adc	r27, r27
    1e62:	66 1f       	adc	r22, r22
    1e64:	77 1f       	adc	r23, r23
    1e66:	88 1f       	adc	r24, r24
    1e68:	c2 f7       	brpl	.-16     	; 0x1e5a <__addsf3x+0x6a>
    1e6a:	0e c0       	rjmp	.+28     	; 0x1e88 <__addsf3x+0x98>
    1e6c:	ba 0f       	add	r27, r26
    1e6e:	62 1f       	adc	r22, r18
    1e70:	73 1f       	adc	r23, r19
    1e72:	84 1f       	adc	r24, r20
    1e74:	48 f4       	brcc	.+18     	; 0x1e88 <__addsf3x+0x98>
    1e76:	87 95       	ror	r24
    1e78:	77 95       	ror	r23
    1e7a:	67 95       	ror	r22
    1e7c:	b7 95       	ror	r27
    1e7e:	f7 95       	ror	r31
    1e80:	9e 3f       	cpi	r25, 0xFE	; 254
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <__addsf3x+0x96>
    1e84:	b3 cf       	rjmp	.-154    	; 0x1dec <__addsf3+0x1e>
    1e86:	93 95       	inc	r25
    1e88:	88 0f       	add	r24, r24
    1e8a:	08 f0       	brcs	.+2      	; 0x1e8e <__addsf3x+0x9e>
    1e8c:	99 27       	eor	r25, r25
    1e8e:	ee 0f       	add	r30, r30
    1e90:	97 95       	ror	r25
    1e92:	87 95       	ror	r24
    1e94:	08 95       	ret

00001e96 <__divsf3>:
    1e96:	0c d0       	rcall	.+24     	; 0x1eb0 <__divsf3x>
    1e98:	eb c0       	rjmp	.+470    	; 0x2070 <__fp_round>
    1e9a:	e3 d0       	rcall	.+454    	; 0x2062 <__fp_pscB>
    1e9c:	40 f0       	brcs	.+16     	; 0x1eae <__divsf3+0x18>
    1e9e:	da d0       	rcall	.+436    	; 0x2054 <__fp_pscA>
    1ea0:	30 f0       	brcs	.+12     	; 0x1eae <__divsf3+0x18>
    1ea2:	21 f4       	brne	.+8      	; 0x1eac <__divsf3+0x16>
    1ea4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ea6:	19 f0       	breq	.+6      	; 0x1eae <__divsf3+0x18>
    1ea8:	cc c0       	rjmp	.+408    	; 0x2042 <__fp_inf>
    1eaa:	51 11       	cpse	r21, r1
    1eac:	15 c1       	rjmp	.+554    	; 0x20d8 <__fp_szero>
    1eae:	cf c0       	rjmp	.+414    	; 0x204e <__fp_nan>

00001eb0 <__divsf3x>:
    1eb0:	f0 d0       	rcall	.+480    	; 0x2092 <__fp_split3>
    1eb2:	98 f3       	brcs	.-26     	; 0x1e9a <__divsf3+0x4>

00001eb4 <__divsf3_pse>:
    1eb4:	99 23       	and	r25, r25
    1eb6:	c9 f3       	breq	.-14     	; 0x1eaa <__divsf3+0x14>
    1eb8:	55 23       	and	r21, r21
    1eba:	b1 f3       	breq	.-20     	; 0x1ea8 <__divsf3+0x12>
    1ebc:	95 1b       	sub	r25, r21
    1ebe:	55 0b       	sbc	r21, r21
    1ec0:	bb 27       	eor	r27, r27
    1ec2:	aa 27       	eor	r26, r26
    1ec4:	62 17       	cp	r22, r18
    1ec6:	73 07       	cpc	r23, r19
    1ec8:	84 07       	cpc	r24, r20
    1eca:	38 f0       	brcs	.+14     	; 0x1eda <__divsf3_pse+0x26>
    1ecc:	9f 5f       	subi	r25, 0xFF	; 255
    1ece:	5f 4f       	sbci	r21, 0xFF	; 255
    1ed0:	22 0f       	add	r18, r18
    1ed2:	33 1f       	adc	r19, r19
    1ed4:	44 1f       	adc	r20, r20
    1ed6:	aa 1f       	adc	r26, r26
    1ed8:	a9 f3       	breq	.-22     	; 0x1ec4 <__divsf3_pse+0x10>
    1eda:	33 d0       	rcall	.+102    	; 0x1f42 <__divsf3_pse+0x8e>
    1edc:	0e 2e       	mov	r0, r30
    1ede:	3a f0       	brmi	.+14     	; 0x1eee <__divsf3_pse+0x3a>
    1ee0:	e0 e8       	ldi	r30, 0x80	; 128
    1ee2:	30 d0       	rcall	.+96     	; 0x1f44 <__divsf3_pse+0x90>
    1ee4:	91 50       	subi	r25, 0x01	; 1
    1ee6:	50 40       	sbci	r21, 0x00	; 0
    1ee8:	e6 95       	lsr	r30
    1eea:	00 1c       	adc	r0, r0
    1eec:	ca f7       	brpl	.-14     	; 0x1ee0 <__divsf3_pse+0x2c>
    1eee:	29 d0       	rcall	.+82     	; 0x1f42 <__divsf3_pse+0x8e>
    1ef0:	fe 2f       	mov	r31, r30
    1ef2:	27 d0       	rcall	.+78     	; 0x1f42 <__divsf3_pse+0x8e>
    1ef4:	66 0f       	add	r22, r22
    1ef6:	77 1f       	adc	r23, r23
    1ef8:	88 1f       	adc	r24, r24
    1efa:	bb 1f       	adc	r27, r27
    1efc:	26 17       	cp	r18, r22
    1efe:	37 07       	cpc	r19, r23
    1f00:	48 07       	cpc	r20, r24
    1f02:	ab 07       	cpc	r26, r27
    1f04:	b0 e8       	ldi	r27, 0x80	; 128
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <__divsf3_pse+0x56>
    1f08:	bb 0b       	sbc	r27, r27
    1f0a:	80 2d       	mov	r24, r0
    1f0c:	bf 01       	movw	r22, r30
    1f0e:	ff 27       	eor	r31, r31
    1f10:	93 58       	subi	r25, 0x83	; 131
    1f12:	5f 4f       	sbci	r21, 0xFF	; 255
    1f14:	2a f0       	brmi	.+10     	; 0x1f20 <__divsf3_pse+0x6c>
    1f16:	9e 3f       	cpi	r25, 0xFE	; 254
    1f18:	51 05       	cpc	r21, r1
    1f1a:	68 f0       	brcs	.+26     	; 0x1f36 <__divsf3_pse+0x82>
    1f1c:	92 c0       	rjmp	.+292    	; 0x2042 <__fp_inf>
    1f1e:	dc c0       	rjmp	.+440    	; 0x20d8 <__fp_szero>
    1f20:	5f 3f       	cpi	r21, 0xFF	; 255
    1f22:	ec f3       	brlt	.-6      	; 0x1f1e <__divsf3_pse+0x6a>
    1f24:	98 3e       	cpi	r25, 0xE8	; 232
    1f26:	dc f3       	brlt	.-10     	; 0x1f1e <__divsf3_pse+0x6a>
    1f28:	86 95       	lsr	r24
    1f2a:	77 95       	ror	r23
    1f2c:	67 95       	ror	r22
    1f2e:	b7 95       	ror	r27
    1f30:	f7 95       	ror	r31
    1f32:	9f 5f       	subi	r25, 0xFF	; 255
    1f34:	c9 f7       	brne	.-14     	; 0x1f28 <__divsf3_pse+0x74>
    1f36:	88 0f       	add	r24, r24
    1f38:	91 1d       	adc	r25, r1
    1f3a:	96 95       	lsr	r25
    1f3c:	87 95       	ror	r24
    1f3e:	97 f9       	bld	r25, 7
    1f40:	08 95       	ret
    1f42:	e1 e0       	ldi	r30, 0x01	; 1
    1f44:	66 0f       	add	r22, r22
    1f46:	77 1f       	adc	r23, r23
    1f48:	88 1f       	adc	r24, r24
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	62 17       	cp	r22, r18
    1f4e:	73 07       	cpc	r23, r19
    1f50:	84 07       	cpc	r24, r20
    1f52:	ba 07       	cpc	r27, r26
    1f54:	20 f0       	brcs	.+8      	; 0x1f5e <__divsf3_pse+0xaa>
    1f56:	62 1b       	sub	r22, r18
    1f58:	73 0b       	sbc	r23, r19
    1f5a:	84 0b       	sbc	r24, r20
    1f5c:	ba 0b       	sbc	r27, r26
    1f5e:	ee 1f       	adc	r30, r30
    1f60:	88 f7       	brcc	.-30     	; 0x1f44 <__divsf3_pse+0x90>
    1f62:	e0 95       	com	r30
    1f64:	08 95       	ret

00001f66 <__fixsfsi>:
    1f66:	04 d0       	rcall	.+8      	; 0x1f70 <__fixunssfsi>
    1f68:	68 94       	set
    1f6a:	b1 11       	cpse	r27, r1
    1f6c:	b5 c0       	rjmp	.+362    	; 0x20d8 <__fp_szero>
    1f6e:	08 95       	ret

00001f70 <__fixunssfsi>:
    1f70:	98 d0       	rcall	.+304    	; 0x20a2 <__fp_splitA>
    1f72:	88 f0       	brcs	.+34     	; 0x1f96 <__fixunssfsi+0x26>
    1f74:	9f 57       	subi	r25, 0x7F	; 127
    1f76:	90 f0       	brcs	.+36     	; 0x1f9c <__fixunssfsi+0x2c>
    1f78:	b9 2f       	mov	r27, r25
    1f7a:	99 27       	eor	r25, r25
    1f7c:	b7 51       	subi	r27, 0x17	; 23
    1f7e:	a0 f0       	brcs	.+40     	; 0x1fa8 <__fixunssfsi+0x38>
    1f80:	d1 f0       	breq	.+52     	; 0x1fb6 <__fixunssfsi+0x46>
    1f82:	66 0f       	add	r22, r22
    1f84:	77 1f       	adc	r23, r23
    1f86:	88 1f       	adc	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	1a f0       	brmi	.+6      	; 0x1f92 <__fixunssfsi+0x22>
    1f8c:	ba 95       	dec	r27
    1f8e:	c9 f7       	brne	.-14     	; 0x1f82 <__fixunssfsi+0x12>
    1f90:	12 c0       	rjmp	.+36     	; 0x1fb6 <__fixunssfsi+0x46>
    1f92:	b1 30       	cpi	r27, 0x01	; 1
    1f94:	81 f0       	breq	.+32     	; 0x1fb6 <__fixunssfsi+0x46>
    1f96:	9f d0       	rcall	.+318    	; 0x20d6 <__fp_zero>
    1f98:	b1 e0       	ldi	r27, 0x01	; 1
    1f9a:	08 95       	ret
    1f9c:	9c c0       	rjmp	.+312    	; 0x20d6 <__fp_zero>
    1f9e:	67 2f       	mov	r22, r23
    1fa0:	78 2f       	mov	r23, r24
    1fa2:	88 27       	eor	r24, r24
    1fa4:	b8 5f       	subi	r27, 0xF8	; 248
    1fa6:	39 f0       	breq	.+14     	; 0x1fb6 <__fixunssfsi+0x46>
    1fa8:	b9 3f       	cpi	r27, 0xF9	; 249
    1faa:	cc f3       	brlt	.-14     	; 0x1f9e <__fixunssfsi+0x2e>
    1fac:	86 95       	lsr	r24
    1fae:	77 95       	ror	r23
    1fb0:	67 95       	ror	r22
    1fb2:	b3 95       	inc	r27
    1fb4:	d9 f7       	brne	.-10     	; 0x1fac <__fixunssfsi+0x3c>
    1fb6:	3e f4       	brtc	.+14     	; 0x1fc6 <__fixunssfsi+0x56>
    1fb8:	90 95       	com	r25
    1fba:	80 95       	com	r24
    1fbc:	70 95       	com	r23
    1fbe:	61 95       	neg	r22
    1fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc2:	8f 4f       	sbci	r24, 0xFF	; 255
    1fc4:	9f 4f       	sbci	r25, 0xFF	; 255
    1fc6:	08 95       	ret

00001fc8 <__floatunsisf>:
    1fc8:	e8 94       	clt
    1fca:	09 c0       	rjmp	.+18     	; 0x1fde <__floatsisf+0x12>

00001fcc <__floatsisf>:
    1fcc:	97 fb       	bst	r25, 7
    1fce:	3e f4       	brtc	.+14     	; 0x1fde <__floatsisf+0x12>
    1fd0:	90 95       	com	r25
    1fd2:	80 95       	com	r24
    1fd4:	70 95       	com	r23
    1fd6:	61 95       	neg	r22
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	8f 4f       	sbci	r24, 0xFF	; 255
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	99 23       	and	r25, r25
    1fe0:	a9 f0       	breq	.+42     	; 0x200c <__floatsisf+0x40>
    1fe2:	f9 2f       	mov	r31, r25
    1fe4:	96 e9       	ldi	r25, 0x96	; 150
    1fe6:	bb 27       	eor	r27, r27
    1fe8:	93 95       	inc	r25
    1fea:	f6 95       	lsr	r31
    1fec:	87 95       	ror	r24
    1fee:	77 95       	ror	r23
    1ff0:	67 95       	ror	r22
    1ff2:	b7 95       	ror	r27
    1ff4:	f1 11       	cpse	r31, r1
    1ff6:	f8 cf       	rjmp	.-16     	; 0x1fe8 <__floatsisf+0x1c>
    1ff8:	fa f4       	brpl	.+62     	; 0x2038 <__floatsisf+0x6c>
    1ffa:	bb 0f       	add	r27, r27
    1ffc:	11 f4       	brne	.+4      	; 0x2002 <__floatsisf+0x36>
    1ffe:	60 ff       	sbrs	r22, 0
    2000:	1b c0       	rjmp	.+54     	; 0x2038 <__floatsisf+0x6c>
    2002:	6f 5f       	subi	r22, 0xFF	; 255
    2004:	7f 4f       	sbci	r23, 0xFF	; 255
    2006:	8f 4f       	sbci	r24, 0xFF	; 255
    2008:	9f 4f       	sbci	r25, 0xFF	; 255
    200a:	16 c0       	rjmp	.+44     	; 0x2038 <__floatsisf+0x6c>
    200c:	88 23       	and	r24, r24
    200e:	11 f0       	breq	.+4      	; 0x2014 <__floatsisf+0x48>
    2010:	96 e9       	ldi	r25, 0x96	; 150
    2012:	11 c0       	rjmp	.+34     	; 0x2036 <__floatsisf+0x6a>
    2014:	77 23       	and	r23, r23
    2016:	21 f0       	breq	.+8      	; 0x2020 <__floatsisf+0x54>
    2018:	9e e8       	ldi	r25, 0x8E	; 142
    201a:	87 2f       	mov	r24, r23
    201c:	76 2f       	mov	r23, r22
    201e:	05 c0       	rjmp	.+10     	; 0x202a <__floatsisf+0x5e>
    2020:	66 23       	and	r22, r22
    2022:	71 f0       	breq	.+28     	; 0x2040 <__floatsisf+0x74>
    2024:	96 e8       	ldi	r25, 0x86	; 134
    2026:	86 2f       	mov	r24, r22
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	2a f0       	brmi	.+10     	; 0x2038 <__floatsisf+0x6c>
    202e:	9a 95       	dec	r25
    2030:	66 0f       	add	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	88 1f       	adc	r24, r24
    2036:	da f7       	brpl	.-10     	; 0x202e <__floatsisf+0x62>
    2038:	88 0f       	add	r24, r24
    203a:	96 95       	lsr	r25
    203c:	87 95       	ror	r24
    203e:	97 f9       	bld	r25, 7
    2040:	08 95       	ret

00002042 <__fp_inf>:
    2042:	97 f9       	bld	r25, 7
    2044:	9f 67       	ori	r25, 0x7F	; 127
    2046:	80 e8       	ldi	r24, 0x80	; 128
    2048:	70 e0       	ldi	r23, 0x00	; 0
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	08 95       	ret

0000204e <__fp_nan>:
    204e:	9f ef       	ldi	r25, 0xFF	; 255
    2050:	80 ec       	ldi	r24, 0xC0	; 192
    2052:	08 95       	ret

00002054 <__fp_pscA>:
    2054:	00 24       	eor	r0, r0
    2056:	0a 94       	dec	r0
    2058:	16 16       	cp	r1, r22
    205a:	17 06       	cpc	r1, r23
    205c:	18 06       	cpc	r1, r24
    205e:	09 06       	cpc	r0, r25
    2060:	08 95       	ret

00002062 <__fp_pscB>:
    2062:	00 24       	eor	r0, r0
    2064:	0a 94       	dec	r0
    2066:	12 16       	cp	r1, r18
    2068:	13 06       	cpc	r1, r19
    206a:	14 06       	cpc	r1, r20
    206c:	05 06       	cpc	r0, r21
    206e:	08 95       	ret

00002070 <__fp_round>:
    2070:	09 2e       	mov	r0, r25
    2072:	03 94       	inc	r0
    2074:	00 0c       	add	r0, r0
    2076:	11 f4       	brne	.+4      	; 0x207c <__fp_round+0xc>
    2078:	88 23       	and	r24, r24
    207a:	52 f0       	brmi	.+20     	; 0x2090 <__fp_round+0x20>
    207c:	bb 0f       	add	r27, r27
    207e:	40 f4       	brcc	.+16     	; 0x2090 <__fp_round+0x20>
    2080:	bf 2b       	or	r27, r31
    2082:	11 f4       	brne	.+4      	; 0x2088 <__fp_round+0x18>
    2084:	60 ff       	sbrs	r22, 0
    2086:	04 c0       	rjmp	.+8      	; 0x2090 <__fp_round+0x20>
    2088:	6f 5f       	subi	r22, 0xFF	; 255
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	8f 4f       	sbci	r24, 0xFF	; 255
    208e:	9f 4f       	sbci	r25, 0xFF	; 255
    2090:	08 95       	ret

00002092 <__fp_split3>:
    2092:	57 fd       	sbrc	r21, 7
    2094:	90 58       	subi	r25, 0x80	; 128
    2096:	44 0f       	add	r20, r20
    2098:	55 1f       	adc	r21, r21
    209a:	59 f0       	breq	.+22     	; 0x20b2 <__fp_splitA+0x10>
    209c:	5f 3f       	cpi	r21, 0xFF	; 255
    209e:	71 f0       	breq	.+28     	; 0x20bc <__fp_splitA+0x1a>
    20a0:	47 95       	ror	r20

000020a2 <__fp_splitA>:
    20a2:	88 0f       	add	r24, r24
    20a4:	97 fb       	bst	r25, 7
    20a6:	99 1f       	adc	r25, r25
    20a8:	61 f0       	breq	.+24     	; 0x20c2 <__fp_splitA+0x20>
    20aa:	9f 3f       	cpi	r25, 0xFF	; 255
    20ac:	79 f0       	breq	.+30     	; 0x20cc <__fp_splitA+0x2a>
    20ae:	87 95       	ror	r24
    20b0:	08 95       	ret
    20b2:	12 16       	cp	r1, r18
    20b4:	13 06       	cpc	r1, r19
    20b6:	14 06       	cpc	r1, r20
    20b8:	55 1f       	adc	r21, r21
    20ba:	f2 cf       	rjmp	.-28     	; 0x20a0 <__fp_split3+0xe>
    20bc:	46 95       	lsr	r20
    20be:	f1 df       	rcall	.-30     	; 0x20a2 <__fp_splitA>
    20c0:	08 c0       	rjmp	.+16     	; 0x20d2 <__fp_splitA+0x30>
    20c2:	16 16       	cp	r1, r22
    20c4:	17 06       	cpc	r1, r23
    20c6:	18 06       	cpc	r1, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	f1 cf       	rjmp	.-30     	; 0x20ae <__fp_splitA+0xc>
    20cc:	86 95       	lsr	r24
    20ce:	71 05       	cpc	r23, r1
    20d0:	61 05       	cpc	r22, r1
    20d2:	08 94       	sec
    20d4:	08 95       	ret

000020d6 <__fp_zero>:
    20d6:	e8 94       	clt

000020d8 <__fp_szero>:
    20d8:	bb 27       	eor	r27, r27
    20da:	66 27       	eor	r22, r22
    20dc:	77 27       	eor	r23, r23
    20de:	cb 01       	movw	r24, r22
    20e0:	97 f9       	bld	r25, 7
    20e2:	08 95       	ret

000020e4 <__mulsf3>:
    20e4:	0b d0       	rcall	.+22     	; 0x20fc <__mulsf3x>
    20e6:	c4 cf       	rjmp	.-120    	; 0x2070 <__fp_round>
    20e8:	b5 df       	rcall	.-150    	; 0x2054 <__fp_pscA>
    20ea:	28 f0       	brcs	.+10     	; 0x20f6 <__mulsf3+0x12>
    20ec:	ba df       	rcall	.-140    	; 0x2062 <__fp_pscB>
    20ee:	18 f0       	brcs	.+6      	; 0x20f6 <__mulsf3+0x12>
    20f0:	95 23       	and	r25, r21
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <__mulsf3+0x12>
    20f4:	a6 cf       	rjmp	.-180    	; 0x2042 <__fp_inf>
    20f6:	ab cf       	rjmp	.-170    	; 0x204e <__fp_nan>
    20f8:	11 24       	eor	r1, r1
    20fa:	ee cf       	rjmp	.-36     	; 0x20d8 <__fp_szero>

000020fc <__mulsf3x>:
    20fc:	ca df       	rcall	.-108    	; 0x2092 <__fp_split3>
    20fe:	a0 f3       	brcs	.-24     	; 0x20e8 <__mulsf3+0x4>

00002100 <__mulsf3_pse>:
    2100:	95 9f       	mul	r25, r21
    2102:	d1 f3       	breq	.-12     	; 0x20f8 <__mulsf3+0x14>
    2104:	95 0f       	add	r25, r21
    2106:	50 e0       	ldi	r21, 0x00	; 0
    2108:	55 1f       	adc	r21, r21
    210a:	62 9f       	mul	r22, r18
    210c:	f0 01       	movw	r30, r0
    210e:	72 9f       	mul	r23, r18
    2110:	bb 27       	eor	r27, r27
    2112:	f0 0d       	add	r31, r0
    2114:	b1 1d       	adc	r27, r1
    2116:	63 9f       	mul	r22, r19
    2118:	aa 27       	eor	r26, r26
    211a:	f0 0d       	add	r31, r0
    211c:	b1 1d       	adc	r27, r1
    211e:	aa 1f       	adc	r26, r26
    2120:	64 9f       	mul	r22, r20
    2122:	66 27       	eor	r22, r22
    2124:	b0 0d       	add	r27, r0
    2126:	a1 1d       	adc	r26, r1
    2128:	66 1f       	adc	r22, r22
    212a:	82 9f       	mul	r24, r18
    212c:	22 27       	eor	r18, r18
    212e:	b0 0d       	add	r27, r0
    2130:	a1 1d       	adc	r26, r1
    2132:	62 1f       	adc	r22, r18
    2134:	73 9f       	mul	r23, r19
    2136:	b0 0d       	add	r27, r0
    2138:	a1 1d       	adc	r26, r1
    213a:	62 1f       	adc	r22, r18
    213c:	83 9f       	mul	r24, r19
    213e:	a0 0d       	add	r26, r0
    2140:	61 1d       	adc	r22, r1
    2142:	22 1f       	adc	r18, r18
    2144:	74 9f       	mul	r23, r20
    2146:	33 27       	eor	r19, r19
    2148:	a0 0d       	add	r26, r0
    214a:	61 1d       	adc	r22, r1
    214c:	23 1f       	adc	r18, r19
    214e:	84 9f       	mul	r24, r20
    2150:	60 0d       	add	r22, r0
    2152:	21 1d       	adc	r18, r1
    2154:	82 2f       	mov	r24, r18
    2156:	76 2f       	mov	r23, r22
    2158:	6a 2f       	mov	r22, r26
    215a:	11 24       	eor	r1, r1
    215c:	9f 57       	subi	r25, 0x7F	; 127
    215e:	50 40       	sbci	r21, 0x00	; 0
    2160:	8a f0       	brmi	.+34     	; 0x2184 <__mulsf3_pse+0x84>
    2162:	e1 f0       	breq	.+56     	; 0x219c <__mulsf3_pse+0x9c>
    2164:	88 23       	and	r24, r24
    2166:	4a f0       	brmi	.+18     	; 0x217a <__mulsf3_pse+0x7a>
    2168:	ee 0f       	add	r30, r30
    216a:	ff 1f       	adc	r31, r31
    216c:	bb 1f       	adc	r27, r27
    216e:	66 1f       	adc	r22, r22
    2170:	77 1f       	adc	r23, r23
    2172:	88 1f       	adc	r24, r24
    2174:	91 50       	subi	r25, 0x01	; 1
    2176:	50 40       	sbci	r21, 0x00	; 0
    2178:	a9 f7       	brne	.-22     	; 0x2164 <__mulsf3_pse+0x64>
    217a:	9e 3f       	cpi	r25, 0xFE	; 254
    217c:	51 05       	cpc	r21, r1
    217e:	70 f0       	brcs	.+28     	; 0x219c <__mulsf3_pse+0x9c>
    2180:	60 cf       	rjmp	.-320    	; 0x2042 <__fp_inf>
    2182:	aa cf       	rjmp	.-172    	; 0x20d8 <__fp_szero>
    2184:	5f 3f       	cpi	r21, 0xFF	; 255
    2186:	ec f3       	brlt	.-6      	; 0x2182 <__mulsf3_pse+0x82>
    2188:	98 3e       	cpi	r25, 0xE8	; 232
    218a:	dc f3       	brlt	.-10     	; 0x2182 <__mulsf3_pse+0x82>
    218c:	86 95       	lsr	r24
    218e:	77 95       	ror	r23
    2190:	67 95       	ror	r22
    2192:	b7 95       	ror	r27
    2194:	f7 95       	ror	r31
    2196:	e7 95       	ror	r30
    2198:	9f 5f       	subi	r25, 0xFF	; 255
    219a:	c1 f7       	brne	.-16     	; 0x218c <__mulsf3_pse+0x8c>
    219c:	fe 2b       	or	r31, r30
    219e:	88 0f       	add	r24, r24
    21a0:	91 1d       	adc	r25, r1
    21a2:	96 95       	lsr	r25
    21a4:	87 95       	ror	r24
    21a6:	97 f9       	bld	r25, 7
    21a8:	08 95       	ret

000021aa <__divmodhi4>:
    21aa:	97 fb       	bst	r25, 7
    21ac:	07 2e       	mov	r0, r23
    21ae:	16 f4       	brtc	.+4      	; 0x21b4 <__divmodhi4+0xa>
    21b0:	00 94       	com	r0
    21b2:	06 d0       	rcall	.+12     	; 0x21c0 <__divmodhi4_neg1>
    21b4:	77 fd       	sbrc	r23, 7
    21b6:	08 d0       	rcall	.+16     	; 0x21c8 <__divmodhi4_neg2>
    21b8:	14 d0       	rcall	.+40     	; 0x21e2 <__udivmodhi4>
    21ba:	07 fc       	sbrc	r0, 7
    21bc:	05 d0       	rcall	.+10     	; 0x21c8 <__divmodhi4_neg2>
    21be:	3e f4       	brtc	.+14     	; 0x21ce <__divmodhi4_exit>

000021c0 <__divmodhi4_neg1>:
    21c0:	90 95       	com	r25
    21c2:	81 95       	neg	r24
    21c4:	9f 4f       	sbci	r25, 0xFF	; 255
    21c6:	08 95       	ret

000021c8 <__divmodhi4_neg2>:
    21c8:	70 95       	com	r23
    21ca:	61 95       	neg	r22
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255

000021ce <__divmodhi4_exit>:
    21ce:	08 95       	ret

000021d0 <__tablejump2__>:
    21d0:	ee 0f       	add	r30, r30
    21d2:	ff 1f       	adc	r31, r31
    21d4:	00 24       	eor	r0, r0
    21d6:	00 1c       	adc	r0, r0
    21d8:	0b be       	out	0x3b, r0	; 59
    21da:	07 90       	elpm	r0, Z+
    21dc:	f6 91       	elpm	r31, Z
    21de:	e0 2d       	mov	r30, r0
    21e0:	09 94       	ijmp

000021e2 <__udivmodhi4>:
    21e2:	aa 1b       	sub	r26, r26
    21e4:	bb 1b       	sub	r27, r27
    21e6:	51 e1       	ldi	r21, 0x11	; 17
    21e8:	07 c0       	rjmp	.+14     	; 0x21f8 <__udivmodhi4_ep>

000021ea <__udivmodhi4_loop>:
    21ea:	aa 1f       	adc	r26, r26
    21ec:	bb 1f       	adc	r27, r27
    21ee:	a6 17       	cp	r26, r22
    21f0:	b7 07       	cpc	r27, r23
    21f2:	10 f0       	brcs	.+4      	; 0x21f8 <__udivmodhi4_ep>
    21f4:	a6 1b       	sub	r26, r22
    21f6:	b7 0b       	sbc	r27, r23

000021f8 <__udivmodhi4_ep>:
    21f8:	88 1f       	adc	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	5a 95       	dec	r21
    21fe:	a9 f7       	brne	.-22     	; 0x21ea <__udivmodhi4_loop>
    2200:	80 95       	com	r24
    2202:	90 95       	com	r25
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	08 95       	ret

0000220a <_exit>:
    220a:	f8 94       	cli

0000220c <__stop_program>:
    220c:	ff cf       	rjmp	.-2      	; 0x220c <__stop_program>
