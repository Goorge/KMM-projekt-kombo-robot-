
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00002070  00002104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002070  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  0080011e  0080011e  00002122  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002122  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002154  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001482  00000000  00000000  000022e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000334  00000000  00000000  00003766  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001d44  00000000  00000000  00003a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000057e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010915  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a94  00000000  00000000  000165c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00018059  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  00018189  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 61 0c 	jmp	0x18c2	; 0x18c2 <__vector_1>
       8:	74 c7       	rjmp	.+3816   	; 0xef2 <__vector_2>
       a:	00 00       	nop
       c:	9a c7       	rjmp	.+3892   	; 0xf42 <__vector_3>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c7       	rjmp	.+3606   	; 0xe4c <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b4 0c       	add	r11, r4
      8e:	b9 0c       	add	r11, r9
      90:	c5 0c       	add	r12, r5
      92:	df 0c       	add	r13, r15
      94:	e3 0c       	add	r14, r3
      96:	e7 0c       	add	r14, r7
      98:	eb 0c       	add	r14, r11
      9a:	b1 0d       	add	r27, r1
      9c:	fe 0c       	add	r15, r14
      9e:	03 0d       	add	r16, r3
      a0:	0a 0d       	add	r16, r10
      a2:	11 0d       	add	r17, r1
      a4:	18 0d       	add	r17, r8
      a6:	1f 0d       	add	r17, r15
      a8:	26 0d       	add	r18, r6
      aa:	2d 0d       	add	r18, r13

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 e7       	ldi	r30, 0x70	; 112
      c0:	f0 e2       	ldi	r31, 0x20	; 32
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	ae 31       	cpi	r26, 0x1E	; 30
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	ae e1       	ldi	r26, 0x1E	; 30
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a5 3d       	cpi	r26, 0xD5	; 213
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <main>
      e6:	0c 94 36 10 	jmp	0x206c	; 0x206c <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
      ec:	08 95       	ret

000000ee <linje_get_error>:
	return styr_fel;
}



int linje_get_error(){
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	float styr_fel=0;
	fel_antal=0;
     112:	10 92 5d 01 	sts	0x015D, r1
     116:	10 92 5c 01 	sts	0x015C, r1
	cli();
     11a:	f8 94       	cli
	int Reflex_data_tmp = Reflex_data;
     11c:	80 90 98 01 	lds	r8, 0x0198
     120:	90 90 99 01 	lds	r9, 0x0199
	int Reflex_data2_tmp = Reflex_data2;
     124:	20 90 bb 01 	lds	r2, 0x01BB
     128:	30 90 bc 01 	lds	r3, 0x01BC
	sei();
     12c:	78 94       	sei
     12e:	c0 90 5c 01 	lds	r12, 0x015C
     132:	d0 90 5d 01 	lds	r13, 0x015D
     136:	05 e0       	ldi	r16, 0x05	; 5
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	d0 e0       	ldi	r29, 0x00	; 0
}



int linje_get_error(){
	float styr_fel=0;
     13e:	41 2c       	mov	r4, r1
     140:	51 2c       	mov	r5, r1
     142:	32 01       	movw	r6, r4
     144:	0f 2e       	mov	r0, r31
     146:	f5 e0       	ldi	r31, 0x05	; 5
     148:	af 2e       	mov	r10, r31
     14a:	b1 2c       	mov	r11, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	c5 01       	movw	r24, r10
     150:	80 1b       	sub	r24, r16
     152:	91 0b       	sbc	r25, r17
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
	{
		if(i < 8){ //första 8 sensorenrna
     154:	08 97       	sbiw	r24, 0x08	; 8
     156:	14 f5       	brge	.+68     	; 0x19c <linje_get_error+0xae>
			styr_fel += ((5-i) * ((Reflex_data_tmp>>(i*2))&3));
     158:	74 01       	movw	r14, r8
     15a:	0c 2e       	mov	r0, r28
     15c:	02 c0       	rjmp	.+4      	; 0x162 <linje_get_error+0x74>
     15e:	f5 94       	asr	r15
     160:	e7 94       	ror	r14
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <linje_get_error+0x70>
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	e8 22       	and	r14, r24
     16a:	ff 24       	eor	r15, r15
     16c:	0e 9d       	mul	r16, r14
     16e:	b0 01       	movw	r22, r0
     170:	0f 9d       	mul	r16, r15
     172:	70 0d       	add	r23, r0
     174:	1e 9d       	mul	r17, r14
     176:	70 0d       	add	r23, r0
     178:	11 24       	eor	r1, r1
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     186:	9b 01       	movw	r18, r22
     188:	ac 01       	movw	r20, r24
     18a:	c3 01       	movw	r24, r6
     18c:	b2 01       	movw	r22, r4
     18e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3>
     192:	2b 01       	movw	r4, r22
     194:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data_tmp>>(i*2))&0x3);
     196:	ce 0c       	add	r12, r14
     198:	df 1c       	adc	r13, r15
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <linje_get_error+0xf2>
     19c:	ce 01       	movw	r24, r28
     19e:	40 97       	sbiw	r24, 0x10	; 16
		}
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
     1a0:	71 01       	movw	r14, r2
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <linje_get_error+0xba>
     1a4:	f5 94       	asr	r15
     1a6:	e7 94       	ror	r14
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <linje_get_error+0xb6>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	e8 22       	and	r14, r24
     1b0:	ff 24       	eor	r15, r15
     1b2:	0e 9d       	mul	r16, r14
     1b4:	b0 01       	movw	r22, r0
     1b6:	0f 9d       	mul	r16, r15
     1b8:	70 0d       	add	r23, r0
     1ba:	1e 9d       	mul	r17, r14
     1bc:	70 0d       	add	r23, r0
     1be:	11 24       	eor	r1, r1
     1c0:	07 2e       	mov	r0, r23
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3>
     1d8:	2b 01       	movw	r4, r22
     1da:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
     1dc:	ce 0c       	add	r12, r14
     1de:	df 1c       	adc	r13, r15
     1e0:	22 96       	adiw	r28, 0x02	; 2
     1e2:	01 50       	subi	r16, 0x01	; 1
     1e4:	11 09       	sbc	r17, r1
	fel_antal=0;
	cli();
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
     1e6:	c6 31       	cpi	r28, 0x16	; 22
     1e8:	d1 05       	cpc	r29, r1
     1ea:	09 f0       	breq	.+2      	; 0x1ee <linje_get_error+0x100>
     1ec:	b0 cf       	rjmp	.-160    	; 0x14e <linje_get_error+0x60>
     1ee:	d0 92 5d 01 	sts	0x015D, r13
     1f2:	c0 92 5c 01 	sts	0x015C, r12
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
     1f6:	c1 14       	cp	r12, r1
     1f8:	d1 04       	cpc	r13, r1
     1fa:	69 f0       	breq	.+26     	; 0x216 <linje_get_error+0x128>
		styr_fel = 0; //kan inte dela med 0, specialfall
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
     1fc:	b6 01       	movw	r22, r12
     1fe:	dd 0c       	add	r13, r13
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     214:	03 c0       	rjmp	.+6      	; 0x21c <linje_get_error+0x12e>
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
		styr_fel = 0; //kan inte dela med 0, specialfall
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
	return styr_fel;
     21c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fixsfsi>
}
     220:	cb 01       	movw	r24, r22
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
     232:	bf 90       	pop	r11
     234:	af 90       	pop	r10
     236:	9f 90       	pop	r9
     238:	8f 90       	pop	r8
     23a:	7f 90       	pop	r7
     23c:	6f 90       	pop	r6
     23e:	5f 90       	pop	r5
     240:	4f 90       	pop	r4
     242:	3f 90       	pop	r3
     244:	2f 90       	pop	r2
     246:	08 95       	ret

00000248 <linje_RGBsveng>:
	}
	
}

signed char linje_RGBsveng() //om RGB ger utslag
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	cli();
     24c:	f8 94       	cli
	signed char styr_fel=0x00;
	int Reflex_data_tmp = Reflex_data;
     24e:	40 91 98 01 	lds	r20, 0x0198
     252:	50 91 99 01 	lds	r21, 0x0199
	int Reflex_data2_tmp = Reflex_data2;
     256:	60 91 bb 01 	lds	r22, 0x01BB
     25a:	70 91 bc 01 	lds	r23, 0x01BC
	sei();
     25e:	78 94       	sei
		time=0;
	}
	else // fortsätt med RGB sväng
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
     260:	80 91 a5 01 	lds	r24, 0x01A5
     264:	88 23       	and	r24, r24
     266:	09 f4       	brne	.+2      	; 0x26a <linje_RGBsveng+0x22>
     268:	a3 c0       	rjmp	.+326    	; 0x3b0 <linje_RGBsveng+0x168>
     26a:	20 91 5a 01 	lds	r18, 0x015A
     26e:	30 91 5b 01 	lds	r19, 0x015B
     272:	23 2b       	or	r18, r19
     274:	b1 f4       	brne	.+44     	; 0x2a2 <linje_RGBsveng+0x5a>
     276:	20 91 54 01 	lds	r18, 0x0154
     27a:	30 91 55 01 	lds	r19, 0x0155
     27e:	23 2b       	or	r18, r19
     280:	81 f4       	brne	.+32     	; 0x2a2 <linje_RGBsveng+0x5a>
		counter_timer_line_RGB = 0;
     282:	10 92 69 01 	sts	0x0169, r1
     286:	10 92 68 01 	sts	0x0168, r1
		RGB_reset_timer = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 5b 01 	sts	0x015B, r25
     292:	80 93 5a 01 	sts	0x015A, r24
		RGB_force = 1;
     296:	90 93 55 01 	sts	0x0155, r25
     29a:	80 93 54 01 	sts	0x0154, r24
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     29e:	80 e0       	ldi	r24, 0x00	; 0
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
     2a0:	8e c0       	rjmp	.+284    	; 0x3be <linje_RGBsveng+0x176>
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     2a2:	20 91 68 01 	lds	r18, 0x0168
     2a6:	30 91 69 01 	lds	r19, 0x0169
     2aa:	24 30       	cpi	r18, 0x04	; 4
     2ac:	31 05       	cpc	r19, r1
     2ae:	0c f0       	brlt	.+2      	; 0x2b2 <linje_RGBsveng+0x6a>
     2b0:	6f c0       	rjmp	.+222    	; 0x390 <linje_RGBsveng+0x148>
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	71 f5       	brne	.+92     	; 0x312 <linje_RGBsveng+0xca>
     2b6:	a0 ef       	ldi	r26, 0xF0	; 240
     2b8:	bf ef       	ldi	r27, 0xFF	; 255
     2ba:	2b ef       	ldi	r18, 0xFB	; 251
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
			
			for(int i=0;i<11;i++)
			{
				if (styr_fel==0){
     2c2:	81 11       	cpse	r24, r1
     2c4:	1f c0       	rjmp	.+62     	; 0x304 <linje_RGBsveng+0xbc>
					if(i < 8){ //första 8 sensorenrna
     2c6:	e8 30       	cpi	r30, 0x08	; 8
     2c8:	f1 05       	cpc	r31, r1
     2ca:	84 f4       	brge	.+32     	; 0x2ec <linje_RGBsveng+0xa4>
     2cc:	cf 01       	movw	r24, r30
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     2d2:	ea 01       	movw	r28, r20
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <linje_RGBsveng+0x92>
     2d6:	d5 95       	asr	r29
     2d8:	c7 95       	ror	r28
     2da:	8a 95       	dec	r24
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <linje_RGBsveng+0x8e>
     2de:	ce 01       	movw	r24, r28
     2e0:	86 95       	lsr	r24
     2e2:	81 70       	andi	r24, 0x01	; 1
     2e4:	28 9f       	mul	r18, r24
     2e6:	80 2d       	mov	r24, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <linje_RGBsveng+0xbc>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     2ec:	cb 01       	movw	r24, r22
     2ee:	0a 2e       	mov	r0, r26
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <linje_RGBsveng+0xae>
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	0a 94       	dec	r0
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <linje_RGBsveng+0xaa>
     2fa:	86 95       	lsr	r24
     2fc:	81 70       	andi	r24, 0x01	; 1
     2fe:	28 9f       	mul	r18, r24
     300:	80 2d       	mov	r24, r0
     302:	11 24       	eor	r1, r1
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
			
			for(int i=0;i<11;i++)
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	12 96       	adiw	r26, 0x02	; 2
     30a:	26 30       	cpi	r18, 0x06	; 6
     30c:	d1 f6       	brne	.-76     	; 0x2c2 <linje_RGBsveng+0x7a>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
		styr_fel = -3;
     30e:	8d ef       	ldi	r24, 0xFD	; 253
     310:	56 c0       	rjmp	.+172    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data==2){ //raktfram
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	69 f4       	brne	.+26     	; 0x330 <linje_RGBsveng+0xe8>
			
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
     316:	40 7f       	andi	r20, 0xF0	; 240
     318:	50 93 99 01 	sts	0x0199, r21
     31c:	40 93 98 01 	sts	0x0198, r20
			Reflex_data2 = Reflex_data2_tmp & 0x03;
     320:	63 70       	andi	r22, 0x03	; 3
     322:	77 27       	eor	r23, r23
     324:	70 93 bc 01 	sts	0x01BC, r23
     328:	60 93 bb 01 	sts	0x01BB, r22
			return linje_get_error();
     32c:	e0 de       	rcall	.-576    	; 0xee <linje_get_error>
     32e:	47 c0       	rjmp	.+142    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	d1 f5       	brne	.+116    	; 0x3a8 <linje_RGBsveng+0x160>
     334:	a6 e0       	ldi	r26, 0x06	; 6
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e6 e0       	ldi	r30, 0x06	; 6
     33a:	8b e0       	ldi	r24, 0x0B	; 11
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 e0       	ldi	r18, 0x00	; 0
			for(int i=11;i>0;i--){
				if (styr_fel == 0){
     340:	21 11       	cpse	r18, r1
     342:	1f c0       	rjmp	.+62     	; 0x382 <linje_RGBsveng+0x13a>
					if(i < 8){ //första 8 sensorenrna
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	91 05       	cpc	r25, r1
     348:	84 f4       	brge	.+32     	; 0x36a <linje_RGBsveng+0x122>
     34a:	9c 01       	movw	r18, r24
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     350:	ea 01       	movw	r28, r20
     352:	02 c0       	rjmp	.+4      	; 0x358 <linje_RGBsveng+0x110>
     354:	d5 95       	asr	r29
     356:	c7 95       	ror	r28
     358:	2a 95       	dec	r18
     35a:	e2 f7       	brpl	.-8      	; 0x354 <linje_RGBsveng+0x10c>
     35c:	9e 01       	movw	r18, r28
     35e:	26 95       	lsr	r18
     360:	21 70       	andi	r18, 0x01	; 1
     362:	e2 9f       	mul	r30, r18
     364:	20 2d       	mov	r18, r0
     366:	11 24       	eor	r1, r1
     368:	0c c0       	rjmp	.+24     	; 0x382 <linje_RGBsveng+0x13a>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     36a:	9b 01       	movw	r18, r22
     36c:	0a 2e       	mov	r0, r26
     36e:	02 c0       	rjmp	.+4      	; 0x374 <linje_RGBsveng+0x12c>
     370:	35 95       	asr	r19
     372:	27 95       	ror	r18
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <linje_RGBsveng+0x128>
     378:	26 95       	lsr	r18
     37a:	21 70       	andi	r18, 0x01	; 1
     37c:	e2 9f       	mul	r30, r18
     37e:	20 2d       	mov	r18, r0
     380:	11 24       	eor	r1, r1
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	e1 50       	subi	r30, 0x01	; 1
     386:	12 97       	sbiw	r26, 0x02	; 2
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
			Reflex_data2 = Reflex_data2_tmp & 0x03;
			return linje_get_error();
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
			for(int i=11;i>0;i--){
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	d1 f6       	brne	.-76     	; 0x340 <linje_RGBsveng+0xf8>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
			styr_fel = 3;
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	17 c0       	rjmp	.+46     	; 0x3be <linje_RGBsveng+0x176>
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
		}
	}
	else{
		RGB_data=0;
     390:	10 92 a5 01 	sts	0x01A5, r1
		RGB_reset_timer = 0;
     394:	10 92 5b 01 	sts	0x015B, r1
     398:	10 92 5a 01 	sts	0x015A, r1
		RGB_force = 0;
     39c:	10 92 55 01 	sts	0x0155, r1
     3a0:	10 92 54 01 	sts	0x0154, r1
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <linje_RGBsveng+0x176>
				}
			}
			styr_fel = 3;
		}
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <linje_RGBsveng+0x176>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <linje_RGBsveng+0x176>
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     3b0:	80 91 68 01 	lds	r24, 0x0168
     3b4:	90 91 69 01 	lds	r25, 0x0169
     3b8:	04 97       	sbiw	r24, 0x04	; 4
     3ba:	c4 f3       	brlt	.-16     	; 0x3ac <linje_RGBsveng+0x164>
     3bc:	e9 cf       	rjmp	.-46     	; 0x390 <linje_RGBsveng+0x148>
		RGB_force = 0;
		
	}
	 
	return styr_fel;
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sekvens_goal_detekted>:
bool sekvens_goal_detekted(){
	//int fel_antal=0;
	#ifndef time
		static int prew_fel_antal=0;
	#endif
	linje_get_error();		// Borde uppdatera fel_antal
     3c4:	94 de       	rcall	.-728    	; 0xee <linje_get_error>
	if(fel_antal>28){		// om robbot paserar tejp på tvären 
     3c6:	80 91 5c 01 	lds	r24, 0x015C
     3ca:	90 91 5d 01 	lds	r25, 0x015D
     3ce:	8d 31       	cpi	r24, 0x1D	; 29
     3d0:	91 05       	cpc	r25, r1
     3d2:	5c f0       	brlt	.+22     	; 0x3ea <sekvens_goal_detekted+0x26>
		PORTD |= (1 << PD1);
     3d4:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     3d6:	80 91 5c 01 	lds	r24, 0x015C
     3da:	90 91 5d 01 	lds	r25, 0x015D
     3de:	90 93 25 01 	sts	0x0125, r25
     3e2:	80 93 24 01 	sts	0x0124, r24
		return true;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	08 95       	ret
	}
	else if(prew_fel_antal+fel_antal>36 && prew_fel_antal <=28 && RGB_data==0){
     3ea:	20 91 24 01 	lds	r18, 0x0124
     3ee:	30 91 25 01 	lds	r19, 0x0125
     3f2:	ac 01       	movw	r20, r24
     3f4:	42 0f       	add	r20, r18
     3f6:	53 1f       	adc	r21, r19
     3f8:	45 32       	cpi	r20, 0x25	; 37
     3fa:	51 05       	cpc	r21, r1
     3fc:	94 f0       	brlt	.+36     	; 0x422 <sekvens_goal_detekted+0x5e>
     3fe:	2d 31       	cpi	r18, 0x1D	; 29
     400:	31 05       	cpc	r19, r1
     402:	7c f4       	brge	.+30     	; 0x422 <sekvens_goal_detekted+0x5e>
     404:	20 91 a5 01 	lds	r18, 0x01A5
     408:	21 11       	cpse	r18, r1
     40a:	0b c0       	rjmp	.+22     	; 0x422 <sekvens_goal_detekted+0x5e>
		PORTD |= (1 << PD1);
     40c:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     40e:	80 91 5c 01 	lds	r24, 0x015C
     412:	90 91 5d 01 	lds	r25, 0x015D
     416:	90 93 25 01 	sts	0x0125, r25
     41a:	80 93 24 01 	sts	0x0124, r24
		return true;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret
	}
	else{
		prew_fel_antal=fel_antal;
     422:	90 93 25 01 	sts	0x0125, r25
     426:	80 93 24 01 	sts	0x0124, r24
		return false;
     42a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(fel_antal>3 & fel_antal < 7 & max-min > 5 & max-min < 8) // måste kalibreras bör nog vara && ?
		return true;
	return false;
	*/
}
     42c:	08 95       	ret

0000042e <detect_goal>:
			static int count;
		#endif
		
	int goal_timer = 20;
	
	if((Goal_reset_timer == 0) && (sekvens_goal_detekted() == true)){		
     42e:	80 91 56 01 	lds	r24, 0x0156
     432:	90 91 57 01 	lds	r25, 0x0157
     436:	89 2b       	or	r24, r25
     438:	69 f4       	brne	.+26     	; 0x454 <detect_goal+0x26>
     43a:	c4 df       	rcall	.-120    	; 0x3c4 <sekvens_goal_detekted>
     43c:	88 23       	and	r24, r24
     43e:	51 f0       	breq	.+20     	; 0x454 <detect_goal+0x26>
		Goal_reset_timer = 1;	
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 57 01 	sts	0x0157, r25
     448:	80 93 56 01 	sts	0x0156, r24
		counter_timer_line_goal = 0;																						// Nollar timern som sitter i timerintrerruptet, ISR för timern sker 10ggr per sekund						
     44c:	10 92 65 01 	sts	0x0165, r1
     450:	10 92 64 01 	sts	0x0164, r1
	}	
	if((sekvens_goal_detekted() == true) && ((count == 0) | (count == 2)) && (counter_timer_line_goal < goal_timer)){		//linje 1(count=0) eller 2(count=2) upptäkt procid
     454:	b7 df       	rcall	.-146    	; 0x3c4 <sekvens_goal_detekted>
     456:	88 23       	and	r24, r24
     458:	b1 f0       	breq	.+44     	; 0x486 <detect_goal+0x58>
     45a:	80 91 26 01 	lds	r24, 0x0126
     45e:	90 91 27 01 	lds	r25, 0x0127
     462:	9c 01       	movw	r18, r24
     464:	2d 7f       	andi	r18, 0xFD	; 253
     466:	23 2b       	or	r18, r19
     468:	71 f4       	brne	.+28     	; 0x486 <detect_goal+0x58>
     46a:	20 91 64 01 	lds	r18, 0x0164
     46e:	30 91 65 01 	lds	r19, 0x0165
     472:	24 31       	cpi	r18, 0x14	; 20
     474:	31 05       	cpc	r19, r1
     476:	3c f4       	brge	.+14     	; 0x486 <detect_goal+0x58>
		count++;
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	90 93 27 01 	sts	0x0127, r25
     47e:	80 93 26 01 	sts	0x0126, r24
		return false;
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == false) && ((count == 1) | (count == 3)) && (counter_timer_line_goal < goal_timer)){	// mellanrum mellan linje 1-2(count=1) eller 2-3(count=3) upptäkt
     486:	9e df       	rcall	.-196    	; 0x3c4 <sekvens_goal_detekted>
     488:	81 11       	cpse	r24, r1
     48a:	17 c0       	rjmp	.+46     	; 0x4ba <detect_goal+0x8c>
     48c:	20 91 26 01 	lds	r18, 0x0126
     490:	30 91 27 01 	lds	r19, 0x0127
     494:	a9 01       	movw	r20, r18
     496:	4d 7f       	andi	r20, 0xFD	; 253
     498:	41 30       	cpi	r20, 0x01	; 1
     49a:	51 05       	cpc	r21, r1
     49c:	71 f4       	brne	.+28     	; 0x4ba <detect_goal+0x8c>
     49e:	40 91 64 01 	lds	r20, 0x0164
     4a2:	50 91 65 01 	lds	r21, 0x0165
     4a6:	44 31       	cpi	r20, 0x14	; 20
     4a8:	51 05       	cpc	r21, r1
     4aa:	3c f4       	brge	.+14     	; 0x4ba <detect_goal+0x8c>
		count++;
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	30 93 27 01 	sts	0x0127, r19
     4b4:	20 93 26 01 	sts	0x0126, r18
		return false;																		
     4b8:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == true) && (count == 4)  && (counter_timer_line_goal < goal_timer)){					//linje 3 upptäkt indikerar mål
     4ba:	84 df       	rcall	.-248    	; 0x3c4 <sekvens_goal_detekted>
     4bc:	88 23       	and	r24, r24
     4be:	99 f0       	breq	.+38     	; 0x4e6 <detect_goal+0xb8>
     4c0:	20 91 26 01 	lds	r18, 0x0126
     4c4:	30 91 27 01 	lds	r19, 0x0127
     4c8:	24 30       	cpi	r18, 0x04	; 4
     4ca:	31 05       	cpc	r19, r1
     4cc:	61 f4       	brne	.+24     	; 0x4e6 <detect_goal+0xb8>
     4ce:	20 91 64 01 	lds	r18, 0x0164
     4d2:	30 91 65 01 	lds	r19, 0x0165
     4d6:	24 31       	cpi	r18, 0x14	; 20
     4d8:	31 05       	cpc	r19, r1
     4da:	5c f4       	brge	.+22     	; 0x4f2 <detect_goal+0xc4>
		Goal_reset_timer = 0;
     4dc:	10 92 57 01 	sts	0x0157, r1
     4e0:	10 92 56 01 	sts	0x0156, r1
		return true;
     4e4:	08 95       	ret
	}
	else if(counter_timer_line_goal >= goal_timer){																			// Timeout, tiden har passerat. Alltså inget mål utan bara en T korsning
     4e6:	80 91 64 01 	lds	r24, 0x0164
     4ea:	90 91 65 01 	lds	r25, 0x0165
     4ee:	44 97       	sbiw	r24, 0x14	; 20
     4f0:	54 f0       	brlt	.+20     	; 0x506 <detect_goal+0xd8>
		count = 0;
     4f2:	10 92 27 01 	sts	0x0127, r1
     4f6:	10 92 26 01 	sts	0x0126, r1
		Goal_reset_timer = 0;
     4fa:	10 92 57 01 	sts	0x0157, r1
     4fe:	10 92 56 01 	sts	0x0156, r1
		return false;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
	else{	// time out detta är inte mål
		time=0;
		count=0;
		return false;
	}*/
}
     506:	08 95       	ret

00000508 <detect_labyrint>:
bool detect_labyrint(){ //om robboten har kommmit in i en labyrint 
		#ifndef time
			static int time;
		#endif
		
	if(distans_left<25 && distans_right<25){ // om det finns väggar på båda sidor     
     508:	80 91 a1 01 	lds	r24, 0x01A1
     50c:	89 31       	cpi	r24, 0x19	; 25
     50e:	08 f5       	brcc	.+66     	; 0x552 <detect_labyrint+0x4a>
     510:	80 91 a6 01 	lds	r24, 0x01A6
     514:	89 31       	cpi	r24, 0x19	; 25
     516:	e8 f4       	brcc	.+58     	; 0x552 <detect_labyrint+0x4a>
		
		if(Lab_reset_timer == 0){
     518:	80 91 58 01 	lds	r24, 0x0158
     51c:	90 91 59 01 	lds	r25, 0x0159
     520:	89 2b       	or	r24, r25
     522:	59 f4       	brne	.+22     	; 0x53a <detect_labyrint+0x32>
			Lab_reset_timer = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 59 01 	sts	0x0159, r25
     52c:	80 93 58 01 	sts	0x0158, r24
			counter_timer_line_lab = 0;
     530:	10 92 67 01 	sts	0x0167, r1
     534:	10 92 66 01 	sts	0x0166, r1
     538:	08 95       	ret
		}
		else if(counter_timer_line_lab >=30){  // 1 sekund borde vara lagom
     53a:	80 91 66 01 	lds	r24, 0x0166
     53e:	90 91 67 01 	lds	r25, 0x0167
     542:	4e 97       	sbiw	r24, 0x1e	; 30
     544:	64 f0       	brlt	.+24     	; 0x55e <detect_labyrint+0x56>
			Lab_reset_timer = 0;
     546:	10 92 59 01 	sts	0x0159, r1
     54a:	10 92 58 01 	sts	0x0158, r1
			return true;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	08 95       	ret
			time++;
			return false;
		}*/
	}
	else{ // det var ingen labyrint
		time = 0;
     552:	10 92 23 01 	sts	0x0123, r1
     556:	10 92 22 01 	sts	0x0122, r1
		return false;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	08 95       	ret
		else if(counter_timer_line_lab >=30){  // 1 sekund borde vara lagom
			Lab_reset_timer = 0;
			return true;
		}
		else{
			return false;
     55e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{ // det var ingen labyrint
		time = 0;
		return false;
	}
     560:	08 95       	ret

00000562 <stand_still>:
	turning = true;
	_delay_ms(100);
}

void stand_still(void){
	PORTB &= ~(1 << motor_dir_left);
     562:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     564:	2d 98       	cbi	0x05, 5	; 5
	motor_left = 0;
     566:	17 bc       	out	0x27, r1	; 39
	motor_right = 0;
     568:	18 bc       	out	0x28, r1	; 40
     56a:	08 95       	ret

0000056c <drive_forward>:
}

void drive_forward(void){
	PORTB &= ~(1 << motor_dir_left);
     56c:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     56e:	2d 98       	cbi	0x05, 5	; 5
	motor_left = laby_left_speed;
     570:	80 91 17 01 	lds	r24, 0x0117
     574:	87 bd       	out	0x27, r24	; 39
	motor_right = laby_right_speed;
     576:	80 91 15 01 	lds	r24, 0x0115
     57a:	88 bd       	out	0x28, r24	; 40
     57c:	08 95       	ret

0000057e <turn_left>:
}

void turn_left(void){
	PORTB &= ~(1 << motor_dir_right);
     57e:	2d 98       	cbi	0x05, 5	; 5
	PORTB |= (1 << motor_dir_left);
     580:	2e 9a       	sbi	0x05, 6	; 5
	motor_left = 60;//80;//60left;
     582:	8c e3       	ldi	r24, 0x3C	; 60
     584:	87 bd       	out	0x27, r24	; 39
	motor_right = 55;//70;//55right;
     586:	87 e3       	ldi	r24, 0x37	; 55
     588:	88 bd       	out	0x28, r24	; 40
     58a:	08 95       	ret

0000058c <turn_right>:
}

void turn_right(void){
	PORTB |= (1 << motor_dir_right);
     58c:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motor_dir_left);
     58e:	2e 98       	cbi	0x05, 6	; 5
	motor_left = 57;//80;//57left;
     590:	89 e3       	ldi	r24, 0x39	; 57
     592:	87 bd       	out	0x27, r24	; 39
	motor_right = 52;//52right;
     594:	84 e3       	ldi	r24, 0x34	; 52
     596:	88 bd       	out	0x28, r24	; 40
     598:	08 95       	ret

0000059a <PD_for_lab>:
int number_of_errors = 4;
int previous_errors_left[10];
int previous_errors_right[10];
int error_count = 0;

void PD_for_lab(int distance_left, int distance_right, int distance_front){
     59a:	4f 92       	push	r4
     59c:	5f 92       	push	r5
     59e:	6f 92       	push	r6
     5a0:	7f 92       	push	r7
     5a2:	8f 92       	push	r8
     5a4:	9f 92       	push	r9
     5a6:	af 92       	push	r10
     5a8:	bf 92       	push	r11
     5aa:	ef 92       	push	r14
     5ac:	ff 92       	push	r15
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	7a 01       	movw	r14, r20
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
     5b8:	8c 01       	movw	r16, r24
     5ba:	06 1b       	sub	r16, r22
     5bc:	17 0b       	sbc	r17, r23
     5be:	10 93 a4 01 	sts	0x01A4, r17
     5c2:	00 93 a3 01 	sts	0x01A3, r16
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
     5c6:	c0 91 48 01 	lds	r28, 0x0148
     5ca:	d0 91 49 01 	lds	r29, 0x0149
     5ce:	fe 01       	movw	r30, r28
     5d0:	ee 0f       	add	r30, r30
     5d2:	ff 1f       	adc	r31, r31
     5d4:	eb 58       	subi	r30, 0x8B	; 139
     5d6:	fe 4f       	sbci	r31, 0xFE	; 254
     5d8:	80 81       	ld	r24, Z
     5da:	91 81       	ldd	r25, Z+1	; 0x01
     5dc:	b8 01       	movw	r22, r16
     5de:	68 1b       	sub	r22, r24
     5e0:	79 0b       	sbc	r23, r25
     5e2:	07 2e       	mov	r0, r23
     5e4:	00 0c       	add	r0, r0
     5e6:	88 0b       	sbc	r24, r24
     5e8:	99 0b       	sbc	r25, r25
     5ea:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     5ee:	4b 01       	movw	r8, r22
     5f0:	5c 01       	movw	r10, r24
     5f2:	60 93 4a 01 	sts	0x014A, r22
     5f6:	70 93 4b 01 	sts	0x014B, r23
     5fa:	80 93 4c 01 	sts	0x014C, r24
     5fe:	90 93 4d 01 	sts	0x014D, r25
	if (derivate < 3 && derivate > -3)
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	40 e4       	ldi	r20, 0x40	; 64
     608:	50 e4       	ldi	r21, 0x40	; 64
     60a:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__cmpsf2>
     60e:	88 23       	and	r24, r24
     610:	0c f0       	brlt	.+2      	; 0x614 <PD_for_lab+0x7a>
     612:	8c c0       	rjmp	.+280    	; 0x72c <PD_for_lab+0x192>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e4       	ldi	r20, 0x40	; 64
     61a:	50 ec       	ldi	r21, 0xC0	; 192
     61c:	c5 01       	movw	r24, r10
     61e:	b4 01       	movw	r22, r8
     620:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <__gesf2>
     624:	18 16       	cp	r1, r24
     626:	44 f4       	brge	.+16     	; 0x638 <PD_for_lab+0x9e>
		derivate = 0;
     628:	10 92 4a 01 	sts	0x014A, r1
     62c:	10 92 4b 01 	sts	0x014B, r1
     630:	10 92 4c 01 	sts	0x014C, r1
     634:	10 92 4d 01 	sts	0x014D, r1
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
     638:	80 91 13 01 	lds	r24, 0x0113
     63c:	90 91 14 01 	lds	r25, 0x0114
     640:	08 9f       	mul	r16, r24
     642:	b0 01       	movw	r22, r0
     644:	09 9f       	mul	r16, r25
     646:	70 0d       	add	r23, r0
     648:	18 9f       	mul	r17, r24
     64a:	70 0d       	add	r23, r0
     64c:	11 24       	eor	r1, r1
     64e:	07 2e       	mov	r0, r23
     650:	00 0c       	add	r0, r0
     652:	88 0b       	sbc	r24, r24
     654:	99 0b       	sbc	r25, r25
     656:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     65a:	4b 01       	movw	r8, r22
     65c:	5c 01       	movw	r10, r24
     65e:	80 91 11 01 	lds	r24, 0x0111
     662:	90 91 12 01 	lds	r25, 0x0112
     666:	bc 01       	movw	r22, r24
     668:	99 0f       	add	r25, r25
     66a:	88 0b       	sbc	r24, r24
     66c:	99 0b       	sbc	r25, r25
     66e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     672:	20 91 4a 01 	lds	r18, 0x014A
     676:	30 91 4b 01 	lds	r19, 0x014B
     67a:	40 91 4c 01 	lds	r20, 0x014C
     67e:	50 91 4d 01 	lds	r21, 0x014D
     682:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__mulsf3>
     686:	9b 01       	movw	r18, r22
     688:	ac 01       	movw	r20, r24
     68a:	c5 01       	movw	r24, r10
     68c:	b4 01       	movw	r22, r8
     68e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3>
     692:	20 e0       	ldi	r18, 0x00	; 0
     694:	30 e0       	ldi	r19, 0x00	; 0
     696:	40 e2       	ldi	r20, 0x20	; 32
     698:	51 e4       	ldi	r21, 0x41	; 65
     69a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     69e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fixsfsi>
     6a2:	70 93 be 01 	sts	0x01BE, r23
     6a6:	60 93 bd 01 	sts	0x01BD, r22
	previous_errors_right[error_count] = current_error_lab;
     6aa:	cc 0f       	add	r28, r28
     6ac:	dd 1f       	adc	r29, r29
     6ae:	cb 58       	subi	r28, 0x8B	; 139
     6b0:	de 4f       	sbci	r29, 0xFE	; 254
     6b2:	19 83       	std	Y+1, r17	; 0x01
     6b4:	08 83       	st	Y, r16
	
	if(output_right >= 0){
     6b6:	77 23       	and	r23, r23
     6b8:	bc f0       	brlt	.+46     	; 0x6e8 <PD_for_lab+0x14e>
		motor_right = laby_right_speed;
     6ba:	80 91 15 01 	lds	r24, 0x0115
     6be:	88 bd       	out	0x28, r24	; 40
		if(output_right > laby_left_speed)
     6c0:	80 91 17 01 	lds	r24, 0x0117
     6c4:	90 91 18 01 	lds	r25, 0x0118
     6c8:	20 91 bd 01 	lds	r18, 0x01BD
     6cc:	30 91 be 01 	lds	r19, 0x01BE
     6d0:	82 17       	cp	r24, r18
     6d2:	93 07       	cpc	r25, r19
     6d4:	24 f4       	brge	.+8      	; 0x6de <PD_for_lab+0x144>
			output_right = laby_left_speed;
     6d6:	90 93 be 01 	sts	0x01BE, r25
     6da:	80 93 bd 01 	sts	0x01BD, r24
		motor_left = laby_left_speed - output_right;	
     6de:	90 91 bd 01 	lds	r25, 0x01BD
     6e2:	89 1b       	sub	r24, r25
     6e4:	87 bd       	out	0x27, r24	; 39
     6e6:	1a c0       	rjmp	.+52     	; 0x71c <PD_for_lab+0x182>
	}
	else if(output_right < 0){
		motor_left = laby_left_speed;
     6e8:	80 91 17 01 	lds	r24, 0x0117
     6ec:	87 bd       	out	0x27, r24	; 39
		if(output_right < -laby_right_speed)
     6ee:	80 91 15 01 	lds	r24, 0x0115
     6f2:	90 91 16 01 	lds	r25, 0x0116
     6f6:	22 27       	eor	r18, r18
     6f8:	33 27       	eor	r19, r19
     6fa:	28 1b       	sub	r18, r24
     6fc:	39 0b       	sbc	r19, r25
     6fe:	40 91 bd 01 	lds	r20, 0x01BD
     702:	50 91 be 01 	lds	r21, 0x01BE
     706:	42 17       	cp	r20, r18
     708:	53 07       	cpc	r21, r19
     70a:	24 f4       	brge	.+8      	; 0x714 <PD_for_lab+0x17a>
			output_right = -laby_right_speed;
     70c:	30 93 be 01 	sts	0x01BE, r19
     710:	20 93 bd 01 	sts	0x01BD, r18
		motor_right = laby_right_speed + output_right;	
     714:	90 91 bd 01 	lds	r25, 0x01BD
     718:	89 0f       	add	r24, r25
     71a:	88 bd       	out	0x28, r24	; 40
			stand_still();
			for(int i = 0; i < number_of_errors ; i++){
				previous_errors_right[i] = 0;
		}
		}*/
	if(distance_front <= 35){
     71c:	84 e2       	ldi	r24, 0x24	; 36
     71e:	e8 16       	cp	r14, r24
     720:	f1 04       	cpc	r15, r1
     722:	0c f0       	brlt	.+2      	; 0x726 <PD_for_lab+0x18c>
     724:	42 c0       	rjmp	.+132    	; 0x7aa <PD_for_lab+0x210>
		motor_left = 0; //output_left = -left;// = 0; 
     726:	17 bc       	out	0x27, r1	; 39
		motor_right = 0;//	output_right = -right;//motor_right = 0;
     728:	18 bc       	out	0x28, r1	; 40
     72a:	3f c0       	rjmp	.+126    	; 0x7aa <PD_for_lab+0x210>
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
	if (derivate < 3 && derivate > -3)
		derivate = 0;
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
     72c:	80 91 13 01 	lds	r24, 0x0113
     730:	90 91 14 01 	lds	r25, 0x0114
     734:	08 9f       	mul	r16, r24
     736:	b0 01       	movw	r22, r0
     738:	09 9f       	mul	r16, r25
     73a:	70 0d       	add	r23, r0
     73c:	18 9f       	mul	r17, r24
     73e:	70 0d       	add	r23, r0
     740:	11 24       	eor	r1, r1
     742:	07 2e       	mov	r0, r23
     744:	00 0c       	add	r0, r0
     746:	88 0b       	sbc	r24, r24
     748:	99 0b       	sbc	r25, r25
     74a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     74e:	2b 01       	movw	r4, r22
     750:	3c 01       	movw	r6, r24
     752:	60 91 11 01 	lds	r22, 0x0111
     756:	70 91 12 01 	lds	r23, 0x0112
     75a:	07 2e       	mov	r0, r23
     75c:	00 0c       	add	r0, r0
     75e:	88 0b       	sbc	r24, r24
     760:	99 0b       	sbc	r25, r25
     762:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	c5 01       	movw	r24, r10
     76c:	b4 01       	movw	r22, r8
     76e:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__mulsf3>
     772:	9b 01       	movw	r18, r22
     774:	ac 01       	movw	r20, r24
     776:	c3 01       	movw	r24, r6
     778:	b2 01       	movw	r22, r4
     77a:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3>
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e2       	ldi	r20, 0x20	; 32
     784:	51 e4       	ldi	r21, 0x41	; 65
     786:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     78a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fixsfsi>
     78e:	70 93 be 01 	sts	0x01BE, r23
     792:	60 93 bd 01 	sts	0x01BD, r22
	previous_errors_right[error_count] = current_error_lab;
     796:	cc 0f       	add	r28, r28
     798:	dd 1f       	adc	r29, r29
     79a:	cb 58       	subi	r28, 0x8B	; 139
     79c:	de 4f       	sbci	r29, 0xFE	; 254
     79e:	19 83       	std	Y+1, r17	; 0x01
     7a0:	08 83       	st	Y, r16
	
	if(output_right >= 0){
     7a2:	77 23       	and	r23, r23
     7a4:	0c f0       	brlt	.+2      	; 0x7a8 <PD_for_lab+0x20e>
     7a6:	89 cf       	rjmp	.-238    	; 0x6ba <PD_for_lab+0x120>
     7a8:	9f cf       	rjmp	.-194    	; 0x6e8 <PD_for_lab+0x14e>
	//if(error_count == 0)
	//	PORTD ^= (1 << PD0);
	
	//motor_left = left + output_left;
	//motor_right = right + output_right;
     7aa:	df 91       	pop	r29
     7ac:	cf 91       	pop	r28
     7ae:	1f 91       	pop	r17
     7b0:	0f 91       	pop	r16
     7b2:	ff 90       	pop	r15
     7b4:	ef 90       	pop	r14
     7b6:	bf 90       	pop	r11
     7b8:	af 90       	pop	r10
     7ba:	9f 90       	pop	r9
     7bc:	8f 90       	pop	r8
     7be:	7f 90       	pop	r7
     7c0:	6f 90       	pop	r6
     7c2:	5f 90       	pop	r5
     7c4:	4f 90       	pop	r4
     7c6:	08 95       	ret

000007c8 <drive_forward_left>:

short regulate_side = 0;



void drive_forward_left(int distance){
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	0f 93       	push	r16
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     7d8:	00 91 0f 01 	lds	r16, 0x010F
     7dc:	10 91 10 01 	lds	r17, 0x0110
     7e0:	08 1b       	sub	r16, r24
     7e2:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     7e4:	c0 91 48 01 	lds	r28, 0x0148
     7e8:	d0 91 49 01 	lds	r29, 0x0149
     7ec:	fe 01       	movw	r30, r28
     7ee:	ee 0f       	add	r30, r30
     7f0:	ff 1f       	adc	r31, r31
     7f2:	e1 54       	subi	r30, 0x41	; 65
     7f4:	fe 4f       	sbci	r31, 0xFE	; 254
     7f6:	80 81       	ld	r24, Z
     7f8:	91 81       	ldd	r25, Z+1	; 0x01
     7fa:	b8 01       	movw	r22, r16
     7fc:	68 1b       	sub	r22, r24
     7fe:	79 0b       	sbc	r23, r25
     800:	07 2e       	mov	r0, r23
     802:	00 0c       	add	r0, r0
     804:	88 0b       	sbc	r24, r24
     806:	99 0b       	sbc	r25, r25
     808:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     80c:	6b 01       	movw	r12, r22
     80e:	7c 01       	movw	r14, r24
	if (derivate < 3)
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e4       	ldi	r20, 0x40	; 64
     816:	50 e4       	ldi	r21, 0x40	; 64
     818:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <__cmpsf2>
     81c:	88 23       	and	r24, r24
     81e:	4c f0       	brlt	.+18     	; 0x832 <drive_forward_left+0x6a>



void drive_forward_left(int distance){
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
	derivate = current_error - previous_errors[error_count];///10; //
     820:	c0 92 4a 01 	sts	0x014A, r12
     824:	d0 92 4b 01 	sts	0x014B, r13
     828:	e0 92 4c 01 	sts	0x014C, r14
     82c:	f0 92 4d 01 	sts	0x014D, r15
     830:	08 c0       	rjmp	.+16     	; 0x842 <drive_forward_left+0x7a>
	if (derivate < 3)
		derivate = 0;
     832:	10 92 4a 01 	sts	0x014A, r1
     836:	10 92 4b 01 	sts	0x014B, r1
     83a:	10 92 4c 01 	sts	0x014C, r1
     83e:	10 92 4d 01 	sts	0x014D, r1
	int output = (p_constant_lab * current_error + d_constant_lab * derivate)/10;
     842:	80 91 13 01 	lds	r24, 0x0113
     846:	90 91 14 01 	lds	r25, 0x0114
     84a:	08 9f       	mul	r16, r24
     84c:	b0 01       	movw	r22, r0
     84e:	09 9f       	mul	r16, r25
     850:	70 0d       	add	r23, r0
     852:	18 9f       	mul	r17, r24
     854:	70 0d       	add	r23, r0
     856:	11 24       	eor	r1, r1
     858:	07 2e       	mov	r0, r23
     85a:	00 0c       	add	r0, r0
     85c:	88 0b       	sbc	r24, r24
     85e:	99 0b       	sbc	r25, r25
     860:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     864:	6b 01       	movw	r12, r22
     866:	7c 01       	movw	r14, r24
     868:	80 91 11 01 	lds	r24, 0x0111
     86c:	90 91 12 01 	lds	r25, 0x0112
     870:	bc 01       	movw	r22, r24
     872:	99 0f       	add	r25, r25
     874:	88 0b       	sbc	r24, r24
     876:	99 0b       	sbc	r25, r25
     878:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     87c:	20 91 4a 01 	lds	r18, 0x014A
     880:	30 91 4b 01 	lds	r19, 0x014B
     884:	40 91 4c 01 	lds	r20, 0x014C
     888:	50 91 4d 01 	lds	r21, 0x014D
     88c:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__mulsf3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3>
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	40 e2       	ldi	r20, 0x20	; 32
     8a2:	51 e4       	ldi	r21, 0x41	; 65
     8a4:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     8a8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fixsfsi>
     8ac:	ab 01       	movw	r20, r22
	previous_errors[error_count] = current_error;
     8ae:	fe 01       	movw	r30, r28
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	e1 54       	subi	r30, 0x41	; 65
     8b6:	fe 4f       	sbci	r31, 0xFE	; 254
     8b8:	11 83       	std	Z+1, r17	; 0x01
     8ba:	00 83       	st	Z, r16

	if(++error_count >= number_of_errors_sc)
     8bc:	21 96       	adiw	r28, 0x01	; 1
     8be:	d0 93 49 01 	sts	0x0149, r29
     8c2:	c0 93 48 01 	sts	0x0148, r28
     8c6:	20 91 04 01 	lds	r18, 0x0104
     8ca:	30 91 05 01 	lds	r19, 0x0105
     8ce:	c2 17       	cp	r28, r18
     8d0:	d3 07       	cpc	r29, r19
     8d2:	24 f0       	brlt	.+8      	; 0x8dc <drive_forward_left+0x114>
		error_count=0;
     8d4:	10 92 49 01 	sts	0x0149, r1
     8d8:	10 92 48 01 	sts	0x0148, r1
	
	if(output <= (-laby_left_speed))
     8dc:	20 91 17 01 	lds	r18, 0x0117
     8e0:	30 91 18 01 	lds	r19, 0x0118
     8e4:	ee 27       	eor	r30, r30
     8e6:	ff 27       	eor	r31, r31
     8e8:	e2 1b       	sub	r30, r18
     8ea:	f3 0b       	sbc	r31, r19
     8ec:	e4 17       	cp	r30, r20
     8ee:	f5 07       	cpc	r31, r21
     8f0:	4c f4       	brge	.+18     	; 0x904 <drive_forward_left+0x13c>
		output = -laby_left_speed;
	
	else if(output >= laby_right_speed)
     8f2:	40 91 15 01 	lds	r20, 0x0115
     8f6:	50 91 16 01 	lds	r21, 0x0116
     8fa:	fb 01       	movw	r30, r22
     8fc:	46 17       	cp	r20, r22
     8fe:	57 07       	cpc	r21, r23
     900:	0c f4       	brge	.+2      	; 0x904 <drive_forward_left+0x13c>
     902:	fa 01       	movw	r30, r20
		output=laby_right_speed;
	
	if(output <= 0){
     904:	1e 16       	cp	r1, r30
     906:	1f 06       	cpc	r1, r31
     908:	4c f0       	brlt	.+18     	; 0x91c <drive_forward_left+0x154>
		motor_right = laby_right_speed;
     90a:	90 91 15 01 	lds	r25, 0x0115
     90e:	98 bd       	out	0x28, r25	; 40
		motor_left = laby_left_speed + output;
     910:	90 91 17 01 	lds	r25, 0x0117
     914:	89 2f       	mov	r24, r25
     916:	8e 0f       	add	r24, r30
     918:	87 bd       	out	0x27, r24	; 39
     91a:	06 c0       	rjmp	.+12     	; 0x928 <drive_forward_left+0x160>
	}
	else{ 
		motor_left = laby_left_speed;
     91c:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed - output;	
     91e:	90 91 15 01 	lds	r25, 0x0115
     922:	89 2f       	mov	r24, r25
     924:	8e 1b       	sub	r24, r30
     926:	88 bd       	out	0x28, r24	; 40
	}
}
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	df 90       	pop	r13
     936:	cf 90       	pop	r12
     938:	08 95       	ret

0000093a <drive_forward_right>:

void drive_forward_right(int distance, int distance_front){
     93a:	4f 92       	push	r4
     93c:	5f 92       	push	r5
     93e:	6f 92       	push	r6
     940:	7f 92       	push	r7
     942:	8f 92       	push	r8
     944:	9f 92       	push	r9
     946:	af 92       	push	r10
     948:	bf 92       	push	r11
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
	 int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     956:	00 91 0f 01 	lds	r16, 0x010F
     95a:	10 91 10 01 	lds	r17, 0x0110
     95e:	08 1b       	sub	r16, r24
     960:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     962:	c0 91 48 01 	lds	r28, 0x0148
     966:	d0 91 49 01 	lds	r29, 0x0149
     96a:	ce 01       	movw	r24, r28
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	9c 01       	movw	r18, r24
     972:	21 54       	subi	r18, 0x41	; 65
     974:	3e 4f       	sbci	r19, 0xFE	; 254
     976:	79 01       	movw	r14, r18
     978:	f9 01       	movw	r30, r18
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	b8 01       	movw	r22, r16
     980:	68 1b       	sub	r22, r24
     982:	79 0b       	sbc	r23, r25
     984:	07 2e       	mov	r0, r23
     986:	00 0c       	add	r0, r0
     988:	88 0b       	sbc	r24, r24
     98a:	99 0b       	sbc	r25, r25
     98c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     990:	4b 01       	movw	r8, r22
     992:	5c 01       	movw	r10, r24
     994:	60 93 4a 01 	sts	0x014A, r22
     998:	70 93 4b 01 	sts	0x014B, r23
     99c:	80 93 4c 01 	sts	0x014C, r24
     9a0:	90 93 4d 01 	sts	0x014D, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     9a4:	80 91 0a 01 	lds	r24, 0x010A
     9a8:	90 91 0b 01 	lds	r25, 0x010B
     9ac:	08 9f       	mul	r16, r24
     9ae:	b0 01       	movw	r22, r0
     9b0:	09 9f       	mul	r16, r25
     9b2:	70 0d       	add	r23, r0
     9b4:	18 9f       	mul	r17, r24
     9b6:	70 0d       	add	r23, r0
     9b8:	11 24       	eor	r1, r1
     9ba:	07 2e       	mov	r0, r23
     9bc:	00 0c       	add	r0, r0
     9be:	88 0b       	sbc	r24, r24
     9c0:	99 0b       	sbc	r25, r25
     9c2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     9c6:	2b 01       	movw	r4, r22
     9c8:	3c 01       	movw	r6, r24
     9ca:	60 91 08 01 	lds	r22, 0x0108
     9ce:	70 91 09 01 	lds	r23, 0x0109
     9d2:	07 2e       	mov	r0, r23
     9d4:	00 0c       	add	r0, r0
     9d6:	88 0b       	sbc	r24, r24
     9d8:	99 0b       	sbc	r25, r25
     9da:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     9de:	9b 01       	movw	r18, r22
     9e0:	ac 01       	movw	r20, r24
     9e2:	c5 01       	movw	r24, r10
     9e4:	b4 01       	movw	r22, r8
     9e6:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__mulsf3>
     9ea:	9b 01       	movw	r18, r22
     9ec:	ac 01       	movw	r20, r24
     9ee:	c3 01       	movw	r24, r6
     9f0:	b2 01       	movw	r22, r4
     9f2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e2       	ldi	r20, 0x20	; 32
     9fc:	51 e4       	ldi	r21, 0x41	; 65
     9fe:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__divsf3>
     a02:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fixsfsi>
     a06:	ab 01       	movw	r20, r22
	previous_errors[error_count] = current_error;
     a08:	f7 01       	movw	r30, r14
     a0a:	11 83       	std	Z+1, r17	; 0x01
     a0c:	00 83       	st	Z, r16


	if(++error_count >= number_of_errors)
     a0e:	21 96       	adiw	r28, 0x01	; 1
     a10:	d0 93 49 01 	sts	0x0149, r29
     a14:	c0 93 48 01 	sts	0x0148, r28
     a18:	20 91 0d 01 	lds	r18, 0x010D
     a1c:	30 91 0e 01 	lds	r19, 0x010E
     a20:	c2 17       	cp	r28, r18
     a22:	d3 07       	cpc	r29, r19
     a24:	24 f0       	brlt	.+8      	; 0xa2e <drive_forward_right+0xf4>
		error_count = 0;
     a26:	10 92 49 01 	sts	0x0149, r1
     a2a:	10 92 48 01 	sts	0x0148, r1
	
	if(output >= (laby_left_speed))
     a2e:	20 91 17 01 	lds	r18, 0x0117
     a32:	30 91 18 01 	lds	r19, 0x0118
     a36:	42 17       	cp	r20, r18
     a38:	53 07       	cpc	r21, r19
     a3a:	64 f4       	brge	.+24     	; 0xa54 <drive_forward_right+0x11a>
		output = laby_left_speed;
	
	else if(output <= -laby_right_speed)
     a3c:	40 91 15 01 	lds	r20, 0x0115
     a40:	50 91 16 01 	lds	r21, 0x0116
     a44:	51 95       	neg	r21
     a46:	41 95       	neg	r20
     a48:	51 09       	sbc	r21, r1
     a4a:	64 17       	cp	r22, r20
     a4c:	75 07       	cpc	r23, r21
     a4e:	1c f4       	brge	.+6      	; 0xa56 <drive_forward_right+0x11c>
     a50:	ba 01       	movw	r22, r20
     a52:	01 c0       	rjmp	.+2      	; 0xa56 <drive_forward_right+0x11c>

	if(++error_count >= number_of_errors)
		error_count = 0;
	
	if(output >= (laby_left_speed))
		output = laby_left_speed;
     a54:	b9 01       	movw	r22, r18
	
	else if(output <= -laby_right_speed)
		output = -laby_right_speed;
	
	if(output >= 0){
     a56:	77 23       	and	r23, r23
     a58:	44 f0       	brlt	.+16     	; 0xa6a <drive_forward_right+0x130>
		motor_right = laby_right_speed;
     a5a:	80 91 15 01 	lds	r24, 0x0115
     a5e:	88 bd       	out	0x28, r24	; 40
		motor_left = laby_left_speed - output;
     a60:	80 91 17 01 	lds	r24, 0x0117
     a64:	86 1b       	sub	r24, r22
     a66:	87 bd       	out	0x27, r24	; 39
     a68:	05 c0       	rjmp	.+10     	; 0xa74 <drive_forward_right+0x13a>
	}
	else{
		motor_left = laby_left_speed;
     a6a:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed + output;
     a6c:	80 91 15 01 	lds	r24, 0x0115
     a70:	68 0f       	add	r22, r24
     a72:	68 bd       	out	0x28, r22	; 40
		motor_left = 57;//80;//57left;
		motor_right = 52;//52right;
		_delay_ms(80);	
		stand_still();
	}*/
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	bf 90       	pop	r11
     a82:	af 90       	pop	r10
     a84:	9f 90       	pop	r9
     a86:	8f 90       	pop	r8
     a88:	7f 90       	pop	r7
     a8a:	6f 90       	pop	r6
     a8c:	5f 90       	pop	r5
     a8e:	4f 90       	pop	r4
     a90:	08 95       	ret

00000a92 <linje>:
float current_position = 0;



	 
void linje(void){
     a92:	4f 92       	push	r4
     a94:	5f 92       	push	r5
     a96:	6f 92       	push	r6
     a98:	7f 92       	push	r7
     a9a:	8f 92       	push	r8
     a9c:	9f 92       	push	r9
     a9e:	af 92       	push	r10
     aa0:	bf 92       	push	r11
     aa2:	cf 92       	push	r12
     aa4:	df 92       	push	r13
     aa6:	ef 92       	push	r14
     aa8:	ff 92       	push	r15
	cli();
     aaa:	f8 94       	cli
	int current_position_tmp = current_position;
     aac:	60 91 29 01 	lds	r22, 0x0129
     ab0:	70 91 2a 01 	lds	r23, 0x012A
     ab4:	80 91 2b 01 	lds	r24, 0x012B
     ab8:	90 91 2c 01 	lds	r25, 0x012C
     abc:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fixsfsi>
	sei();
     ac0:	78 94       	sei
	
	current_error = setpoint - current_position_tmp;
     ac2:	20 91 37 01 	lds	r18, 0x0137
     ac6:	30 91 38 01 	lds	r19, 0x0138
     aca:	a9 01       	movw	r20, r18
     acc:	46 1b       	sub	r20, r22
     ace:	57 0b       	sbc	r21, r23
     ad0:	ba 01       	movw	r22, r20
     ad2:	07 2e       	mov	r0, r23
     ad4:	00 0c       	add	r0, r0
     ad6:	88 0b       	sbc	r24, r24
     ad8:	99 0b       	sbc	r25, r25
     ada:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     ade:	6b 01       	movw	r12, r22
     ae0:	7c 01       	movw	r14, r24
     ae2:	60 93 33 01 	sts	0x0133, r22
     ae6:	70 93 34 01 	sts	0x0134, r23
     aea:	80 93 35 01 	sts	0x0135, r24
     aee:	90 93 36 01 	sts	0x0136, r25
	derivate = (current_error -previous_error);					// Tror det var dt som saknades fÃ¶r derivatan
     af2:	20 91 2d 01 	lds	r18, 0x012D
     af6:	30 91 2e 01 	lds	r19, 0x012E
     afa:	40 91 2f 01 	lds	r20, 0x012F
     afe:	50 91 30 01 	lds	r21, 0x0130
     b02:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <__subsf3>
     b06:	4b 01       	movw	r8, r22
     b08:	5c 01       	movw	r10, r24
     b0a:	60 93 4a 01 	sts	0x014A, r22
     b0e:	70 93 4b 01 	sts	0x014B, r23
     b12:	80 93 4c 01 	sts	0x014C, r24
     b16:	90 93 4d 01 	sts	0x014D, r25
	output = (p_constant * current_error + d_constant * derivate);
     b1a:	60 91 02 01 	lds	r22, 0x0102
     b1e:	70 91 03 01 	lds	r23, 0x0103
     b22:	07 2e       	mov	r0, r23
     b24:	00 0c       	add	r0, r0
     b26:	88 0b       	sbc	r24, r24
     b28:	99 0b       	sbc	r25, r25
     b2a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	c7 01       	movw	r24, r14
     b34:	b6 01       	movw	r22, r12
     b36:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__mulsf3>
     b3a:	2b 01       	movw	r4, r22
     b3c:	3c 01       	movw	r6, r24
     b3e:	60 91 00 01 	lds	r22, 0x0100
     b42:	70 91 01 01 	lds	r23, 0x0101
     b46:	07 2e       	mov	r0, r23
     b48:	00 0c       	add	r0, r0
     b4a:	88 0b       	sbc	r24, r24
     b4c:	99 0b       	sbc	r25, r25
     b4e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     b52:	9b 01       	movw	r18, r22
     b54:	ac 01       	movw	r20, r24
     b56:	c5 01       	movw	r24, r10
     b58:	b4 01       	movw	r22, r8
     b5a:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__mulsf3>
     b5e:	9b 01       	movw	r18, r22
     b60:	ac 01       	movw	r20, r24
     b62:	c3 01       	movw	r24, r6
     b64:	b2 01       	movw	r22, r4
     b66:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <__addsf3>
     b6a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fixsfsi>
     b6e:	9b 01       	movw	r18, r22
     b70:	70 93 32 01 	sts	0x0132, r23
     b74:	60 93 31 01 	sts	0x0131, r22
	previous_error = current_error;
     b78:	c0 92 2d 01 	sts	0x012D, r12
     b7c:	d0 92 2e 01 	sts	0x012E, r13
     b80:	e0 92 2f 01 	sts	0x012F, r14
     b84:	f0 92 30 01 	sts	0x0130, r15
//***********************************
//Reglering
//***********************************
		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     b88:	40 91 5c 01 	lds	r20, 0x015C
     b8c:	50 91 5d 01 	lds	r21, 0x015D
     b90:	45 2b       	or	r20, r21
     b92:	e9 f4       	brne	.+58     	; 0xbce <linje+0x13c>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     b94:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= (1 << motor_dir_right);
     b96:	2d 9a       	sbi	0x05, 5	; 5
		motor_left = left/(2 * RGB_slow);
     b98:	60 91 19 01 	lds	r22, 0x0119
     b9c:	70 91 1a 01 	lds	r23, 0x011A
     ba0:	66 0f       	add	r22, r22
     ba2:	77 1f       	adc	r23, r23
     ba4:	80 91 6c 01 	lds	r24, 0x016C
     ba8:	90 91 6d 01 	lds	r25, 0x016D
     bac:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     bb0:	67 bd       	out	0x27, r22	; 39
		motor_right = right/(2 * RGB_slow);
     bb2:	60 91 19 01 	lds	r22, 0x0119
     bb6:	70 91 1a 01 	lds	r23, 0x011A
     bba:	66 0f       	add	r22, r22
     bbc:	77 1f       	adc	r23, r23
     bbe:	80 91 6a 01 	lds	r24, 0x016A
     bc2:	90 91 6b 01 	lds	r25, 0x016B
     bc6:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     bca:	68 bd       	out	0x28, r22	; 40
     bcc:	c3 c0       	rjmp	.+390    	; 0xd54 <linje+0x2c2>
	}
	else if(output < 0){							// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     bce:	77 23       	and	r23, r23
     bd0:	0c f0       	brlt	.+2      	; 0xbd4 <linje+0x142>
     bd2:	57 c0       	rjmp	.+174    	; 0xc82 <linje+0x1f0>
		if(abs(output) >= (right / RGB_slow)){					// FÃ¶r att unvika mÃ¤ttnad i regleringen
     bd4:	9b 01       	movw	r18, r22
     bd6:	77 23       	and	r23, r23
     bd8:	24 f4       	brge	.+8      	; 0xbe2 <linje+0x150>
     bda:	22 27       	eor	r18, r18
     bdc:	33 27       	eor	r19, r19
     bde:	26 1b       	sub	r18, r22
     be0:	37 0b       	sbc	r19, r23
     be2:	80 91 6a 01 	lds	r24, 0x016A
     be6:	90 91 6b 01 	lds	r25, 0x016B
     bea:	60 91 19 01 	lds	r22, 0x0119
     bee:	70 91 1a 01 	lds	r23, 0x011A
     bf2:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     bf6:	26 17       	cp	r18, r22
     bf8:	37 07       	cpc	r19, r23
     bfa:	24 f1       	brlt	.+72     	; 0xc44 <linje+0x1b2>
			//PORTB |= (1 << motor_dir_left);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  
     bfc:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   
     bfe:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left / RGB_slow;
     c00:	80 91 6c 01 	lds	r24, 0x016C
     c04:	90 91 6d 01 	lds	r25, 0x016D
     c08:	60 91 19 01 	lds	r22, 0x0119
     c0c:	70 91 1a 01 	lds	r23, 0x011A
     c10:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     c14:	67 bd       	out	0x27, r22	; 39
			motor_right = (abs(output)- right) / RGB_slow;
     c16:	80 91 31 01 	lds	r24, 0x0131
     c1a:	90 91 32 01 	lds	r25, 0x0132
     c1e:	99 23       	and	r25, r25
     c20:	1c f4       	brge	.+6      	; 0xc28 <linje+0x196>
     c22:	91 95       	neg	r25
     c24:	81 95       	neg	r24
     c26:	91 09       	sbc	r25, r1
     c28:	20 91 6a 01 	lds	r18, 0x016A
     c2c:	30 91 6b 01 	lds	r19, 0x016B
     c30:	82 1b       	sub	r24, r18
     c32:	93 0b       	sbc	r25, r19
     c34:	60 91 19 01 	lds	r22, 0x0119
     c38:	70 91 1a 01 	lds	r23, 0x011A
     c3c:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     c40:	68 bd       	out	0x28, r22	; 40
     c42:	88 c0       	rjmp	.+272    	; 0xd54 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     c44:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     c46:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left / RGB_slow;
     c48:	80 91 6c 01 	lds	r24, 0x016C
     c4c:	90 91 6d 01 	lds	r25, 0x016D
     c50:	60 91 19 01 	lds	r22, 0x0119
     c54:	70 91 1a 01 	lds	r23, 0x011A
     c58:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     c5c:	67 bd       	out	0x27, r22	; 39
			motor_right = (right + output) / RGB_slow;
     c5e:	20 91 6a 01 	lds	r18, 0x016A
     c62:	30 91 6b 01 	lds	r19, 0x016B
     c66:	80 91 31 01 	lds	r24, 0x0131
     c6a:	90 91 32 01 	lds	r25, 0x0132
     c6e:	82 0f       	add	r24, r18
     c70:	93 1f       	adc	r25, r19
     c72:	60 91 19 01 	lds	r22, 0x0119
     c76:	70 91 1a 01 	lds	r23, 0x011A
     c7a:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     c7e:	68 bd       	out	0x28, r22	; 40
     c80:	69 c0       	rjmp	.+210    	; 0xd54 <linje+0x2c2>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     c82:	16 16       	cp	r1, r22
     c84:	17 06       	cpc	r1, r23
     c86:	0c f0       	brlt	.+2      	; 0xc8a <linje+0x1f8>
     c88:	4b c0       	rjmp	.+150    	; 0xd20 <linje+0x28e>
		if(output >= (left / RGB_slow)){							// FÃ¶r att unvika mÃ¤ttnad i regleringen
     c8a:	80 91 6c 01 	lds	r24, 0x016C
     c8e:	90 91 6d 01 	lds	r25, 0x016D
     c92:	60 91 19 01 	lds	r22, 0x0119
     c96:	70 91 1a 01 	lds	r23, 0x011A
     c9a:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     c9e:	26 17       	cp	r18, r22
     ca0:	37 07       	cpc	r19, r23
     ca2:	fc f0       	brlt	.+62     	; 0xce2 <linje+0x250>
			//PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_left);			// Set motor direction to backward  
     ca4:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   
     ca6:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     ca8:	80 91 6a 01 	lds	r24, 0x016A
     cac:	90 91 6b 01 	lds	r25, 0x016B
     cb0:	60 91 19 01 	lds	r22, 0x0119
     cb4:	70 91 1a 01 	lds	r23, 0x011A
     cb8:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     cbc:	68 bd       	out	0x28, r22	; 40
			motor_left = (output - left) / RGB_slow;
     cbe:	80 91 31 01 	lds	r24, 0x0131
     cc2:	90 91 32 01 	lds	r25, 0x0132
     cc6:	20 91 6c 01 	lds	r18, 0x016C
     cca:	30 91 6d 01 	lds	r19, 0x016D
     cce:	82 1b       	sub	r24, r18
     cd0:	93 0b       	sbc	r25, r19
     cd2:	60 91 19 01 	lds	r22, 0x0119
     cd6:	70 91 1a 01 	lds	r23, 0x011A
     cda:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     cde:	67 bd       	out	0x27, r22	; 39
     ce0:	39 c0       	rjmp	.+114    	; 0xd54 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     ce2:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     ce4:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     ce6:	80 91 6a 01 	lds	r24, 0x016A
     cea:	90 91 6b 01 	lds	r25, 0x016B
     cee:	60 91 19 01 	lds	r22, 0x0119
     cf2:	70 91 1a 01 	lds	r23, 0x011A
     cf6:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     cfa:	68 bd       	out	0x28, r22	; 40
			motor_left = (left - output) / RGB_slow;
     cfc:	80 91 6c 01 	lds	r24, 0x016C
     d00:	90 91 6d 01 	lds	r25, 0x016D
     d04:	20 91 31 01 	lds	r18, 0x0131
     d08:	30 91 32 01 	lds	r19, 0x0132
     d0c:	82 1b       	sub	r24, r18
     d0e:	93 0b       	sbc	r25, r19
     d10:	60 91 19 01 	lds	r22, 0x0119
     d14:	70 91 1a 01 	lds	r23, 0x011A
     d18:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     d1c:	67 bd       	out	0x27, r22	; 39
     d1e:	1a c0       	rjmp	.+52     	; 0xd54 <linje+0x2c2>
		}
	}
	else if(output==0){
     d20:	67 2b       	or	r22, r23
     d22:	c1 f4       	brne	.+48     	; 0xd54 <linje+0x2c2>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     d24:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     d26:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left / RGB_slow;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     d28:	80 91 6c 01 	lds	r24, 0x016C
     d2c:	90 91 6d 01 	lds	r25, 0x016D
     d30:	60 91 19 01 	lds	r22, 0x0119
     d34:	70 91 1a 01 	lds	r23, 0x011A
     d38:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     d3c:	67 bd       	out	0x27, r22	; 39
		motor_right = right / RGB_slow;
     d3e:	80 91 6a 01 	lds	r24, 0x016A
     d42:	90 91 6b 01 	lds	r25, 0x016B
     d46:	60 91 19 01 	lds	r22, 0x0119
     d4a:	70 91 1a 01 	lds	r23, 0x011A
     d4e:	0e 94 06 10 	call	0x200c	; 0x200c <__divmodhi4>
     d52:	68 bd       	out	0x28, r22	; 40
	}
}
     d54:	ff 90       	pop	r15
     d56:	ef 90       	pop	r14
     d58:	df 90       	pop	r13
     d5a:	cf 90       	pop	r12
     d5c:	bf 90       	pop	r11
     d5e:	af 90       	pop	r10
     d60:	9f 90       	pop	r9
     d62:	8f 90       	pop	r8
     d64:	7f 90       	pop	r7
     d66:	6f 90       	pop	r6
     d68:	5f 90       	pop	r5
     d6a:	4f 90       	pop	r4
     d6c:	08 95       	ret

00000d6e <linje_main>:
int RGB_slow = 1;
int RGB_force = 0;

void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	RGB_slow = 1;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	90 93 1a 01 	sts	0x011A, r25
     d76:	80 93 19 01 	sts	0x0119, r24
	/*if(distans_fram<34){
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
		PORTD |= (1 << PD1);
		PORTD |= (1 << PD0);
	}
	else*/ if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     d7a:	80 91 a5 01 	lds	r24, 0x01A5
     d7e:	81 50       	subi	r24, 0x01	; 1
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	c0 f4       	brcc	.+48     	; 0xdb4 <linje_main+0x46>
		current_position=linje_RGBsveng();
     d84:	61 da       	rcall	.-2878   	; 0x248 <linje_RGBsveng>
     d86:	68 2f       	mov	r22, r24
     d88:	88 0f       	add	r24, r24
     d8a:	77 0b       	sbc	r23, r23
     d8c:	88 0b       	sbc	r24, r24
     d8e:	99 0b       	sbc	r25, r25
     d90:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__floatsisf>
     d94:	60 93 29 01 	sts	0x0129, r22
     d98:	70 93 2a 01 	sts	0x012A, r23
     d9c:	80 93 2b 01 	sts	0x012B, r24
     da0:	90 93 2c 01 	sts	0x012C, r25
		RGB_slow = 2;
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	90 93 1a 01 	sts	0x011A, r25
     dac:	80 93 19 01 	sts	0x0119, r24
		linje();
     db0:	70 ce       	rjmp	.-800    	; 0xa92 <linje>
     db2:	08 95       	ret
	}
	else if(detect_goal()==true){
     db4:	3c db       	rcall	.-2440   	; 0x42e <detect_goal>
     db6:	88 23       	and	r24, r24
     db8:	79 f0       	breq	.+30     	; 0xdd8 <linje_main+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     dba:	2f ef       	ldi	r18, 0xFF	; 255
     dbc:	8f e7       	ldi	r24, 0x7F	; 127
     dbe:	90 e7       	ldi	r25, 0x70	; 112
     dc0:	21 50       	subi	r18, 0x01	; 1
     dc2:	80 40       	sbci	r24, 0x00	; 0
     dc4:	90 40       	sbci	r25, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <linje_main+0x52>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <linje_main+0x5c>
     dca:	00 00       	nop
		
		_delay_ms(2500);
		start=0;
     dcc:	10 92 6f 01 	sts	0x016F, r1
     dd0:	10 92 6e 01 	sts	0x016E, r1
		PORTD |= (1 << PD1);
     dd4:	59 9a       	sbi	0x0b, 1	; 11
     dd6:	08 95       	ret
		//signalera i mål och stanna
	}
	else if(detect_labyrint()==true){
     dd8:	97 db       	rcall	.-2258   	; 0x508 <detect_labyrint>
     dda:	88 23       	and	r24, r24
     ddc:	31 f0       	breq	.+12     	; 0xdea <linje_main+0x7c>
		PORTD |= (1 << PD0);
     dde:	58 9a       	sbi	0x0b, 0	; 11
		start = 0;
     de0:	10 92 6f 01 	sts	0x016F, r1
     de4:	10 92 6e 01 	sts	0x016E, r1
     de8:	08 95       	ret
		//regulator_mode=0; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
	}
	else{
		current_position=linje_get_error();
     dea:	81 d9       	rcall	.-3326   	; 0xee <linje_get_error>
     dec:	bc 01       	movw	r22, r24
     dee:	99 0f       	add	r25, r25
     df0:	88 0b       	sbc	r24, r24
     df2:	99 0b       	sbc	r25, r25
     df4:	f4 d7       	rcall	.+4072   	; 0x1dde <__floatsisf>
     df6:	60 93 29 01 	sts	0x0129, r22
     dfa:	70 93 2a 01 	sts	0x012A, r23
     dfe:	80 93 2b 01 	sts	0x012B, r24
     e02:	90 93 2c 01 	sts	0x012C, r25
		linje();
     e06:	45 ce       	rjmp	.-886    	; 0xa92 <linje>
     e08:	08 95       	ret

00000e0a <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     e0a:	84 b5       	in	r24, 0x24	; 36
     e0c:	83 6a       	ori	r24, 0xA3	; 163
     e0e:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     e10:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     e12:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     e14:	85 b5       	in	r24, 0x25	; 37
     e16:	83 60       	ori	r24, 0x03	; 3
     e18:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     e1a:	88 e7       	ldi	r24, 0x78	; 120
     e1c:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     e1e:	85 b1       	in	r24, 0x05	; 5
     e20:	15 b8       	out	0x05, r1	; 5
     e22:	08 95       	ret

00000e24 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     e28:	e1 e8       	ldi	r30, 0x81	; 129
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	80 81       	ld	r24, Z
     e2e:	8d 60       	ori	r24, 0x0D	; 13
     e30:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     e32:	80 ea       	ldi	r24, 0xA0	; 160
     e34:	95 e0       	ldi	r25, 0x05	; 5
     e36:	90 93 89 00 	sts	0x0089, r25
     e3a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     e3e:	ef e6       	ldi	r30, 0x6F	; 111
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     e48:	b1 9a       	sbi	0x16, 1	; 22
     e4a:	08 95       	ret

00000e4c <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     e4c:	1f 92       	push	r1
     e4e:	0f 92       	push	r0
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	0f 92       	push	r0
     e54:	11 24       	eor	r1, r1
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
	//regler_ready=1;
	
	
	updaterad_labyrint = true;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	80 93 5f 01 	sts	0x015F, r24
	counter_timer_line_lab++;
     e60:	80 91 66 01 	lds	r24, 0x0166
     e64:	90 91 67 01 	lds	r25, 0x0167
     e68:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_lab >= 50){
     e6a:	82 33       	cpi	r24, 0x32	; 50
     e6c:	91 05       	cpc	r25, r1
     e6e:	2c f4       	brge	.+10     	; 0xe7a <__vector_13+0x2e>
ISR(TIMER1_COMPA_vect){
	//regler_ready=1;
	
	
	updaterad_labyrint = true;
	counter_timer_line_lab++;
     e70:	90 93 67 01 	sts	0x0167, r25
     e74:	80 93 66 01 	sts	0x0166, r24
     e78:	06 c0       	rjmp	.+12     	; 0xe86 <__vector_13+0x3a>
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
     e7a:	82 e3       	ldi	r24, 0x32	; 50
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	90 93 67 01 	sts	0x0167, r25
     e82:	80 93 66 01 	sts	0x0166, r24
	}
	counter_timer_line_RGB++;
     e86:	80 91 68 01 	lds	r24, 0x0168
     e8a:	90 91 69 01 	lds	r25, 0x0169
     e8e:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_RGB >= 50){			
     e90:	82 33       	cpi	r24, 0x32	; 50
     e92:	91 05       	cpc	r25, r1
     e94:	2c f4       	brge	.+10     	; 0xea0 <__vector_13+0x54>
	updaterad_labyrint = true;
	counter_timer_line_lab++;
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
	}
	counter_timer_line_RGB++;
     e96:	90 93 69 01 	sts	0x0169, r25
     e9a:	80 93 68 01 	sts	0x0168, r24
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <__vector_13+0x60>
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
     ea0:	82 e3       	ldi	r24, 0x32	; 50
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	90 93 69 01 	sts	0x0169, r25
     ea8:	80 93 68 01 	sts	0x0168, r24
	}
	counter_timer_line_goal++;
     eac:	80 91 64 01 	lds	r24, 0x0164
     eb0:	90 91 65 01 	lds	r25, 0x0165
     eb4:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_goal >= 50)
     eb6:	82 33       	cpi	r24, 0x32	; 50
     eb8:	91 05       	cpc	r25, r1
     eba:	2c f4       	brge	.+10     	; 0xec6 <__vector_13+0x7a>
	}
	counter_timer_line_RGB++;
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
	}
	counter_timer_line_goal++;
     ebc:	90 93 65 01 	sts	0x0165, r25
     ec0:	80 93 64 01 	sts	0x0164, r24
     ec4:	06 c0       	rjmp	.+12     	; 0xed2 <__vector_13+0x86>
	if(counter_timer_line_goal >= 50)
		counter_timer_line_goal = 50;
     ec6:	82 e3       	ldi	r24, 0x32	; 50
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 65 01 	sts	0x0165, r25
     ece:	80 93 64 01 	sts	0x0164, r24
		
	//count_waypoint++;			//räknare för att köra ur svängar i labyrinter
}
     ed2:	9f 91       	pop	r25
     ed4:	8f 91       	pop	r24
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     ee0:	8d b3       	in	r24, 0x1d	; 29
     ee2:	86 60       	ori	r24, 0x06	; 6
     ee4:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     ee6:	e9 e6       	ldi	r30, 0x69	; 105
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	88 62       	ori	r24, 0x28	; 40
     eee:	80 83       	st	Z, r24
     ef0:	08 95       	ret

00000ef2 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	8f 93       	push	r24
     efe:	9f 93       	push	r25
	if(drive_mode==1){
     f00:	80 91 70 01 	lds	r24, 0x0170
     f04:	90 91 71 01 	lds	r25, 0x0171
     f08:	01 97       	sbiw	r24, 0x01	; 1
     f0a:	39 f4       	brne	.+14     	; 0xf1a <__vector_2+0x28>
		drive_mode=0;
     f0c:	10 92 71 01 	sts	0x0171, r1
     f10:	10 92 70 01 	sts	0x0170, r1
		PORTD |= (1 << PD1);
     f14:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     f16:	58 98       	cbi	0x0b, 0	; 11
     f18:	0c c0       	rjmp	.+24     	; 0xf32 <__vector_2+0x40>
	}
	else{
		start=0;
     f1a:	10 92 6f 01 	sts	0x016F, r1
     f1e:	10 92 6e 01 	sts	0x016E, r1
		drive_mode=1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	90 93 71 01 	sts	0x0171, r25
     f2a:	80 93 70 01 	sts	0x0170, r24
		PORTD |= (1 << PD0);
     f2e:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     f30:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     f32:	e1 9a       	sbi	0x1c, 1	; 28
}
     f34:	9f 91       	pop	r25
     f36:	8f 91       	pop	r24
     f38:	0f 90       	pop	r0
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	0f 90       	pop	r0
     f3e:	1f 90       	pop	r1
     f40:	18 95       	reti

00000f42 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     f42:	1f 92       	push	r1
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	8f 93       	push	r24
     f4e:	9f 93       	push	r25
	if(start==0){
     f50:	80 91 6e 01 	lds	r24, 0x016E
     f54:	90 91 6f 01 	lds	r25, 0x016F
     f58:	89 2b       	or	r24, r25
     f5a:	39 f4       	brne	.+14     	; 0xf6a <__vector_3+0x28>
		start=1;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	90 93 6f 01 	sts	0x016F, r25
     f64:	80 93 6e 01 	sts	0x016E, r24
     f68:	04 c0       	rjmp	.+8      	; 0xf72 <__vector_3+0x30>
	}
	else{
		start=0;
     f6a:	10 92 6f 01 	sts	0x016F, r1
     f6e:	10 92 6e 01 	sts	0x016E, r1
	}
	EIFR |= (1<< INTF2);
     f72:	e2 9a       	sbi	0x1c, 2	; 28
}
     f74:	9f 91       	pop	r25
     f76:	8f 91       	pop	r24
     f78:	0f 90       	pop	r0
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	0f 90       	pop	r0
     f7e:	1f 90       	pop	r1
     f80:	18 95       	reti

00000f82 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     f82:	88 23       	and	r24, r24
     f84:	69 f0       	breq	.+26     	; 0xfa0 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     f86:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     f88:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     f8a:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     f8c:	e9 e6       	ldi	r30, 0x69	; 105
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	83 60       	ori	r24, 0x03	; 3
     f94:	80 83       	st	Z, r24
		TWBR = 0x10;
     f96:	80 e1       	ldi	r24, 0x10	; 16
     f98:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     f9c:	10 92 b9 00 	sts	0x00B9, r1
     fa0:	08 95       	ret

00000fa2 <i2c_send>:
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     fa2:	8f 92       	push	r8
     fa4:	9f 92       	push	r9
     fa6:	af 92       	push	r10
     fa8:	bf 92       	push	r11
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	cf 93       	push	r28
     fb8:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     fba:	eb 01       	movw	r28, r22
     fbc:	08 81       	ld	r16, Y
     fbe:	02 95       	swap	r16
     fc0:	0f 70       	andi	r16, 0x0F	; 15
     fc2:	10 e0       	ldi	r17, 0x00	; 0
     fc4:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     fc6:	68 94       	set
     fc8:	ee 24       	eor	r14, r14
     fca:	e3 f8       	bld	r14, 3
     fcc:	f1 2c       	mov	r15, r1
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     fce:	40 e0       	ldi	r20, 0x00	; 0
     fd0:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     fd2:	ec eb       	ldi	r30, 0xBC	; 188
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	0f 2e       	mov	r0, r31
     fd8:	f4 ea       	ldi	r31, 0xA4	; 164
     fda:	df 2e       	mov	r13, r31
     fdc:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     fde:	a9 eb       	ldi	r26, 0xB9	; 185
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     fe2:	8e 7f       	andi	r24, 0xFE	; 254
     fe4:	c8 2e       	mov	r12, r24
     fe6:	6b eb       	ldi	r22, 0xBB	; 187
     fe8:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     fea:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     fec:	68 94       	set
     fee:	aa 24       	eor	r10, r10
     ff0:	a4 f8       	bld	r10, 4
     ff2:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     ff4:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     ff6:	90 81       	ld	r25, Z
     ff8:	99 23       	and	r25, r25
     ffa:	ec f7       	brge	.-6      	; 0xff6 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     ffc:	2c 91       	ld	r18, X
     ffe:	28 7f       	andi	r18, 0xF8	; 248
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	2e 15       	cp	r18, r14
    1004:	3f 05       	cpc	r19, r15
    1006:	69 f5       	brne	.+90     	; 0x1062 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
    1008:	eb 01       	movw	r28, r22
    100a:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
    100c:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
    100e:	90 81       	ld	r25, Z
    1010:	99 23       	and	r25, r25
    1012:	ec f7       	brge	.-6      	; 0x100e <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
    1014:	9c 91       	ld	r25, X
    1016:	98 7f       	andi	r25, 0xF8	; 248
    1018:	98 31       	cpi	r25, 0x18	; 24
    101a:	29 f0       	breq	.+10     	; 0x1026 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
    101c:	84 e9       	ldi	r24, 0x94	; 148
    101e:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	1f c0       	rjmp	.+62     	; 0x1064 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
    1026:	e4 01       	movw	r28, r8
    1028:	99 91       	ld	r25, Y+
    102a:	4e 01       	movw	r8, r28
    102c:	eb 01       	movw	r28, r22
    102e:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
    1030:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
    1032:	90 81       	ld	r25, Z
    1034:	99 23       	and	r25, r25
    1036:	ec f7       	brge	.-6      	; 0x1032 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
    1038:	9c 91       	ld	r25, X
    103a:	98 7f       	andi	r25, 0xF8	; 248
    103c:	98 32       	cpi	r25, 0x28	; 40
    103e:	29 f0       	breq	.+10     	; 0x104a <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1040:	84 e9       	ldi	r24, 0x94	; 148
    1042:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0d c0       	rjmp	.+26     	; 0x1064 <i2c_send+0xc2>
	}
	counter++;
    104a:	4f 5f       	subi	r20, 0xFF	; 255
    104c:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
    104e:	ea 2c       	mov	r14, r10
    1050:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
    1052:	04 17       	cp	r16, r20
    1054:	15 07       	cpc	r17, r21
    1056:	74 f6       	brge	.-100    	; 0xff4 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
    1058:	84 e9       	ldi	r24, 0x94	; 148
    105a:	80 93 bc 00 	sts	0x00BC, r24
	return true;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	01 c0       	rjmp	.+2      	; 0x1064 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
    1062:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
    1064:	df 91       	pop	r29
    1066:	cf 91       	pop	r28
    1068:	1f 91       	pop	r17
    106a:	0f 91       	pop	r16
    106c:	ff 90       	pop	r15
    106e:	ef 90       	pop	r14
    1070:	df 90       	pop	r13
    1072:	cf 90       	pop	r12
    1074:	bf 90       	pop	r11
    1076:	af 90       	pop	r10
    1078:	9f 90       	pop	r9
    107a:	8f 90       	pop	r8
    107c:	08 95       	ret

0000107e <req_gyro_turn>:
int gyro_left = 0;
int gyro_right = 0;
int laby_left_speed = 100;
int laby_right_speed = 93;

void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
    107e:	cf 93       	push	r28
    1080:	df 93       	push	r29
    1082:	1f 92       	push	r1
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
	byte data[1] = { 0x07 };
    1088:	87 e0       	ldi	r24, 0x07	; 7
    108a:	89 83       	std	Y+1, r24	; 0x01
	i2c_send(0x06, data);
    108c:	be 01       	movw	r22, r28
    108e:	6f 5f       	subi	r22, 0xFF	; 255
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	86 e0       	ldi	r24, 0x06	; 6
    1094:	86 df       	rcall	.-244    	; 0xfa2 <i2c_send>
	turning = true;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 5e 01 	sts	0x015E, r24
    109c:	2f ef       	ldi	r18, 0xFF	; 255
    109e:	8f e7       	ldi	r24, 0x7F	; 127
    10a0:	94 e0       	ldi	r25, 0x04	; 4
    10a2:	21 50       	subi	r18, 0x01	; 1
    10a4:	80 40       	sbci	r24, 0x00	; 0
    10a6:	90 40       	sbci	r25, 0x00	; 0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <req_gyro_turn+0x24>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <req_gyro_turn+0x2e>
    10ac:	00 00       	nop
	_delay_ms(100);
}
    10ae:	0f 90       	pop	r0
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	08 95       	ret

000010b6 <manual_drive>:
//Funktioner fÃ¶r att styra robot fÃ¶r hÃ¶ger/vÃ¤nster eller framÃ¥t
//--------------------------------------------------------------

void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
    10b6:	20 91 50 01 	lds	r18, 0x0150
    10ba:	30 91 51 01 	lds	r19, 0x0151
    10be:	21 30       	cpi	r18, 0x01	; 1
    10c0:	31 05       	cpc	r19, r1
    10c2:	49 f4       	brne	.+18     	; 0x10d6 <manual_drive+0x20>
				req_gyro_turn();											// Request gyroturn
				turn_left();												// Turn motors on for left spin						
				gyro_left = 1;												
			}
			else if(gyro_left == 1){					// 90 turn done
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
    10c4:	10 92 53 01 	sts	0x0153, r1
    10c8:	10 92 52 01 	sts	0x0152, r1
				gyro_left = 0;
    10cc:	10 92 51 01 	sts	0x0151, r1
    10d0:	10 92 50 01 	sts	0x0150, r1
    10d4:	08 95       	ret
void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
			manual_function = 6;
		}
		else if(gyro_right == 1){
    10d6:	80 91 4e 01 	lds	r24, 0x014E
    10da:	90 91 4f 01 	lds	r25, 0x014F
    10de:	01 97       	sbiw	r24, 0x01	; 1
    10e0:	71 f4       	brne	.+28     	; 0x10fe <manual_drive+0x48>
			manual_function = 5;	
    10e2:	85 e0       	ldi	r24, 0x05	; 5
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	90 93 53 01 	sts	0x0153, r25
    10ea:	80 93 52 01 	sts	0x0152, r24
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    10ee:	80 91 4e 01 	lds	r24, 0x014E
    10f2:	90 91 4f 01 	lds	r25, 0x014F
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	09 f0       	breq	.+2      	; 0x10fc <manual_drive+0x46>
    10fa:	59 c0       	rjmp	.+178    	; 0x11ae <manual_drive+0xf8>
    10fc:	4f c0       	rjmp	.+158    	; 0x119c <manual_drive+0xe6>
		}
		else if(gyro_right == 1){
			manual_function = 5;	
		}
		//*******************************
		if(manual_function == 0){											// Stand still = dont dare to move
    10fe:	80 91 52 01 	lds	r24, 0x0152
    1102:	90 91 53 01 	lds	r25, 0x0153
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	29 f4       	brne	.+10     	; 0x1114 <manual_drive+0x5e>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    110a:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    110c:	2d 98       	cbi	0x05, 5	; 5
			motor_left = 0;
    110e:	17 bc       	out	0x27, r1	; 39
			motor_right = 0;
    1110:	18 bc       	out	0x28, r1	; 40
    1112:	08 95       	ret
		}
		else if(manual_function == 1){										// Forward
    1114:	81 30       	cpi	r24, 0x01	; 1
    1116:	91 05       	cpc	r25, r1
    1118:	49 f4       	brne	.+18     	; 0x112c <manual_drive+0x76>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    111a:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    111c:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    111e:	80 91 6c 01 	lds	r24, 0x016C
    1122:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    1124:	80 91 6a 01 	lds	r24, 0x016A
    1128:	88 bd       	out	0x28, r24	; 40
    112a:	08 95       	ret
		}
		else if(manual_function == 2){										// Backward
    112c:	82 30       	cpi	r24, 0x02	; 2
    112e:	91 05       	cpc	r25, r1
    1130:	59 f4       	brne	.+22     	; 0x1148 <manual_drive+0x92>
			PORTB |= (1 << motor_dir_left) | (1 << motor_dir_right);		// Set motor direction to backward
    1132:	85 b1       	in	r24, 0x05	; 5
    1134:	80 66       	ori	r24, 0x60	; 96
    1136:	85 b9       	out	0x05, r24	; 5
			motor_left = left-13;											// -n for adjusting so the motors "speed" are the same :D :D  ***Change depends on speed :D***
    1138:	80 91 6c 01 	lds	r24, 0x016C
    113c:	8d 50       	subi	r24, 0x0D	; 13
    113e:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    1140:	80 91 6a 01 	lds	r24, 0x016A
    1144:	88 bd       	out	0x28, r24	; 40
    1146:	08 95       	ret
		}
		else if(manual_function == 3){										// Rightforward
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	81 f4       	brne	.+32     	; 0x116e <manual_drive+0xb8>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    114e:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1150:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    1152:	80 91 6c 01 	lds	r24, 0x016C
    1156:	87 bd       	out	0x27, r24	; 39
			motor_right = (right - (right/3));								// Speed value minus one third of the speedvalue
    1158:	20 91 6a 01 	lds	r18, 0x016A
    115c:	90 91 6b 01 	lds	r25, 0x016B
    1160:	82 2f       	mov	r24, r18
    1162:	63 e0       	ldi	r22, 0x03	; 3
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	52 d7       	rcall	.+3748   	; 0x200c <__divmodhi4>
    1168:	26 1b       	sub	r18, r22
    116a:	28 bd       	out	0x28, r18	; 40
    116c:	08 95       	ret
		}
		else if(manual_function == 4){										// Leftforward
    116e:	84 30       	cpi	r24, 0x04	; 4
    1170:	91 05       	cpc	r25, r1
    1172:	81 f4       	brne	.+32     	; 0x1194 <manual_drive+0xde>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    1174:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1176:	2d 98       	cbi	0x05, 5	; 5
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
    1178:	20 91 6c 01 	lds	r18, 0x016C
    117c:	90 91 6d 01 	lds	r25, 0x016D
    1180:	82 2f       	mov	r24, r18
    1182:	63 e0       	ldi	r22, 0x03	; 3
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	42 d7       	rcall	.+3716   	; 0x200c <__divmodhi4>
    1188:	26 1b       	sub	r18, r22
    118a:	27 bd       	out	0x27, r18	; 39
			motor_right = right;
    118c:	80 91 6a 01 	lds	r24, 0x016A
    1190:	88 bd       	out	0x28, r24	; 40
    1192:	08 95       	ret
		}
		else if(manual_function == 5){										// Spin right
    1194:	85 30       	cpi	r24, 0x05	; 5
    1196:	91 05       	cpc	r25, r1
    1198:	a9 f4       	brne	.+42     	; 0x11c4 <manual_drive+0x10e>
    119a:	26 c0       	rjmp	.+76     	; 0x11e8 <manual_drive+0x132>
			if(gyro_right == 0){											// Only once when pressed
				req_gyro_turn();											// Request gyroturn
    119c:	70 df       	rcall	.-288    	; 0x107e <req_gyro_turn>
				turn_right();												// Turn motors on for left spin	
    119e:	f6 d9       	rcall	.-3092   	; 0x58c <turn_right>
				gyro_right = 1; 
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	90 93 4f 01 	sts	0x014F, r25
    11a8:	80 93 4e 01 	sts	0x014E, r24
    11ac:	08 95       	ret
			}
			else if(gyro_right == 1){				// 90 turn done
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	09 f5       	brne	.+66     	; 0x11f4 <manual_drive+0x13e>
				manual_function = 0;										// kan behÃ¶vas nollstÃ¤llning av funktion (probably not)
    11b2:	10 92 53 01 	sts	0x0153, r1
    11b6:	10 92 52 01 	sts	0x0152, r1
				gyro_right = 0;												
    11ba:	10 92 4f 01 	sts	0x014F, r1
    11be:	10 92 4e 01 	sts	0x014E, r1
    11c2:	08 95       	ret
			}
		}
		else if(manual_function == 6){										// Spin left
    11c4:	06 97       	sbiw	r24, 0x06	; 6
    11c6:	59 f4       	brne	.+22     	; 0x11de <manual_drive+0x128>
			if(gyro_left == 0){												// Only once when pressed
    11c8:	23 2b       	or	r18, r19
    11ca:	a1 f4       	brne	.+40     	; 0x11f4 <manual_drive+0x13e>
				req_gyro_turn();											// Request gyroturn
    11cc:	58 df       	rcall	.-336    	; 0x107e <req_gyro_turn>
				turn_left();												// Turn motors on for left spin						
    11ce:	d7 d9       	rcall	.-3154   	; 0x57e <turn_left>
				gyro_left = 1;												
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	90 93 51 01 	sts	0x0151, r25
    11d8:	80 93 50 01 	sts	0x0150, r24
    11dc:	08 95       	ret
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
				gyro_left = 0;
			}
		}
		else{
			manual_function=0;												// why not :D 
    11de:	10 92 53 01 	sts	0x0153, r1
    11e2:	10 92 52 01 	sts	0x0152, r1
    11e6:	08 95       	ret
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    11e8:	80 91 4e 01 	lds	r24, 0x014E
    11ec:	90 91 4f 01 	lds	r25, 0x014F
    11f0:	89 2b       	or	r24, r25
    11f2:	a1 f2       	breq	.-88     	; 0x119c <manual_drive+0xe6>
    11f4:	08 95       	ret

000011f6 <waypoint_lab>:


//-------------------------------------
//Funktioner som kommer styra roboten vid specialfall som tillexempel t-korsning eller en vanlig sväng
//-------------------------------------
void waypoint_lab(int distance_left,int distance_right,int distance_front,int st_value){ //t-korsning 
    11f6:	fc 01       	movw	r30, r24
	//PORTD ^= ( 1 << PD1 );
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    11f8:	90 91 46 01 	lds	r25, 0x0146
    11fc:	91 11       	cpse	r25, r1
    11fe:	40 c0       	rjmp	.+128    	; 0x1280 <waypoint_lab+0x8a>
    1200:	80 91 06 01 	lds	r24, 0x0106
    1204:	90 91 07 01 	lds	r25, 0x0107
    1208:	84 17       	cp	r24, r20
    120a:	95 07       	cpc	r25, r21
    120c:	24 f4       	brge	.+8      	; 0x1216 <waypoint_lab+0x20>
		drive_forward();
    120e:	ae d9       	rcall	.-3236   	; 0x56c <drive_forward>
		turn_done = false;
    1210:	10 92 45 01 	sts	0x0145, r1
    1214:	08 95       	ret
	}
	
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		ongoing_turn = true;
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    121c:	80 93 47 01 	sts	0x0147, r24
		turn_done = false;
    1220:	10 92 45 01 	sts	0x0145, r1
		stand_still();
    1224:	9e c9       	rjmp	.-3268   	; 0x562 <stand_still>
    1226:	08 95       	ret
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
		
		if(RGB_data == 3){					//RGB_data="blå" alltså sväng vänster vänster=blå
    1228:	80 91 a5 01 	lds	r24, 0x01A5
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	19 f4       	brne	.+6      	; 0x1236 <waypoint_lab+0x40>
			req_gyro_turn();
    1230:	26 df       	rcall	.-436    	; 0x107e <req_gyro_turn>
			turn_left();
    1232:	a5 d9       	rcall	.-3254   	; 0x57e <turn_left>
    1234:	02 c0       	rjmp	.+4      	; 0x123a <waypoint_lab+0x44>
		}
		else {
			req_gyro_turn();
    1236:	23 df       	rcall	.-442    	; 0x107e <req_gyro_turn>
			turn_right();					//RGB_data="röd" alltså sväng höger
    1238:	a9 d9       	rcall	.-3246   	; 0x58c <turn_right>
		}
		start_turn = false;					//Säger att svängen har inledits för att inte gå in i den här if-satsen igen
    123a:	10 92 47 01 	sts	0x0147, r1
    123e:	08 95       	ret
	}
	
	else if(ongoing_turn && !turning && (distance_left > st_value || distance_right > st_value)){	//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    1240:	80 91 5e 01 	lds	r24, 0x015E
    1244:	81 11       	cpse	r24, r1
    1246:	0b c0       	rjmp	.+22     	; 0x125e <waypoint_lab+0x68>
    1248:	2e 17       	cp	r18, r30
    124a:	3f 07       	cpc	r19, r31
    124c:	1c f0       	brlt	.+6      	; 0x1254 <waypoint_lab+0x5e>
    124e:	26 17       	cp	r18, r22
    1250:	37 07       	cpc	r19, r23
    1252:	2c f4       	brge	.+10     	; 0x125e <waypoint_lab+0x68>
		turn_done = true;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	80 93 45 01 	sts	0x0145, r24
		//count_waypoint = 0;
		drive_forward(); // Byt till att reglera mot vägg
    125a:	88 c9       	rjmp	.-3312   	; 0x56c <drive_forward>
    125c:	08 95       	ret
	}
	
	else if(ongoing_turn && turn_done && distance_right < st_value && distance_left < st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    125e:	80 91 45 01 	lds	r24, 0x0145
    1262:	88 23       	and	r24, r24
    1264:	91 f0       	breq	.+36     	; 0x128a <waypoint_lab+0x94>
    1266:	62 17       	cp	r22, r18
    1268:	73 07       	cpc	r23, r19
    126a:	7c f4       	brge	.+30     	; 0x128a <waypoint_lab+0x94>
    126c:	e2 17       	cp	r30, r18
    126e:	f3 07       	cpc	r31, r19
    1270:	64 f4       	brge	.+24     	; 0x128a <waypoint_lab+0x94>
		waypoint = false;						
    1272:	10 92 3c 01 	sts	0x013C, r1
		ongoing_turn = false;
    1276:	10 92 46 01 	sts	0x0146, r1
		prepare_special_case = false;
    127a:	10 92 43 01 	sts	0x0143, r1
    127e:	08 95       	ret
		start_turn = true;
		turn_done = false;
		stand_still();
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
    1280:	80 91 47 01 	lds	r24, 0x0147
    1284:	81 11       	cpse	r24, r1
    1286:	d0 cf       	rjmp	.-96     	; 0x1228 <waypoint_lab+0x32>
    1288:	db cf       	rjmp	.-74     	; 0x1240 <waypoint_lab+0x4a>
    128a:	08 95       	ret

0000128c <oneway_turn_lab>:
		ongoing_turn = false;
		prepare_special_case = false;
	}
}

void oneway_turn_lab(int distance_left,int distance_right,int distance_front,int st_value){//roboten kommer fram till en enkel kurva antingen till höger eller vänster
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	ec 01       	movw	r28, r24
    1296:	8b 01       	movw	r16, r22
	PORTD ^= ( 1 << PD0 );
    1298:	8b b1       	in	r24, 0x0b	; 11
    129a:	91 e0       	ldi	r25, 0x01	; 1
    129c:	98 27       	eor	r25, r24
    129e:	9b b9       	out	0x0b, r25	; 11
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    12a0:	80 91 46 01 	lds	r24, 0x0146
    12a4:	81 11       	cpse	r24, r1
    12a6:	14 c0       	rjmp	.+40     	; 0x12d0 <oneway_turn_lab+0x44>
    12a8:	80 91 06 01 	lds	r24, 0x0106
    12ac:	90 91 07 01 	lds	r25, 0x0107
    12b0:	84 17       	cp	r24, r20
    12b2:	95 07       	cpc	r25, r21
    12b4:	24 f4       	brge	.+8      	; 0x12be <oneway_turn_lab+0x32>
		drive_forward();
    12b6:	5a d9       	rcall	.-3404   	; 0x56c <drive_forward>
		turn_done = false;
    12b8:	10 92 45 01 	sts	0x0145, r1
    12bc:	4d c0       	rjmp	.+154    	; 0x1358 <oneway_turn_lab+0xcc>
	}
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		turn_done = false;
    12be:	10 92 45 01 	sts	0x0145, r1
		ongoing_turn = true;
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    12c8:	80 93 47 01 	sts	0x0147, r24
		stand_still();
    12cc:	4a d9       	rcall	.-3436   	; 0x562 <stand_still>
    12ce:	44 c0       	rjmp	.+136    	; 0x1358 <oneway_turn_lab+0xcc>
	}
	else if(start_turn){	
    12d0:	80 91 47 01 	lds	r24, 0x0147
    12d4:	88 23       	and	r24, r24
    12d6:	d1 f0       	breq	.+52     	; 0x130c <oneway_turn_lab+0x80>
		start_turn = false;									//Roboten är inne i kurvan och redo o svänga 
    12d8:	10 92 47 01 	sts	0x0147, r1
		if(distance_left > st_value){						//Kollar avstånd till höger och vänster för att -												//se vilket håll det ska svängas och inleder sedan sväng
    12dc:	2c 17       	cp	r18, r28
    12de:	3d 07       	cpc	r19, r29
    12e0:	4c f4       	brge	.+18     	; 0x12f4 <oneway_turn_lab+0x68>
			req_gyro_turn();
    12e2:	cd de       	rcall	.-614    	; 0x107e <req_gyro_turn>
			turn_left();
    12e4:	4c d9       	rcall	.-3432   	; 0x57e <turn_left>
			regulate_side = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	90 93 3e 01 	sts	0x013E, r25
    12ee:	80 93 3d 01 	sts	0x013D, r24
    12f2:	32 c0       	rjmp	.+100    	; 0x1358 <oneway_turn_lab+0xcc>
		}
		else if(distance_right > st_value){
    12f4:	26 17       	cp	r18, r22
    12f6:	37 07       	cpc	r19, r23
    12f8:	7c f5       	brge	.+94     	; 0x1358 <oneway_turn_lab+0xcc>
			req_gyro_turn();
    12fa:	c1 de       	rcall	.-638    	; 0x107e <req_gyro_turn>
			turn_right();
    12fc:	47 d9       	rcall	.-3442   	; 0x58c <turn_right>
			regulate_side = 2;
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	90 93 3e 01 	sts	0x013E, r25
    1306:	80 93 3d 01 	sts	0x013D, r24
    130a:	26 c0       	rjmp	.+76     	; 0x1358 <oneway_turn_lab+0xcc>
		//previous_right = 0;
		//previous_left = 0;
		//return;
	}
	
	else if(ongoing_turn && !turn_done && (distance_left > st_value || distance_right > st_value)){					//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    130c:	80 91 45 01 	lds	r24, 0x0145
    1310:	81 11       	cpse	r24, r1
    1312:	22 c0       	rjmp	.+68     	; 0x1358 <oneway_turn_lab+0xcc>
    1314:	2c 17       	cp	r18, r28
    1316:	3d 07       	cpc	r19, r29
    1318:	1c f0       	brlt	.+6      	; 0x1320 <oneway_turn_lab+0x94>
    131a:	26 17       	cp	r18, r22
    131c:	37 07       	cpc	r19, r23
    131e:	6c f4       	brge	.+26     	; 0x133a <oneway_turn_lab+0xae>
		//count_waypoint = 0; //oneway_turn
		//gyro_turn = 0;
		if(regulate_side == 1)
    1320:	80 91 3d 01 	lds	r24, 0x013D
    1324:	90 91 3e 01 	lds	r25, 0x013E
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	21 f4       	brne	.+8      	; 0x1334 <oneway_turn_lab+0xa8>
			drive_forward_right(distance_right, distance_front);
    132c:	ba 01       	movw	r22, r20
    132e:	c8 01       	movw	r24, r16
    1330:	04 db       	rcall	.-2552   	; 0x93a <drive_forward_right>
    1332:	12 c0       	rjmp	.+36     	; 0x1358 <oneway_turn_lab+0xcc>
		else 
			drive_forward_left(distance_left);	
    1334:	ce 01       	movw	r24, r28
    1336:	48 da       	rcall	.-2928   	; 0x7c8 <drive_forward_left>
    1338:	0f c0       	rjmp	.+30     	; 0x1358 <oneway_turn_lab+0xcc>
		//drive_forward(); // Byt till left eller right beroende på riktning
	}
	
	else if(!turn_done && distance_left < st_value && distance_right < st_value /*&& previous_left < st_value && previous_right < st_value*/){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    133a:	c2 17       	cp	r28, r18
    133c:	d3 07       	cpc	r29, r19
    133e:	64 f4       	brge	.+24     	; 0x1358 <oneway_turn_lab+0xcc>
    1340:	62 17       	cp	r22, r18
    1342:	73 07       	cpc	r23, r19
    1344:	4c f4       	brge	.+18     	; 0x1358 <oneway_turn_lab+0xcc>
		turn_done = true;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	80 93 45 01 	sts	0x0145, r24
		oneway_turn = false;
    134c:	10 92 3b 01 	sts	0x013B, r1
		ongoing_turn = false;
    1350:	10 92 46 01 	sts	0x0146, r1
		//PORTD ^= (1 << PD0);
		prepare_special_case = false;
    1354:	10 92 43 01 	sts	0x0143, r1
	}
	previous_right = distance_right;
    1358:	10 93 42 01 	sts	0x0142, r17
    135c:	00 93 41 01 	sts	0x0141, r16
	previous_left = distance_left;
    1360:	d0 93 40 01 	sts	0x0140, r29
    1364:	c0 93 3f 01 	sts	0x013F, r28
}
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <twoway_turn_left_lab>:


//Måste testas
void twoway_turn_left_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram	
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
    137c:	8b 01       	movw	r16, r22
	PORTD ^= (1 << PD1);
    137e:	8b b1       	in	r24, 0x0b	; 11
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	98 27       	eor	r25, r24
    1384:	9b b9       	out	0x0b, r25	; 11
	if(!ongoing_turn /*&& ++count_waypoint <= 1*/){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1386:	80 91 46 01 	lds	r24, 0x0146
    138a:	81 11       	cpse	r24, r1
    138c:	0b c0       	rjmp	.+22     	; 0x13a4 <twoway_turn_left_lab+0x32>
		ongoing_turn = true;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    1394:	80 93 47 01 	sts	0x0147, r24
		stand_still();
    1398:	e4 d8       	rcall	.-3640   	; 0x562 <stand_still>
		turn_done = false;
    139a:	10 92 45 01 	sts	0x0145, r1
		first_time = false;
    139e:	10 92 0c 01 	sts	0x010C, r1
    13a2:	7d c0       	rjmp	.+250    	; 0x149e <twoway_turn_left_lab+0x12c>
		//count_waypoint = 0;
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    13a4:	80 91 47 01 	lds	r24, 0x0147
    13a8:	88 23       	and	r24, r24
    13aa:	e9 f0       	breq	.+58     	; 0x13e6 <twoway_turn_left_lab+0x74>
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    13ac:	10 92 47 01 	sts	0x0147, r1
		if(RGB_data != 3){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    13b0:	80 91 a5 01 	lds	r24, 0x01A5
    13b4:	83 30       	cpi	r24, 0x03	; 3
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <twoway_turn_left_lab+0x5e>
			drive_forward_right(distance_right, distance_front);
    13b8:	ba 01       	movw	r22, r20
    13ba:	c8 01       	movw	r24, r16
    13bc:	be da       	rcall	.-2692   	; 0x93a <drive_forward_right>
			turn_done = true;
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	80 93 45 01 	sts	0x0145, r24
			regler_against_wall = true;
    13c4:	80 93 44 01 	sts	0x0144, r24
			PORTD ^= (1<<PD0);
    13c8:	9b b1       	in	r25, 0x0b	; 11
    13ca:	89 27       	eor	r24, r25
    13cc:	8b b9       	out	0x0b, r24	; 11
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <twoway_turn_left_lab+0x62>
		}
		else {						//RGB säger att roboten ska svänga vänster så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    13d0:	56 de       	rcall	.-852    	; 0x107e <req_gyro_turn>
			turn_left();
    13d2:	d5 d8       	rcall	.-3670   	; 0x57e <turn_left>
		}
			
		previous_right = 0;
    13d4:	10 92 42 01 	sts	0x0142, r1
    13d8:	10 92 41 01 	sts	0x0141, r1
		previous_left = 0;
    13dc:	10 92 40 01 	sts	0x0140, r1
    13e0:	10 92 3f 01 	sts	0x013F, r1
		return;
    13e4:	6b c0       	rjmp	.+214    	; 0x14bc <twoway_turn_left_lab+0x14a>
	}
	
	// Rakt fram11
	else if(regler_against_wall && (distance_left > st_value )){
    13e6:	80 91 44 01 	lds	r24, 0x0144
    13ea:	88 23       	and	r24, r24
    13ec:	41 f0       	breq	.+16     	; 0x13fe <twoway_turn_left_lab+0x8c>
    13ee:	2c 17       	cp	r18, r28
    13f0:	3d 07       	cpc	r19, r29
    13f2:	0c f0       	brlt	.+2      	; 0x13f6 <twoway_turn_left_lab+0x84>
    13f4:	5d c0       	rjmp	.+186    	; 0x14b0 <twoway_turn_left_lab+0x13e>
		drive_forward_right(distance_right, distance_front);
    13f6:	ba 01       	movw	r22, r20
    13f8:	c8 01       	movw	r24, r16
    13fa:	9f da       	rcall	.-2754   	; 0x93a <drive_forward_right>
    13fc:	50 c0       	rjmp	.+160    	; 0x149e <twoway_turn_left_lab+0x12c>
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    13fe:	80 91 a5 01 	lds	r24, 0x01A5
    1402:	83 30       	cpi	r24, 0x03	; 3
    1404:	11 f1       	breq	.+68     	; 0x144a <twoway_turn_left_lab+0xd8>
    1406:	2c 17       	cp	r18, r28
    1408:	3d 07       	cpc	r19, r29
    140a:	44 f1       	brlt	.+80     	; 0x145c <twoway_turn_left_lab+0xea>
    140c:	20 17       	cp	r18, r16
    140e:	31 07       	cpc	r19, r17
    1410:	2c f1       	brlt	.+74     	; 0x145c <twoway_turn_left_lab+0xea>
    1412:	80 91 3f 01 	lds	r24, 0x013F
    1416:	90 91 40 01 	lds	r25, 0x0140
    141a:	82 17       	cp	r24, r18
    141c:	93 07       	cpc	r25, r19
    141e:	f4 f4       	brge	.+60     	; 0x145c <twoway_turn_left_lab+0xea>
    1420:	80 91 41 01 	lds	r24, 0x0141
    1424:	90 91 42 01 	lds	r25, 0x0142
    1428:	82 17       	cp	r24, r18
    142a:	93 07       	cpc	r25, r19
    142c:	bc f4       	brge	.+46     	; 0x145c <twoway_turn_left_lab+0xea>
		twoway_turn_left = false;
    142e:	10 92 3a 01 	sts	0x013A, r1
		first_time = true;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    1438:	10 92 46 01 	sts	0x0146, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    143c:	10 92 a5 01 	sts	0x01A5, r1
		regler_against_wall = false;
    1440:	10 92 44 01 	sts	0x0144, r1
		prepare_special_case = false;
    1444:	10 92 43 01 	sts	0x0143, r1
    1448:	2a c0       	rjmp	.+84     	; 0x149e <twoway_turn_left_lab+0x12c>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data == 3 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    144a:	80 91 45 01 	lds	r24, 0x0145
    144e:	81 11       	cpse	r24, r1
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <twoway_turn_left_lab+0xf2>
		turn_done = true;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	80 93 45 01 	sts	0x0145, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    1458:	89 d8       	rcall	.-3822   	; 0x56c <drive_forward>
    145a:	21 c0       	rjmp	.+66     	; 0x149e <twoway_turn_left_lab+0x12c>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    145c:	80 91 45 01 	lds	r24, 0x0145
    1460:	88 23       	and	r24, r24
    1462:	e9 f0       	breq	.+58     	; 0x149e <twoway_turn_left_lab+0x12c>
    1464:	c2 17       	cp	r28, r18
    1466:	d3 07       	cpc	r29, r19
    1468:	d4 f4       	brge	.+52     	; 0x149e <twoway_turn_left_lab+0x12c>
    146a:	02 17       	cp	r16, r18
    146c:	13 07       	cpc	r17, r19
    146e:	bc f4       	brge	.+46     	; 0x149e <twoway_turn_left_lab+0x12c>
    1470:	80 91 3f 01 	lds	r24, 0x013F
    1474:	90 91 40 01 	lds	r25, 0x0140
    1478:	82 17       	cp	r24, r18
    147a:	93 07       	cpc	r25, r19
    147c:	84 f4       	brge	.+32     	; 0x149e <twoway_turn_left_lab+0x12c>
    147e:	80 91 41 01 	lds	r24, 0x0141
    1482:	90 91 42 01 	lds	r25, 0x0142
    1486:	82 17       	cp	r24, r18
    1488:	93 07       	cpc	r25, r19
    148a:	4c f4       	brge	.+18     	; 0x149e <twoway_turn_left_lab+0x12c>
		twoway_turn_right = false;
    148c:	10 92 39 01 	sts	0x0139, r1
		ongoing_turn = false;
    1490:	10 92 46 01 	sts	0x0146, r1
		first_time = true;
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    149a:	10 92 43 01 	sts	0x0143, r1
	}
	previous_right = distance_right;
    149e:	10 93 42 01 	sts	0x0142, r17
    14a2:	00 93 41 01 	sts	0x0141, r16
	previous_left = distance_left;	
    14a6:	d0 93 40 01 	sts	0x0140, r29
    14aa:	c0 93 3f 01 	sts	0x013F, r28
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <twoway_turn_left_lab+0x14a>
	// Rakt fram11
	else if(regler_against_wall && (distance_left > st_value )){
		drive_forward_right(distance_right, distance_front);
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    14b0:	80 91 a5 01 	lds	r24, 0x01A5
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	09 f0       	breq	.+2      	; 0x14ba <twoway_turn_left_lab+0x148>
    14b8:	a9 cf       	rjmp	.-174    	; 0x140c <twoway_turn_left_lab+0x9a>
    14ba:	c7 cf       	rjmp	.-114    	; 0x144a <twoway_turn_left_lab+0xd8>
		first_time = true;
		prepare_special_case = false;
	}
	previous_right = distance_right;
	previous_left = distance_left;	
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	08 95       	ret

000014c6 <twoway_turn_right_lab>:


//INTE KLAR + måste testas
void twoway_turn_right_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
    14d0:	8b 01       	movw	r16, r22
	++count_waypoint;
    14d2:	e0 91 1b 01 	lds	r30, 0x011B
    14d6:	f0 91 1c 01 	lds	r31, 0x011C
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	f0 93 1c 01 	sts	0x011C, r31
    14e0:	e0 93 1b 01 	sts	0x011B, r30
	if(first_time){    //---kör fram i korsningen för att prepa sväng
    14e4:	80 91 0c 01 	lds	r24, 0x010C
    14e8:	88 23       	and	r24, r24
    14ea:	61 f0       	breq	.+24     	; 0x1504 <twoway_turn_right_lab+0x3e>
		drive_forward();
    14ec:	3f d8       	rcall	.-3970   	; 0x56c <drive_forward>
		turn_done = false;
    14ee:	10 92 45 01 	sts	0x0145, r1
		first_time = false;
    14f2:	10 92 0c 01 	sts	0x010C, r1
		count_waypoint = 0;
    14f6:	10 92 1c 01 	sts	0x011C, r1
    14fa:	10 92 1b 01 	sts	0x011B, r1
		ongoing_turn = false;
    14fe:	10 92 46 01 	sts	0x0146, r1
    1502:	6d c0       	rjmp	.+218    	; 0x15de <twoway_turn_right_lab+0x118>
	}
	else if(!ongoing_turn && count_waypoint>= 1){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1504:	80 91 46 01 	lds	r24, 0x0146
    1508:	81 11       	cpse	r24, r1
    150a:	0a c0       	rjmp	.+20     	; 0x1520 <twoway_turn_right_lab+0x5a>
    150c:	1e 16       	cp	r1, r30
    150e:	1f 06       	cpc	r1, r31
    1510:	3c f4       	brge	.+14     	; 0x1520 <twoway_turn_right_lab+0x5a>
		ongoing_turn = true;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    1518:	80 93 47 01 	sts	0x0147, r24
		stand_still();
    151c:	22 d8       	rcall	.-4028   	; 0x562 <stand_still>
    151e:	5f c0       	rjmp	.+190    	; 0x15de <twoway_turn_right_lab+0x118>
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1520:	90 91 47 01 	lds	r25, 0x0147
    1524:	99 23       	and	r25, r25
    1526:	c9 f0       	breq	.+50     	; 0x155a <twoway_turn_right_lab+0x94>
		if(RGB_data == 2){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    1528:	80 91 a5 01 	lds	r24, 0x01A5
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	41 f4       	brne	.+16     	; 0x1540 <twoway_turn_right_lab+0x7a>
			drive_forward_left(distance_left);
    1530:	ce 01       	movw	r24, r28
    1532:	4a d9       	rcall	.-3436   	; 0x7c8 <drive_forward_left>
			turn_done = true;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 45 01 	sts	0x0145, r24
			regler_against_wall = true;
    153a:	80 93 44 01 	sts	0x0144, r24
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <twoway_turn_right_lab+0x7e>
		}
		else {						//RGB säger att roboten ska svänga höger så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    1540:	9e dd       	rcall	.-1220   	; 0x107e <req_gyro_turn>
			turn_right();
    1542:	24 d8       	rcall	.-4024   	; 0x58c <turn_right>
		}	
		previous_right = 0;
    1544:	10 92 42 01 	sts	0x0142, r1
    1548:	10 92 41 01 	sts	0x0141, r1
		previous_left = 0;
    154c:	10 92 40 01 	sts	0x0140, r1
    1550:	10 92 3f 01 	sts	0x013F, r1
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    1554:	10 92 47 01 	sts	0x0147, r1
		return;
    1558:	53 c0       	rjmp	.+166    	; 0x1600 <twoway_turn_right_lab+0x13a>
	}
	
	// Rakt fram
	else if(regler_against_wall && (distance_right > st_value )){
    155a:	90 91 44 01 	lds	r25, 0x0144
    155e:	99 23       	and	r25, r25
    1560:	31 f0       	breq	.+12     	; 0x156e <twoway_turn_right_lab+0xa8>
    1562:	20 17       	cp	r18, r16
    1564:	31 07       	cpc	r19, r17
    1566:	1c f4       	brge	.+6      	; 0x156e <twoway_turn_right_lab+0xa8>
		drive_forward_left(distance_left);
    1568:	ce 01       	movw	r24, r28
    156a:	2e d9       	rcall	.-3492   	; 0x7c8 <drive_forward_left>
    156c:	38 c0       	rjmp	.+112    	; 0x15de <twoway_turn_right_lab+0x118>
	}
	
	else if(RGB_data == 2 && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    156e:	90 91 a5 01 	lds	r25, 0x01A5
    1572:	92 30       	cpi	r25, 0x02	; 2
    1574:	e9 f5       	brne	.+122    	; 0x15f0 <twoway_turn_right_lab+0x12a>
    1576:	c2 17       	cp	r28, r18
    1578:	d3 07       	cpc	r29, r19
    157a:	8c f5       	brge	.+98     	; 0x15de <twoway_turn_right_lab+0x118>
    157c:	02 17       	cp	r16, r18
    157e:	13 07       	cpc	r17, r19
    1580:	74 f5       	brge	.+92     	; 0x15de <twoway_turn_right_lab+0x118>
    1582:	24 17       	cp	r18, r20
    1584:	35 07       	cpc	r19, r21
    1586:	bc f5       	brge	.+110    	; 0x15f6 <twoway_turn_right_lab+0x130>
		twoway_turn_right = false;
    1588:	10 92 39 01 	sts	0x0139, r1
		first_time = true;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    1592:	10 92 46 01 	sts	0x0146, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    1596:	10 92 a5 01 	sts	0x01A5, r1
		regler_against_wall = false;
    159a:	10 92 44 01 	sts	0x0144, r1
		prepare_special_case = false;
    159e:	10 92 43 01 	sts	0x0143, r1
    15a2:	1d c0       	rjmp	.+58     	; 0x15de <twoway_turn_right_lab+0x118>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    15a4:	80 91 45 01 	lds	r24, 0x0145
    15a8:	81 11       	cpse	r24, r1
    15aa:	0a c0       	rjmp	.+20     	; 0x15c0 <twoway_turn_right_lab+0xfa>
		turn_done = true;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 93 45 01 	sts	0x0145, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    15b2:	0e 94 b6 02 	call	0x56c	; 0x56c <drive_forward>
    15b6:	13 c0       	rjmp	.+38     	; 0x15de <twoway_turn_right_lab+0x118>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    15b8:	80 91 45 01 	lds	r24, 0x0145
    15bc:	88 23       	and	r24, r24
    15be:	79 f0       	breq	.+30     	; 0x15de <twoway_turn_right_lab+0x118>
    15c0:	c2 17       	cp	r28, r18
    15c2:	d3 07       	cpc	r29, r19
    15c4:	64 f4       	brge	.+24     	; 0x15de <twoway_turn_right_lab+0x118>
    15c6:	02 17       	cp	r16, r18
    15c8:	13 07       	cpc	r17, r19
    15ca:	4c f4       	brge	.+18     	; 0x15de <twoway_turn_right_lab+0x118>
		twoway_turn_right = false;
    15cc:	10 92 39 01 	sts	0x0139, r1
		ongoing_turn = false;
    15d0:	10 92 46 01 	sts	0x0146, r1
		first_time = true;
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    15da:	10 92 43 01 	sts	0x0143, r1
	}
	previous_right = distance_right;
    15de:	10 93 42 01 	sts	0x0142, r17
    15e2:	00 93 41 01 	sts	0x0141, r16
	previous_left = distance_left;
    15e6:	d0 93 40 01 	sts	0x0140, r29
    15ea:	c0 93 3f 01 	sts	0x013F, r28
    15ee:	08 c0       	rjmp	.+16     	; 0x1600 <twoway_turn_right_lab+0x13a>
		regler_against_wall = false;
		prepare_special_case = false;
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    15f0:	81 11       	cpse	r24, r1
    15f2:	d8 cf       	rjmp	.-80     	; 0x15a4 <twoway_turn_right_lab+0xde>
    15f4:	e1 cf       	rjmp	.-62     	; 0x15b8 <twoway_turn_right_lab+0xf2>
		turn_done = true;
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    15f6:	80 91 45 01 	lds	r24, 0x0145
    15fa:	88 23       	and	r24, r24
    15fc:	81 f3       	breq	.-32     	; 0x15de <twoway_turn_right_lab+0x118>
    15fe:	e6 cf       	rjmp	.-52     	; 0x15cc <twoway_turn_right_lab+0x106>
		first_time = true;
		prepare_special_case = false;
	}
	previous_right = distance_right;
	previous_left = distance_left;
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
    160a:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
    160c:	40 91 9e 01 	lds	r20, 0x019E
    1610:	50 e0       	ldi	r21, 0x00	; 0
	int sensor_right_tmp = distans_right;
    1612:	60 91 a6 01 	lds	r22, 0x01A6
    1616:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
    1618:	80 91 a1 01 	lds	r24, 0x01A1
    161c:	90 e0       	ldi	r25, 0x00	; 0
	sei();
    161e:	78 94       	sei
	int st_value = 40;
	int st_value_front = 50;
	/*if(true)      //testplats för reglering
		drive_forward_right(sensor_right_tmp, sensor_front_tmp);
	else*/ if(waypoint){
    1620:	20 91 3c 01 	lds	r18, 0x013C
    1624:	22 23       	and	r18, r18
    1626:	21 f0       	breq	.+8      	; 0x1630 <labyreg+0x26>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1628:	28 e2       	ldi	r18, 0x28	; 40
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	e4 cd       	rjmp	.-1080   	; 0x11f6 <waypoint_lab>
		return;	
    162e:	08 95       	ret
	}
	else if(oneway_turn){
    1630:	20 91 3b 01 	lds	r18, 0x013B
    1634:	22 23       	and	r18, r18
    1636:	21 f0       	breq	.+8      	; 0x1640 <labyreg+0x36>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1638:	28 e2       	ldi	r18, 0x28	; 40
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	27 ce       	rjmp	.-946    	; 0x128c <oneway_turn_lab>
		return;
    163e:	08 95       	ret
	}
	else if(twoway_turn_left){
    1640:	20 91 3a 01 	lds	r18, 0x013A
    1644:	22 23       	and	r18, r18
    1646:	21 f0       	breq	.+8      	; 0x1650 <labyreg+0x46>
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1648:	28 e2       	ldi	r18, 0x28	; 40
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	92 ce       	rjmp	.-732    	; 0x1372 <twoway_turn_left_lab>
		return;
    164e:	08 95       	ret
	}
	else if(twoway_turn_right){
    1650:	20 91 39 01 	lds	r18, 0x0139
    1654:	22 23       	and	r18, r18
    1656:	21 f0       	breq	.+8      	; 0x1660 <labyreg+0x56>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1658:	28 e2       	ldi	r18, 0x28	; 40
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	34 cf       	rjmp	.-408    	; 0x14c6 <twoway_turn_right_lab>
		return;
    165e:	08 95       	ret
	}	
	
	else if(count_waypoint < 3){
    1660:	20 91 1b 01 	lds	r18, 0x011B
    1664:	30 91 1c 01 	lds	r19, 0x011C
    1668:	23 30       	cpi	r18, 0x03	; 3
    166a:	31 05       	cpc	r19, r1
    166c:	5c f4       	brge	.+22     	; 0x1684 <labyreg+0x7a>
		count_waypoint++;
    166e:	2f 5f       	subi	r18, 0xFF	; 255
    1670:	3f 4f       	sbci	r19, 0xFF	; 255
    1672:	30 93 1c 01 	sts	0x011C, r19
    1676:	20 93 1b 01 	sts	0x011B, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    167a:	81 e3       	ldi	r24, 0x31	; 49
    167c:	8a 95       	dec	r24
    167e:	f1 f7       	brne	.-4      	; 0x167c <labyreg+0x72>
    1680:	00 00       	nop
    1682:	08 95       	ret
		_delay_us(10);
	}
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
    1684:	88 32       	cpi	r24, 0x28	; 40
    1686:	91 05       	cpc	r25, r1
    1688:	3c f4       	brge	.+14     	; 0x1698 <labyreg+0x8e>
    168a:	68 32       	cpi	r22, 0x28	; 40
    168c:	71 05       	cpc	r23, r1
    168e:	0c f0       	brlt	.+2      	; 0x1692 <labyreg+0x88>
    1690:	66 c0       	rjmp	.+204    	; 0x175e <labyreg+0x154>
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
    1692:	0c 94 cd 02 	jmp	0x59a	; 0x59a <PD_for_lab>
    1696:	08 95       	ret
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case && sensor_front_tmp >= st_value_front){
    1698:	20 91 43 01 	lds	r18, 0x0143
    169c:	21 11       	cpse	r18, r1
    169e:	0e c0       	rjmp	.+28     	; 0x16bc <labyreg+0xb2>
    16a0:	42 33       	cpi	r20, 0x32	; 50
    16a2:	51 05       	cpc	r21, r1
    16a4:	0c f4       	brge	.+2      	; 0x16a8 <labyreg+0x9e>
    16a6:	4f c0       	rjmp	.+158    	; 0x1746 <labyreg+0x13c>
		prepare_special_case = true;
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	80 93 43 01 	sts	0x0143, r24
		count_waypoint = 0;
    16ae:	10 92 1c 01 	sts	0x011C, r1
    16b2:	10 92 1b 01 	sts	0x011B, r1
		drive_forward();
    16b6:	0c 94 b6 02 	jmp	0x56c	; 0x56c <drive_forward>
    16ba:	08 95       	ret
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
    16bc:	88 32       	cpi	r24, 0x28	; 40
    16be:	91 05       	cpc	r25, r1
    16c0:	0c f0       	brlt	.+2      	; 0x16c4 <labyreg+0xba>
    16c2:	52 c0       	rjmp	.+164    	; 0x1768 <labyreg+0x15e>
    16c4:	42 33       	cpi	r20, 0x32	; 50
    16c6:	51 05       	cpc	r21, r1
    16c8:	0c f0       	brlt	.+2      	; 0x16cc <labyreg+0xc2>
    16ca:	58 c0       	rjmp	.+176    	; 0x177c <labyreg+0x172>
    16cc:	69 32       	cpi	r22, 0x29	; 41
    16ce:	71 05       	cpc	r23, r1
    16d0:	0c f4       	brge	.+2      	; 0x16d4 <labyreg+0xca>
    16d2:	3d c0       	rjmp	.+122    	; 0x174e <labyreg+0x144>
    16d4:	06 c0       	rjmp	.+12     	; 0x16e2 <labyreg+0xd8>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    16d6:	42 33       	cpi	r20, 0x32	; 50
    16d8:	51 05       	cpc	r21, r1
    16da:	a4 f4       	brge	.+40     	; 0x1704 <labyreg+0xfa>
    16dc:	68 32       	cpi	r22, 0x28	; 40
    16de:	71 05       	cpc	r23, r1
    16e0:	3c f4       	brge	.+14     	; 0x16f0 <labyreg+0xe6>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16e2:	28 e2       	ldi	r18, 0x28	; 40
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	d2 dd       	rcall	.-1116   	; 0x128c <oneway_turn_lab>
		oneway_turn = true;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	80 93 3b 01 	sts	0x013B, r24
    16ee:	08 95       	ret
		
	}
	
	//t-korsning rakt framifrån
	else if((sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value))	{	
    16f0:	69 32       	cpi	r22, 0x29	; 41
    16f2:	71 05       	cpc	r23, r1
    16f4:	3c f0       	brlt	.+14     	; 0x1704 <labyreg+0xfa>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16f6:	28 e2       	ldi	r18, 0x28	; 40
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	7d dd       	rcall	.-1286   	; 0x11f6 <waypoint_lab>
		waypoint = true;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	80 93 3c 01 	sts	0x013C, r24
    1702:	08 95       	ret
		//PORTD |= (1 << PD1);
		
	}
	
	// T-korsning där roboten kan köra framåt eller åt vänster
	else if(sensor_left_tmp > st_value && sensor_front_tmp > st_value_front && sensor_right_tmp < st_value){
    1704:	43 33       	cpi	r20, 0x33	; 51
    1706:	51 05       	cpc	r21, r1
    1708:	d4 f0       	brlt	.+52     	; 0x173e <labyreg+0x134>
    170a:	68 32       	cpi	r22, 0x28	; 40
    170c:	71 05       	cpc	r23, r1
    170e:	1c f5       	brge	.+70     	; 0x1756 <labyreg+0x14c>
		twoway_turn_left = true;
    1710:	21 e0       	ldi	r18, 0x01	; 1
    1712:	20 93 3a 01 	sts	0x013A, r18
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1716:	28 e2       	ldi	r18, 0x28	; 40
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	2b ce       	rjmp	.-938    	; 0x1372 <twoway_turn_left_lab>
    171c:	08 95       	ret
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    171e:	88 32       	cpi	r24, 0x28	; 40
    1720:	91 05       	cpc	r25, r1
    1722:	6c f4       	brge	.+26     	; 0x173e <labyreg+0x134>
    1724:	43 33       	cpi	r20, 0x33	; 51
    1726:	51 05       	cpc	r21, r1
    1728:	54 f0       	brlt	.+20     	; 0x173e <labyreg+0x134>
    172a:	69 32       	cpi	r22, 0x29	; 41
    172c:	71 05       	cpc	r23, r1
    172e:	3c f0       	brlt	.+14     	; 0x173e <labyreg+0x134>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1730:	28 e2       	ldi	r18, 0x28	; 40
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	c8 de       	rcall	.-624    	; 0x14c6 <twoway_turn_right_lab>
		twoway_turn_right = true;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	80 93 39 01 	sts	0x0139, r24
    173c:	08 95       	ret
	}
	else{
		req_gyro_turn();
    173e:	9f dc       	rcall	.-1730   	; 0x107e <req_gyro_turn>
		turn_left();
    1740:	0c 94 bf 02 	jmp	0x57e	; 0x57e <turn_left>
    1744:	08 95       	ret
		count_waypoint = 0;
		drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
    1746:	88 32       	cpi	r24, 0x28	; 40
    1748:	91 05       	cpc	r25, r1
    174a:	9c f4       	brge	.+38     	; 0x1772 <labyreg+0x168>
    174c:	bf cf       	rjmp	.-130    	; 0x16cc <labyreg+0xc2>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    174e:	89 32       	cpi	r24, 0x29	; 41
    1750:	91 05       	cpc	r25, r1
    1752:	cc f4       	brge	.+50     	; 0x1786 <labyreg+0x17c>
    1754:	e4 cf       	rjmp	.-56     	; 0x171e <labyreg+0x114>
		twoway_turn_left = true;
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    1756:	88 32       	cpi	r24, 0x28	; 40
    1758:	91 05       	cpc	r25, r1
    175a:	3c f3       	brlt	.-50     	; 0x172a <labyreg+0x120>
    175c:	f0 cf       	rjmp	.-32     	; 0x173e <labyreg+0x134>
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
	
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case && sensor_front_tmp >= st_value_front){
    175e:	20 91 43 01 	lds	r18, 0x0143
    1762:	21 11       	cpse	r18, r1
    1764:	af cf       	rjmp	.-162    	; 0x16c4 <labyreg+0xba>
    1766:	9c cf       	rjmp	.-200    	; 0x16a0 <labyreg+0x96>
		drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    1768:	89 32       	cpi	r24, 0x29	; 41
    176a:	91 05       	cpc	r25, r1
    176c:	0c f0       	brlt	.+2      	; 0x1770 <labyreg+0x166>
    176e:	b3 cf       	rjmp	.-154    	; 0x16d6 <labyreg+0xcc>
    1770:	e6 cf       	rjmp	.-52     	; 0x173e <labyreg+0x134>
    1772:	89 32       	cpi	r24, 0x29	; 41
    1774:	91 05       	cpc	r25, r1
    1776:	0c f0       	brlt	.+2      	; 0x177a <labyreg+0x170>
    1778:	b1 cf       	rjmp	.-158    	; 0x16dc <labyreg+0xd2>
    177a:	d1 cf       	rjmp	.-94     	; 0x171e <labyreg+0x114>
    177c:	89 32       	cpi	r24, 0x29	; 41
    177e:	91 05       	cpc	r25, r1
    1780:	0c f0       	brlt	.+2      	; 0x1784 <labyreg+0x17a>
    1782:	c0 cf       	rjmp	.-128    	; 0x1704 <labyreg+0xfa>
    1784:	cc cf       	rjmp	.-104    	; 0x171e <labyreg+0x114>
    1786:	68 32       	cpi	r22, 0x28	; 40
    1788:	71 05       	cpc	r23, r1
    178a:	0c f0       	brlt	.+2      	; 0x178e <labyreg+0x184>
    178c:	bb cf       	rjmp	.-138    	; 0x1704 <labyreg+0xfa>
    178e:	a9 cf       	rjmp	.-174    	; 0x16e2 <labyreg+0xd8>

00001790 <regulator>:
		//motor_right = 60;
		//PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
		//PORTB |= (1 << motor_dir_left);									// Set motor direction to backward
//	}

	if((regulator_mode == 1) && (regler_ready_linje == 1)){
    1790:	80 91 62 01 	lds	r24, 0x0162
    1794:	90 91 63 01 	lds	r25, 0x0163
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	91 05       	cpc	r25, r1
    179c:	61 f4       	brne	.+24     	; 0x17b6 <regulator+0x26>
    179e:	80 91 60 01 	lds	r24, 0x0160
    17a2:	90 91 61 01 	lds	r25, 0x0161
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	89 f4       	brne	.+34     	; 0x17cc <regulator+0x3c>
		linje_main();
    17aa:	e1 da       	rcall	.-2622   	; 0xd6e <linje_main>
		regler_ready_linje = 0;
    17ac:	10 92 61 01 	sts	0x0161, r1
    17b0:	10 92 60 01 	sts	0x0160, r1
    17b4:	08 95       	ret
	}

	else if(regulator_mode == 0){	
    17b6:	89 2b       	or	r24, r25
    17b8:	49 f4       	brne	.+18     	; 0x17cc <regulator+0x3c>
		
		PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    17ba:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_left);	
    17bc:	2e 98       	cbi	0x05, 6	; 5
		if(updaterad_labyrint == true){
    17be:	80 91 5f 01 	lds	r24, 0x015F
    17c2:	88 23       	and	r24, r24
    17c4:	19 f0       	breq	.+6      	; 0x17cc <regulator+0x3c>
		
			updaterad_labyrint = false;
    17c6:	10 92 5f 01 	sts	0x015F, r1
			labyreg();//kalla pÃ¥ labyrint funktion
    17ca:	1f cf       	rjmp	.-450    	; 0x160a <labyreg>
    17cc:	08 95       	ret

000017ce <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
    17ce:	ec eb       	ldi	r30, 0xBC	; 188
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	90 81       	ld	r25, Z
    17d4:	94 6a       	ori	r25, 0xA4	; 164
    17d6:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
    17d8:	90 81       	ld	r25, Z
    17da:	99 23       	and	r25, r25
    17dc:	ec f7       	brge	.-6      	; 0x17d8 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
    17de:	90 91 b9 00 	lds	r25, 0x00B9
    17e2:	98 7f       	andi	r25, 0xF8	; 248
    17e4:	98 30       	cpi	r25, 0x08	; 8
    17e6:	29 f0       	breq	.+10     	; 0x17f2 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    17e8:	84 e9       	ldi	r24, 0x94	; 148
    17ea:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
    17f2:	81 60       	ori	r24, 0x01	; 1
    17f4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    17f8:	84 e8       	ldi	r24, 0x84	; 132
    17fa:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
    17fe:	ec eb       	ldi	r30, 0xBC	; 188
    1800:	f0 e0       	ldi	r31, 0x00	; 0
    1802:	80 81       	ld	r24, Z
    1804:	88 23       	and	r24, r24
    1806:	ec f7       	brge	.-6      	; 0x1802 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
    1808:	80 91 b9 00 	lds	r24, 0x00B9
    180c:	88 7f       	andi	r24, 0xF8	; 248
    180e:	80 34       	cpi	r24, 0x40	; 64
    1810:	29 f0       	breq	.+10     	; 0x181c <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1812:	84 e9       	ldi	r24, 0x94	; 148
    1814:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
    181c:	ec eb       	ldi	r30, 0xBC	; 188
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	84 68       	ori	r24, 0x84	; 132
    1824:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    1826:	80 81       	ld	r24, Z
    1828:	88 23       	and	r24, r24
    182a:	ec f7       	brge	.-6      	; 0x1826 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data = TWDR; //ta emot data 
    182c:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1830:	94 e9       	ldi	r25, 0x94	; 148
    1832:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
    1836:	08 95       	ret

00001838 <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
    1838:	20 91 20 01 	lds	r18, 0x0120
    183c:	30 91 21 01 	lds	r19, 0x0121
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	89 f4       	brne	.+34     	; 0x1868 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
    1846:	28 2f       	mov	r18, r24
    1848:	22 95       	swap	r18
    184a:	2f 70       	andi	r18, 0x0F	; 15
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	30 93 1f 01 	sts	0x011F, r19
    1852:	20 93 1e 01 	sts	0x011E, r18
		i2c_data[counter] = data;
    1856:	80 93 89 01 	sts	0x0189, r24
		counter++;
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	90 93 21 01 	sts	0x0121, r25
    1862:	80 93 20 01 	sts	0x0120, r24
    1866:	18 c0       	rjmp	.+48     	; 0x1898 <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
    1868:	40 91 1e 01 	lds	r20, 0x011E
    186c:	50 91 1f 01 	lds	r21, 0x011F
    1870:	4f 5f       	subi	r20, 0xFF	; 255
    1872:	5f 4f       	sbci	r21, 0xFF	; 255
    1874:	24 17       	cp	r18, r20
    1876:	35 07       	cpc	r19, r21
    1878:	5c f4       	brge	.+22     	; 0x1890 <i2c_store_data+0x58>
		i2c_data[counter] = data;
    187a:	f9 01       	movw	r30, r18
    187c:	e7 57       	subi	r30, 0x77	; 119
    187e:	fe 4f       	sbci	r31, 0xFE	; 254
    1880:	80 83       	st	Z, r24
		counter++;
    1882:	2f 5f       	subi	r18, 0xFF	; 255
    1884:	3f 4f       	sbci	r19, 0xFF	; 255
    1886:	30 93 21 01 	sts	0x0121, r19
    188a:	20 93 20 01 	sts	0x0120, r18
    188e:	04 c0       	rjmp	.+8      	; 0x1898 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
    1890:	f9 01       	movw	r30, r18
    1892:	e7 57       	subi	r30, 0x77	; 119
    1894:	fe 4f       	sbci	r31, 0xFE	; 254
    1896:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
    1898:	80 91 1e 01 	lds	r24, 0x011E
    189c:	90 91 1f 01 	lds	r25, 0x011F
    18a0:	01 96       	adiw	r24, 0x01	; 1
    18a2:	20 91 20 01 	lds	r18, 0x0120
    18a6:	30 91 21 01 	lds	r19, 0x0121
    18aa:	28 17       	cp	r18, r24
    18ac:	39 07       	cpc	r19, r25
    18ae:	44 f0       	brlt	.+16     	; 0x18c0 <i2c_store_data+0x88>
		i2c_newdata = true;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	80 93 28 01 	sts	0x0128, r24
		counter = 0;
    18b6:	10 92 21 01 	sts	0x0121, r1
    18ba:	10 92 20 01 	sts	0x0120, r1
		EIMSK &= ~(1<<INT0);
    18be:	e8 98       	cbi	0x1d, 0	; 29
    18c0:	08 95       	ret

000018c2 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
    18c2:	1f 92       	push	r1
    18c4:	0f 92       	push	r0
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	0f 92       	push	r0
    18ca:	11 24       	eor	r1, r1
    18cc:	0b b6       	in	r0, 0x3b	; 59
    18ce:	0f 92       	push	r0
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
    18e8:	85 e0       	ldi	r24, 0x05	; 5
    18ea:	8a 95       	dec	r24
    18ec:	f1 f7       	brne	.-4      	; 0x18ea <__vector_1+0x28>
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
    18ee:	36 9b       	sbis	0x06, 6	; 6
    18f0:	04 c0       	rjmp	.+8      	; 0x18fa <__vector_1+0x38>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
    18f2:	82 e0       	ldi	r24, 0x02	; 2
    18f4:	6c df       	rcall	.-296    	; 0x17ce <i2c_recive>
    18f6:	a0 df       	rcall	.-192    	; 0x1838 <i2c_store_data>
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <__vector_1+0x42>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
    18fa:	37 9b       	sbis	0x06, 7	; 6
    18fc:	03 c0       	rjmp	.+6      	; 0x1904 <__vector_1+0x42>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
    18fe:	86 e0       	ldi	r24, 0x06	; 6
    1900:	66 df       	rcall	.-308    	; 0x17ce <i2c_recive>
    1902:	9a df       	rcall	.-204    	; 0x1838 <i2c_store_data>
	}
}
    1904:	ff 91       	pop	r31
    1906:	ef 91       	pop	r30
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	0f 90       	pop	r0
    191e:	0b be       	out	0x3b, r0	; 59
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
    192a:	80 91 28 01 	lds	r24, 0x0128
    192e:	88 23       	and	r24, r24
    1930:	09 f4       	brne	.+2      	; 0x1934 <i2c_handel_data+0xa>
    1932:	18 c1       	rjmp	.+560    	; 0x1b64 <i2c_handel_data+0x23a>
	{
		i2c_newdata=false;
    1934:	10 92 28 01 	sts	0x0128, r1
		if(!((i2c_data[0]>>3)&0x01)){
    1938:	80 91 89 01 	lds	r24, 0x0189
    193c:	83 fd       	sbrc	r24, 3
    193e:	0a c0       	rjmp	.+20     	; 0x1954 <i2c_handel_data+0x2a>
    1940:	81 e5       	ldi	r24, 0x51	; 81
    1942:	94 e0       	ldi	r25, 0x04	; 4
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <i2c_handel_data+0x1a>
    1948:	00 c0       	rjmp	.+0      	; 0x194a <i2c_handel_data+0x20>
    194a:	00 00       	nop
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
    194c:	69 e8       	ldi	r22, 0x89	; 137
    194e:	71 e0       	ldi	r23, 0x01	; 1
    1950:	82 e0       	ldi	r24, 0x02	; 2
    1952:	27 db       	rcall	.-2482   	; 0xfa2 <i2c_send>
		}
		
		switch (i2c_data[0] & 0x0f){
    1954:	80 91 89 01 	lds	r24, 0x0189
    1958:	e8 2f       	mov	r30, r24
    195a:	ef 70       	andi	r30, 0x0F	; 15
    195c:	8e 2f       	mov	r24, r30
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	fc 01       	movw	r30, r24
    1962:	ea 5b       	subi	r30, 0xBA	; 186
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	65 c3       	rjmp	.+1738   	; 0x2032 <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
    1968:	80 91 8a 01 	lds	r24, 0x018A
    196c:	80 93 a2 01 	sts	0x01A2, r24
				break;
    1970:	f8 c0       	rjmp	.+496    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x01 ://avståndssensorer
				distans_right = i2c_data[3];
    1972:	e9 e8       	ldi	r30, 0x89	; 137
    1974:	f1 e0       	ldi	r31, 0x01	; 1
    1976:	83 81       	ldd	r24, Z+3	; 0x03
    1978:	80 93 a6 01 	sts	0x01A6, r24
				distans_fram = i2c_data[2];;
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	80 93 9e 01 	sts	0x019E, r24
				distans_left = i2c_data[1];
    1982:	81 81       	ldd	r24, Z+1	; 0x01
    1984:	80 93 a1 01 	sts	0x01A1, r24
				//updaterad_labyrint = true;
				break;
    1988:	ec c0       	rjmp	.+472    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x02 :// refelxsensor data
				regler_ready_linje = 1;					// Ny data har lästs in då uppdaterar vi regleringen
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	90 93 61 01 	sts	0x0161, r25
    1992:	80 93 60 01 	sts	0x0160, r24
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
    1996:	e9 e8       	ldi	r30, 0x89	; 137
    1998:	f1 e0       	ldi	r31, 0x01	; 1
    199a:	82 81       	ldd	r24, Z+2	; 0x02
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	98 2f       	mov	r25, r24
    19a0:	88 27       	eor	r24, r24
    19a2:	21 81       	ldd	r18, Z+1	; 0x01
    19a4:	82 0f       	add	r24, r18
    19a6:	91 1d       	adc	r25, r1
    19a8:	90 93 99 01 	sts	0x0199, r25
    19ac:	80 93 98 01 	sts	0x0198, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
    19b0:	83 81       	ldd	r24, Z+3	; 0x03
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	90 93 bc 01 	sts	0x01BC, r25
    19b8:	80 93 bb 01 	sts	0x01BB, r24
				break;
    19bc:	d2 c0       	rjmp	.+420    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x03 :
				RGB_data=1;//"röd";"
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	80 93 a5 01 	sts	0x01A5, r24
				break;
    19c4:	ce c0       	rjmp	.+412    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x04 :
				RGB_data=2;//"grön";
    19c6:	82 e0       	ldi	r24, 0x02	; 2
    19c8:	80 93 a5 01 	sts	0x01A5, r24
				break;		
    19cc:	ca c0       	rjmp	.+404    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x05 :
				RGB_data=3;//"blå";
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	80 93 a5 01 	sts	0x01A5, r24
				break;
    19d4:	c6 c0       	rjmp	.+396    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x06 : // gyro klart
				gyro_90 = true;
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	80 93 74 01 	sts	0x0174, r24
				turning = false;
    19dc:	10 92 5e 01 	sts	0x015E, r1
				motor_right = 0;
    19e0:	18 bc       	out	0x28, r1	; 40
				motor_left = 0;
    19e2:	17 bc       	out	0x27, r1	; 39
				updaterad_labyrint = false;
    19e4:	10 92 5f 01 	sts	0x015F, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19e8:	9f ef       	ldi	r25, 0xFF	; 255
    19ea:	2f e7       	ldi	r18, 0x7F	; 127
    19ec:	86 e1       	ldi	r24, 0x16	; 22
    19ee:	91 50       	subi	r25, 0x01	; 1
    19f0:	20 40       	sbci	r18, 0x00	; 0
    19f2:	80 40       	sbci	r24, 0x00	; 0
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <i2c_handel_data+0xc4>
    19f6:	00 c0       	rjmp	.+0      	; 0x19f8 <i2c_handel_data+0xce>
    19f8:	00 00       	nop
    19fa:	b3 c0       	rjmp	.+358    	; 0x1b62 <i2c_handel_data+0x238>
				break;
			case 0x07 :// gyro data
				// Kod vi skickar till sensor
				break;
			case 0x08 : // manuel stå still
				manual_function=0;
    19fc:	10 92 53 01 	sts	0x0153, r1
    1a00:	10 92 52 01 	sts	0x0152, r1
				break;
    1a04:	ae c0       	rjmp	.+348    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	90 93 53 01 	sts	0x0153, r25
    1a0e:	80 93 52 01 	sts	0x0152, r24
				break;
    1a12:	a7 c0       	rjmp	.+334    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	90 93 53 01 	sts	0x0153, r25
    1a1c:	80 93 52 01 	sts	0x0152, r24
				break;
    1a20:	a0 c0       	rjmp	.+320    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x0b ://manuel vänster fram
				manual_function=4;
    1a22:	84 e0       	ldi	r24, 0x04	; 4
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	90 93 53 01 	sts	0x0153, r25
    1a2a:	80 93 52 01 	sts	0x0152, r24
				break;
    1a2e:	99 c0       	rjmp	.+306    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x0c ://manuel höger fram
				manual_function=3;
    1a30:	83 e0       	ldi	r24, 0x03	; 3
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	90 93 53 01 	sts	0x0153, r25
    1a38:	80 93 52 01 	sts	0x0152, r24
				break;
    1a3c:	92 c0       	rjmp	.+292    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
    1a3e:	86 e0       	ldi	r24, 0x06	; 6
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	90 93 53 01 	sts	0x0153, r25
    1a46:	80 93 52 01 	sts	0x0152, r24
				break;
    1a4a:	8b c0       	rjmp	.+278    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
    1a4c:	85 e0       	ldi	r24, 0x05	; 5
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	90 93 53 01 	sts	0x0153, r25
    1a54:	80 93 52 01 	sts	0x0152, r24
				break;
    1a58:	84 c0       	rjmp	.+264    	; 0x1b62 <i2c_handel_data+0x238>
			case 0x0f :	// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
    1a5a:	80 91 8a 01 	lds	r24, 0x018A
    1a5e:	80 3f       	cpi	r24, 0xF0	; 240
    1a60:	11 f5       	brne	.+68     	; 0x1aa6 <i2c_handel_data+0x17c>
					if(start==1){
    1a62:	80 91 6e 01 	lds	r24, 0x016E
    1a66:	90 91 6f 01 	lds	r25, 0x016F
    1a6a:	01 97       	sbiw	r24, 0x01	; 1
    1a6c:	29 f4       	brne	.+10     	; 0x1a78 <i2c_handel_data+0x14e>
						start=0;
    1a6e:	10 92 6f 01 	sts	0x016F, r1
    1a72:	10 92 6e 01 	sts	0x016E, r1
    1a76:	75 c0       	rjmp	.+234    	; 0x1b62 <i2c_handel_data+0x238>
    1a78:	e5 e7       	ldi	r30, 0x75	; 117
    1a7a:	f1 e0       	ldi	r31, 0x01	; 1
    1a7c:	a7 ea       	ldi	r26, 0xA7	; 167
    1a7e:	b1 e0       	ldi	r27, 0x01	; 1
    1a80:	8f e7       	ldi	r24, 0x7F	; 127
    1a82:	91 e0       	ldi	r25, 0x01	; 1
					}
					else{
						for(int i = 0; i < 5; i++){						
							previous_errors_right[i] = 0;
    1a84:	11 92       	st	Z+, r1
    1a86:	11 92       	st	Z+, r1
							previous_errors_left[i] = 0;
    1a88:	1d 92       	st	X+, r1
    1a8a:	1d 92       	st	X+, r1
				if(i2c_data[1]==0xf0){
					if(start==1){
						start=0;
					}
					else{
						for(int i = 0; i < 5; i++){						
    1a8c:	e8 17       	cp	r30, r24
    1a8e:	f9 07       	cpc	r31, r25
    1a90:	c9 f7       	brne	.-14     	; 0x1a84 <i2c_handel_data+0x15a>
							previous_errors_right[i] = 0;
							previous_errors_left[i] = 0;
						}
						start=1;
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	90 93 6f 01 	sts	0x016F, r25
    1a9a:	80 93 6e 01 	sts	0x016E, r24
						//RGB_data = 0;
						RGB_data = 3;  
    1a9e:	83 e0       	ldi	r24, 0x03	; 3
    1aa0:	80 93 a5 01 	sts	0x01A5, r24
    1aa4:	5e c0       	rjmp	.+188    	; 0x1b62 <i2c_handel_data+0x238>
					}
				}
				else if(i2c_data[1]==0x0f){
    1aa6:	8f 30       	cpi	r24, 0x0F	; 15
    1aa8:	f1 f4       	brne	.+60     	; 0x1ae6 <i2c_handel_data+0x1bc>
					if(drive_mode==1){
    1aaa:	80 91 70 01 	lds	r24, 0x0170
    1aae:	90 91 71 01 	lds	r25, 0x0171
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	59 f4       	brne	.+22     	; 0x1acc <i2c_handel_data+0x1a2>
						PORTD |= (1 << PD1);
    1ab6:	59 9a       	sbi	0x0b, 1	; 11
						PORTD &= ~(1 << PD0);
    1ab8:	58 98       	cbi	0x0b, 0	; 11
						drive_mode=0;
    1aba:	10 92 71 01 	sts	0x0171, r1
    1abe:	10 92 70 01 	sts	0x0170, r1
						start=0;
    1ac2:	10 92 6f 01 	sts	0x016F, r1
    1ac6:	10 92 6e 01 	sts	0x016E, r1
    1aca:	4b c0       	rjmp	.+150    	; 0x1b62 <i2c_handel_data+0x238>
					}
					else{
						PORTD |= (1 << PD0);
    1acc:	58 9a       	sbi	0x0b, 0	; 11
						PORTD &= ~(1 << PD1);
    1ace:	59 98       	cbi	0x0b, 1	; 11
						drive_mode=1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	90 93 71 01 	sts	0x0171, r25
    1ad8:	80 93 70 01 	sts	0x0170, r24
						start=0;
    1adc:	10 92 6f 01 	sts	0x016F, r1
    1ae0:	10 92 6e 01 	sts	0x016E, r1
    1ae4:	3e c0       	rjmp	.+124    	; 0x1b62 <i2c_handel_data+0x238>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
    1ae6:	81 11       	cpse	r24, r1
    1ae8:	13 c0       	rjmp	.+38     	; 0x1b10 <i2c_handel_data+0x1e6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1aea:	91 e3       	ldi	r25, 0x31	; 49
    1aec:	9a 95       	dec	r25
    1aee:	f1 f7       	brne	.-4      	; 0x1aec <i2c_handel_data+0x1c2>
    1af0:	00 00       	nop
					_delay_us(10);
					d_constant = i2c_data[2] ;
    1af2:	e9 e8       	ldi	r30, 0x89	; 137
    1af4:	f1 e0       	ldi	r31, 0x01	; 1
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	90 93 01 01 	sts	0x0101, r25
    1afe:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3] ;
    1b02:	83 81       	ldd	r24, Z+3	; 0x03
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	90 93 03 01 	sts	0x0103, r25
    1b0a:	80 93 02 01 	sts	0x0102, r24
    1b0e:	29 c0       	rjmp	.+82     	; 0x1b62 <i2c_handel_data+0x238>
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
    1b10:	81 30       	cpi	r24, 0x01	; 1
    1b12:	b9 f4       	brne	.+46     	; 0x1b42 <i2c_handel_data+0x218>
    1b14:	21 e3       	ldi	r18, 0x31	; 49
    1b16:	2a 95       	dec	r18
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <i2c_handel_data+0x1ec>
    1b1a:	00 00       	nop
					_delay_us(10);
					d_constant_lab = i2c_data[2] ;
    1b1c:	e9 e8       	ldi	r30, 0x89	; 137
    1b1e:	f1 e0       	ldi	r31, 0x01	; 1
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	90 93 12 01 	sts	0x0112, r25
    1b28:	80 93 11 01 	sts	0x0111, r24
					p_constant_lab = i2c_data[3] ;
    1b2c:	83 81       	ldd	r24, Z+3	; 0x03
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	90 93 14 01 	sts	0x0114, r25
    1b34:	80 93 13 01 	sts	0x0113, r24
    1b38:	81 e3       	ldi	r24, 0x31	; 49
    1b3a:	8a 95       	dec	r24
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <i2c_handel_data+0x210>
    1b3e:	00 00       	nop
    1b40:	10 c0       	rjmp	.+32     	; 0x1b62 <i2c_handel_data+0x238>
					_delay_us(10);
				}
				else if(i2c_data[1]==0x02){
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	71 f4       	brne	.+28     	; 0x1b62 <i2c_handel_data+0x238>
					left = i2c_data[2] & 0xff;
    1b46:	e9 e8       	ldi	r30, 0x89	; 137
    1b48:	f1 e0       	ldi	r31, 0x01	; 1
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	90 93 6d 01 	sts	0x016D, r25
    1b52:	80 93 6c 01 	sts	0x016C, r24
					right = i2c_data[3] & 0xff;
    1b56:	83 81       	ldd	r24, Z+3	; 0x03
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	90 93 6b 01 	sts	0x016B, r25
    1b5e:	80 93 6a 01 	sts	0x016A, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
    1b62:	e8 9a       	sbi	0x1d, 0	; 29
    1b64:	08 95       	ret

00001b66 <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
    1b66:	bc d9       	rcall	.-3208   	; 0xee0 <interrupt_init>
	board_init();
    1b68:	0e 94 76 00 	call	0xec	; 0xec <board_init>
	initengine();
    1b6c:	4e d9       	rcall	.-3428   	; 0xe0a <initengine>
	timerinit();
    1b6e:	5a d9       	rcall	.-3404   	; 0xe24 <timerinit>
	i2c_setup(1);
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	07 da       	rcall	.-3058   	; 0xf82 <i2c_setup>
	sei();
    1b74:	78 94       	sei
	//***********Set motors speed value here *****************
	left=180;				// kanske räcker med en variable för båda om båda kör exakt lika fort
    1b76:	84 eb       	ldi	r24, 0xB4	; 180
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	90 93 6d 01 	sts	0x016D, r25
    1b7e:	80 93 6c 01 	sts	0x016C, r24
	right=170;
    1b82:	8a ea       	ldi	r24, 0xAA	; 170
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	90 93 6b 01 	sts	0x016B, r25
    1b8a:	80 93 6a 01 	sts	0x016A, r24
	//********************************************************
	motor_left=left;
    1b8e:	84 eb       	ldi	r24, 0xB4	; 180
    1b90:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
    1b92:	80 91 6a 01 	lds	r24, 0x016A
    1b96:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
    1b98:	c8 de       	rcall	.-624    	; 0x192a <i2c_handel_data>
		if(turning)
    1b9a:	80 91 5e 01 	lds	r24, 0x015E
    1b9e:	81 11       	cpse	r24, r1
    1ba0:	fb cf       	rjmp	.-10     	; 0x1b98 <main+0x32>
			;
		else if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
    1ba2:	80 91 70 01 	lds	r24, 0x0170
    1ba6:	90 91 71 01 	lds	r25, 0x0171
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	91 05       	cpc	r25, r1
    1bae:	71 f4       	brne	.+28     	; 0x1bcc <main+0x66>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			//if((gyro_left == 1)|| (gyro_right == 1)){
			//	drive_mode = 0;
			//}
			if(start == 1){
    1bb0:	80 91 6e 01 	lds	r24, 0x016E
    1bb4:	90 91 6f 01 	lds	r25, 0x016F
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	11 f4       	brne	.+4      	; 0x1bc2 <main+0x5c>
				regulator();	
    1bbe:	e8 dd       	rcall	.-1072   	; 0x1790 <regulator>
    1bc0:	eb cf       	rjmp	.-42     	; 0x1b98 <main+0x32>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
    1bc2:	89 2b       	or	r24, r25
    1bc4:	49 f7       	brne	.-46     	; 0x1b98 <main+0x32>
				motor_left=0;
    1bc6:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
    1bc8:	18 bc       	out	0x28, r1	; 40
    1bca:	e6 cf       	rjmp	.-52     	; 0x1b98 <main+0x32>
			}
		}
		else if(drive_mode==0){										// Drivemode is manual
    1bcc:	89 2b       	or	r24, r25
    1bce:	21 f7       	brne	.-56     	; 0x1b98 <main+0x32>
			PORTD |= (1 << PD1);
    1bd0:	59 9a       	sbi	0x0b, 1	; 11
			manual_drive();
    1bd2:	71 da       	rcall	.-2846   	; 0x10b6 <manual_drive>
    1bd4:	e1 cf       	rjmp	.-62     	; 0x1b98 <main+0x32>

00001bd6 <__subsf3>:
    1bd6:	50 58       	subi	r21, 0x80	; 128

00001bd8 <__addsf3>:
    1bd8:	bb 27       	eor	r27, r27
    1bda:	aa 27       	eor	r26, r26
    1bdc:	0e d0       	rcall	.+28     	; 0x1bfa <__addsf3x>
    1bde:	75 c1       	rjmp	.+746    	; 0x1eca <__fp_round>
    1be0:	66 d1       	rcall	.+716    	; 0x1eae <__fp_pscA>
    1be2:	30 f0       	brcs	.+12     	; 0x1bf0 <__addsf3+0x18>
    1be4:	6b d1       	rcall	.+726    	; 0x1ebc <__fp_pscB>
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__addsf3+0x18>
    1be8:	31 f4       	brne	.+12     	; 0x1bf6 <__addsf3+0x1e>
    1bea:	9f 3f       	cpi	r25, 0xFF	; 255
    1bec:	11 f4       	brne	.+4      	; 0x1bf2 <__addsf3+0x1a>
    1bee:	1e f4       	brtc	.+6      	; 0x1bf6 <__addsf3+0x1e>
    1bf0:	5b c1       	rjmp	.+694    	; 0x1ea8 <__fp_nan>
    1bf2:	0e f4       	brtc	.+2      	; 0x1bf6 <__addsf3+0x1e>
    1bf4:	e0 95       	com	r30
    1bf6:	e7 fb       	bst	r30, 7
    1bf8:	51 c1       	rjmp	.+674    	; 0x1e9c <__fp_inf>

00001bfa <__addsf3x>:
    1bfa:	e9 2f       	mov	r30, r25
    1bfc:	77 d1       	rcall	.+750    	; 0x1eec <__fp_split3>
    1bfe:	80 f3       	brcs	.-32     	; 0x1be0 <__addsf3+0x8>
    1c00:	ba 17       	cp	r27, r26
    1c02:	62 07       	cpc	r22, r18
    1c04:	73 07       	cpc	r23, r19
    1c06:	84 07       	cpc	r24, r20
    1c08:	95 07       	cpc	r25, r21
    1c0a:	18 f0       	brcs	.+6      	; 0x1c12 <__addsf3x+0x18>
    1c0c:	71 f4       	brne	.+28     	; 0x1c2a <__addsf3x+0x30>
    1c0e:	9e f5       	brtc	.+102    	; 0x1c76 <__addsf3x+0x7c>
    1c10:	8f c1       	rjmp	.+798    	; 0x1f30 <__fp_zero>
    1c12:	0e f4       	brtc	.+2      	; 0x1c16 <__addsf3x+0x1c>
    1c14:	e0 95       	com	r30
    1c16:	0b 2e       	mov	r0, r27
    1c18:	ba 2f       	mov	r27, r26
    1c1a:	a0 2d       	mov	r26, r0
    1c1c:	0b 01       	movw	r0, r22
    1c1e:	b9 01       	movw	r22, r18
    1c20:	90 01       	movw	r18, r0
    1c22:	0c 01       	movw	r0, r24
    1c24:	ca 01       	movw	r24, r20
    1c26:	a0 01       	movw	r20, r0
    1c28:	11 24       	eor	r1, r1
    1c2a:	ff 27       	eor	r31, r31
    1c2c:	59 1b       	sub	r21, r25
    1c2e:	99 f0       	breq	.+38     	; 0x1c56 <__addsf3x+0x5c>
    1c30:	59 3f       	cpi	r21, 0xF9	; 249
    1c32:	50 f4       	brcc	.+20     	; 0x1c48 <__addsf3x+0x4e>
    1c34:	50 3e       	cpi	r21, 0xE0	; 224
    1c36:	68 f1       	brcs	.+90     	; 0x1c92 <__addsf3x+0x98>
    1c38:	1a 16       	cp	r1, r26
    1c3a:	f0 40       	sbci	r31, 0x00	; 0
    1c3c:	a2 2f       	mov	r26, r18
    1c3e:	23 2f       	mov	r18, r19
    1c40:	34 2f       	mov	r19, r20
    1c42:	44 27       	eor	r20, r20
    1c44:	58 5f       	subi	r21, 0xF8	; 248
    1c46:	f3 cf       	rjmp	.-26     	; 0x1c2e <__addsf3x+0x34>
    1c48:	46 95       	lsr	r20
    1c4a:	37 95       	ror	r19
    1c4c:	27 95       	ror	r18
    1c4e:	a7 95       	ror	r26
    1c50:	f0 40       	sbci	r31, 0x00	; 0
    1c52:	53 95       	inc	r21
    1c54:	c9 f7       	brne	.-14     	; 0x1c48 <__addsf3x+0x4e>
    1c56:	7e f4       	brtc	.+30     	; 0x1c76 <__addsf3x+0x7c>
    1c58:	1f 16       	cp	r1, r31
    1c5a:	ba 0b       	sbc	r27, r26
    1c5c:	62 0b       	sbc	r22, r18
    1c5e:	73 0b       	sbc	r23, r19
    1c60:	84 0b       	sbc	r24, r20
    1c62:	ba f0       	brmi	.+46     	; 0x1c92 <__addsf3x+0x98>
    1c64:	91 50       	subi	r25, 0x01	; 1
    1c66:	a1 f0       	breq	.+40     	; 0x1c90 <__addsf3x+0x96>
    1c68:	ff 0f       	add	r31, r31
    1c6a:	bb 1f       	adc	r27, r27
    1c6c:	66 1f       	adc	r22, r22
    1c6e:	77 1f       	adc	r23, r23
    1c70:	88 1f       	adc	r24, r24
    1c72:	c2 f7       	brpl	.-16     	; 0x1c64 <__addsf3x+0x6a>
    1c74:	0e c0       	rjmp	.+28     	; 0x1c92 <__addsf3x+0x98>
    1c76:	ba 0f       	add	r27, r26
    1c78:	62 1f       	adc	r22, r18
    1c7a:	73 1f       	adc	r23, r19
    1c7c:	84 1f       	adc	r24, r20
    1c7e:	48 f4       	brcc	.+18     	; 0x1c92 <__addsf3x+0x98>
    1c80:	87 95       	ror	r24
    1c82:	77 95       	ror	r23
    1c84:	67 95       	ror	r22
    1c86:	b7 95       	ror	r27
    1c88:	f7 95       	ror	r31
    1c8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c8c:	08 f0       	brcs	.+2      	; 0x1c90 <__addsf3x+0x96>
    1c8e:	b3 cf       	rjmp	.-154    	; 0x1bf6 <__addsf3+0x1e>
    1c90:	93 95       	inc	r25
    1c92:	88 0f       	add	r24, r24
    1c94:	08 f0       	brcs	.+2      	; 0x1c98 <__addsf3x+0x9e>
    1c96:	99 27       	eor	r25, r25
    1c98:	ee 0f       	add	r30, r30
    1c9a:	97 95       	ror	r25
    1c9c:	87 95       	ror	r24
    1c9e:	08 95       	ret

00001ca0 <__cmpsf2>:
    1ca0:	d9 d0       	rcall	.+434    	; 0x1e54 <__fp_cmp>
    1ca2:	08 f4       	brcc	.+2      	; 0x1ca6 <__cmpsf2+0x6>
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	08 95       	ret

00001ca8 <__divsf3>:
    1ca8:	0c d0       	rcall	.+24     	; 0x1cc2 <__divsf3x>
    1caa:	0f c1       	rjmp	.+542    	; 0x1eca <__fp_round>
    1cac:	07 d1       	rcall	.+526    	; 0x1ebc <__fp_pscB>
    1cae:	40 f0       	brcs	.+16     	; 0x1cc0 <__divsf3+0x18>
    1cb0:	fe d0       	rcall	.+508    	; 0x1eae <__fp_pscA>
    1cb2:	30 f0       	brcs	.+12     	; 0x1cc0 <__divsf3+0x18>
    1cb4:	21 f4       	brne	.+8      	; 0x1cbe <__divsf3+0x16>
    1cb6:	5f 3f       	cpi	r21, 0xFF	; 255
    1cb8:	19 f0       	breq	.+6      	; 0x1cc0 <__divsf3+0x18>
    1cba:	f0 c0       	rjmp	.+480    	; 0x1e9c <__fp_inf>
    1cbc:	51 11       	cpse	r21, r1
    1cbe:	39 c1       	rjmp	.+626    	; 0x1f32 <__fp_szero>
    1cc0:	f3 c0       	rjmp	.+486    	; 0x1ea8 <__fp_nan>

00001cc2 <__divsf3x>:
    1cc2:	14 d1       	rcall	.+552    	; 0x1eec <__fp_split3>
    1cc4:	98 f3       	brcs	.-26     	; 0x1cac <__divsf3+0x4>

00001cc6 <__divsf3_pse>:
    1cc6:	99 23       	and	r25, r25
    1cc8:	c9 f3       	breq	.-14     	; 0x1cbc <__divsf3+0x14>
    1cca:	55 23       	and	r21, r21
    1ccc:	b1 f3       	breq	.-20     	; 0x1cba <__divsf3+0x12>
    1cce:	95 1b       	sub	r25, r21
    1cd0:	55 0b       	sbc	r21, r21
    1cd2:	bb 27       	eor	r27, r27
    1cd4:	aa 27       	eor	r26, r26
    1cd6:	62 17       	cp	r22, r18
    1cd8:	73 07       	cpc	r23, r19
    1cda:	84 07       	cpc	r24, r20
    1cdc:	38 f0       	brcs	.+14     	; 0x1cec <__divsf3_pse+0x26>
    1cde:	9f 5f       	subi	r25, 0xFF	; 255
    1ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce2:	22 0f       	add	r18, r18
    1ce4:	33 1f       	adc	r19, r19
    1ce6:	44 1f       	adc	r20, r20
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	a9 f3       	breq	.-22     	; 0x1cd6 <__divsf3_pse+0x10>
    1cec:	33 d0       	rcall	.+102    	; 0x1d54 <__divsf3_pse+0x8e>
    1cee:	0e 2e       	mov	r0, r30
    1cf0:	3a f0       	brmi	.+14     	; 0x1d00 <__divsf3_pse+0x3a>
    1cf2:	e0 e8       	ldi	r30, 0x80	; 128
    1cf4:	30 d0       	rcall	.+96     	; 0x1d56 <__divsf3_pse+0x90>
    1cf6:	91 50       	subi	r25, 0x01	; 1
    1cf8:	50 40       	sbci	r21, 0x00	; 0
    1cfa:	e6 95       	lsr	r30
    1cfc:	00 1c       	adc	r0, r0
    1cfe:	ca f7       	brpl	.-14     	; 0x1cf2 <__divsf3_pse+0x2c>
    1d00:	29 d0       	rcall	.+82     	; 0x1d54 <__divsf3_pse+0x8e>
    1d02:	fe 2f       	mov	r31, r30
    1d04:	27 d0       	rcall	.+78     	; 0x1d54 <__divsf3_pse+0x8e>
    1d06:	66 0f       	add	r22, r22
    1d08:	77 1f       	adc	r23, r23
    1d0a:	88 1f       	adc	r24, r24
    1d0c:	bb 1f       	adc	r27, r27
    1d0e:	26 17       	cp	r18, r22
    1d10:	37 07       	cpc	r19, r23
    1d12:	48 07       	cpc	r20, r24
    1d14:	ab 07       	cpc	r26, r27
    1d16:	b0 e8       	ldi	r27, 0x80	; 128
    1d18:	09 f0       	breq	.+2      	; 0x1d1c <__divsf3_pse+0x56>
    1d1a:	bb 0b       	sbc	r27, r27
    1d1c:	80 2d       	mov	r24, r0
    1d1e:	bf 01       	movw	r22, r30
    1d20:	ff 27       	eor	r31, r31
    1d22:	93 58       	subi	r25, 0x83	; 131
    1d24:	5f 4f       	sbci	r21, 0xFF	; 255
    1d26:	2a f0       	brmi	.+10     	; 0x1d32 <__divsf3_pse+0x6c>
    1d28:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2a:	51 05       	cpc	r21, r1
    1d2c:	68 f0       	brcs	.+26     	; 0x1d48 <__divsf3_pse+0x82>
    1d2e:	b6 c0       	rjmp	.+364    	; 0x1e9c <__fp_inf>
    1d30:	00 c1       	rjmp	.+512    	; 0x1f32 <__fp_szero>
    1d32:	5f 3f       	cpi	r21, 0xFF	; 255
    1d34:	ec f3       	brlt	.-6      	; 0x1d30 <__divsf3_pse+0x6a>
    1d36:	98 3e       	cpi	r25, 0xE8	; 232
    1d38:	dc f3       	brlt	.-10     	; 0x1d30 <__divsf3_pse+0x6a>
    1d3a:	86 95       	lsr	r24
    1d3c:	77 95       	ror	r23
    1d3e:	67 95       	ror	r22
    1d40:	b7 95       	ror	r27
    1d42:	f7 95       	ror	r31
    1d44:	9f 5f       	subi	r25, 0xFF	; 255
    1d46:	c9 f7       	brne	.-14     	; 0x1d3a <__divsf3_pse+0x74>
    1d48:	88 0f       	add	r24, r24
    1d4a:	91 1d       	adc	r25, r1
    1d4c:	96 95       	lsr	r25
    1d4e:	87 95       	ror	r24
    1d50:	97 f9       	bld	r25, 7
    1d52:	08 95       	ret
    1d54:	e1 e0       	ldi	r30, 0x01	; 1
    1d56:	66 0f       	add	r22, r22
    1d58:	77 1f       	adc	r23, r23
    1d5a:	88 1f       	adc	r24, r24
    1d5c:	bb 1f       	adc	r27, r27
    1d5e:	62 17       	cp	r22, r18
    1d60:	73 07       	cpc	r23, r19
    1d62:	84 07       	cpc	r24, r20
    1d64:	ba 07       	cpc	r27, r26
    1d66:	20 f0       	brcs	.+8      	; 0x1d70 <__divsf3_pse+0xaa>
    1d68:	62 1b       	sub	r22, r18
    1d6a:	73 0b       	sbc	r23, r19
    1d6c:	84 0b       	sbc	r24, r20
    1d6e:	ba 0b       	sbc	r27, r26
    1d70:	ee 1f       	adc	r30, r30
    1d72:	88 f7       	brcc	.-30     	; 0x1d56 <__divsf3_pse+0x90>
    1d74:	e0 95       	com	r30
    1d76:	08 95       	ret

00001d78 <__fixsfsi>:
    1d78:	04 d0       	rcall	.+8      	; 0x1d82 <__fixunssfsi>
    1d7a:	68 94       	set
    1d7c:	b1 11       	cpse	r27, r1
    1d7e:	d9 c0       	rjmp	.+434    	; 0x1f32 <__fp_szero>
    1d80:	08 95       	ret

00001d82 <__fixunssfsi>:
    1d82:	bc d0       	rcall	.+376    	; 0x1efc <__fp_splitA>
    1d84:	88 f0       	brcs	.+34     	; 0x1da8 <__fixunssfsi+0x26>
    1d86:	9f 57       	subi	r25, 0x7F	; 127
    1d88:	90 f0       	brcs	.+36     	; 0x1dae <__fixunssfsi+0x2c>
    1d8a:	b9 2f       	mov	r27, r25
    1d8c:	99 27       	eor	r25, r25
    1d8e:	b7 51       	subi	r27, 0x17	; 23
    1d90:	a0 f0       	brcs	.+40     	; 0x1dba <__fixunssfsi+0x38>
    1d92:	d1 f0       	breq	.+52     	; 0x1dc8 <__fixunssfsi+0x46>
    1d94:	66 0f       	add	r22, r22
    1d96:	77 1f       	adc	r23, r23
    1d98:	88 1f       	adc	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	1a f0       	brmi	.+6      	; 0x1da4 <__fixunssfsi+0x22>
    1d9e:	ba 95       	dec	r27
    1da0:	c9 f7       	brne	.-14     	; 0x1d94 <__fixunssfsi+0x12>
    1da2:	12 c0       	rjmp	.+36     	; 0x1dc8 <__fixunssfsi+0x46>
    1da4:	b1 30       	cpi	r27, 0x01	; 1
    1da6:	81 f0       	breq	.+32     	; 0x1dc8 <__fixunssfsi+0x46>
    1da8:	c3 d0       	rcall	.+390    	; 0x1f30 <__fp_zero>
    1daa:	b1 e0       	ldi	r27, 0x01	; 1
    1dac:	08 95       	ret
    1dae:	c0 c0       	rjmp	.+384    	; 0x1f30 <__fp_zero>
    1db0:	67 2f       	mov	r22, r23
    1db2:	78 2f       	mov	r23, r24
    1db4:	88 27       	eor	r24, r24
    1db6:	b8 5f       	subi	r27, 0xF8	; 248
    1db8:	39 f0       	breq	.+14     	; 0x1dc8 <__fixunssfsi+0x46>
    1dba:	b9 3f       	cpi	r27, 0xF9	; 249
    1dbc:	cc f3       	brlt	.-14     	; 0x1db0 <__fixunssfsi+0x2e>
    1dbe:	86 95       	lsr	r24
    1dc0:	77 95       	ror	r23
    1dc2:	67 95       	ror	r22
    1dc4:	b3 95       	inc	r27
    1dc6:	d9 f7       	brne	.-10     	; 0x1dbe <__fixunssfsi+0x3c>
    1dc8:	3e f4       	brtc	.+14     	; 0x1dd8 <__fixunssfsi+0x56>
    1dca:	90 95       	com	r25
    1dcc:	80 95       	com	r24
    1dce:	70 95       	com	r23
    1dd0:	61 95       	neg	r22
    1dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd8:	08 95       	ret

00001dda <__floatunsisf>:
    1dda:	e8 94       	clt
    1ddc:	09 c0       	rjmp	.+18     	; 0x1df0 <__floatsisf+0x12>

00001dde <__floatsisf>:
    1dde:	97 fb       	bst	r25, 7
    1de0:	3e f4       	brtc	.+14     	; 0x1df0 <__floatsisf+0x12>
    1de2:	90 95       	com	r25
    1de4:	80 95       	com	r24
    1de6:	70 95       	com	r23
    1de8:	61 95       	neg	r22
    1dea:	7f 4f       	sbci	r23, 0xFF	; 255
    1dec:	8f 4f       	sbci	r24, 0xFF	; 255
    1dee:	9f 4f       	sbci	r25, 0xFF	; 255
    1df0:	99 23       	and	r25, r25
    1df2:	a9 f0       	breq	.+42     	; 0x1e1e <__floatsisf+0x40>
    1df4:	f9 2f       	mov	r31, r25
    1df6:	96 e9       	ldi	r25, 0x96	; 150
    1df8:	bb 27       	eor	r27, r27
    1dfa:	93 95       	inc	r25
    1dfc:	f6 95       	lsr	r31
    1dfe:	87 95       	ror	r24
    1e00:	77 95       	ror	r23
    1e02:	67 95       	ror	r22
    1e04:	b7 95       	ror	r27
    1e06:	f1 11       	cpse	r31, r1
    1e08:	f8 cf       	rjmp	.-16     	; 0x1dfa <__floatsisf+0x1c>
    1e0a:	fa f4       	brpl	.+62     	; 0x1e4a <__floatsisf+0x6c>
    1e0c:	bb 0f       	add	r27, r27
    1e0e:	11 f4       	brne	.+4      	; 0x1e14 <__floatsisf+0x36>
    1e10:	60 ff       	sbrs	r22, 0
    1e12:	1b c0       	rjmp	.+54     	; 0x1e4a <__floatsisf+0x6c>
    1e14:	6f 5f       	subi	r22, 0xFF	; 255
    1e16:	7f 4f       	sbci	r23, 0xFF	; 255
    1e18:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1c:	16 c0       	rjmp	.+44     	; 0x1e4a <__floatsisf+0x6c>
    1e1e:	88 23       	and	r24, r24
    1e20:	11 f0       	breq	.+4      	; 0x1e26 <__floatsisf+0x48>
    1e22:	96 e9       	ldi	r25, 0x96	; 150
    1e24:	11 c0       	rjmp	.+34     	; 0x1e48 <__floatsisf+0x6a>
    1e26:	77 23       	and	r23, r23
    1e28:	21 f0       	breq	.+8      	; 0x1e32 <__floatsisf+0x54>
    1e2a:	9e e8       	ldi	r25, 0x8E	; 142
    1e2c:	87 2f       	mov	r24, r23
    1e2e:	76 2f       	mov	r23, r22
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <__floatsisf+0x5e>
    1e32:	66 23       	and	r22, r22
    1e34:	71 f0       	breq	.+28     	; 0x1e52 <__floatsisf+0x74>
    1e36:	96 e8       	ldi	r25, 0x86	; 134
    1e38:	86 2f       	mov	r24, r22
    1e3a:	70 e0       	ldi	r23, 0x00	; 0
    1e3c:	60 e0       	ldi	r22, 0x00	; 0
    1e3e:	2a f0       	brmi	.+10     	; 0x1e4a <__floatsisf+0x6c>
    1e40:	9a 95       	dec	r25
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	da f7       	brpl	.-10     	; 0x1e40 <__floatsisf+0x62>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	96 95       	lsr	r25
    1e4e:	87 95       	ror	r24
    1e50:	97 f9       	bld	r25, 7
    1e52:	08 95       	ret

00001e54 <__fp_cmp>:
    1e54:	99 0f       	add	r25, r25
    1e56:	00 08       	sbc	r0, r0
    1e58:	55 0f       	add	r21, r21
    1e5a:	aa 0b       	sbc	r26, r26
    1e5c:	e0 e8       	ldi	r30, 0x80	; 128
    1e5e:	fe ef       	ldi	r31, 0xFE	; 254
    1e60:	16 16       	cp	r1, r22
    1e62:	17 06       	cpc	r1, r23
    1e64:	e8 07       	cpc	r30, r24
    1e66:	f9 07       	cpc	r31, r25
    1e68:	c0 f0       	brcs	.+48     	; 0x1e9a <__fp_cmp+0x46>
    1e6a:	12 16       	cp	r1, r18
    1e6c:	13 06       	cpc	r1, r19
    1e6e:	e4 07       	cpc	r30, r20
    1e70:	f5 07       	cpc	r31, r21
    1e72:	98 f0       	brcs	.+38     	; 0x1e9a <__fp_cmp+0x46>
    1e74:	62 1b       	sub	r22, r18
    1e76:	73 0b       	sbc	r23, r19
    1e78:	84 0b       	sbc	r24, r20
    1e7a:	95 0b       	sbc	r25, r21
    1e7c:	39 f4       	brne	.+14     	; 0x1e8c <__fp_cmp+0x38>
    1e7e:	0a 26       	eor	r0, r26
    1e80:	61 f0       	breq	.+24     	; 0x1e9a <__fp_cmp+0x46>
    1e82:	23 2b       	or	r18, r19
    1e84:	24 2b       	or	r18, r20
    1e86:	25 2b       	or	r18, r21
    1e88:	21 f4       	brne	.+8      	; 0x1e92 <__fp_cmp+0x3e>
    1e8a:	08 95       	ret
    1e8c:	0a 26       	eor	r0, r26
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <__fp_cmp+0x3e>
    1e90:	a1 40       	sbci	r26, 0x01	; 1
    1e92:	a6 95       	lsr	r26
    1e94:	8f ef       	ldi	r24, 0xFF	; 255
    1e96:	81 1d       	adc	r24, r1
    1e98:	81 1d       	adc	r24, r1
    1e9a:	08 95       	ret

00001e9c <__fp_inf>:
    1e9c:	97 f9       	bld	r25, 7
    1e9e:	9f 67       	ori	r25, 0x7F	; 127
    1ea0:	80 e8       	ldi	r24, 0x80	; 128
    1ea2:	70 e0       	ldi	r23, 0x00	; 0
    1ea4:	60 e0       	ldi	r22, 0x00	; 0
    1ea6:	08 95       	ret

00001ea8 <__fp_nan>:
    1ea8:	9f ef       	ldi	r25, 0xFF	; 255
    1eaa:	80 ec       	ldi	r24, 0xC0	; 192
    1eac:	08 95       	ret

00001eae <__fp_pscA>:
    1eae:	00 24       	eor	r0, r0
    1eb0:	0a 94       	dec	r0
    1eb2:	16 16       	cp	r1, r22
    1eb4:	17 06       	cpc	r1, r23
    1eb6:	18 06       	cpc	r1, r24
    1eb8:	09 06       	cpc	r0, r25
    1eba:	08 95       	ret

00001ebc <__fp_pscB>:
    1ebc:	00 24       	eor	r0, r0
    1ebe:	0a 94       	dec	r0
    1ec0:	12 16       	cp	r1, r18
    1ec2:	13 06       	cpc	r1, r19
    1ec4:	14 06       	cpc	r1, r20
    1ec6:	05 06       	cpc	r0, r21
    1ec8:	08 95       	ret

00001eca <__fp_round>:
    1eca:	09 2e       	mov	r0, r25
    1ecc:	03 94       	inc	r0
    1ece:	00 0c       	add	r0, r0
    1ed0:	11 f4       	brne	.+4      	; 0x1ed6 <__fp_round+0xc>
    1ed2:	88 23       	and	r24, r24
    1ed4:	52 f0       	brmi	.+20     	; 0x1eea <__fp_round+0x20>
    1ed6:	bb 0f       	add	r27, r27
    1ed8:	40 f4       	brcc	.+16     	; 0x1eea <__fp_round+0x20>
    1eda:	bf 2b       	or	r27, r31
    1edc:	11 f4       	brne	.+4      	; 0x1ee2 <__fp_round+0x18>
    1ede:	60 ff       	sbrs	r22, 0
    1ee0:	04 c0       	rjmp	.+8      	; 0x1eea <__fp_round+0x20>
    1ee2:	6f 5f       	subi	r22, 0xFF	; 255
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eea:	08 95       	ret

00001eec <__fp_split3>:
    1eec:	57 fd       	sbrc	r21, 7
    1eee:	90 58       	subi	r25, 0x80	; 128
    1ef0:	44 0f       	add	r20, r20
    1ef2:	55 1f       	adc	r21, r21
    1ef4:	59 f0       	breq	.+22     	; 0x1f0c <__fp_splitA+0x10>
    1ef6:	5f 3f       	cpi	r21, 0xFF	; 255
    1ef8:	71 f0       	breq	.+28     	; 0x1f16 <__fp_splitA+0x1a>
    1efa:	47 95       	ror	r20

00001efc <__fp_splitA>:
    1efc:	88 0f       	add	r24, r24
    1efe:	97 fb       	bst	r25, 7
    1f00:	99 1f       	adc	r25, r25
    1f02:	61 f0       	breq	.+24     	; 0x1f1c <__fp_splitA+0x20>
    1f04:	9f 3f       	cpi	r25, 0xFF	; 255
    1f06:	79 f0       	breq	.+30     	; 0x1f26 <__fp_splitA+0x2a>
    1f08:	87 95       	ror	r24
    1f0a:	08 95       	ret
    1f0c:	12 16       	cp	r1, r18
    1f0e:	13 06       	cpc	r1, r19
    1f10:	14 06       	cpc	r1, r20
    1f12:	55 1f       	adc	r21, r21
    1f14:	f2 cf       	rjmp	.-28     	; 0x1efa <__fp_split3+0xe>
    1f16:	46 95       	lsr	r20
    1f18:	f1 df       	rcall	.-30     	; 0x1efc <__fp_splitA>
    1f1a:	08 c0       	rjmp	.+16     	; 0x1f2c <__fp_splitA+0x30>
    1f1c:	16 16       	cp	r1, r22
    1f1e:	17 06       	cpc	r1, r23
    1f20:	18 06       	cpc	r1, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	f1 cf       	rjmp	.-30     	; 0x1f08 <__fp_splitA+0xc>
    1f26:	86 95       	lsr	r24
    1f28:	71 05       	cpc	r23, r1
    1f2a:	61 05       	cpc	r22, r1
    1f2c:	08 94       	sec
    1f2e:	08 95       	ret

00001f30 <__fp_zero>:
    1f30:	e8 94       	clt

00001f32 <__fp_szero>:
    1f32:	bb 27       	eor	r27, r27
    1f34:	66 27       	eor	r22, r22
    1f36:	77 27       	eor	r23, r23
    1f38:	cb 01       	movw	r24, r22
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	08 95       	ret

00001f3e <__gesf2>:
    1f3e:	8a df       	rcall	.-236    	; 0x1e54 <__fp_cmp>
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <__gesf2+0x6>
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	08 95       	ret

00001f46 <__mulsf3>:
    1f46:	0b d0       	rcall	.+22     	; 0x1f5e <__mulsf3x>
    1f48:	c0 cf       	rjmp	.-128    	; 0x1eca <__fp_round>
    1f4a:	b1 df       	rcall	.-158    	; 0x1eae <__fp_pscA>
    1f4c:	28 f0       	brcs	.+10     	; 0x1f58 <__mulsf3+0x12>
    1f4e:	b6 df       	rcall	.-148    	; 0x1ebc <__fp_pscB>
    1f50:	18 f0       	brcs	.+6      	; 0x1f58 <__mulsf3+0x12>
    1f52:	95 23       	and	r25, r21
    1f54:	09 f0       	breq	.+2      	; 0x1f58 <__mulsf3+0x12>
    1f56:	a2 cf       	rjmp	.-188    	; 0x1e9c <__fp_inf>
    1f58:	a7 cf       	rjmp	.-178    	; 0x1ea8 <__fp_nan>
    1f5a:	11 24       	eor	r1, r1
    1f5c:	ea cf       	rjmp	.-44     	; 0x1f32 <__fp_szero>

00001f5e <__mulsf3x>:
    1f5e:	c6 df       	rcall	.-116    	; 0x1eec <__fp_split3>
    1f60:	a0 f3       	brcs	.-24     	; 0x1f4a <__mulsf3+0x4>

00001f62 <__mulsf3_pse>:
    1f62:	95 9f       	mul	r25, r21
    1f64:	d1 f3       	breq	.-12     	; 0x1f5a <__mulsf3+0x14>
    1f66:	95 0f       	add	r25, r21
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	55 1f       	adc	r21, r21
    1f6c:	62 9f       	mul	r22, r18
    1f6e:	f0 01       	movw	r30, r0
    1f70:	72 9f       	mul	r23, r18
    1f72:	bb 27       	eor	r27, r27
    1f74:	f0 0d       	add	r31, r0
    1f76:	b1 1d       	adc	r27, r1
    1f78:	63 9f       	mul	r22, r19
    1f7a:	aa 27       	eor	r26, r26
    1f7c:	f0 0d       	add	r31, r0
    1f7e:	b1 1d       	adc	r27, r1
    1f80:	aa 1f       	adc	r26, r26
    1f82:	64 9f       	mul	r22, r20
    1f84:	66 27       	eor	r22, r22
    1f86:	b0 0d       	add	r27, r0
    1f88:	a1 1d       	adc	r26, r1
    1f8a:	66 1f       	adc	r22, r22
    1f8c:	82 9f       	mul	r24, r18
    1f8e:	22 27       	eor	r18, r18
    1f90:	b0 0d       	add	r27, r0
    1f92:	a1 1d       	adc	r26, r1
    1f94:	62 1f       	adc	r22, r18
    1f96:	73 9f       	mul	r23, r19
    1f98:	b0 0d       	add	r27, r0
    1f9a:	a1 1d       	adc	r26, r1
    1f9c:	62 1f       	adc	r22, r18
    1f9e:	83 9f       	mul	r24, r19
    1fa0:	a0 0d       	add	r26, r0
    1fa2:	61 1d       	adc	r22, r1
    1fa4:	22 1f       	adc	r18, r18
    1fa6:	74 9f       	mul	r23, r20
    1fa8:	33 27       	eor	r19, r19
    1faa:	a0 0d       	add	r26, r0
    1fac:	61 1d       	adc	r22, r1
    1fae:	23 1f       	adc	r18, r19
    1fb0:	84 9f       	mul	r24, r20
    1fb2:	60 0d       	add	r22, r0
    1fb4:	21 1d       	adc	r18, r1
    1fb6:	82 2f       	mov	r24, r18
    1fb8:	76 2f       	mov	r23, r22
    1fba:	6a 2f       	mov	r22, r26
    1fbc:	11 24       	eor	r1, r1
    1fbe:	9f 57       	subi	r25, 0x7F	; 127
    1fc0:	50 40       	sbci	r21, 0x00	; 0
    1fc2:	8a f0       	brmi	.+34     	; 0x1fe6 <__mulsf3_pse+0x84>
    1fc4:	e1 f0       	breq	.+56     	; 0x1ffe <__mulsf3_pse+0x9c>
    1fc6:	88 23       	and	r24, r24
    1fc8:	4a f0       	brmi	.+18     	; 0x1fdc <__mulsf3_pse+0x7a>
    1fca:	ee 0f       	add	r30, r30
    1fcc:	ff 1f       	adc	r31, r31
    1fce:	bb 1f       	adc	r27, r27
    1fd0:	66 1f       	adc	r22, r22
    1fd2:	77 1f       	adc	r23, r23
    1fd4:	88 1f       	adc	r24, r24
    1fd6:	91 50       	subi	r25, 0x01	; 1
    1fd8:	50 40       	sbci	r21, 0x00	; 0
    1fda:	a9 f7       	brne	.-22     	; 0x1fc6 <__mulsf3_pse+0x64>
    1fdc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fde:	51 05       	cpc	r21, r1
    1fe0:	70 f0       	brcs	.+28     	; 0x1ffe <__mulsf3_pse+0x9c>
    1fe2:	5c cf       	rjmp	.-328    	; 0x1e9c <__fp_inf>
    1fe4:	a6 cf       	rjmp	.-180    	; 0x1f32 <__fp_szero>
    1fe6:	5f 3f       	cpi	r21, 0xFF	; 255
    1fe8:	ec f3       	brlt	.-6      	; 0x1fe4 <__mulsf3_pse+0x82>
    1fea:	98 3e       	cpi	r25, 0xE8	; 232
    1fec:	dc f3       	brlt	.-10     	; 0x1fe4 <__mulsf3_pse+0x82>
    1fee:	86 95       	lsr	r24
    1ff0:	77 95       	ror	r23
    1ff2:	67 95       	ror	r22
    1ff4:	b7 95       	ror	r27
    1ff6:	f7 95       	ror	r31
    1ff8:	e7 95       	ror	r30
    1ffa:	9f 5f       	subi	r25, 0xFF	; 255
    1ffc:	c1 f7       	brne	.-16     	; 0x1fee <__mulsf3_pse+0x8c>
    1ffe:	fe 2b       	or	r31, r30
    2000:	88 0f       	add	r24, r24
    2002:	91 1d       	adc	r25, r1
    2004:	96 95       	lsr	r25
    2006:	87 95       	ror	r24
    2008:	97 f9       	bld	r25, 7
    200a:	08 95       	ret

0000200c <__divmodhi4>:
    200c:	97 fb       	bst	r25, 7
    200e:	07 2e       	mov	r0, r23
    2010:	16 f4       	brtc	.+4      	; 0x2016 <__divmodhi4+0xa>
    2012:	00 94       	com	r0
    2014:	06 d0       	rcall	.+12     	; 0x2022 <__divmodhi4_neg1>
    2016:	77 fd       	sbrc	r23, 7
    2018:	08 d0       	rcall	.+16     	; 0x202a <__divmodhi4_neg2>
    201a:	14 d0       	rcall	.+40     	; 0x2044 <__udivmodhi4>
    201c:	07 fc       	sbrc	r0, 7
    201e:	05 d0       	rcall	.+10     	; 0x202a <__divmodhi4_neg2>
    2020:	3e f4       	brtc	.+14     	; 0x2030 <__divmodhi4_exit>

00002022 <__divmodhi4_neg1>:
    2022:	90 95       	com	r25
    2024:	81 95       	neg	r24
    2026:	9f 4f       	sbci	r25, 0xFF	; 255
    2028:	08 95       	ret

0000202a <__divmodhi4_neg2>:
    202a:	70 95       	com	r23
    202c:	61 95       	neg	r22
    202e:	7f 4f       	sbci	r23, 0xFF	; 255

00002030 <__divmodhi4_exit>:
    2030:	08 95       	ret

00002032 <__tablejump2__>:
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	00 24       	eor	r0, r0
    2038:	00 1c       	adc	r0, r0
    203a:	0b be       	out	0x3b, r0	; 59
    203c:	07 90       	elpm	r0, Z+
    203e:	f6 91       	elpm	r31, Z
    2040:	e0 2d       	mov	r30, r0
    2042:	09 94       	ijmp

00002044 <__udivmodhi4>:
    2044:	aa 1b       	sub	r26, r26
    2046:	bb 1b       	sub	r27, r27
    2048:	51 e1       	ldi	r21, 0x11	; 17
    204a:	07 c0       	rjmp	.+14     	; 0x205a <__udivmodhi4_ep>

0000204c <__udivmodhi4_loop>:
    204c:	aa 1f       	adc	r26, r26
    204e:	bb 1f       	adc	r27, r27
    2050:	a6 17       	cp	r26, r22
    2052:	b7 07       	cpc	r27, r23
    2054:	10 f0       	brcs	.+4      	; 0x205a <__udivmodhi4_ep>
    2056:	a6 1b       	sub	r26, r22
    2058:	b7 0b       	sbc	r27, r23

0000205a <__udivmodhi4_ep>:
    205a:	88 1f       	adc	r24, r24
    205c:	99 1f       	adc	r25, r25
    205e:	5a 95       	dec	r21
    2060:	a9 f7       	brne	.-22     	; 0x204c <__udivmodhi4_loop>
    2062:	80 95       	com	r24
    2064:	90 95       	com	r25
    2066:	bc 01       	movw	r22, r24
    2068:	cd 01       	movw	r24, r26
    206a:	08 95       	ret

0000206c <_exit>:
    206c:	f8 94       	cli

0000206e <__stop_program>:
    206e:	ff cf       	rjmp	.-2      	; 0x206e <__stop_program>
