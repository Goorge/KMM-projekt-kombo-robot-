
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a00  00000a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  0080010a  0080010a  00000a9e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a9e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b7a  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002e3  00000000  00000000  000017b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013c1  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  00002e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010649  00000000  00000000  00003150  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a1  00000000  00000000  00013799  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00013e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f0e  00000000  00000000  00013f8a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	c5 c3       	rjmp	.+1930   	; 0x790 <__vector_1>
   6:	00 00       	nop
   8:	83 c2       	rjmp	.+1286   	; 0x510 <__vector_2>
   a:	00 00       	nop
   c:	a9 c2       	rjmp	.+1362   	; 0x560 <__vector_3>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c2       	rjmp	.+1126   	; 0x49c <__vector_13>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1a 04       	cpc	r1, r10
  8e:	1f 04       	cpc	r1, r15
  90:	3b 04       	cpc	r3, r11
  92:	47 04       	cpc	r4, r7
  94:	4b 04       	cpc	r4, r11
  96:	4f 04       	cpc	r4, r15
  98:	8b 04       	cpc	r8, r11
  9a:	53 04       	cpc	r5, r3
  9c:	57 04       	cpc	r5, r7
  9e:	5c 04       	cpc	r5, r12
  a0:	64 04       	cpc	r6, r4
  a2:	6c 04       	cpc	r6, r12
  a4:	74 04       	cpc	r7, r4
  a6:	7c 04       	cpc	r7, r12
  a8:	84 04       	cpc	r8, r4

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	fa e0       	ldi	r31, 0x0A	; 10
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	aa 30       	cpi	r26, 0x0A	; 10
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	aa e0       	ldi	r26, 0x0A	; 10
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a4 35       	cpi	r26, 0x54	; 84
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	1c d4       	rcall	.+2104   	; 0x91a <main>
  e2:	8c c4       	rjmp	.+2328   	; 0x9fc <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  e6:	08 95       	ret

000000e8 <linje_get_error>:

void twoway_turn_lab(void){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
	if(!ongoing_turn ){    //---kör fram i korsningen för att prepa sväng
		sensor_front_tmp=sensor_front;
		drive_forward();
		turn_done=false;
  e8:	a0 91 45 01 	lds	r26, 0x0145
  ec:	b0 91 46 01 	lds	r27, 0x0146
  f0:	95 e0       	ldi	r25, 0x05	; 5
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	9d 01       	movw	r18, r26
  fe:	04 2e       	mov	r0, r20
 100:	02 c0       	rjmp	.+4      	; 0x106 <linje_get_error+0x1e>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <linje_get_error+0x1a>
 10a:	e2 2f       	mov	r30, r18
 10c:	e3 70       	andi	r30, 0x03	; 3
 10e:	e9 9f       	mul	r30, r25
 110:	80 0d       	add	r24, r0
 112:	11 24       	eor	r1, r1
 114:	23 70       	andi	r18, 0x03	; 3
 116:	33 27       	eor	r19, r19
 118:	62 0f       	add	r22, r18
 11a:	73 1f       	adc	r23, r19
 11c:	4e 5f       	subi	r20, 0xFE	; 254
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	91 50       	subi	r25, 0x01	; 1
 122:	46 31       	cpi	r20, 0x16	; 22
 124:	51 05       	cpc	r21, r1
 126:	51 f7       	brne	.-44     	; 0xfc <linje_get_error+0x14>
 128:	08 2e       	mov	r0, r24
 12a:	00 0c       	add	r0, r0
 12c:	99 0b       	sbc	r25, r25
 12e:	36 d4       	rcall	.+2156   	; 0x99c <__divmodhi4>
 130:	86 2f       	mov	r24, r22
 132:	08 95       	ret

00000134 <manual_drive>:
 134:	80 91 23 01 	lds	r24, 0x0123
 138:	90 91 24 01 	lds	r25, 0x0124
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	29 f4       	brne	.+10     	; 0x14a <manual_drive+0x16>
 140:	2d 98       	cbi	0x05, 5	; 5
 142:	2e 98       	cbi	0x05, 6	; 5
 144:	17 bc       	out	0x27, r1	; 39
 146:	18 bc       	out	0x28, r1	; 40
 148:	08 95       	ret
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	49 f4       	brne	.+18     	; 0x162 <manual_drive+0x2e>
 150:	2d 98       	cbi	0x05, 5	; 5
 152:	2e 98       	cbi	0x05, 6	; 5
 154:	80 91 2d 01 	lds	r24, 0x012D
 158:	87 bd       	out	0x27, r24	; 39
 15a:	80 91 2b 01 	lds	r24, 0x012B
 15e:	88 bd       	out	0x28, r24	; 40
 160:	08 95       	ret
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	91 05       	cpc	r25, r1
 166:	59 f4       	brne	.+22     	; 0x17e <manual_drive+0x4a>
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 66       	ori	r24, 0x60	; 96
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	80 91 2d 01 	lds	r24, 0x012D
 172:	8d 50       	subi	r24, 0x0D	; 13
 174:	87 bd       	out	0x27, r24	; 39
 176:	80 91 2b 01 	lds	r24, 0x012B
 17a:	88 bd       	out	0x28, r24	; 40
 17c:	08 95       	ret
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	91 05       	cpc	r25, r1
 182:	81 f4       	brne	.+32     	; 0x1a4 <manual_drive+0x70>
 184:	2d 98       	cbi	0x05, 5	; 5
 186:	2e 98       	cbi	0x05, 6	; 5
 188:	80 91 2d 01 	lds	r24, 0x012D
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	20 91 2b 01 	lds	r18, 0x012B
 192:	90 91 2c 01 	lds	r25, 0x012C
 196:	82 2f       	mov	r24, r18
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	ff d3       	rcall	.+2046   	; 0x99c <__divmodhi4>
 19e:	26 1b       	sub	r18, r22
 1a0:	28 bd       	out	0x28, r18	; 40
 1a2:	08 95       	ret
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 05       	cpc	r25, r1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <manual_drive+0x96>
 1aa:	2d 98       	cbi	0x05, 5	; 5
 1ac:	2e 98       	cbi	0x05, 6	; 5
 1ae:	20 91 2d 01 	lds	r18, 0x012D
 1b2:	90 91 2e 01 	lds	r25, 0x012E
 1b6:	82 2f       	mov	r24, r18
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	ef d3       	rcall	.+2014   	; 0x99c <__divmodhi4>
 1be:	26 1b       	sub	r18, r22
 1c0:	27 bd       	out	0x27, r18	; 39
 1c2:	80 91 2b 01 	lds	r24, 0x012B
 1c6:	88 bd       	out	0x28, r24	; 40
 1c8:	08 95       	ret
 1ca:	85 30       	cpi	r24, 0x05	; 5
 1cc:	91 05       	cpc	r25, r1
 1ce:	49 f4       	brne	.+18     	; 0x1e2 <manual_drive+0xae>
 1d0:	2d 98       	cbi	0x05, 5	; 5
 1d2:	2e 9a       	sbi	0x05, 6	; 5
 1d4:	80 91 2d 01 	lds	r24, 0x012D
 1d8:	87 bd       	out	0x27, r24	; 39
 1da:	80 91 2b 01 	lds	r24, 0x012B
 1de:	88 bd       	out	0x28, r24	; 40
 1e0:	08 95       	ret
 1e2:	06 97       	sbiw	r24, 0x06	; 6
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <manual_drive+0xc4>
 1e6:	2e 98       	cbi	0x05, 6	; 5
 1e8:	2d 9a       	sbi	0x05, 5	; 5
 1ea:	80 91 2d 01 	lds	r24, 0x012D
 1ee:	87 bd       	out	0x27, r24	; 39
 1f0:	80 91 2b 01 	lds	r24, 0x012B
 1f4:	88 bd       	out	0x28, r24	; 40
 1f6:	08 95       	ret
 1f8:	10 92 24 01 	sts	0x0124, r1
 1fc:	10 92 23 01 	sts	0x0123, r1
 200:	08 95       	ret

00000202 <labyreg>:
 202:	f8 94       	cli
 204:	20 91 47 01 	lds	r18, 0x0147
 208:	30 91 48 01 	lds	r19, 0x0148
 20c:	78 94       	sei
 20e:	80 91 04 01 	lds	r24, 0x0104
 212:	90 91 05 01 	lds	r25, 0x0105
 216:	82 1b       	sub	r24, r18
 218:	93 0b       	sbc	r25, r19
 21a:	90 93 51 01 	sts	0x0151, r25
 21e:	80 93 50 01 	sts	0x0150, r24
 222:	20 91 21 01 	lds	r18, 0x0121
 226:	30 91 22 01 	lds	r19, 0x0122
 22a:	ac 01       	movw	r20, r24
 22c:	42 1b       	sub	r20, r18
 22e:	53 0b       	sbc	r21, r19
 230:	50 93 20 01 	sts	0x0120, r21
 234:	40 93 1f 01 	sts	0x011F, r20
 238:	20 91 08 01 	lds	r18, 0x0108
 23c:	30 91 09 01 	lds	r19, 0x0109
 240:	82 9f       	mul	r24, r18
 242:	b0 01       	movw	r22, r0
 244:	83 9f       	mul	r24, r19
 246:	70 0d       	add	r23, r0
 248:	92 9f       	mul	r25, r18
 24a:	70 0d       	add	r23, r0
 24c:	11 24       	eor	r1, r1
 24e:	e0 91 06 01 	lds	r30, 0x0106
 252:	f0 91 07 01 	lds	r31, 0x0107
 256:	4e 9f       	mul	r20, r30
 258:	90 01       	movw	r18, r0
 25a:	4f 9f       	mul	r20, r31
 25c:	30 0d       	add	r19, r0
 25e:	5e 9f       	mul	r21, r30
 260:	30 0d       	add	r19, r0
 262:	11 24       	eor	r1, r1
 264:	26 0f       	add	r18, r22
 266:	37 1f       	adc	r19, r23
 268:	30 93 4e 01 	sts	0x014E, r19
 26c:	20 93 4d 01 	sts	0x014D, r18
 270:	90 93 22 01 	sts	0x0122, r25
 274:	80 93 21 01 	sts	0x0121, r24
 278:	87 b5       	in	r24, 0x27	; 39
 27a:	86 95       	lsr	r24
 27c:	86 95       	lsr	r24
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	28 17       	cp	r18, r24
 282:	39 07       	cpc	r19, r25
 284:	44 f0       	brlt	.+16     	; 0x296 <labyreg+0x94>
 286:	87 b5       	in	r24, 0x27	; 39
 288:	86 95       	lsr	r24
 28a:	86 95       	lsr	r24
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	90 93 4e 01 	sts	0x014E, r25
 292:	80 93 4d 01 	sts	0x014D, r24
 296:	88 b5       	in	r24, 0x28	; 40
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	91 95       	neg	r25
 29c:	81 95       	neg	r24
 29e:	91 09       	sbc	r25, r1
 2a0:	0a f4       	brpl	.+2      	; 0x2a4 <labyreg+0xa2>
 2a2:	03 96       	adiw	r24, 0x03	; 3
 2a4:	95 95       	asr	r25
 2a6:	87 95       	ror	r24
 2a8:	95 95       	asr	r25
 2aa:	87 95       	ror	r24
 2ac:	20 91 4d 01 	lds	r18, 0x014D
 2b0:	30 91 4e 01 	lds	r19, 0x014E
 2b4:	82 17       	cp	r24, r18
 2b6:	93 07       	cpc	r25, r19
 2b8:	7c f0       	brlt	.+30     	; 0x2d8 <labyreg+0xd6>
 2ba:	88 b5       	in	r24, 0x28	; 40
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	91 95       	neg	r25
 2c0:	81 95       	neg	r24
 2c2:	91 09       	sbc	r25, r1
 2c4:	0a f4       	brpl	.+2      	; 0x2c8 <labyreg+0xc6>
 2c6:	03 96       	adiw	r24, 0x03	; 3
 2c8:	95 95       	asr	r25
 2ca:	87 95       	ror	r24
 2cc:	95 95       	asr	r25
 2ce:	87 95       	ror	r24
 2d0:	90 93 4e 01 	sts	0x014E, r25
 2d4:	80 93 4d 01 	sts	0x014D, r24
 2d8:	80 91 4d 01 	lds	r24, 0x014D
 2dc:	90 91 4e 01 	lds	r25, 0x014E
 2e0:	18 16       	cp	r1, r24
 2e2:	19 06       	cpc	r1, r25
 2e4:	44 f4       	brge	.+16     	; 0x2f6 <labyreg+0xf4>
 2e6:	90 91 2d 01 	lds	r25, 0x012D
 2ea:	98 1b       	sub	r25, r24
 2ec:	97 bd       	out	0x27, r25	; 39
 2ee:	80 91 2b 01 	lds	r24, 0x012B
 2f2:	88 bd       	out	0x28, r24	; 40
 2f4:	08 95       	ret
 2f6:	99 23       	and	r25, r25
 2f8:	54 f4       	brge	.+20     	; 0x30e <labyreg+0x10c>
 2fa:	80 91 2d 01 	lds	r24, 0x012D
 2fe:	87 bd       	out	0x27, r24	; 39
 300:	90 91 4d 01 	lds	r25, 0x014D
 304:	80 91 2b 01 	lds	r24, 0x012B
 308:	89 0f       	add	r24, r25
 30a:	88 bd       	out	0x28, r24	; 40
 30c:	08 95       	ret
 30e:	89 2b       	or	r24, r25
 310:	31 f4       	brne	.+12     	; 0x31e <labyreg+0x11c>
 312:	80 91 2d 01 	lds	r24, 0x012D
 316:	87 bd       	out	0x27, r24	; 39
 318:	80 91 2b 01 	lds	r24, 0x012B
 31c:	88 bd       	out	0x28, r24	; 40
 31e:	08 95       	ret

00000320 <linje>:
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	90 93 14 01 	sts	0x0114, r25
 328:	80 93 13 01 	sts	0x0113, r24
 32c:	f8 94       	cli
 32e:	80 91 15 01 	lds	r24, 0x0115
 332:	90 91 16 01 	lds	r25, 0x0116
 336:	78 94       	sei
 338:	20 91 1d 01 	lds	r18, 0x011D
 33c:	30 91 1e 01 	lds	r19, 0x011E
 340:	28 1b       	sub	r18, r24
 342:	39 0b       	sbc	r19, r25
 344:	30 93 1c 01 	sts	0x011C, r19
 348:	20 93 1b 01 	sts	0x011B, r18
 34c:	80 91 17 01 	lds	r24, 0x0117
 350:	90 91 18 01 	lds	r25, 0x0118
 354:	a9 01       	movw	r20, r18
 356:	48 1b       	sub	r20, r24
 358:	59 0b       	sbc	r21, r25
 35a:	50 93 20 01 	sts	0x0120, r21
 35e:	40 93 1f 01 	sts	0x011F, r20
 362:	80 91 02 01 	lds	r24, 0x0102
 366:	90 91 03 01 	lds	r25, 0x0103
 36a:	28 9f       	mul	r18, r24
 36c:	b0 01       	movw	r22, r0
 36e:	29 9f       	mul	r18, r25
 370:	70 0d       	add	r23, r0
 372:	38 9f       	mul	r19, r24
 374:	70 0d       	add	r23, r0
 376:	11 24       	eor	r1, r1
 378:	e0 91 00 01 	lds	r30, 0x0100
 37c:	f0 91 01 01 	lds	r31, 0x0101
 380:	4e 9f       	mul	r20, r30
 382:	c0 01       	movw	r24, r0
 384:	4f 9f       	mul	r20, r31
 386:	90 0d       	add	r25, r0
 388:	5e 9f       	mul	r21, r30
 38a:	90 0d       	add	r25, r0
 38c:	11 24       	eor	r1, r1
 38e:	86 0f       	add	r24, r22
 390:	97 1f       	adc	r25, r23
 392:	60 91 13 01 	lds	r22, 0x0113
 396:	70 91 14 01 	lds	r23, 0x0114
 39a:	00 d3       	rcall	.+1536   	; 0x99c <__divmodhi4>
 39c:	70 93 1a 01 	sts	0x011A, r23
 3a0:	60 93 19 01 	sts	0x0119, r22
 3a4:	30 93 18 01 	sts	0x0118, r19
 3a8:	20 93 17 01 	sts	0x0117, r18
 3ac:	77 23       	and	r23, r23
 3ae:	3c f4       	brge	.+14     	; 0x3be <linje+0x9e>
 3b0:	80 91 2d 01 	lds	r24, 0x012D
 3b4:	68 0f       	add	r22, r24
 3b6:	67 bd       	out	0x27, r22	; 39
 3b8:	80 91 2b 01 	lds	r24, 0x012B
 3bc:	88 bd       	out	0x28, r24	; 40
 3be:	20 91 19 01 	lds	r18, 0x0119
 3c2:	30 91 1a 01 	lds	r19, 0x011A
 3c6:	12 16       	cp	r1, r18
 3c8:	13 06       	cpc	r1, r19
 3ca:	3c f4       	brge	.+14     	; 0x3da <linje+0xba>
 3cc:	80 91 2b 01 	lds	r24, 0x012B
 3d0:	82 1b       	sub	r24, r18
 3d2:	88 bd       	out	0x28, r24	; 40
 3d4:	80 91 2d 01 	lds	r24, 0x012D
 3d8:	87 bd       	out	0x27, r24	; 39
 3da:	80 91 19 01 	lds	r24, 0x0119
 3de:	90 91 1a 01 	lds	r25, 0x011A
 3e2:	99 23       	and	r25, r25
 3e4:	1c f4       	brge	.+6      	; 0x3ec <linje+0xcc>
 3e6:	91 95       	neg	r25
 3e8:	81 95       	neg	r24
 3ea:	91 09       	sbc	r25, r1
 3ec:	84 30       	cpi	r24, 0x04	; 4
 3ee:	91 05       	cpc	r25, r1
 3f0:	bc f4       	brge	.+46     	; 0x420 <linje+0x100>
 3f2:	20 91 11 01 	lds	r18, 0x0111
 3f6:	30 91 12 01 	lds	r19, 0x0112
 3fa:	33 23       	and	r19, r19
 3fc:	1c f4       	brge	.+6      	; 0x404 <linje+0xe4>
 3fe:	31 95       	neg	r19
 400:	21 95       	neg	r18
 402:	31 09       	sbc	r19, r1
 404:	2d 30       	cpi	r18, 0x0D	; 13
 406:	31 05       	cpc	r19, r1
 408:	5c f4       	brge	.+22     	; 0x420 <linje+0x100>
 40a:	24 30       	cpi	r18, 0x04	; 4
 40c:	31 05       	cpc	r19, r1
 40e:	14 f0       	brlt	.+4      	; 0x414 <linje+0xf4>
 410:	0d 97       	sbiw	r24, 0x0d	; 13
 412:	34 f4       	brge	.+12     	; 0x420 <linje+0x100>
 414:	80 91 2d 01 	lds	r24, 0x012D
 418:	87 bd       	out	0x27, r24	; 39
 41a:	80 91 2b 01 	lds	r24, 0x012B
 41e:	88 bd       	out	0x28, r24	; 40
 420:	80 91 19 01 	lds	r24, 0x0119
 424:	90 91 1a 01 	lds	r25, 0x011A
 428:	90 93 12 01 	sts	0x0112, r25
 42c:	80 93 11 01 	sts	0x0111, r24
 430:	08 95       	ret

00000432 <linje_main>:
 432:	5a de       	rcall	.-844    	; 0xe8 <linje_get_error>
 434:	08 2e       	mov	r0, r24
 436:	00 0c       	add	r0, r0
 438:	99 0b       	sbc	r25, r25
 43a:	90 93 16 01 	sts	0x0116, r25
 43e:	80 93 15 01 	sts	0x0115, r24
 442:	6e cf       	rjmp	.-292    	; 0x320 <linje>
 444:	08 95       	ret

00000446 <regulator>:
 446:	80 91 25 01 	lds	r24, 0x0125
 44a:	90 91 26 01 	lds	r25, 0x0126
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	11 f4       	brne	.+4      	; 0x456 <regulator+0x10>
 452:	ef cf       	rjmp	.-34     	; 0x432 <linje_main>
 454:	08 95       	ret
 456:	d5 ce       	rjmp	.-598    	; 0x202 <labyreg>
 458:	08 95       	ret

0000045a <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
 45a:	84 b5       	in	r24, 0x24	; 36
 45c:	83 6a       	ori	r24, 0xA3	; 163
 45e:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
 460:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
 462:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
 464:	85 b5       	in	r24, 0x25	; 37
 466:	83 60       	ori	r24, 0x03	; 3
 468:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
 46a:	88 e7       	ldi	r24, 0x78	; 120
 46c:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
 46e:	85 b1       	in	r24, 0x05	; 5
 470:	15 b8       	out	0x05, r1	; 5
 472:	08 95       	ret

00000474 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
 478:	e1 e8       	ldi	r30, 0x81	; 129
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	8d 60       	ori	r24, 0x0D	; 13
 480:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
 482:	80 ea       	ldi	r24, 0xA0	; 160
 484:	95 e0       	ldi	r25, 0x05	; 5
 486:	90 93 89 00 	sts	0x0089, r25
 48a:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 48e:	ef e6       	ldi	r30, 0x6F	; 111
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	82 60       	ori	r24, 0x02	; 2
 496:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
 498:	b1 9a       	sbi	0x16, 1	; 22
 49a:	08 95       	ret

0000049c <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
 49c:	1f 92       	push	r1
 49e:	0f 92       	push	r0
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	0f 92       	push	r0
 4a4:	11 24       	eor	r1, r1
 4a6:	2f 93       	push	r18
 4a8:	3f 93       	push	r19
 4aa:	8f 93       	push	r24
 4ac:	9f 93       	push	r25
	regler_ready=1;
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	90 93 2a 01 	sts	0x012A, r25
 4b6:	80 93 29 01 	sts	0x0129, r24
	//if(counter_timer<10)
	//counter_timer++;
	count_arre++;				//array räknare
 4ba:	80 91 0e 01 	lds	r24, 0x010E
 4be:	90 91 0f 01 	lds	r25, 0x010F
 4c2:	01 96       	adiw	r24, 0x01	; 1
 4c4:	90 93 0f 01 	sts	0x010F, r25
 4c8:	80 93 0e 01 	sts	0x010E, r24
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
 4cc:	20 91 27 01 	lds	r18, 0x0127
 4d0:	30 91 28 01 	lds	r19, 0x0128
 4d4:	2f 5f       	subi	r18, 0xFF	; 255
 4d6:	3f 4f       	sbci	r19, 0xFF	; 255
 4d8:	30 93 28 01 	sts	0x0128, r19
 4dc:	20 93 27 01 	sts	0x0127, r18
	if(count_arre >= 29){
 4e0:	4d 97       	sbiw	r24, 0x1d	; 29
 4e2:	24 f0       	brlt	.+8      	; 0x4ec <__vector_13+0x50>
		count_arre = 0;
 4e4:	10 92 0f 01 	sts	0x010F, r1
 4e8:	10 92 0e 01 	sts	0x010E, r1
	}
}
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti

000004fe <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
 4fe:	8d b3       	in	r24, 0x1d	; 29
 500:	86 60       	ori	r24, 0x06	; 6
 502:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
 504:	e9 e6       	ldi	r30, 0x69	; 105
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	80 81       	ld	r24, Z
 50a:	88 62       	ori	r24, 0x28	; 40
 50c:	80 83       	st	Z, r24
 50e:	08 95       	ret

00000510 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
 510:	1f 92       	push	r1
 512:	0f 92       	push	r0
 514:	0f b6       	in	r0, 0x3f	; 63
 516:	0f 92       	push	r0
 518:	11 24       	eor	r1, r1
 51a:	8f 93       	push	r24
 51c:	9f 93       	push	r25
	if(drive_mode==1){
 51e:	80 91 31 01 	lds	r24, 0x0131
 522:	90 91 32 01 	lds	r25, 0x0132
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	39 f4       	brne	.+14     	; 0x538 <__vector_2+0x28>
		drive_mode=0;
 52a:	10 92 32 01 	sts	0x0132, r1
 52e:	10 92 31 01 	sts	0x0131, r1
		PORTD |= (1 << PD1);
 532:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
 534:	58 98       	cbi	0x0b, 0	; 11
 536:	0c c0       	rjmp	.+24     	; 0x550 <__vector_2+0x40>
	}
	else{
		start=0;
 538:	10 92 30 01 	sts	0x0130, r1
 53c:	10 92 2f 01 	sts	0x012F, r1
		drive_mode=1;
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 32 01 	sts	0x0132, r25
 548:	80 93 31 01 	sts	0x0131, r24
		PORTD |= (1 << PD0);
 54c:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
 54e:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
 550:	e1 9a       	sbi	0x1c, 1	; 28
}
 552:	9f 91       	pop	r25
 554:	8f 91       	pop	r24
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
 560:	1f 92       	push	r1
 562:	0f 92       	push	r0
 564:	0f b6       	in	r0, 0x3f	; 63
 566:	0f 92       	push	r0
 568:	11 24       	eor	r1, r1
 56a:	8f 93       	push	r24
 56c:	9f 93       	push	r25
	if(start==0){
 56e:	80 91 2f 01 	lds	r24, 0x012F
 572:	90 91 30 01 	lds	r25, 0x0130
 576:	89 2b       	or	r24, r25
 578:	39 f4       	brne	.+14     	; 0x588 <__vector_3+0x28>
		start=1;
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	90 93 30 01 	sts	0x0130, r25
 582:	80 93 2f 01 	sts	0x012F, r24
 586:	04 c0       	rjmp	.+8      	; 0x590 <__vector_3+0x30>
	}
	else{
		start=0;
 588:	10 92 30 01 	sts	0x0130, r1
 58c:	10 92 2f 01 	sts	0x012F, r1
	}
	EIFR |= (1<< INTF2);
 590:	e2 9a       	sbi	0x1c, 2	; 28
}
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
 5a0:	88 23       	and	r24, r24
 5a2:	69 f0       	breq	.+26     	; 0x5be <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
 5a4:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
 5a6:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
 5a8:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
 5aa:	e9 e6       	ldi	r30, 0x69	; 105
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	80 81       	ld	r24, Z
 5b0:	83 60       	ori	r24, 0x03	; 3
 5b2:	80 83       	st	Z, r24
		TWBR = 0x10;
 5b4:	80 e1       	ldi	r24, 0x10	; 16
 5b6:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 5ba:	10 92 b9 00 	sts	0x00B9, r1
 5be:	08 95       	ret

000005c0 <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){
 5c0:	8f 92       	push	r8
 5c2:	9f 92       	push	r9
 5c4:	af 92       	push	r10
 5c6:	bf 92       	push	r11
 5c8:	cf 92       	push	r12
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
 5d8:	eb 01       	movw	r28, r22
 5da:	08 81       	ld	r16, Y
 5dc:	02 95       	swap	r16
 5de:	0f 70       	andi	r16, 0x0F	; 15
 5e0:	10 e0       	ldi	r17, 0x00	; 0
 5e2:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
 5e4:	68 94       	set
 5e6:	ee 24       	eor	r14, r14
 5e8:	e3 f8       	bld	r14, 3
 5ea:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 5f0:	ec eb       	ldi	r30, 0xBC	; 188
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	0f 2e       	mov	r0, r31
 5f6:	f4 ea       	ldi	r31, 0xA4	; 164
 5f8:	df 2e       	mov	r13, r31
 5fa:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
 5fc:	a9 eb       	ldi	r26, 0xB9	; 185
 5fe:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 600:	8e 7f       	andi	r24, 0xFE	; 254
 602:	c8 2e       	mov	r12, r24
 604:	6b eb       	ldi	r22, 0xBB	; 187
 606:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 608:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;
 60a:	68 94       	set
 60c:	aa 24       	eor	r10, r10
 60e:	a4 f8       	bld	r10, 4
 610:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 612:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 614:	90 81       	ld	r25, Z
 616:	99 23       	and	r25, r25
 618:	ec f7       	brge	.-6      	; 0x614 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status en start
 61a:	2c 91       	ld	r18, X
 61c:	28 7f       	andi	r18, 0xF8	; 248
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	2e 15       	cp	r18, r14
 622:	3f 05       	cpc	r19, r15
 624:	69 f5       	brne	.+90     	; 0x680 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 626:	eb 01       	movw	r28, r22
 628:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 62a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 62c:	90 81       	ld	r25, Z
 62e:	99 23       	and	r25, r25
 630:	ec f7       	brge	.-6      	; 0x62c <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18)
 632:	9c 91       	ld	r25, X
 634:	98 7f       	andi	r25, 0xF8	; 248
 636:	98 31       	cpi	r25, 0x18	; 24
 638:	29 f0       	breq	.+10     	; 0x644 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 63a:	84 e9       	ldi	r24, 0x94	; 148
 63c:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	1f c0       	rjmp	.+62     	; 0x682 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];
 644:	e4 01       	movw	r28, r8
 646:	99 91       	ld	r25, Y+
 648:	4e 01       	movw	r8, r28
 64a:	eb 01       	movw	r28, r22
 64c:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
 64e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
 650:	90 81       	ld	r25, Z
 652:	99 23       	and	r25, r25
 654:	ec f7       	brge	.-6      	; 0x650 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
 656:	9c 91       	ld	r25, X
 658:	98 7f       	andi	r25, 0xF8	; 248
 65a:	98 32       	cpi	r25, 0x28	; 40
 65c:	29 f0       	breq	.+10     	; 0x668 <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 65e:	84 e9       	ldi	r24, 0x94	; 148
 660:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0d c0       	rjmp	.+26     	; 0x682 <i2c_send+0xc2>
	}
	counter++;
 668:	4f 5f       	subi	r20, 0xFF	; 255
 66a:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;
 66c:	ea 2c       	mov	r14, r10
 66e:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);
 670:	04 17       	cp	r16, r20
 672:	15 07       	cpc	r17, r21
 674:	74 f6       	brge	.-100    	; 0x612 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 676:	84 e9       	ldi	r24, 0x94	; 148
 678:	80 93 bc 00 	sts	0x00BC, r24
	return true;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	01 c0       	rjmp	.+2      	; 0x682 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
		return false;		
 680:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;
	}while (counter <= number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
 682:	df 91       	pop	r29
 684:	cf 91       	pop	r28
 686:	1f 91       	pop	r17
 688:	0f 91       	pop	r16
 68a:	ff 90       	pop	r15
 68c:	ef 90       	pop	r14
 68e:	df 90       	pop	r13
 690:	cf 90       	pop	r12
 692:	bf 90       	pop	r11
 694:	af 90       	pop	r10
 696:	9f 90       	pop	r9
 698:	8f 90       	pop	r8
 69a:	08 95       	ret

0000069c <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 69c:	ec eb       	ldi	r30, 0xBC	; 188
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	90 81       	ld	r25, Z
 6a2:	94 6a       	ori	r25, 0xA4	; 164
 6a4:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 6a6:	90 81       	ld	r25, Z
 6a8:	99 23       	and	r25, r25
 6aa:	ec f7       	brge	.-6      	; 0x6a6 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
 6ac:	90 91 b9 00 	lds	r25, 0x00B9
 6b0:	98 7f       	andi	r25, 0xF8	; 248
 6b2:	98 30       	cpi	r25, 0x08	; 8
 6b4:	29 f0       	breq	.+10     	; 0x6c0 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6b6:	84 e9       	ldi	r24, 0x94	; 148
 6b8:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	08 95       	ret
	}
	TWDR = prossesor | 0x01;
 6c0:	81 60       	ori	r24, 0x01	; 1
 6c2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 6c6:	84 e8       	ldi	r24, 0x84	; 132
 6c8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 6cc:	ec eb       	ldi	r30, 0xBC	; 188
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	88 23       	and	r24, r24
 6d4:	ec f7       	brge	.-6      	; 0x6d0 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK)
 6d6:	80 91 b9 00 	lds	r24, 0x00B9
 6da:	88 7f       	andi	r24, 0xF8	; 248
 6dc:	80 34       	cpi	r24, 0x40	; 64
 6de:	29 f0       	breq	.+10     	; 0x6ea <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6e0:	84 e9       	ldi	r24, 0x94	; 148
 6e2:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
 6ea:	ec eb       	ldi	r30, 0xBC	; 188
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	84 68       	ori	r24, 0x84	; 132
 6f2:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 6f4:	80 81       	ld	r24, Z
 6f6:	88 23       	and	r24, r24
 6f8:	ec f7       	brge	.-6      	; 0x6f4 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR;
 6fa:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6fe:	94 e9       	ldi	r25, 0x94	; 148
 700:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 704:	08 95       	ret

00000706 <i2c_store_data>:

void i2c_store_data(byte data)
{
	static int counter;
	static int size;
	if(counter == 0){
 706:	20 91 0c 01 	lds	r18, 0x010C
 70a:	30 91 0d 01 	lds	r19, 0x010D
 70e:	21 15       	cp	r18, r1
 710:	31 05       	cpc	r19, r1
 712:	89 f4       	brne	.+34     	; 0x736 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
 714:	28 2f       	mov	r18, r24
 716:	22 95       	swap	r18
 718:	2f 70       	andi	r18, 0x0F	; 15
 71a:	30 e0       	ldi	r19, 0x00	; 0
 71c:	30 93 0b 01 	sts	0x010B, r19
 720:	20 93 0a 01 	sts	0x010A, r18
		i2c_data[counter] = data;
 724:	80 93 36 01 	sts	0x0136, r24
		counter++;
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	90 93 0d 01 	sts	0x010D, r25
 730:	80 93 0c 01 	sts	0x010C, r24
 734:	18 c0       	rjmp	.+48     	; 0x766 <i2c_store_data+0x60>
	}
	else if(counter < size+1){
 736:	40 91 0a 01 	lds	r20, 0x010A
 73a:	50 91 0b 01 	lds	r21, 0x010B
 73e:	4f 5f       	subi	r20, 0xFF	; 255
 740:	5f 4f       	sbci	r21, 0xFF	; 255
 742:	24 17       	cp	r18, r20
 744:	35 07       	cpc	r19, r21
 746:	5c f4       	brge	.+22     	; 0x75e <i2c_store_data+0x58>
		i2c_data[counter] = data;
 748:	f9 01       	movw	r30, r18
 74a:	ea 5c       	subi	r30, 0xCA	; 202
 74c:	fe 4f       	sbci	r31, 0xFE	; 254
 74e:	80 83       	st	Z, r24
		counter++;
 750:	2f 5f       	subi	r18, 0xFF	; 255
 752:	3f 4f       	sbci	r19, 0xFF	; 255
 754:	30 93 0d 01 	sts	0x010D, r19
 758:	20 93 0c 01 	sts	0x010C, r18
 75c:	04 c0       	rjmp	.+8      	; 0x766 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
 75e:	f9 01       	movw	r30, r18
 760:	ea 5c       	subi	r30, 0xCA	; 202
 762:	fe 4f       	sbci	r31, 0xFE	; 254
 764:	80 83       	st	Z, r24
	}
	if(counter>=size+1){
 766:	80 91 0a 01 	lds	r24, 0x010A
 76a:	90 91 0b 01 	lds	r25, 0x010B
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	20 91 0c 01 	lds	r18, 0x010C
 774:	30 91 0d 01 	lds	r19, 0x010D
 778:	28 17       	cp	r18, r24
 77a:	39 07       	cpc	r19, r25
 77c:	44 f0       	brlt	.+16     	; 0x78e <i2c_store_data+0x88>
		i2c_newdata = true;
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	80 93 10 01 	sts	0x0110, r24
		counter = 0;
 784:	10 92 0d 01 	sts	0x010D, r1
 788:	10 92 0c 01 	sts	0x010C, r1
		EIMSK &= ~(1<<INT0);
 78c:	e8 98       	cbi	0x1d, 0	; 29
 78e:	08 95       	ret

00000790 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)
{	
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	0b b6       	in	r0, 0x3b	; 59
 79c:	0f 92       	push	r0
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	4f 93       	push	r20
 7a4:	5f 93       	push	r21
 7a6:	6f 93       	push	r22
 7a8:	7f 93       	push	r23
 7aa:	8f 93       	push	r24
 7ac:	9f 93       	push	r25
 7ae:	af 93       	push	r26
 7b0:	bf 93       	push	r27
 7b2:	ef 93       	push	r30
 7b4:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b6:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
 7b8:	36 9b       	sbis	0x06, 6	; 6
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // processor 1
 7bc:	82 e0       	ldi	r24, 0x02	; 2
 7be:	6e df       	rcall	.-292    	; 0x69c <i2c_recive>
 7c0:	a2 df       	rcall	.-188    	; 0x706 <i2c_store_data>
 7c2:	05 c0       	rjmp	.+10     	; 0x7ce <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  PINC&(1<< PC7)>0
 7c4:	37 9b       	sbis	0x06, 7	; 6
 7c6:	03 c0       	rjmp	.+6      	; 0x7ce <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // processor 3
 7c8:	86 e0       	ldi	r24, 0x06	; 6
 7ca:	68 df       	rcall	.-304    	; 0x69c <i2c_recive>
 7cc:	9c df       	rcall	.-200    	; 0x706 <i2c_store_data>
	}
}
 7ce:	ff 91       	pop	r31
 7d0:	ef 91       	pop	r30
 7d2:	bf 91       	pop	r27
 7d4:	af 91       	pop	r26
 7d6:	9f 91       	pop	r25
 7d8:	8f 91       	pop	r24
 7da:	7f 91       	pop	r23
 7dc:	6f 91       	pop	r22
 7de:	5f 91       	pop	r21
 7e0:	4f 91       	pop	r20
 7e2:	3f 91       	pop	r19
 7e4:	2f 91       	pop	r18
 7e6:	0f 90       	pop	r0
 7e8:	0b be       	out	0x3b, r0	; 59
 7ea:	0f 90       	pop	r0
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	0f 90       	pop	r0
 7f0:	1f 90       	pop	r1
 7f2:	18 95       	reti

000007f4 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){
	if(i2c_newdata==true)
 7f4:	80 91 10 01 	lds	r24, 0x0110
 7f8:	88 23       	and	r24, r24
 7fa:	09 f4       	brne	.+2      	; 0x7fe <i2c_handel_data+0xa>
 7fc:	8d c0       	rjmp	.+282    	; 0x918 <i2c_handel_data+0x124>
	{
		i2c_newdata=false;
 7fe:	10 92 10 01 	sts	0x0110, r1
		if(!((i2c_data[0]>>3)&0x01)){
 802:	80 91 36 01 	lds	r24, 0x0136
 806:	83 fd       	sbrc	r24, 3
 808:	07 c0       	rjmp	.+14     	; 0x818 <i2c_handel_data+0x24>
 80a:	84 e6       	ldi	r24, 0x64	; 100
 80c:	8a 95       	dec	r24
 80e:	f1 f7       	brne	.-4      	; 0x80c <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
 810:	66 e3       	ldi	r22, 0x36	; 54
 812:	71 e0       	ldi	r23, 0x01	; 1
 814:	82 e0       	ldi	r24, 0x02	; 2
 816:	d4 de       	rcall	.-600    	; 0x5c0 <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
 818:	20 91 36 01 	lds	r18, 0x0136
 81c:	e2 2f       	mov	r30, r18
 81e:	ef 70       	andi	r30, 0x0F	; 15
 820:	8e 2f       	mov	r24, r30
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	8f 30       	cpi	r24, 0x0F	; 15
 826:	91 05       	cpc	r25, r1
 828:	08 f0       	brcs	.+2      	; 0x82c <i2c_handel_data+0x38>
 82a:	75 c0       	rjmp	.+234    	; 0x916 <i2c_handel_data+0x122>
 82c:	fc 01       	movw	r30, r24
 82e:	ea 5b       	subi	r30, 0xBA	; 186
 830:	ff 4f       	sbci	r31, 0xFF	; 255
 832:	c7 c0       	rjmp	.+398    	; 0x9c2 <__tablejump2__>
			case 0x00 :
				batteri=i2c_data[1],i2c_data[2];
 834:	80 91 37 01 	lds	r24, 0x0137
 838:	80 93 4f 01 	sts	0x014F, r24
				break;
 83c:	6c c0       	rjmp	.+216    	; 0x916 <i2c_handel_data+0x122>
			case 0x01 :
				//PORTD ^= (1 << PD0);
				sensor_right = i2c_data[3];
 83e:	e6 e3       	ldi	r30, 0x36	; 54
 840:	f1 e0       	ldi	r31, 0x01	; 1
 842:	83 81       	ldd	r24, Z+3	; 0x03
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	90 93 48 01 	sts	0x0148, r25
 84a:	80 93 47 01 	sts	0x0147, r24
				//distans_right=i2c_data[3];
				distans_fram = i2c_data[2];
 84e:	22 81       	ldd	r18, Z+2	; 0x02
 850:	20 93 49 01 	sts	0x0149, r18
				sensor_left = i2c_data[1];
 854:	21 81       	ldd	r18, Z+1	; 0x01
 856:	30 e0       	ldi	r19, 0x00	; 0
 858:	30 93 34 01 	sts	0x0134, r19
 85c:	20 93 33 01 	sts	0x0133, r18
				if(sensor_right > 20)
 860:	85 31       	cpi	r24, 0x15	; 21
 862:	91 05       	cpc	r25, r1
 864:	14 f0       	brlt	.+4      	; 0x86a <i2c_handel_data+0x76>
					PORTD |= (1 << PD0);
 866:	58 9a       	sbi	0x0b, 0	; 11
 868:	56 c0       	rjmp	.+172    	; 0x916 <i2c_handel_data+0x122>
				else if(sensor_right > 30)
 86a:	4f 97       	sbiw	r24, 0x1f	; 31
 86c:	14 f0       	brlt	.+4      	; 0x872 <i2c_handel_data+0x7e>
					PORTD &= ~(1 << PD0);
 86e:	58 98       	cbi	0x0b, 0	; 11
 870:	52 c0       	rjmp	.+164    	; 0x916 <i2c_handel_data+0x122>
				else
				PORTD &= ~(1 << PD0);
 872:	58 98       	cbi	0x0b, 0	; 11
 874:	50 c0       	rjmp	.+160    	; 0x916 <i2c_handel_data+0x122>
				//distans_left=i2c_data[1];
				break;
			case 0x02 :
				Reflex_data=i2c_data[2]*0x10000+i2c_data[1]*0x100+i2c_data[0];
 876:	80 91 37 01 	lds	r24, 0x0137
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	98 2f       	mov	r25, r24
 87e:	88 27       	eor	r24, r24
 880:	82 0f       	add	r24, r18
 882:	91 1d       	adc	r25, r1
 884:	90 93 46 01 	sts	0x0146, r25
 888:	80 93 45 01 	sts	0x0145, r24
				break;
 88c:	44 c0       	rjmp	.+136    	; 0x916 <i2c_handel_data+0x122>
			case 0x03 :
				RGB_data=1;//"röd";"
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	80 93 52 01 	sts	0x0152, r24
				break;
 894:	40 c0       	rjmp	.+128    	; 0x916 <i2c_handel_data+0x122>
			case 0x04 :
				RGB_data=2;//"grön";
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	80 93 52 01 	sts	0x0152, r24
				break;		
 89c:	3c c0       	rjmp	.+120    	; 0x916 <i2c_handel_data+0x122>
			case 0x05 :
				RGB_data=3;//"blå";
 89e:	83 e0       	ldi	r24, 0x03	; 3
 8a0:	80 93 52 01 	sts	0x0152, r24
				break;
 8a4:	38 c0       	rjmp	.+112    	; 0x916 <i2c_handel_data+0x122>
			case 0x06 :
			
				break;
			case 0x07 :
				gyro_90=true;
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	80 93 35 01 	sts	0x0135, r24
				break;
 8ac:	34 c0       	rjmp	.+104    	; 0x916 <i2c_handel_data+0x122>
			case 0x08 :
				manual_function=0;
 8ae:	10 92 24 01 	sts	0x0124, r1
 8b2:	10 92 23 01 	sts	0x0123, r1
				break;
 8b6:	2f c0       	rjmp	.+94     	; 0x916 <i2c_handel_data+0x122>
			case 0x09 :
				manual_function=1;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	90 93 24 01 	sts	0x0124, r25
 8c0:	80 93 23 01 	sts	0x0123, r24
				
				PORTD |= (1 << PD0); // heej
 8c4:	58 9a       	sbi	0x0b, 0	; 11
				break;
 8c6:	27 c0       	rjmp	.+78     	; 0x916 <i2c_handel_data+0x122>
			case 0x0a :
			PORTD |= (1 << PD0); // heej
 8c8:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=2;
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	90 93 24 01 	sts	0x0124, r25
 8d2:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8d6:	1f c0       	rjmp	.+62     	; 0x916 <i2c_handel_data+0x122>
			case 0x0b :
			PORTD |= (1 << PD0); // heej
 8d8:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=4;
 8da:	84 e0       	ldi	r24, 0x04	; 4
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	90 93 24 01 	sts	0x0124, r25
 8e2:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8e6:	17 c0       	rjmp	.+46     	; 0x916 <i2c_handel_data+0x122>
			case 0x0c :
			PORTD |= (1 << PD0); // heej
 8e8:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=3;
 8ea:	83 e0       	ldi	r24, 0x03	; 3
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	90 93 24 01 	sts	0x0124, r25
 8f2:	80 93 23 01 	sts	0x0123, r24
				
				break;
 8f6:	0f c0       	rjmp	.+30     	; 0x916 <i2c_handel_data+0x122>
			case 0x0d :
			PORTD |= (1 << PD0); // heej
 8f8:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=6;
 8fa:	86 e0       	ldi	r24, 0x06	; 6
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	90 93 24 01 	sts	0x0124, r25
 902:	80 93 23 01 	sts	0x0123, r24
				
				break;
 906:	07 c0       	rjmp	.+14     	; 0x916 <i2c_handel_data+0x122>
			case 0x0e :
			PORTD |= (1 << PD0); // heej
 908:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=5;
 90a:	85 e0       	ldi	r24, 0x05	; 5
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	90 93 24 01 	sts	0x0124, r25
 912:	80 93 23 01 	sts	0x0123, r24
						
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
 916:	e8 9a       	sbi	0x1d, 0	; 29
 918:	08 95       	ret

0000091a <main>:
				5,  4,  3,  2, 0 };
//*********************************for test only

int main(void)
{
	interrupt_init();
 91a:	f1 dd       	rcall	.-1054   	; 0x4fe <interrupt_init>
	board_init();
 91c:	e4 db       	rcall	.-2104   	; 0xe6 <board_init>
	initengine();
 91e:	9d dd       	rcall	.-1222   	; 0x45a <initengine>
	timerinit();
 920:	a9 dd       	rcall	.-1198   	; 0x474 <timerinit>
	i2c_setup(1);
 922:	81 e0       	ldi	r24, 0x01	; 1
 924:	3d de       	rcall	.-902    	; 0x5a0 <i2c_setup>
	sei();
 926:	78 94       	sei
	//***********Set motors speed value here *****************
	left=50;//100;				// kanske räcker med en variable för båda om båda kör exakt lika fort
 928:	82 e3       	ldi	r24, 0x32	; 50
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	90 93 2e 01 	sts	0x012E, r25
 930:	80 93 2d 01 	sts	0x012D, r24
	right=45;//93;
 934:	8d e2       	ldi	r24, 0x2D	; 45
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	90 93 2c 01 	sts	0x012C, r25
 93c:	80 93 2b 01 	sts	0x012B, r24
	//********************************************************
	motor_left=left;      
 940:	82 e3       	ldi	r24, 0x32	; 50
 942:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
 944:	80 91 2b 01 	lds	r24, 0x012B
 948:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito	
 94a:	54 df       	rcall	.-344    	; 0x7f4 <i2c_handel_data>
			if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
 94c:	80 91 31 01 	lds	r24, 0x0131
 950:	90 91 32 01 	lds	r25, 0x0132
 954:	81 30       	cpi	r24, 0x01	; 1
 956:	91 05       	cpc	r25, r1
 958:	e9 f4       	brne	.+58     	; 0x994 <main+0x7a>
				PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
 95a:	2d 98       	cbi	0x05, 5	; 5
				PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
 95c:	2e 98       	cbi	0x05, 6	; 5
				//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
				if(regler_ready==1 && start == 1){
 95e:	80 91 29 01 	lds	r24, 0x0129
 962:	90 91 2a 01 	lds	r25, 0x012A
 966:	01 97       	sbiw	r24, 0x01	; 1
 968:	61 f4       	brne	.+24     	; 0x982 <main+0x68>
 96a:	80 91 2f 01 	lds	r24, 0x012F
 96e:	90 91 30 01 	lds	r25, 0x0130
 972:	01 97       	sbiw	r24, 0x01	; 1
 974:	31 f4       	brne	.+12     	; 0x982 <main+0x68>
					regulator();
 976:	67 dd       	rcall	.-1330   	; 0x446 <regulator>
					regler_ready=0;	
 978:	10 92 2a 01 	sts	0x012A, r1
 97c:	10 92 29 01 	sts	0x0129, r1
 980:	e4 cf       	rjmp	.-56     	; 0x94a <main+0x30>
				}
				else if(start == 0){					// if start is zero then turn off the auto, stops motors
 982:	80 91 2f 01 	lds	r24, 0x012F
 986:	90 91 30 01 	lds	r25, 0x0130
 98a:	89 2b       	or	r24, r25
 98c:	f1 f6       	brne	.-68     	; 0x94a <main+0x30>
					motor_left=0;
 98e:	17 bc       	out	0x27, r1	; 39
					motor_right=0;
 990:	18 bc       	out	0x28, r1	; 40
 992:	db cf       	rjmp	.-74     	; 0x94a <main+0x30>
				}
			}
			else if(drive_mode==0){										// Drivemode is manual
 994:	89 2b       	or	r24, r25
 996:	c9 f6       	brne	.-78     	; 0x94a <main+0x30>
				manual_drive();
 998:	cd db       	rcall	.-2150   	; 0x134 <manual_drive>
 99a:	d7 cf       	rjmp	.-82     	; 0x94a <main+0x30>

0000099c <__divmodhi4>:
 99c:	97 fb       	bst	r25, 7
 99e:	07 2e       	mov	r0, r23
 9a0:	16 f4       	brtc	.+4      	; 0x9a6 <__divmodhi4+0xa>
 9a2:	00 94       	com	r0
 9a4:	06 d0       	rcall	.+12     	; 0x9b2 <__divmodhi4_neg1>
 9a6:	77 fd       	sbrc	r23, 7
 9a8:	08 d0       	rcall	.+16     	; 0x9ba <__divmodhi4_neg2>
 9aa:	14 d0       	rcall	.+40     	; 0x9d4 <__udivmodhi4>
 9ac:	07 fc       	sbrc	r0, 7
 9ae:	05 d0       	rcall	.+10     	; 0x9ba <__divmodhi4_neg2>
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__divmodhi4_exit>

000009b2 <__divmodhi4_neg1>:
 9b2:	90 95       	com	r25
 9b4:	81 95       	neg	r24
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	08 95       	ret

000009ba <__divmodhi4_neg2>:
 9ba:	70 95       	com	r23
 9bc:	61 95       	neg	r22
 9be:	7f 4f       	sbci	r23, 0xFF	; 255

000009c0 <__divmodhi4_exit>:
 9c0:	08 95       	ret

000009c2 <__tablejump2__>:
 9c2:	ee 0f       	add	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	00 24       	eor	r0, r0
 9c8:	00 1c       	adc	r0, r0
 9ca:	0b be       	out	0x3b, r0	; 59
 9cc:	07 90       	elpm	r0, Z+
 9ce:	f6 91       	elpm	r31, Z
 9d0:	e0 2d       	mov	r30, r0
 9d2:	09 94       	ijmp

000009d4 <__udivmodhi4>:
 9d4:	aa 1b       	sub	r26, r26
 9d6:	bb 1b       	sub	r27, r27
 9d8:	51 e1       	ldi	r21, 0x11	; 17
 9da:	07 c0       	rjmp	.+14     	; 0x9ea <__udivmodhi4_ep>

000009dc <__udivmodhi4_loop>:
 9dc:	aa 1f       	adc	r26, r26
 9de:	bb 1f       	adc	r27, r27
 9e0:	a6 17       	cp	r26, r22
 9e2:	b7 07       	cpc	r27, r23
 9e4:	10 f0       	brcs	.+4      	; 0x9ea <__udivmodhi4_ep>
 9e6:	a6 1b       	sub	r26, r22
 9e8:	b7 0b       	sbc	r27, r23

000009ea <__udivmodhi4_ep>:
 9ea:	88 1f       	adc	r24, r24
 9ec:	99 1f       	adc	r25, r25
 9ee:	5a 95       	dec	r21
 9f0:	a9 f7       	brne	.-22     	; 0x9dc <__udivmodhi4_loop>
 9f2:	80 95       	com	r24
 9f4:	90 95       	com	r25
 9f6:	bc 01       	movw	r22, r24
 9f8:	cd 01       	movw	r24, r26
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
