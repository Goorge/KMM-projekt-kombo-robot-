
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a76  00000b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  0080010a  0080010a  00000b14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d5d  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002f4  00000000  00000000  00001a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015da  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000106b2  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fd1  00000000  00000000  00013cd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00014ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  00014e0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	54 c0       	rjmp	.+168    	; 0xaa <__ctors_end>
   2:	00 00       	nop
   4:	fe c3       	rjmp	.+2044   	; 0x802 <__vector_1>
   6:	00 00       	nop
   8:	bc c2       	rjmp	.+1400   	; 0x582 <__vector_2>
   a:	00 00       	nop
   c:	e2 c2       	rjmp	.+1476   	; 0x5d2 <__vector_3>
   e:	00 00       	nop
  10:	69 c0       	rjmp	.+210    	; 0xe4 <__bad_interrupt>
  12:	00 00       	nop
  14:	67 c0       	rjmp	.+206    	; 0xe4 <__bad_interrupt>
  16:	00 00       	nop
  18:	65 c0       	rjmp	.+202    	; 0xe4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	63 c0       	rjmp	.+198    	; 0xe4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	61 c0       	rjmp	.+194    	; 0xe4 <__bad_interrupt>
  22:	00 00       	nop
  24:	5f c0       	rjmp	.+190    	; 0xe4 <__bad_interrupt>
  26:	00 00       	nop
  28:	5d c0       	rjmp	.+186    	; 0xe4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5b c0       	rjmp	.+182    	; 0xe4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	59 c0       	rjmp	.+178    	; 0xe4 <__bad_interrupt>
  32:	00 00       	nop
  34:	6c c2       	rjmp	.+1240   	; 0x50e <__vector_13>
  36:	00 00       	nop
  38:	55 c0       	rjmp	.+170    	; 0xe4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	53 c0       	rjmp	.+166    	; 0xe4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	51 c0       	rjmp	.+162    	; 0xe4 <__bad_interrupt>
  42:	00 00       	nop
  44:	4f c0       	rjmp	.+158    	; 0xe4 <__bad_interrupt>
  46:	00 00       	nop
  48:	4d c0       	rjmp	.+154    	; 0xe4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4b c0       	rjmp	.+150    	; 0xe4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	49 c0       	rjmp	.+146    	; 0xe4 <__bad_interrupt>
  52:	00 00       	nop
  54:	47 c0       	rjmp	.+142    	; 0xe4 <__bad_interrupt>
  56:	00 00       	nop
  58:	45 c0       	rjmp	.+138    	; 0xe4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	43 c0       	rjmp	.+134    	; 0xe4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	41 c0       	rjmp	.+130    	; 0xe4 <__bad_interrupt>
  62:	00 00       	nop
  64:	3f c0       	rjmp	.+126    	; 0xe4 <__bad_interrupt>
  66:	00 00       	nop
  68:	3d c0       	rjmp	.+122    	; 0xe4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3b c0       	rjmp	.+118    	; 0xe4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	39 c0       	rjmp	.+114    	; 0xe4 <__bad_interrupt>
  72:	00 00       	nop
  74:	37 c0       	rjmp	.+110    	; 0xe4 <__bad_interrupt>
  76:	00 00       	nop
  78:	35 c0       	rjmp	.+106    	; 0xe4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	33 c0       	rjmp	.+102    	; 0xe4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	31 c0       	rjmp	.+98     	; 0xe4 <__bad_interrupt>
  82:	00 00       	nop
  84:	2f c0       	rjmp	.+94     	; 0xe4 <__bad_interrupt>
  86:	00 00       	nop
  88:	2d c0       	rjmp	.+90     	; 0xe4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	53 04       	cpc	r5, r3
  8e:	58 04       	cpc	r5, r8
  90:	74 04       	cpc	r7, r4
  92:	82 04       	cpc	r8, r2
  94:	86 04       	cpc	r8, r6
  96:	8a 04       	cpc	r8, r10
  98:	c6 04       	cpc	r12, r6
  9a:	8e 04       	cpc	r8, r14
  9c:	92 04       	cpc	r9, r2
  9e:	97 04       	cpc	r9, r7
  a0:	9f 04       	cpc	r9, r15
  a2:	a7 04       	cpc	r10, r7
  a4:	af 04       	cpc	r10, r15
  a6:	b7 04       	cpc	r11, r7
  a8:	bf 04       	cpc	r11, r15

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e4       	ldi	r29, 0x40	; 64
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	11 e0       	ldi	r17, 0x01	; 1
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b1 e0       	ldi	r27, 0x01	; 1
  bc:	e6 e7       	ldi	r30, 0x76	; 118
  be:	fa e0       	ldi	r31, 0x0A	; 10
  c0:	00 e0       	ldi	r16, 0x00	; 0
  c2:	0b bf       	out	0x3b, r16	; 59
  c4:	02 c0       	rjmp	.+4      	; 0xca <__do_copy_data+0x14>
  c6:	07 90       	elpm	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	aa 30       	cpi	r26, 0x0A	; 10
  cc:	b1 07       	cpc	r27, r17
  ce:	d9 f7       	brne	.-10     	; 0xc6 <__do_copy_data+0x10>

000000d0 <__do_clear_bss>:
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	aa e0       	ldi	r26, 0x0A	; 10
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	01 c0       	rjmp	.+2      	; 0xda <.do_clear_bss_start>

000000d8 <.do_clear_bss_loop>:
  d8:	1d 92       	st	X+, r1

000000da <.do_clear_bss_start>:
  da:	a4 35       	cpi	r26, 0x54	; 84
  dc:	b2 07       	cpc	r27, r18
  de:	e1 f7       	brne	.-8      	; 0xd8 <.do_clear_bss_loop>
  e0:	57 d4       	rcall	.+2222   	; 0x990 <main>
  e2:	c7 c4       	rjmp	.+2446   	; 0xa72 <_exit>

000000e4 <__bad_interrupt>:
  e4:	8d cf       	rjmp	.-230    	; 0x0 <__vectors>

000000e6 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  e6:	08 95       	ret

000000e8 <linje_get_error>:
	}
	
	else if(turn_done && count_waypoint >= 5){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
		twoway_turn_right = false;
		ongoing_turn = false;
		first_time = true;
  e8:	a0 91 43 01 	lds	r26, 0x0143
  ec:	b0 91 44 01 	lds	r27, 0x0144
  f0:	95 e0       	ldi	r25, 0x05	; 5
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	9d 01       	movw	r18, r26
  fe:	04 2e       	mov	r0, r20
 100:	02 c0       	rjmp	.+4      	; 0x106 <linje_get_error+0x1e>
 102:	35 95       	asr	r19
 104:	27 95       	ror	r18
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <linje_get_error+0x1a>
 10a:	e2 2f       	mov	r30, r18
 10c:	e2 70       	andi	r30, 0x02	; 2
 10e:	e9 9f       	mul	r30, r25
 110:	80 0d       	add	r24, r0
 112:	11 24       	eor	r1, r1
 114:	22 70       	andi	r18, 0x02	; 2
 116:	33 27       	eor	r19, r19
 118:	62 0f       	add	r22, r18
 11a:	73 1f       	adc	r23, r19
 11c:	4e 5f       	subi	r20, 0xFE	; 254
 11e:	5f 4f       	sbci	r21, 0xFF	; 255
 120:	91 50       	subi	r25, 0x01	; 1
 122:	46 31       	cpi	r20, 0x16	; 22
 124:	51 05       	cpc	r21, r1
 126:	51 f7       	brne	.-44     	; 0xfc <linje_get_error+0x14>
 128:	08 2e       	mov	r0, r24
 12a:	00 0c       	add	r0, r0
 12c:	99 0b       	sbc	r25, r25
 12e:	71 d4       	rcall	.+2274   	; 0xa12 <__divmodhi4>
 130:	86 2f       	mov	r24, r22
 132:	08 95       	ret

00000134 <manual_drive>:
 134:	80 91 21 01 	lds	r24, 0x0121
 138:	90 91 22 01 	lds	r25, 0x0122
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	29 f4       	brne	.+10     	; 0x14a <manual_drive+0x16>
 140:	2d 98       	cbi	0x05, 5	; 5
 142:	2e 98       	cbi	0x05, 6	; 5
 144:	17 bc       	out	0x27, r1	; 39
 146:	18 bc       	out	0x28, r1	; 40
 148:	08 95       	ret
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	91 05       	cpc	r25, r1
 14e:	49 f4       	brne	.+18     	; 0x162 <manual_drive+0x2e>
 150:	2d 98       	cbi	0x05, 5	; 5
 152:	2e 98       	cbi	0x05, 6	; 5
 154:	80 91 2b 01 	lds	r24, 0x012B
 158:	87 bd       	out	0x27, r24	; 39
 15a:	80 91 29 01 	lds	r24, 0x0129
 15e:	88 bd       	out	0x28, r24	; 40
 160:	08 95       	ret
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	91 05       	cpc	r25, r1
 166:	59 f4       	brne	.+22     	; 0x17e <manual_drive+0x4a>
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 66       	ori	r24, 0x60	; 96
 16c:	85 b9       	out	0x05, r24	; 5
 16e:	80 91 2b 01 	lds	r24, 0x012B
 172:	8d 50       	subi	r24, 0x0D	; 13
 174:	87 bd       	out	0x27, r24	; 39
 176:	80 91 29 01 	lds	r24, 0x0129
 17a:	88 bd       	out	0x28, r24	; 40
 17c:	08 95       	ret
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	91 05       	cpc	r25, r1
 182:	81 f4       	brne	.+32     	; 0x1a4 <manual_drive+0x70>
 184:	2d 98       	cbi	0x05, 5	; 5
 186:	2e 98       	cbi	0x05, 6	; 5
 188:	80 91 2b 01 	lds	r24, 0x012B
 18c:	87 bd       	out	0x27, r24	; 39
 18e:	20 91 29 01 	lds	r18, 0x0129
 192:	90 91 2a 01 	lds	r25, 0x012A
 196:	82 2f       	mov	r24, r18
 198:	63 e0       	ldi	r22, 0x03	; 3
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	3a d4       	rcall	.+2164   	; 0xa12 <__divmodhi4>
 19e:	26 1b       	sub	r18, r22
 1a0:	28 bd       	out	0x28, r18	; 40
 1a2:	08 95       	ret
 1a4:	84 30       	cpi	r24, 0x04	; 4
 1a6:	91 05       	cpc	r25, r1
 1a8:	81 f4       	brne	.+32     	; 0x1ca <manual_drive+0x96>
 1aa:	2d 98       	cbi	0x05, 5	; 5
 1ac:	2e 98       	cbi	0x05, 6	; 5
 1ae:	20 91 2b 01 	lds	r18, 0x012B
 1b2:	90 91 2c 01 	lds	r25, 0x012C
 1b6:	82 2f       	mov	r24, r18
 1b8:	63 e0       	ldi	r22, 0x03	; 3
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	2a d4       	rcall	.+2132   	; 0xa12 <__divmodhi4>
 1be:	26 1b       	sub	r18, r22
 1c0:	27 bd       	out	0x27, r18	; 39
 1c2:	80 91 29 01 	lds	r24, 0x0129
 1c6:	88 bd       	out	0x28, r24	; 40
 1c8:	08 95       	ret
 1ca:	85 30       	cpi	r24, 0x05	; 5
 1cc:	91 05       	cpc	r25, r1
 1ce:	49 f4       	brne	.+18     	; 0x1e2 <manual_drive+0xae>
 1d0:	2d 98       	cbi	0x05, 5	; 5
 1d2:	2e 9a       	sbi	0x05, 6	; 5
 1d4:	80 91 2b 01 	lds	r24, 0x012B
 1d8:	87 bd       	out	0x27, r24	; 39
 1da:	80 91 29 01 	lds	r24, 0x0129
 1de:	88 bd       	out	0x28, r24	; 40
 1e0:	08 95       	ret
 1e2:	06 97       	sbiw	r24, 0x06	; 6
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <manual_drive+0xc4>
 1e6:	2e 98       	cbi	0x05, 6	; 5
 1e8:	2d 9a       	sbi	0x05, 5	; 5
 1ea:	80 91 2b 01 	lds	r24, 0x012B
 1ee:	87 bd       	out	0x27, r24	; 39
 1f0:	80 91 29 01 	lds	r24, 0x0129
 1f4:	88 bd       	out	0x28, r24	; 40
 1f6:	08 95       	ret
 1f8:	10 92 22 01 	sts	0x0122, r1
 1fc:	10 92 21 01 	sts	0x0121, r1
 200:	08 95       	ret

00000202 <PD_for_lab>:
 202:	86 1b       	sub	r24, r22
 204:	97 0b       	sbc	r25, r23
 206:	90 93 4f 01 	sts	0x014F, r25
 20a:	80 93 4e 01 	sts	0x014E, r24
 20e:	20 91 1f 01 	lds	r18, 0x011F
 212:	30 91 20 01 	lds	r19, 0x0120
 216:	ac 01       	movw	r20, r24
 218:	42 1b       	sub	r20, r18
 21a:	53 0b       	sbc	r21, r19
 21c:	50 93 1e 01 	sts	0x011E, r21
 220:	40 93 1d 01 	sts	0x011D, r20
 224:	20 91 08 01 	lds	r18, 0x0108
 228:	30 91 09 01 	lds	r19, 0x0109
 22c:	82 9f       	mul	r24, r18
 22e:	b0 01       	movw	r22, r0
 230:	83 9f       	mul	r24, r19
 232:	70 0d       	add	r23, r0
 234:	92 9f       	mul	r25, r18
 236:	70 0d       	add	r23, r0
 238:	11 24       	eor	r1, r1
 23a:	e0 91 06 01 	lds	r30, 0x0106
 23e:	f0 91 07 01 	lds	r31, 0x0107
 242:	4e 9f       	mul	r20, r30
 244:	90 01       	movw	r18, r0
 246:	4f 9f       	mul	r20, r31
 248:	30 0d       	add	r19, r0
 24a:	5e 9f       	mul	r21, r30
 24c:	30 0d       	add	r19, r0
 24e:	11 24       	eor	r1, r1
 250:	26 0f       	add	r18, r22
 252:	37 1f       	adc	r19, r23
 254:	30 93 4c 01 	sts	0x014C, r19
 258:	20 93 4b 01 	sts	0x014B, r18
 25c:	90 93 20 01 	sts	0x0120, r25
 260:	80 93 1f 01 	sts	0x011F, r24
 264:	87 b5       	in	r24, 0x27	; 39
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	ac 01       	movw	r20, r24
 26a:	44 0f       	add	r20, r20
 26c:	55 1f       	adc	r21, r21
 26e:	84 0f       	add	r24, r20
 270:	95 1f       	adc	r25, r21
 272:	95 95       	asr	r25
 274:	87 95       	ror	r24
 276:	95 95       	asr	r25
 278:	87 95       	ror	r24
 27a:	28 17       	cp	r18, r24
 27c:	39 07       	cpc	r19, r25
 27e:	7c f0       	brlt	.+30     	; 0x29e <PD_for_lab+0x9c>
 280:	87 b5       	in	r24, 0x27	; 39
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	9c 01       	movw	r18, r24
 286:	22 0f       	add	r18, r18
 288:	33 1f       	adc	r19, r19
 28a:	82 0f       	add	r24, r18
 28c:	93 1f       	adc	r25, r19
 28e:	95 95       	asr	r25
 290:	87 95       	ror	r24
 292:	95 95       	asr	r25
 294:	87 95       	ror	r24
 296:	90 93 4c 01 	sts	0x014C, r25
 29a:	80 93 4b 01 	sts	0x014B, r24
 29e:	88 b5       	in	r24, 0x28	; 40
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	9c 01       	movw	r18, r24
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	82 0f       	add	r24, r18
 2aa:	93 1f       	adc	r25, r19
 2ac:	91 95       	neg	r25
 2ae:	81 95       	neg	r24
 2b0:	91 09       	sbc	r25, r1
 2b2:	0a f4       	brpl	.+2      	; 0x2b6 <PD_for_lab+0xb4>
 2b4:	03 96       	adiw	r24, 0x03	; 3
 2b6:	95 95       	asr	r25
 2b8:	87 95       	ror	r24
 2ba:	95 95       	asr	r25
 2bc:	87 95       	ror	r24
 2be:	20 91 4b 01 	lds	r18, 0x014B
 2c2:	30 91 4c 01 	lds	r19, 0x014C
 2c6:	82 17       	cp	r24, r18
 2c8:	93 07       	cpc	r25, r19
 2ca:	a4 f0       	brlt	.+40     	; 0x2f4 <PD_for_lab+0xf2>
 2cc:	88 b5       	in	r24, 0x28	; 40
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	9c 01       	movw	r18, r24
 2d2:	22 0f       	add	r18, r18
 2d4:	33 1f       	adc	r19, r19
 2d6:	82 0f       	add	r24, r18
 2d8:	93 1f       	adc	r25, r19
 2da:	91 95       	neg	r25
 2dc:	81 95       	neg	r24
 2de:	91 09       	sbc	r25, r1
 2e0:	0a f4       	brpl	.+2      	; 0x2e4 <PD_for_lab+0xe2>
 2e2:	03 96       	adiw	r24, 0x03	; 3
 2e4:	95 95       	asr	r25
 2e6:	87 95       	ror	r24
 2e8:	95 95       	asr	r25
 2ea:	87 95       	ror	r24
 2ec:	90 93 4c 01 	sts	0x014C, r25
 2f0:	80 93 4b 01 	sts	0x014B, r24
 2f4:	80 91 4b 01 	lds	r24, 0x014B
 2f8:	90 91 4c 01 	lds	r25, 0x014C
 2fc:	18 16       	cp	r1, r24
 2fe:	19 06       	cpc	r1, r25
 300:	44 f4       	brge	.+16     	; 0x312 <PD_for_lab+0x110>
 302:	90 91 2b 01 	lds	r25, 0x012B
 306:	98 1b       	sub	r25, r24
 308:	97 bd       	out	0x27, r25	; 39
 30a:	80 91 29 01 	lds	r24, 0x0129
 30e:	88 bd       	out	0x28, r24	; 40
 310:	08 95       	ret
 312:	99 23       	and	r25, r25
 314:	54 f4       	brge	.+20     	; 0x32a <PD_for_lab+0x128>
 316:	80 91 2b 01 	lds	r24, 0x012B
 31a:	87 bd       	out	0x27, r24	; 39
 31c:	90 91 4b 01 	lds	r25, 0x014B
 320:	80 91 29 01 	lds	r24, 0x0129
 324:	89 0f       	add	r24, r25
 326:	88 bd       	out	0x28, r24	; 40
 328:	08 95       	ret
 32a:	89 2b       	or	r24, r25
 32c:	31 f4       	brne	.+12     	; 0x33a <PD_for_lab+0x138>
 32e:	80 91 2b 01 	lds	r24, 0x012B
 332:	87 bd       	out	0x27, r24	; 39
 334:	80 91 29 01 	lds	r24, 0x0129
 338:	88 bd       	out	0x28, r24	; 40
 33a:	08 95       	ret

0000033c <labyreg>:
                 1,  0,  2,  1, 0 };
                 */
                  

void labyreg(){
	cli();
 33c:	f8 94       	cli
	int sensor_front_tmp = sensor_front;
	int sensor_right_tmp = sensor_right;
 33e:	60 91 45 01 	lds	r22, 0x0145
 342:	70 91 46 01 	lds	r23, 0x0146
	int sensor_left_tmp = sensor_left;
 346:	80 91 31 01 	lds	r24, 0x0131
 34a:	90 91 32 01 	lds	r25, 0x0132
	sei();
 34e:	78 94       	sei
	
	int st_value = 40;
	// Normalfall
	/*if((sensor_left_tmp < st_value && sensor_front_tmp > st_value && sensor_right_tmp < st_value) &&
	(!oneway_turn && !waypoint && !twoway_turn_left && !twoway_turn_right))*/
		PD_for_lab(sensor_left_tmp,sensor_right_tmp);
 350:	58 cf       	rjmp	.-336    	; 0x202 <PD_for_lab>
 352:	08 95       	ret

00000354 <linje>:


	 
void linje(void){
	//**********Scaler, depends on P and D, check with matlab to get output to be : (output = speedvalue - 20)****
	scaler = 40; //testa i matlab, nya derivatan med dt ger mycket hÃ¶gre vÃ¤rden
 354:	88 e2       	ldi	r24, 0x28	; 40
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 12 01 	sts	0x0112, r25
 35c:	80 93 11 01 	sts	0x0111, r24
	//************************************************************************************************************
	cli();
 360:	f8 94       	cli
	int current_position_tmp = current_position;
 362:	80 91 13 01 	lds	r24, 0x0113
 366:	90 91 14 01 	lds	r25, 0x0114
	sei();
 36a:	78 94       	sei

	current_error = setpoint - current_position_tmp;
 36c:	20 91 1b 01 	lds	r18, 0x011B
 370:	30 91 1c 01 	lds	r19, 0x011C
 374:	28 1b       	sub	r18, r24
 376:	39 0b       	sbc	r19, r25
 378:	30 93 1a 01 	sts	0x011A, r19
 37c:	20 93 19 01 	sts	0x0119, r18
	derivate = (current_error -previous_error)*dt;					// Tror det var dt som saknades fÃ¶r derivatan
 380:	80 91 15 01 	lds	r24, 0x0115
 384:	90 91 16 01 	lds	r25, 0x0116
 388:	b9 01       	movw	r22, r18
 38a:	68 1b       	sub	r22, r24
 38c:	79 0b       	sbc	r23, r25
 38e:	80 91 00 01 	lds	r24, 0x0100
 392:	90 91 01 01 	lds	r25, 0x0101
 396:	68 9f       	mul	r22, r24
 398:	a0 01       	movw	r20, r0
 39a:	69 9f       	mul	r22, r25
 39c:	50 0d       	add	r21, r0
 39e:	78 9f       	mul	r23, r24
 3a0:	50 0d       	add	r21, r0
 3a2:	11 24       	eor	r1, r1
 3a4:	50 93 1e 01 	sts	0x011E, r21
 3a8:	40 93 1d 01 	sts	0x011D, r20
	output = (p_constant*current_error+d_constant*derivate)/scaler;
 3ac:	80 91 04 01 	lds	r24, 0x0104
 3b0:	90 91 05 01 	lds	r25, 0x0105
 3b4:	28 9f       	mul	r18, r24
 3b6:	b0 01       	movw	r22, r0
 3b8:	29 9f       	mul	r18, r25
 3ba:	70 0d       	add	r23, r0
 3bc:	38 9f       	mul	r19, r24
 3be:	70 0d       	add	r23, r0
 3c0:	11 24       	eor	r1, r1
 3c2:	e0 91 02 01 	lds	r30, 0x0102
 3c6:	f0 91 03 01 	lds	r31, 0x0103
 3ca:	4e 9f       	mul	r20, r30
 3cc:	c0 01       	movw	r24, r0
 3ce:	4f 9f       	mul	r20, r31
 3d0:	90 0d       	add	r25, r0
 3d2:	5e 9f       	mul	r21, r30
 3d4:	90 0d       	add	r25, r0
 3d6:	11 24       	eor	r1, r1
 3d8:	86 0f       	add	r24, r22
 3da:	97 1f       	adc	r25, r23
 3dc:	60 91 11 01 	lds	r22, 0x0111
 3e0:	70 91 12 01 	lds	r23, 0x0112
 3e4:	16 d3       	rcall	.+1580   	; 0xa12 <__divmodhi4>
 3e6:	cb 01       	movw	r24, r22
 3e8:	70 93 18 01 	sts	0x0118, r23
 3ec:	60 93 17 01 	sts	0x0117, r22
	previous_error= current_error;
 3f0:	30 93 16 01 	sts	0x0116, r19
 3f4:	20 93 15 01 	sts	0x0115, r18
//***********************************
//Reglering
//***********************************		
		if(output < 0){									// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
 3f8:	99 23       	and	r25, r25
 3fa:	fc f4       	brge	.+62     	; 0x43a <linje+0xe6>
				if(abs(output) >= right){				// FÃ¶r att unvika mÃ¤ttnad i regleringen
 3fc:	99 23       	and	r25, r25
 3fe:	24 f4       	brge	.+8      	; 0x408 <linje+0xb4>
 400:	88 27       	eor	r24, r24
 402:	99 27       	eor	r25, r25
 404:	86 1b       	sub	r24, r22
 406:	97 0b       	sbc	r25, r23
 408:	20 91 29 01 	lds	r18, 0x0129
 40c:	30 91 2a 01 	lds	r19, 0x012A
 410:	82 17       	cp	r24, r18
 412:	93 07       	cpc	r25, r19
 414:	44 f0       	brlt	.+16     	; 0x426 <linje+0xd2>
					output=right*(1/8);					// SÃ¤tta nÃ¥got lÃ¥gt vÃ¤rde men sÃ¥ att den inte stÃ¤nger av motorn helt...
 416:	10 92 18 01 	sts	0x0118, r1
 41a:	10 92 17 01 	sts	0x0117, r1
					motor_left = left;
 41e:	80 91 2b 01 	lds	r24, 0x012B
 422:	87 bd       	out	0x27, r24	; 39
 424:	08 95       	ret
				}
				else {
					motor_left = left;
 426:	80 91 2b 01 	lds	r24, 0x012B
 42a:	87 bd       	out	0x27, r24	; 39
					motor_right = right + output;
 42c:	90 91 17 01 	lds	r25, 0x0117
 430:	80 91 29 01 	lds	r24, 0x0129
 434:	89 0f       	add	r24, r25
 436:	88 bd       	out	0x28, r24	; 40
 438:	08 95       	ret
				}		
		}
		else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
 43a:	18 16       	cp	r1, r24
 43c:	19 06       	cpc	r1, r25
 43e:	04 f5       	brge	.+64     	; 0x480 <linje+0x12c>
				if(abs(output) >= left){				// FÃ¶r att unvika mÃ¤ttnad i regleringen
 440:	cb 01       	movw	r24, r22
 442:	99 23       	and	r25, r25
 444:	24 f4       	brge	.+8      	; 0x44e <linje+0xfa>
 446:	88 27       	eor	r24, r24
 448:	99 27       	eor	r25, r25
 44a:	86 1b       	sub	r24, r22
 44c:	97 0b       	sbc	r25, r23
 44e:	20 91 2b 01 	lds	r18, 0x012B
 452:	30 91 2c 01 	lds	r19, 0x012C
 456:	82 17       	cp	r24, r18
 458:	93 07       	cpc	r25, r19
 45a:	44 f0       	brlt	.+16     	; 0x46c <linje+0x118>
					output=left*(1/8);
 45c:	10 92 18 01 	sts	0x0118, r1
 460:	10 92 17 01 	sts	0x0117, r1
					motor_left = right;
 464:	80 91 29 01 	lds	r24, 0x0129
 468:	87 bd       	out	0x27, r24	; 39
 46a:	08 95       	ret
				}
				else {
					motor_right = right;
 46c:	80 91 29 01 	lds	r24, 0x0129
 470:	88 bd       	out	0x28, r24	; 40
					motor_left = left - output;
 472:	80 91 2b 01 	lds	r24, 0x012B
 476:	90 91 17 01 	lds	r25, 0x0117
 47a:	89 1b       	sub	r24, r25
 47c:	87 bd       	out	0x27, r24	; 39
 47e:	08 95       	ret
				}
				
		}
		else if(output==0){
 480:	89 2b       	or	r24, r25
 482:	31 f4       	brne	.+12     	; 0x490 <linje+0x13c>
			motor_left = left;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
 484:	80 91 2b 01 	lds	r24, 0x012B
 488:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
 48a:	80 91 29 01 	lds	r24, 0x0129
 48e:	88 bd       	out	0x28, r24	; 40
 490:	08 95       	ret

00000492 <linje_main>:



void linje_main()
{
	Reflex_data=Reflex_data & 0x0ffffc;
 492:	80 91 43 01 	lds	r24, 0x0143
 496:	90 91 44 01 	lds	r25, 0x0144
 49a:	8c 7f       	andi	r24, 0xFC	; 252
 49c:	90 93 44 01 	sts	0x0144, r25
 4a0:	80 93 43 01 	sts	0x0143, r24
	current_position=linje_get_error();
 4a4:	21 de       	rcall	.-958    	; 0xe8 <linje_get_error>
 4a6:	08 2e       	mov	r0, r24
 4a8:	00 0c       	add	r0, r0
 4aa:	99 0b       	sbc	r25, r25
 4ac:	90 93 14 01 	sts	0x0114, r25
 4b0:	80 93 13 01 	sts	0x0113, r24
	linje();
 4b4:	4f cf       	rjmp	.-354    	; 0x354 <linje>
 4b6:	08 95       	ret

000004b8 <regulator>:

int regulator_mode=0;


void regulator(){
	if(regulator_mode==1){
 4b8:	80 91 23 01 	lds	r24, 0x0123
 4bc:	90 91 24 01 	lds	r25, 0x0124
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	11 f4       	brne	.+4      	; 0x4c8 <regulator+0x10>
		//linje();
		linje_main();
 4c4:	e6 cf       	rjmp	.-52     	; 0x492 <linje_main>
 4c6:	08 95       	ret
	}
	else
	{	
		labyreg();//kalla pÃ¥ labyrint funktion
 4c8:	39 cf       	rjmp	.-398    	; 0x33c <labyreg>
 4ca:	08 95       	ret

000004cc <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
 4cc:	84 b5       	in	r24, 0x24	; 36
 4ce:	83 6a       	ori	r24, 0xA3	; 163
 4d0:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
 4d2:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
 4d4:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
 4d6:	85 b5       	in	r24, 0x25	; 37
 4d8:	83 60       	ori	r24, 0x03	; 3
 4da:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
 4dc:	88 e7       	ldi	r24, 0x78	; 120
 4de:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
 4e0:	85 b1       	in	r24, 0x05	; 5
 4e2:	15 b8       	out	0x05, r1	; 5
 4e4:	08 95       	ret

000004e6 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
 4ea:	e1 e8       	ldi	r30, 0x81	; 129
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	80 81       	ld	r24, Z
 4f0:	8d 60       	ori	r24, 0x0D	; 13
 4f2:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
 4f4:	80 ea       	ldi	r24, 0xA0	; 160
 4f6:	95 e0       	ldi	r25, 0x05	; 5
 4f8:	90 93 89 00 	sts	0x0089, r25
 4fc:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
 500:	ef e6       	ldi	r30, 0x6F	; 111
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	82 60       	ori	r24, 0x02	; 2
 508:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
 50a:	b1 9a       	sbi	0x16, 1	; 22
 50c:	08 95       	ret

0000050e <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
	regler_ready=1;
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	90 93 28 01 	sts	0x0128, r25
 528:	80 93 27 01 	sts	0x0127, r24
	//if(counter_timer<10)
	//counter_timer++;
	count_arre++;				//array räknare
 52c:	80 91 0e 01 	lds	r24, 0x010E
 530:	90 91 0f 01 	lds	r25, 0x010F
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	90 93 0f 01 	sts	0x010F, r25
 53a:	80 93 0e 01 	sts	0x010E, r24
	count_waypoint++;			//räknare för att köra ur svängar i labyrinter
 53e:	20 91 25 01 	lds	r18, 0x0125
 542:	30 91 26 01 	lds	r19, 0x0126
 546:	2f 5f       	subi	r18, 0xFF	; 255
 548:	3f 4f       	sbci	r19, 0xFF	; 255
 54a:	30 93 26 01 	sts	0x0126, r19
 54e:	20 93 25 01 	sts	0x0125, r18
	if(count_arre >= 29){
 552:	4d 97       	sbiw	r24, 0x1d	; 29
 554:	24 f0       	brlt	.+8      	; 0x55e <__vector_13+0x50>
		count_arre = 0;
 556:	10 92 0f 01 	sts	0x010F, r1
 55a:	10 92 0e 01 	sts	0x010E, r1
	}
}
 55e:	9f 91       	pop	r25
 560:	8f 91       	pop	r24
 562:	3f 91       	pop	r19
 564:	2f 91       	pop	r18
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
 570:	8d b3       	in	r24, 0x1d	; 29
 572:	86 60       	ori	r24, 0x06	; 6
 574:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
 576:	e9 e6       	ldi	r30, 0x69	; 105
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	80 81       	ld	r24, Z
 57c:	88 62       	ori	r24, 0x28	; 40
 57e:	80 83       	st	Z, r24
 580:	08 95       	ret

00000582 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
 582:	1f 92       	push	r1
 584:	0f 92       	push	r0
 586:	0f b6       	in	r0, 0x3f	; 63
 588:	0f 92       	push	r0
 58a:	11 24       	eor	r1, r1
 58c:	8f 93       	push	r24
 58e:	9f 93       	push	r25
	if(drive_mode==1){
 590:	80 91 2f 01 	lds	r24, 0x012F
 594:	90 91 30 01 	lds	r25, 0x0130
 598:	01 97       	sbiw	r24, 0x01	; 1
 59a:	39 f4       	brne	.+14     	; 0x5aa <__vector_2+0x28>
		drive_mode=0;
 59c:	10 92 30 01 	sts	0x0130, r1
 5a0:	10 92 2f 01 	sts	0x012F, r1
		PORTD |= (1 << PD1);
 5a4:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
 5a6:	58 98       	cbi	0x0b, 0	; 11
 5a8:	0c c0       	rjmp	.+24     	; 0x5c2 <__vector_2+0x40>
	}
	else{
		start=0;
 5aa:	10 92 2e 01 	sts	0x012E, r1
 5ae:	10 92 2d 01 	sts	0x012D, r1
		drive_mode=1;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	90 93 30 01 	sts	0x0130, r25
 5ba:	80 93 2f 01 	sts	0x012F, r24
		PORTD |= (1 << PD0);
 5be:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
 5c0:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
 5c2:	e1 9a       	sbi	0x1c, 1	; 28
}
 5c4:	9f 91       	pop	r25
 5c6:	8f 91       	pop	r24
 5c8:	0f 90       	pop	r0
 5ca:	0f be       	out	0x3f, r0	; 63
 5cc:	0f 90       	pop	r0
 5ce:	1f 90       	pop	r1
 5d0:	18 95       	reti

000005d2 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
 5d2:	1f 92       	push	r1
 5d4:	0f 92       	push	r0
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	0f 92       	push	r0
 5da:	11 24       	eor	r1, r1
 5dc:	8f 93       	push	r24
 5de:	9f 93       	push	r25
	if(start==0){
 5e0:	80 91 2d 01 	lds	r24, 0x012D
 5e4:	90 91 2e 01 	lds	r25, 0x012E
 5e8:	89 2b       	or	r24, r25
 5ea:	39 f4       	brne	.+14     	; 0x5fa <__vector_3+0x28>
		start=1;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	90 93 2e 01 	sts	0x012E, r25
 5f4:	80 93 2d 01 	sts	0x012D, r24
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <__vector_3+0x30>
	}
	else{
		start=0;
 5fa:	10 92 2e 01 	sts	0x012E, r1
 5fe:	10 92 2d 01 	sts	0x012D, r1
	}
	EIFR |= (1<< INTF2);
 602:	e2 9a       	sbi	0x1c, 2	; 28
}
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	0f 90       	pop	r0
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	0f 90       	pop	r0
 60e:	1f 90       	pop	r1
 610:	18 95       	reti

00000612 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
 612:	88 23       	and	r24, r24
 614:	69 f0       	breq	.+26     	; 0x630 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
 616:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
 618:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
 61a:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
 61c:	e9 e6       	ldi	r30, 0x69	; 105
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	80 81       	ld	r24, Z
 622:	83 60       	ori	r24, 0x03	; 3
 624:	80 83       	st	Z, r24
		TWBR = 0x10;
 626:	80 e1       	ldi	r24, 0x10	; 16
 628:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0);
 62c:	10 92 b9 00 	sts	0x00B9, r1
 630:	08 95       	ret

00000632 <i2c_send>:

	}
	
};
	
bool i2c_send(byte prossesor,byte data[]){
 632:	8f 92       	push	r8
 634:	9f 92       	push	r9
 636:	af 92       	push	r10
 638:	bf 92       	push	r11
 63a:	cf 92       	push	r12
 63c:	df 92       	push	r13
 63e:	ef 92       	push	r14
 640:	ff 92       	push	r15
 642:	0f 93       	push	r16
 644:	1f 93       	push	r17
 646:	cf 93       	push	r28
 648:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
 64a:	eb 01       	movw	r28, r22
 64c:	08 81       	ld	r16, Y
 64e:	02 95       	swap	r16
 650:	0f 70       	andi	r16, 0x0F	; 15
 652:	10 e0       	ldi	r17, 0x00	; 0
 654:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
 656:	68 94       	set
 658:	ee 24       	eor	r14, r14
 65a:	e3 f8       	bld	r14, 3
 65c:	f1 2c       	mov	r15, r1
	
};
	
bool i2c_send(byte prossesor,byte data[]){
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 662:	ec eb       	ldi	r30, 0xBC	; 188
 664:	f0 e0       	ldi	r31, 0x00	; 0
 666:	0f 2e       	mov	r0, r31
 668:	f4 ea       	ldi	r31, 0xA4	; 164
 66a:	df 2e       	mov	r13, r31
 66c:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
 66e:	a9 eb       	ldi	r26, 0xB9	; 185
 670:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 672:	8e 7f       	andi	r24, 0xFE	; 254
 674:	c8 2e       	mov	r12, r24
 676:	6b eb       	ldi	r22, 0xBB	; 187
 678:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 67a:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;
 67c:	68 94       	set
 67e:	aa 24       	eor	r10, r10
 680:	a4 f8       	bld	r10, 4
 682:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 684:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 686:	90 81       	ld	r25, Z
 688:	99 23       	and	r25, r25
 68a:	ec f7       	brge	.-6      	; 0x686 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status en start
 68c:	2c 91       	ld	r18, X
 68e:	28 7f       	andi	r18, 0xF8	; 248
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	2e 15       	cp	r18, r14
 694:	3f 05       	cpc	r19, r15
 696:	69 f5       	brne	.+90     	; 0x6f2 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W
 698:	eb 01       	movw	r28, r22
 69a:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 69c:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 69e:	90 81       	ld	r25, Z
 6a0:	99 23       	and	r25, r25
 6a2:	ec f7       	brge	.-6      	; 0x69e <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18)
 6a4:	9c 91       	ld	r25, X
 6a6:	98 7f       	andi	r25, 0xF8	; 248
 6a8:	98 31       	cpi	r25, 0x18	; 24
 6aa:	29 f0       	breq	.+10     	; 0x6b6 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 6ac:	84 e9       	ldi	r24, 0x94	; 148
 6ae:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	1f c0       	rjmp	.+62     	; 0x6f4 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];
 6b6:	e4 01       	movw	r28, r8
 6b8:	99 91       	ld	r25, Y+
 6ba:	4e 01       	movw	r8, r28
 6bc:	eb 01       	movw	r28, r22
 6be:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
 6c0:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
 6c2:	90 81       	ld	r25, Z
 6c4:	99 23       	and	r25, r25
 6c6:	ec f7       	brge	.-6      	; 0x6c2 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
 6c8:	9c 91       	ld	r25, X
 6ca:	98 7f       	andi	r25, 0xF8	; 248
 6cc:	98 32       	cpi	r25, 0x28	; 40
 6ce:	29 f0       	breq	.+10     	; 0x6da <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 6d0:	84 e9       	ldi	r24, 0x94	; 148
 6d2:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <i2c_send+0xc2>
	}
	counter++;
 6da:	4f 5f       	subi	r20, 0xFF	; 255
 6dc:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;
 6de:	ea 2c       	mov	r14, r10
 6e0:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);
 6e2:	04 17       	cp	r16, r20
 6e4:	15 07       	cpc	r17, r21
 6e6:	74 f6       	brge	.-100    	; 0x684 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
 6e8:	84 e9       	ldi	r24, 0x94	; 148
 6ea:	80 93 bc 00 	sts	0x00BC, r24
	return true;
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
		return false;		
 6f2:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;
	}while (counter <= number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	bf 90       	pop	r11
 706:	af 90       	pop	r10
 708:	9f 90       	pop	r9
 70a:	8f 90       	pop	r8
 70c:	08 95       	ret

0000070e <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 70e:	ec eb       	ldi	r30, 0xBC	; 188
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	90 81       	ld	r25, Z
 714:	94 6a       	ori	r25, 0xA4	; 164
 716:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 718:	90 81       	ld	r25, Z
 71a:	99 23       	and	r25, r25
 71c:	ec f7       	brge	.-6      	; 0x718 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
 71e:	90 91 b9 00 	lds	r25, 0x00B9
 722:	98 7f       	andi	r25, 0xF8	; 248
 724:	98 30       	cpi	r25, 0x08	; 8
 726:	29 f0       	breq	.+10     	; 0x732 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 728:	84 e9       	ldi	r24, 0x94	; 148
 72a:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	08 95       	ret
	}
	TWDR = prossesor | 0x01;
 732:	81 60       	ori	r24, 0x01	; 1
 734:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 738:	84 e8       	ldi	r24, 0x84	; 132
 73a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 73e:	ec eb       	ldi	r30, 0xBC	; 188
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	88 23       	and	r24, r24
 746:	ec f7       	brge	.-6      	; 0x742 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK)
 748:	80 91 b9 00 	lds	r24, 0x00B9
 74c:	88 7f       	andi	r24, 0xF8	; 248
 74e:	80 34       	cpi	r24, 0x40	; 64
 750:	29 f0       	breq	.+10     	; 0x75c <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 752:	84 e9       	ldi	r24, 0x94	; 148
 754:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
 75c:	ec eb       	ldi	r30, 0xBC	; 188
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	80 81       	ld	r24, Z
 762:	84 68       	ori	r24, 0x84	; 132
 764:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 766:	80 81       	ld	r24, Z
 768:	88 23       	and	r24, r24
 76a:	ec f7       	brge	.-6      	; 0x766 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data=TWDR;
 76c:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 770:	94 e9       	ldi	r25, 0x94	; 148
 772:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
 776:	08 95       	ret

00000778 <i2c_store_data>:

void i2c_store_data(byte data)
{
	static int counter;
	static int size;
	if(counter == 0){
 778:	20 91 0c 01 	lds	r18, 0x010C
 77c:	30 91 0d 01 	lds	r19, 0x010D
 780:	21 15       	cp	r18, r1
 782:	31 05       	cpc	r19, r1
 784:	89 f4       	brne	.+34     	; 0x7a8 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
 786:	28 2f       	mov	r18, r24
 788:	22 95       	swap	r18
 78a:	2f 70       	andi	r18, 0x0F	; 15
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	30 93 0b 01 	sts	0x010B, r19
 792:	20 93 0a 01 	sts	0x010A, r18
		i2c_data[counter] = data;
 796:	80 93 34 01 	sts	0x0134, r24
		counter++;
 79a:	81 e0       	ldi	r24, 0x01	; 1
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	90 93 0d 01 	sts	0x010D, r25
 7a2:	80 93 0c 01 	sts	0x010C, r24
 7a6:	18 c0       	rjmp	.+48     	; 0x7d8 <i2c_store_data+0x60>
	}
	else if(counter < size+1){
 7a8:	40 91 0a 01 	lds	r20, 0x010A
 7ac:	50 91 0b 01 	lds	r21, 0x010B
 7b0:	4f 5f       	subi	r20, 0xFF	; 255
 7b2:	5f 4f       	sbci	r21, 0xFF	; 255
 7b4:	24 17       	cp	r18, r20
 7b6:	35 07       	cpc	r19, r21
 7b8:	5c f4       	brge	.+22     	; 0x7d0 <i2c_store_data+0x58>
		i2c_data[counter] = data;
 7ba:	f9 01       	movw	r30, r18
 7bc:	ec 5c       	subi	r30, 0xCC	; 204
 7be:	fe 4f       	sbci	r31, 0xFE	; 254
 7c0:	80 83       	st	Z, r24
		counter++;
 7c2:	2f 5f       	subi	r18, 0xFF	; 255
 7c4:	3f 4f       	sbci	r19, 0xFF	; 255
 7c6:	30 93 0d 01 	sts	0x010D, r19
 7ca:	20 93 0c 01 	sts	0x010C, r18
 7ce:	04 c0       	rjmp	.+8      	; 0x7d8 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
 7d0:	f9 01       	movw	r30, r18
 7d2:	ec 5c       	subi	r30, 0xCC	; 204
 7d4:	fe 4f       	sbci	r31, 0xFE	; 254
 7d6:	80 83       	st	Z, r24
	}
	if(counter>=size+1){
 7d8:	80 91 0a 01 	lds	r24, 0x010A
 7dc:	90 91 0b 01 	lds	r25, 0x010B
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	20 91 0c 01 	lds	r18, 0x010C
 7e6:	30 91 0d 01 	lds	r19, 0x010D
 7ea:	28 17       	cp	r18, r24
 7ec:	39 07       	cpc	r19, r25
 7ee:	44 f0       	brlt	.+16     	; 0x800 <i2c_store_data+0x88>
		i2c_newdata = true;
 7f0:	81 e0       	ldi	r24, 0x01	; 1
 7f2:	80 93 10 01 	sts	0x0110, r24
		counter = 0;
 7f6:	10 92 0d 01 	sts	0x010D, r1
 7fa:	10 92 0c 01 	sts	0x010C, r1
		EIMSK &= ~(1<<INT0);
 7fe:	e8 98       	cbi	0x1d, 0	; 29
 800:	08 95       	ret

00000802 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)
{	
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	0b b6       	in	r0, 0x3b	; 59
 80e:	0f 92       	push	r0
 810:	2f 93       	push	r18
 812:	3f 93       	push	r19
 814:	4f 93       	push	r20
 816:	5f 93       	push	r21
 818:	6f 93       	push	r22
 81a:	7f 93       	push	r23
 81c:	8f 93       	push	r24
 81e:	9f 93       	push	r25
 820:	af 93       	push	r26
 822:	bf 93       	push	r27
 824:	ef 93       	push	r30
 826:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 828:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
 82a:	36 9b       	sbis	0x06, 6	; 6
 82c:	04 c0       	rjmp	.+8      	; 0x836 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // processor 1
 82e:	82 e0       	ldi	r24, 0x02	; 2
 830:	6e df       	rcall	.-292    	; 0x70e <i2c_recive>
 832:	a2 df       	rcall	.-188    	; 0x778 <i2c_store_data>
 834:	05 c0       	rjmp	.+10     	; 0x840 <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  PINC&(1<< PC7)>0
 836:	37 9b       	sbis	0x06, 7	; 6
 838:	03 c0       	rjmp	.+6      	; 0x840 <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // processor 3
 83a:	86 e0       	ldi	r24, 0x06	; 6
 83c:	68 df       	rcall	.-304    	; 0x70e <i2c_recive>
 83e:	9c df       	rcall	.-200    	; 0x778 <i2c_store_data>
	}
}
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	bf 91       	pop	r27
 846:	af 91       	pop	r26
 848:	9f 91       	pop	r25
 84a:	8f 91       	pop	r24
 84c:	7f 91       	pop	r23
 84e:	6f 91       	pop	r22
 850:	5f 91       	pop	r21
 852:	4f 91       	pop	r20
 854:	3f 91       	pop	r19
 856:	2f 91       	pop	r18
 858:	0f 90       	pop	r0
 85a:	0b be       	out	0x3b, r0	; 59
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){
	if(i2c_newdata==true)
 866:	80 91 10 01 	lds	r24, 0x0110
 86a:	88 23       	and	r24, r24
 86c:	09 f4       	brne	.+2      	; 0x870 <i2c_handel_data+0xa>
 86e:	8f c0       	rjmp	.+286    	; 0x98e <i2c_handel_data+0x128>
	{
		i2c_newdata=false;
 870:	10 92 10 01 	sts	0x0110, r1
		if(!((i2c_data[0]>>3)&0x01)){
 874:	80 91 34 01 	lds	r24, 0x0134
 878:	83 fd       	sbrc	r24, 3
 87a:	07 c0       	rjmp	.+14     	; 0x88a <i2c_handel_data+0x24>
 87c:	84 e6       	ldi	r24, 0x64	; 100
 87e:	8a 95       	dec	r24
 880:	f1 f7       	brne	.-4      	; 0x87e <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
 882:	64 e3       	ldi	r22, 0x34	; 52
 884:	71 e0       	ldi	r23, 0x01	; 1
 886:	82 e0       	ldi	r24, 0x02	; 2
 888:	d4 de       	rcall	.-600    	; 0x632 <i2c_send>
		}
		switch (i2c_data[0] & 0x0f){
 88a:	80 91 34 01 	lds	r24, 0x0134
 88e:	e8 2f       	mov	r30, r24
 890:	ef 70       	andi	r30, 0x0F	; 15
 892:	8e 2f       	mov	r24, r30
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	8f 30       	cpi	r24, 0x0F	; 15
 898:	91 05       	cpc	r25, r1
 89a:	08 f0       	brcs	.+2      	; 0x89e <i2c_handel_data+0x38>
 89c:	77 c0       	rjmp	.+238    	; 0x98c <i2c_handel_data+0x126>
 89e:	fc 01       	movw	r30, r24
 8a0:	ea 5b       	subi	r30, 0xBA	; 186
 8a2:	ff 4f       	sbci	r31, 0xFF	; 255
 8a4:	c9 c0       	rjmp	.+402    	; 0xa38 <__tablejump2__>
			case 0x00 :
				batteri=i2c_data[1],i2c_data[2];
 8a6:	80 91 35 01 	lds	r24, 0x0135
 8aa:	80 93 4d 01 	sts	0x014D, r24
				break;
 8ae:	6e c0       	rjmp	.+220    	; 0x98c <i2c_handel_data+0x126>
			case 0x01 :
				//PORTD ^= (1 << PD0);
				sensor_right = i2c_data[3];
 8b0:	e4 e3       	ldi	r30, 0x34	; 52
 8b2:	f1 e0       	ldi	r31, 0x01	; 1
 8b4:	83 81       	ldd	r24, Z+3	; 0x03
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	90 93 46 01 	sts	0x0146, r25
 8bc:	80 93 45 01 	sts	0x0145, r24
				//distans_right=i2c_data[3];
				distans_fram = i2c_data[2];
 8c0:	22 81       	ldd	r18, Z+2	; 0x02
 8c2:	20 93 47 01 	sts	0x0147, r18
				sensor_left = i2c_data[1];
 8c6:	21 81       	ldd	r18, Z+1	; 0x01
 8c8:	30 e0       	ldi	r19, 0x00	; 0
 8ca:	30 93 32 01 	sts	0x0132, r19
 8ce:	20 93 31 01 	sts	0x0131, r18
				if(sensor_right > 20)
 8d2:	85 31       	cpi	r24, 0x15	; 21
 8d4:	91 05       	cpc	r25, r1
 8d6:	14 f0       	brlt	.+4      	; 0x8dc <i2c_handel_data+0x76>
					PORTD |= (1 << PD0);
 8d8:	58 9a       	sbi	0x0b, 0	; 11
 8da:	58 c0       	rjmp	.+176    	; 0x98c <i2c_handel_data+0x126>
				else if(sensor_right > 30)
 8dc:	4f 97       	sbiw	r24, 0x1f	; 31
 8de:	14 f0       	brlt	.+4      	; 0x8e4 <i2c_handel_data+0x7e>
					PORTD &= ~(1 << PD0);
 8e0:	58 98       	cbi	0x0b, 0	; 11
 8e2:	54 c0       	rjmp	.+168    	; 0x98c <i2c_handel_data+0x126>
				else
				PORTD &= ~(1 << PD0);
 8e4:	58 98       	cbi	0x0b, 0	; 11
 8e6:	52 c0       	rjmp	.+164    	; 0x98c <i2c_handel_data+0x126>
				//distans_left=i2c_data[1];
				break;
			case 0x02 :
				Reflex_data=(i2c_data[3]<<16)+(i2c_data[2]<<8)+i2c_data[1];
 8e8:	e4 e3       	ldi	r30, 0x34	; 52
 8ea:	f1 e0       	ldi	r31, 0x01	; 1
 8ec:	82 81       	ldd	r24, Z+2	; 0x02
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	98 2f       	mov	r25, r24
 8f2:	88 27       	eor	r24, r24
 8f4:	21 81       	ldd	r18, Z+1	; 0x01
 8f6:	82 0f       	add	r24, r18
 8f8:	91 1d       	adc	r25, r1
 8fa:	90 93 44 01 	sts	0x0144, r25
 8fe:	80 93 43 01 	sts	0x0143, r24
				break;
 902:	44 c0       	rjmp	.+136    	; 0x98c <i2c_handel_data+0x126>
			case 0x03 :
				RGB_data=1;//"röd";"
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	80 93 50 01 	sts	0x0150, r24
				break;
 90a:	40 c0       	rjmp	.+128    	; 0x98c <i2c_handel_data+0x126>
			case 0x04 :
				RGB_data=2;//"grön";
 90c:	82 e0       	ldi	r24, 0x02	; 2
 90e:	80 93 50 01 	sts	0x0150, r24
				break;		
 912:	3c c0       	rjmp	.+120    	; 0x98c <i2c_handel_data+0x126>
			case 0x05 :
				RGB_data=3;//"blå";
 914:	83 e0       	ldi	r24, 0x03	; 3
 916:	80 93 50 01 	sts	0x0150, r24
				break;
 91a:	38 c0       	rjmp	.+112    	; 0x98c <i2c_handel_data+0x126>
			case 0x06 :
			
				break;
			case 0x07 :
				gyro_90=true;
 91c:	81 e0       	ldi	r24, 0x01	; 1
 91e:	80 93 33 01 	sts	0x0133, r24
				break;
 922:	34 c0       	rjmp	.+104    	; 0x98c <i2c_handel_data+0x126>
			case 0x08 :
				manual_function=0;
 924:	10 92 22 01 	sts	0x0122, r1
 928:	10 92 21 01 	sts	0x0121, r1
				break;
 92c:	2f c0       	rjmp	.+94     	; 0x98c <i2c_handel_data+0x126>
			case 0x09 :
				manual_function=1;
 92e:	81 e0       	ldi	r24, 0x01	; 1
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	90 93 22 01 	sts	0x0122, r25
 936:	80 93 21 01 	sts	0x0121, r24
				
				PORTD |= (1 << PD0); // heej
 93a:	58 9a       	sbi	0x0b, 0	; 11
				break;
 93c:	27 c0       	rjmp	.+78     	; 0x98c <i2c_handel_data+0x126>
			case 0x0a :
			PORTD |= (1 << PD0); // heej
 93e:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=2;
 940:	82 e0       	ldi	r24, 0x02	; 2
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	90 93 22 01 	sts	0x0122, r25
 948:	80 93 21 01 	sts	0x0121, r24
				
				break;
 94c:	1f c0       	rjmp	.+62     	; 0x98c <i2c_handel_data+0x126>
			case 0x0b :
			PORTD |= (1 << PD0); // heej
 94e:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=4;
 950:	84 e0       	ldi	r24, 0x04	; 4
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	90 93 22 01 	sts	0x0122, r25
 958:	80 93 21 01 	sts	0x0121, r24
				
				break;
 95c:	17 c0       	rjmp	.+46     	; 0x98c <i2c_handel_data+0x126>
			case 0x0c :
			PORTD |= (1 << PD0); // heej
 95e:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=3;
 960:	83 e0       	ldi	r24, 0x03	; 3
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	90 93 22 01 	sts	0x0122, r25
 968:	80 93 21 01 	sts	0x0121, r24
				
				break;
 96c:	0f c0       	rjmp	.+30     	; 0x98c <i2c_handel_data+0x126>
			case 0x0d :
			PORTD |= (1 << PD0); // heej
 96e:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=6;
 970:	86 e0       	ldi	r24, 0x06	; 6
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	90 93 22 01 	sts	0x0122, r25
 978:	80 93 21 01 	sts	0x0121, r24
				
				break;
 97c:	07 c0       	rjmp	.+14     	; 0x98c <i2c_handel_data+0x126>
			case 0x0e :
			PORTD |= (1 << PD0); // heej
 97e:	58 9a       	sbi	0x0b, 0	; 11
				manual_function=5;
 980:	85 e0       	ldi	r24, 0x05	; 5
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	90 93 22 01 	sts	0x0122, r25
 988:	80 93 21 01 	sts	0x0121, r24
						
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
 98c:	e8 9a       	sbi	0x1d, 0	; 29
 98e:	08 95       	ret

00000990 <main>:
				5,  4,  3,  2, 0 };
//*********************************for test only

int main(void)
{
	interrupt_init();
 990:	ef dd       	rcall	.-1058   	; 0x570 <interrupt_init>
	board_init();
 992:	a9 db       	rcall	.-2222   	; 0xe6 <board_init>
	initengine();
 994:	9b dd       	rcall	.-1226   	; 0x4cc <initengine>
	timerinit();
 996:	a7 dd       	rcall	.-1202   	; 0x4e6 <timerinit>
	i2c_setup(1);
 998:	81 e0       	ldi	r24, 0x01	; 1
 99a:	3b de       	rcall	.-906    	; 0x612 <i2c_setup>
	sei();
 99c:	78 94       	sei
	//***********Set motors speed value here *****************
	left=50;//100;				// kanske räcker med en variable för båda om båda kör exakt lika fort
 99e:	82 e3       	ldi	r24, 0x32	; 50
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	90 93 2c 01 	sts	0x012C, r25
 9a6:	80 93 2b 01 	sts	0x012B, r24
	right=45;//93;
 9aa:	8d e2       	ldi	r24, 0x2D	; 45
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	90 93 2a 01 	sts	0x012A, r25
 9b2:	80 93 29 01 	sts	0x0129, r24
	//********************************************************
	motor_left=left;      
 9b6:	82 e3       	ldi	r24, 0x32	; 50
 9b8:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
 9ba:	80 91 29 01 	lds	r24, 0x0129
 9be:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito	
 9c0:	52 df       	rcall	.-348    	; 0x866 <i2c_handel_data>
			if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
 9c2:	80 91 2f 01 	lds	r24, 0x012F
 9c6:	90 91 30 01 	lds	r25, 0x0130
 9ca:	81 30       	cpi	r24, 0x01	; 1
 9cc:	91 05       	cpc	r25, r1
 9ce:	e9 f4       	brne	.+58     	; 0xa0a <main+0x7a>
				PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
 9d0:	2d 98       	cbi	0x05, 5	; 5
				PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
 9d2:	2e 98       	cbi	0x05, 6	; 5
				//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
				if(regler_ready==1 && start == 1){
 9d4:	80 91 27 01 	lds	r24, 0x0127
 9d8:	90 91 28 01 	lds	r25, 0x0128
 9dc:	01 97       	sbiw	r24, 0x01	; 1
 9de:	61 f4       	brne	.+24     	; 0x9f8 <main+0x68>
 9e0:	80 91 2d 01 	lds	r24, 0x012D
 9e4:	90 91 2e 01 	lds	r25, 0x012E
 9e8:	01 97       	sbiw	r24, 0x01	; 1
 9ea:	31 f4       	brne	.+12     	; 0x9f8 <main+0x68>
					regulator();
 9ec:	65 dd       	rcall	.-1334   	; 0x4b8 <regulator>
					regler_ready=0;	
 9ee:	10 92 28 01 	sts	0x0128, r1
 9f2:	10 92 27 01 	sts	0x0127, r1
 9f6:	e4 cf       	rjmp	.-56     	; 0x9c0 <main+0x30>
				}
				else if(start == 0){					// if start is zero then turn off the auto, stops motors
 9f8:	80 91 2d 01 	lds	r24, 0x012D
 9fc:	90 91 2e 01 	lds	r25, 0x012E
 a00:	89 2b       	or	r24, r25
 a02:	f1 f6       	brne	.-68     	; 0x9c0 <main+0x30>
					motor_left=0;
 a04:	17 bc       	out	0x27, r1	; 39
					motor_right=0;
 a06:	18 bc       	out	0x28, r1	; 40
 a08:	db cf       	rjmp	.-74     	; 0x9c0 <main+0x30>
				}
			}
			else if(drive_mode==0){										// Drivemode is manual
 a0a:	89 2b       	or	r24, r25
 a0c:	c9 f6       	brne	.-78     	; 0x9c0 <main+0x30>
				manual_drive();
 a0e:	92 db       	rcall	.-2268   	; 0x134 <manual_drive>
 a10:	d7 cf       	rjmp	.-82     	; 0x9c0 <main+0x30>

00000a12 <__divmodhi4>:
 a12:	97 fb       	bst	r25, 7
 a14:	07 2e       	mov	r0, r23
 a16:	16 f4       	brtc	.+4      	; 0xa1c <__divmodhi4+0xa>
 a18:	00 94       	com	r0
 a1a:	06 d0       	rcall	.+12     	; 0xa28 <__divmodhi4_neg1>
 a1c:	77 fd       	sbrc	r23, 7
 a1e:	08 d0       	rcall	.+16     	; 0xa30 <__divmodhi4_neg2>
 a20:	14 d0       	rcall	.+40     	; 0xa4a <__udivmodhi4>
 a22:	07 fc       	sbrc	r0, 7
 a24:	05 d0       	rcall	.+10     	; 0xa30 <__divmodhi4_neg2>
 a26:	3e f4       	brtc	.+14     	; 0xa36 <__divmodhi4_exit>

00000a28 <__divmodhi4_neg1>:
 a28:	90 95       	com	r25
 a2a:	81 95       	neg	r24
 a2c:	9f 4f       	sbci	r25, 0xFF	; 255
 a2e:	08 95       	ret

00000a30 <__divmodhi4_neg2>:
 a30:	70 95       	com	r23
 a32:	61 95       	neg	r22
 a34:	7f 4f       	sbci	r23, 0xFF	; 255

00000a36 <__divmodhi4_exit>:
 a36:	08 95       	ret

00000a38 <__tablejump2__>:
 a38:	ee 0f       	add	r30, r30
 a3a:	ff 1f       	adc	r31, r31
 a3c:	00 24       	eor	r0, r0
 a3e:	00 1c       	adc	r0, r0
 a40:	0b be       	out	0x3b, r0	; 59
 a42:	07 90       	elpm	r0, Z+
 a44:	f6 91       	elpm	r31, Z
 a46:	e0 2d       	mov	r30, r0
 a48:	09 94       	ijmp

00000a4a <__udivmodhi4>:
 a4a:	aa 1b       	sub	r26, r26
 a4c:	bb 1b       	sub	r27, r27
 a4e:	51 e1       	ldi	r21, 0x11	; 17
 a50:	07 c0       	rjmp	.+14     	; 0xa60 <__udivmodhi4_ep>

00000a52 <__udivmodhi4_loop>:
 a52:	aa 1f       	adc	r26, r26
 a54:	bb 1f       	adc	r27, r27
 a56:	a6 17       	cp	r26, r22
 a58:	b7 07       	cpc	r27, r23
 a5a:	10 f0       	brcs	.+4      	; 0xa60 <__udivmodhi4_ep>
 a5c:	a6 1b       	sub	r26, r22
 a5e:	b7 0b       	sbc	r27, r23

00000a60 <__udivmodhi4_ep>:
 a60:	88 1f       	adc	r24, r24
 a62:	99 1f       	adc	r25, r25
 a64:	5a 95       	dec	r21
 a66:	a9 f7       	brne	.-22     	; 0xa52 <__udivmodhi4_loop>
 a68:	80 95       	com	r24
 a6a:	90 95       	com	r25
 a6c:	bc 01       	movw	r22, r24
 a6e:	cd 01       	movw	r24, r26
 a70:	08 95       	ret

00000a72 <_exit>:
 a72:	f8 94       	cli

00000a74 <__stop_program>:
 a74:	ff cf       	rjmp	.-2      	; 0xa74 <__stop_program>
