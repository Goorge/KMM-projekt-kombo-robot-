
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00001e70  00001f04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000097  00800112  00800112  00001f16  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f16  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f48  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b9  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002fa  00000000  00000000  00003491  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c3a  00000000  00000000  0000378b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004dc  00000000  00000000  000053c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000108be  00000000  00000000  000058a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001abf  00000000  00000000  00016162  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00017c21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  00017d51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 9f 0b 	jmp	0x173e	; 0x173e <__vector_1>
       8:	35 c7       	rjmp	.+3690   	; 0xe74 <__vector_2>
       a:	00 00       	nop
       c:	5b c7       	rjmp	.+3766   	; 0xec4 <__vector_3>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	cc c6       	rjmp	.+3480   	; 0xdce <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	ed 0b       	sbc	r30, r29
      8e:	f2 0b       	sbc	r31, r18
      90:	fe 0b       	sbc	r31, r30
      92:	18 0c       	add	r1, r8
      94:	1c 0c       	add	r1, r12
      96:	20 0c       	add	r2, r0
      98:	24 0c       	add	r2, r4
      9a:	dd 0c       	add	r13, r13
      9c:	37 0c       	add	r3, r7
      9e:	3c 0c       	add	r3, r12
      a0:	43 0c       	add	r4, r3
      a2:	4a 0c       	add	r4, r10
      a4:	51 0c       	add	r5, r1
      a6:	58 0c       	add	r5, r8
      a8:	5f 0c       	add	r5, r15
      aa:	66 0c       	add	r6, r6

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 e7       	ldi	r30, 0x70	; 112
      c0:	fe e1       	ldi	r31, 0x1E	; 30
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a2 31       	cpi	r26, 0x12	; 18
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a2 e1       	ldi	r26, 0x12	; 18
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	a9 3a       	cpi	r26, 0xA9	; 169
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 df 0c 	call	0x19be	; 0x19be <main>
      e6:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
      ec:	08 95       	ret

000000ee <linje_get_error>:
	return styr_fel;
}



int linje_get_error(){
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	float styr_fel=0;
	fel_antal=0;
     112:	10 92 51 01 	sts	0x0151, r1
     116:	10 92 50 01 	sts	0x0150, r1
	cli();
     11a:	f8 94       	cli
	int Reflex_data_tmp = Reflex_data;
     11c:	80 90 84 01 	lds	r8, 0x0184
     120:	90 90 85 01 	lds	r9, 0x0185
	int Reflex_data2_tmp = Reflex_data2;
     124:	20 90 9d 01 	lds	r2, 0x019D
     128:	30 90 9e 01 	lds	r3, 0x019E
	sei();
     12c:	78 94       	sei
     12e:	c0 90 50 01 	lds	r12, 0x0150
     132:	d0 90 51 01 	lds	r13, 0x0151
     136:	05 e0       	ldi	r16, 0x05	; 5
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	d0 e0       	ldi	r29, 0x00	; 0
}



int linje_get_error(){
	float styr_fel=0;
     13e:	41 2c       	mov	r4, r1
     140:	51 2c       	mov	r5, r1
     142:	32 01       	movw	r6, r4
     144:	0f 2e       	mov	r0, r31
     146:	f5 e0       	ldi	r31, 0x05	; 5
     148:	af 2e       	mov	r10, r31
     14a:	b1 2c       	mov	r11, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	c5 01       	movw	r24, r10
     150:	80 1b       	sub	r24, r16
     152:	91 0b       	sbc	r25, r17
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
	{
		if(i < 8){ //första 8 sensorenrna
     154:	08 97       	sbiw	r24, 0x08	; 8
     156:	14 f5       	brge	.+68     	; 0x19c <linje_get_error+0xae>
			styr_fel += ((5-i) * ((Reflex_data_tmp>>(i*2))&3));
     158:	74 01       	movw	r14, r8
     15a:	0c 2e       	mov	r0, r28
     15c:	02 c0       	rjmp	.+4      	; 0x162 <linje_get_error+0x74>
     15e:	f5 94       	asr	r15
     160:	e7 94       	ror	r14
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <linje_get_error+0x70>
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	e8 22       	and	r14, r24
     16a:	ff 24       	eor	r15, r15
     16c:	0e 9d       	mul	r16, r14
     16e:	b0 01       	movw	r22, r0
     170:	0f 9d       	mul	r16, r15
     172:	70 0d       	add	r23, r0
     174:	1e 9d       	mul	r17, r14
     176:	70 0d       	add	r23, r0
     178:	11 24       	eor	r1, r1
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     186:	9b 01       	movw	r18, r22
     188:	ac 01       	movw	r20, r24
     18a:	c3 01       	movw	r24, r6
     18c:	b2 01       	movw	r22, r4
     18e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__addsf3>
     192:	2b 01       	movw	r4, r22
     194:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data_tmp>>(i*2))&0x3);
     196:	ce 0c       	add	r12, r14
     198:	df 1c       	adc	r13, r15
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <linje_get_error+0xf2>
     19c:	ce 01       	movw	r24, r28
     19e:	40 97       	sbiw	r24, 0x10	; 16
		}
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
     1a0:	71 01       	movw	r14, r2
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <linje_get_error+0xba>
     1a4:	f5 94       	asr	r15
     1a6:	e7 94       	ror	r14
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <linje_get_error+0xb6>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	e8 22       	and	r14, r24
     1b0:	ff 24       	eor	r15, r15
     1b2:	0e 9d       	mul	r16, r14
     1b4:	b0 01       	movw	r22, r0
     1b6:	0f 9d       	mul	r16, r15
     1b8:	70 0d       	add	r23, r0
     1ba:	1e 9d       	mul	r17, r14
     1bc:	70 0d       	add	r23, r0
     1be:	11 24       	eor	r1, r1
     1c0:	07 2e       	mov	r0, r23
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__addsf3>
     1d8:	2b 01       	movw	r4, r22
     1da:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
     1dc:	ce 0c       	add	r12, r14
     1de:	df 1c       	adc	r13, r15
     1e0:	22 96       	adiw	r28, 0x02	; 2
     1e2:	01 50       	subi	r16, 0x01	; 1
     1e4:	11 09       	sbc	r17, r1
	fel_antal=0;
	cli();
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
     1e6:	c6 31       	cpi	r28, 0x16	; 22
     1e8:	d1 05       	cpc	r29, r1
     1ea:	09 f0       	breq	.+2      	; 0x1ee <linje_get_error+0x100>
     1ec:	b0 cf       	rjmp	.-160    	; 0x14e <linje_get_error+0x60>
     1ee:	d0 92 51 01 	sts	0x0151, r13
     1f2:	c0 92 50 01 	sts	0x0150, r12
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
     1f6:	c1 14       	cp	r12, r1
     1f8:	d1 04       	cpc	r13, r1
     1fa:	69 f0       	breq	.+26     	; 0x216 <linje_get_error+0x128>
		styr_fel = 0; //kan inte dela med 0, specialfall
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
     1fc:	b6 01       	movw	r22, r12
     1fe:	dd 0c       	add	r13, r13
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divsf3>
     214:	03 c0       	rjmp	.+6      	; 0x21c <linje_get_error+0x12e>
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
		styr_fel = 0; //kan inte dela med 0, specialfall
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
	return styr_fel;
     21c:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fixsfsi>
}
     220:	cb 01       	movw	r24, r22
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
     232:	bf 90       	pop	r11
     234:	af 90       	pop	r10
     236:	9f 90       	pop	r9
     238:	8f 90       	pop	r8
     23a:	7f 90       	pop	r7
     23c:	6f 90       	pop	r6
     23e:	5f 90       	pop	r5
     240:	4f 90       	pop	r4
     242:	3f 90       	pop	r3
     244:	2f 90       	pop	r2
     246:	08 95       	ret

00000248 <linje_RGBsveng>:
	}
	
}

signed char linje_RGBsveng() //om RGB ger utslag
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	cli();
     24c:	f8 94       	cli
	signed char styr_fel=0x00;
	int Reflex_data_tmp = Reflex_data;
     24e:	40 91 84 01 	lds	r20, 0x0184
     252:	50 91 85 01 	lds	r21, 0x0185
	int Reflex_data2_tmp = Reflex_data2;
     256:	60 91 9d 01 	lds	r22, 0x019D
     25a:	70 91 9e 01 	lds	r23, 0x019E
	sei();
     25e:	78 94       	sei
		time=0;
	}
	else // fortsätt med RGB sväng
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
     260:	80 91 91 01 	lds	r24, 0x0191
     264:	88 23       	and	r24, r24
     266:	09 f4       	brne	.+2      	; 0x26a <linje_RGBsveng+0x22>
     268:	a3 c0       	rjmp	.+326    	; 0x3b0 <linje_RGBsveng+0x168>
     26a:	20 91 4e 01 	lds	r18, 0x014E
     26e:	30 91 4f 01 	lds	r19, 0x014F
     272:	23 2b       	or	r18, r19
     274:	b1 f4       	brne	.+44     	; 0x2a2 <linje_RGBsveng+0x5a>
     276:	20 91 48 01 	lds	r18, 0x0148
     27a:	30 91 49 01 	lds	r19, 0x0149
     27e:	23 2b       	or	r18, r19
     280:	81 f4       	brne	.+32     	; 0x2a2 <linje_RGBsveng+0x5a>
		counter_timer_line_RGB = 0;
     282:	10 92 5d 01 	sts	0x015D, r1
     286:	10 92 5c 01 	sts	0x015C, r1
		RGB_reset_timer = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 4f 01 	sts	0x014F, r25
     292:	80 93 4e 01 	sts	0x014E, r24
		RGB_force = 1;
     296:	90 93 49 01 	sts	0x0149, r25
     29a:	80 93 48 01 	sts	0x0148, r24
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     29e:	80 e0       	ldi	r24, 0x00	; 0
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
     2a0:	8e c0       	rjmp	.+284    	; 0x3be <linje_RGBsveng+0x176>
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     2a2:	20 91 5c 01 	lds	r18, 0x015C
     2a6:	30 91 5d 01 	lds	r19, 0x015D
     2aa:	24 30       	cpi	r18, 0x04	; 4
     2ac:	31 05       	cpc	r19, r1
     2ae:	0c f0       	brlt	.+2      	; 0x2b2 <linje_RGBsveng+0x6a>
     2b0:	6f c0       	rjmp	.+222    	; 0x390 <linje_RGBsveng+0x148>
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	71 f5       	brne	.+92     	; 0x312 <linje_RGBsveng+0xca>
     2b6:	a0 ef       	ldi	r26, 0xF0	; 240
     2b8:	bf ef       	ldi	r27, 0xFF	; 255
     2ba:	2b ef       	ldi	r18, 0xFB	; 251
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
			
			for(int i=0;i<11;i++)
			{
				if (styr_fel==0){
     2c2:	81 11       	cpse	r24, r1
     2c4:	1f c0       	rjmp	.+62     	; 0x304 <linje_RGBsveng+0xbc>
					if(i < 8){ //första 8 sensorenrna
     2c6:	e8 30       	cpi	r30, 0x08	; 8
     2c8:	f1 05       	cpc	r31, r1
     2ca:	84 f4       	brge	.+32     	; 0x2ec <linje_RGBsveng+0xa4>
     2cc:	cf 01       	movw	r24, r30
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     2d2:	ea 01       	movw	r28, r20
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <linje_RGBsveng+0x92>
     2d6:	d5 95       	asr	r29
     2d8:	c7 95       	ror	r28
     2da:	8a 95       	dec	r24
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <linje_RGBsveng+0x8e>
     2de:	ce 01       	movw	r24, r28
     2e0:	86 95       	lsr	r24
     2e2:	81 70       	andi	r24, 0x01	; 1
     2e4:	28 9f       	mul	r18, r24
     2e6:	80 2d       	mov	r24, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <linje_RGBsveng+0xbc>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     2ec:	cb 01       	movw	r24, r22
     2ee:	0a 2e       	mov	r0, r26
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <linje_RGBsveng+0xae>
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	0a 94       	dec	r0
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <linje_RGBsveng+0xaa>
     2fa:	86 95       	lsr	r24
     2fc:	81 70       	andi	r24, 0x01	; 1
     2fe:	28 9f       	mul	r18, r24
     300:	80 2d       	mov	r24, r0
     302:	11 24       	eor	r1, r1
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
			
			for(int i=0;i<11;i++)
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	12 96       	adiw	r26, 0x02	; 2
     30a:	26 30       	cpi	r18, 0x06	; 6
     30c:	d1 f6       	brne	.-76     	; 0x2c2 <linje_RGBsveng+0x7a>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
		styr_fel = -3;
     30e:	8d ef       	ldi	r24, 0xFD	; 253
     310:	56 c0       	rjmp	.+172    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data==2){ //raktfram
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	69 f4       	brne	.+26     	; 0x330 <linje_RGBsveng+0xe8>
			
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
     316:	40 7f       	andi	r20, 0xF0	; 240
     318:	50 93 85 01 	sts	0x0185, r21
     31c:	40 93 84 01 	sts	0x0184, r20
			Reflex_data2 = Reflex_data2_tmp & 0x03;
     320:	63 70       	andi	r22, 0x03	; 3
     322:	77 27       	eor	r23, r23
     324:	70 93 9e 01 	sts	0x019E, r23
     328:	60 93 9d 01 	sts	0x019D, r22
			return linje_get_error();
     32c:	e0 de       	rcall	.-576    	; 0xee <linje_get_error>
     32e:	47 c0       	rjmp	.+142    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	d1 f5       	brne	.+116    	; 0x3a8 <linje_RGBsveng+0x160>
     334:	a6 e0       	ldi	r26, 0x06	; 6
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e6 e0       	ldi	r30, 0x06	; 6
     33a:	8b e0       	ldi	r24, 0x0B	; 11
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 e0       	ldi	r18, 0x00	; 0
			for(int i=11;i>0;i--){
				if (styr_fel == 0){
     340:	21 11       	cpse	r18, r1
     342:	1f c0       	rjmp	.+62     	; 0x382 <linje_RGBsveng+0x13a>
					if(i < 8){ //första 8 sensorenrna
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	91 05       	cpc	r25, r1
     348:	84 f4       	brge	.+32     	; 0x36a <linje_RGBsveng+0x122>
     34a:	9c 01       	movw	r18, r24
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     350:	ea 01       	movw	r28, r20
     352:	02 c0       	rjmp	.+4      	; 0x358 <linje_RGBsveng+0x110>
     354:	d5 95       	asr	r29
     356:	c7 95       	ror	r28
     358:	2a 95       	dec	r18
     35a:	e2 f7       	brpl	.-8      	; 0x354 <linje_RGBsveng+0x10c>
     35c:	9e 01       	movw	r18, r28
     35e:	26 95       	lsr	r18
     360:	21 70       	andi	r18, 0x01	; 1
     362:	e2 9f       	mul	r30, r18
     364:	20 2d       	mov	r18, r0
     366:	11 24       	eor	r1, r1
     368:	0c c0       	rjmp	.+24     	; 0x382 <linje_RGBsveng+0x13a>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     36a:	9b 01       	movw	r18, r22
     36c:	0a 2e       	mov	r0, r26
     36e:	02 c0       	rjmp	.+4      	; 0x374 <linje_RGBsveng+0x12c>
     370:	35 95       	asr	r19
     372:	27 95       	ror	r18
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <linje_RGBsveng+0x128>
     378:	26 95       	lsr	r18
     37a:	21 70       	andi	r18, 0x01	; 1
     37c:	e2 9f       	mul	r30, r18
     37e:	20 2d       	mov	r18, r0
     380:	11 24       	eor	r1, r1
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	e1 50       	subi	r30, 0x01	; 1
     386:	12 97       	sbiw	r26, 0x02	; 2
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
			Reflex_data2 = Reflex_data2_tmp & 0x03;
			return linje_get_error();
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
			for(int i=11;i>0;i--){
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	d1 f6       	brne	.-76     	; 0x340 <linje_RGBsveng+0xf8>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
			styr_fel = 3;
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	17 c0       	rjmp	.+46     	; 0x3be <linje_RGBsveng+0x176>
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
		}
	}
	else{
		RGB_data=0;
     390:	10 92 91 01 	sts	0x0191, r1
		RGB_reset_timer = 0;
     394:	10 92 4f 01 	sts	0x014F, r1
     398:	10 92 4e 01 	sts	0x014E, r1
		RGB_force = 0;
     39c:	10 92 49 01 	sts	0x0149, r1
     3a0:	10 92 48 01 	sts	0x0148, r1
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <linje_RGBsveng+0x176>
				}
			}
			styr_fel = 3;
		}
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <linje_RGBsveng+0x176>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <linje_RGBsveng+0x176>
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     3b0:	80 91 5c 01 	lds	r24, 0x015C
     3b4:	90 91 5d 01 	lds	r25, 0x015D
     3b8:	04 97       	sbiw	r24, 0x04	; 4
     3ba:	c4 f3       	brlt	.-16     	; 0x3ac <linje_RGBsveng+0x164>
     3bc:	e9 cf       	rjmp	.-46     	; 0x390 <linje_RGBsveng+0x148>
		RGB_force = 0;
		
	}
	 
	return styr_fel;
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sekvens_goal_detekted>:
bool sekvens_goal_detekted(){
	//int fel_antal=0;
	#ifndef time
		static int prew_fel_antal=0;
	#endif
	linje_get_error();		// Borde uppdatera fel_antal
     3c4:	94 de       	rcall	.-728    	; 0xee <linje_get_error>
	if(fel_antal>28){		// om robbot paserar tejp på tvären 
     3c6:	80 91 50 01 	lds	r24, 0x0150
     3ca:	90 91 51 01 	lds	r25, 0x0151
     3ce:	8d 31       	cpi	r24, 0x1D	; 29
     3d0:	91 05       	cpc	r25, r1
     3d2:	5c f0       	brlt	.+22     	; 0x3ea <sekvens_goal_detekted+0x26>
		PORTD |= (1 << PD1);
     3d4:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     3d6:	80 91 50 01 	lds	r24, 0x0150
     3da:	90 91 51 01 	lds	r25, 0x0151
     3de:	90 93 19 01 	sts	0x0119, r25
     3e2:	80 93 18 01 	sts	0x0118, r24
		return true;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	08 95       	ret
	}
	else if(prew_fel_antal+fel_antal>36 && prew_fel_antal <=28 && RGB_data==0){
     3ea:	20 91 18 01 	lds	r18, 0x0118
     3ee:	30 91 19 01 	lds	r19, 0x0119
     3f2:	ac 01       	movw	r20, r24
     3f4:	42 0f       	add	r20, r18
     3f6:	53 1f       	adc	r21, r19
     3f8:	45 32       	cpi	r20, 0x25	; 37
     3fa:	51 05       	cpc	r21, r1
     3fc:	94 f0       	brlt	.+36     	; 0x422 <sekvens_goal_detekted+0x5e>
     3fe:	2d 31       	cpi	r18, 0x1D	; 29
     400:	31 05       	cpc	r19, r1
     402:	7c f4       	brge	.+30     	; 0x422 <sekvens_goal_detekted+0x5e>
     404:	20 91 91 01 	lds	r18, 0x0191
     408:	21 11       	cpse	r18, r1
     40a:	0b c0       	rjmp	.+22     	; 0x422 <sekvens_goal_detekted+0x5e>
		PORTD |= (1 << PD1);
     40c:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     40e:	80 91 50 01 	lds	r24, 0x0150
     412:	90 91 51 01 	lds	r25, 0x0151
     416:	90 93 19 01 	sts	0x0119, r25
     41a:	80 93 18 01 	sts	0x0118, r24
		return true;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret
	}
	else{
		prew_fel_antal=fel_antal;
     422:	90 93 19 01 	sts	0x0119, r25
     426:	80 93 18 01 	sts	0x0118, r24
		return false;
     42a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(fel_antal>3 & fel_antal < 7 & max-min > 5 & max-min < 8) // måste kalibreras bör nog vara && ?
		return true;
	return false;
	*/
}
     42c:	08 95       	ret

0000042e <detect_goal>:
			static int count;
		#endif
		
	int goal_timer = 20;
	
	if((Goal_reset_timer == 0) && (sekvens_goal_detekted() == true)){		
     42e:	80 91 4a 01 	lds	r24, 0x014A
     432:	90 91 4b 01 	lds	r25, 0x014B
     436:	89 2b       	or	r24, r25
     438:	69 f4       	brne	.+26     	; 0x454 <detect_goal+0x26>
     43a:	c4 df       	rcall	.-120    	; 0x3c4 <sekvens_goal_detekted>
     43c:	88 23       	and	r24, r24
     43e:	51 f0       	breq	.+20     	; 0x454 <detect_goal+0x26>
		Goal_reset_timer = 1;	
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	90 93 4b 01 	sts	0x014B, r25
     448:	80 93 4a 01 	sts	0x014A, r24
		counter_timer_line_goal = 0;																						// Nollar timern som sitter i timerintrerruptet, ISR för timern sker 10ggr per sekund						
     44c:	10 92 59 01 	sts	0x0159, r1
     450:	10 92 58 01 	sts	0x0158, r1
	}	
	if((sekvens_goal_detekted() == true) && ((count == 0) | (count == 2)) && (counter_timer_line_goal < goal_timer)){		//linje 1(count=0) eller 2(count=2) upptäkt procid
     454:	b7 df       	rcall	.-146    	; 0x3c4 <sekvens_goal_detekted>
     456:	88 23       	and	r24, r24
     458:	b1 f0       	breq	.+44     	; 0x486 <detect_goal+0x58>
     45a:	80 91 1a 01 	lds	r24, 0x011A
     45e:	90 91 1b 01 	lds	r25, 0x011B
     462:	9c 01       	movw	r18, r24
     464:	2d 7f       	andi	r18, 0xFD	; 253
     466:	23 2b       	or	r18, r19
     468:	71 f4       	brne	.+28     	; 0x486 <detect_goal+0x58>
     46a:	20 91 58 01 	lds	r18, 0x0158
     46e:	30 91 59 01 	lds	r19, 0x0159
     472:	24 31       	cpi	r18, 0x14	; 20
     474:	31 05       	cpc	r19, r1
     476:	3c f4       	brge	.+14     	; 0x486 <detect_goal+0x58>
		count++;
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	90 93 1b 01 	sts	0x011B, r25
     47e:	80 93 1a 01 	sts	0x011A, r24
		return false;
     482:	80 e0       	ldi	r24, 0x00	; 0
     484:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == false) && ((count == 1) | (count == 3)) && (counter_timer_line_goal < goal_timer)){	// mellanrum mellan linje 1-2(count=1) eller 2-3(count=3) upptäkt
     486:	9e df       	rcall	.-196    	; 0x3c4 <sekvens_goal_detekted>
     488:	81 11       	cpse	r24, r1
     48a:	17 c0       	rjmp	.+46     	; 0x4ba <detect_goal+0x8c>
     48c:	20 91 1a 01 	lds	r18, 0x011A
     490:	30 91 1b 01 	lds	r19, 0x011B
     494:	a9 01       	movw	r20, r18
     496:	4d 7f       	andi	r20, 0xFD	; 253
     498:	41 30       	cpi	r20, 0x01	; 1
     49a:	51 05       	cpc	r21, r1
     49c:	71 f4       	brne	.+28     	; 0x4ba <detect_goal+0x8c>
     49e:	40 91 58 01 	lds	r20, 0x0158
     4a2:	50 91 59 01 	lds	r21, 0x0159
     4a6:	44 31       	cpi	r20, 0x14	; 20
     4a8:	51 05       	cpc	r21, r1
     4aa:	3c f4       	brge	.+14     	; 0x4ba <detect_goal+0x8c>
		count++;
     4ac:	2f 5f       	subi	r18, 0xFF	; 255
     4ae:	3f 4f       	sbci	r19, 0xFF	; 255
     4b0:	30 93 1b 01 	sts	0x011B, r19
     4b4:	20 93 1a 01 	sts	0x011A, r18
		return false;																		
     4b8:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == true) && (count == 4)  && (counter_timer_line_goal < goal_timer)){					//linje 3 upptäkt indikerar mål
     4ba:	84 df       	rcall	.-248    	; 0x3c4 <sekvens_goal_detekted>
     4bc:	88 23       	and	r24, r24
     4be:	99 f0       	breq	.+38     	; 0x4e6 <detect_goal+0xb8>
     4c0:	20 91 1a 01 	lds	r18, 0x011A
     4c4:	30 91 1b 01 	lds	r19, 0x011B
     4c8:	24 30       	cpi	r18, 0x04	; 4
     4ca:	31 05       	cpc	r19, r1
     4cc:	61 f4       	brne	.+24     	; 0x4e6 <detect_goal+0xb8>
     4ce:	20 91 58 01 	lds	r18, 0x0158
     4d2:	30 91 59 01 	lds	r19, 0x0159
     4d6:	24 31       	cpi	r18, 0x14	; 20
     4d8:	31 05       	cpc	r19, r1
     4da:	5c f4       	brge	.+22     	; 0x4f2 <detect_goal+0xc4>
		Goal_reset_timer = 0;
     4dc:	10 92 4b 01 	sts	0x014B, r1
     4e0:	10 92 4a 01 	sts	0x014A, r1
		return true;
     4e4:	08 95       	ret
	}
	else if(counter_timer_line_goal >= goal_timer){																			// Timeout, tiden har passerat. Alltså inget mål utan bara en T korsning
     4e6:	80 91 58 01 	lds	r24, 0x0158
     4ea:	90 91 59 01 	lds	r25, 0x0159
     4ee:	44 97       	sbiw	r24, 0x14	; 20
     4f0:	54 f0       	brlt	.+20     	; 0x506 <detect_goal+0xd8>
		count = 0;
     4f2:	10 92 1b 01 	sts	0x011B, r1
     4f6:	10 92 1a 01 	sts	0x011A, r1
		Goal_reset_timer = 0;
     4fa:	10 92 4b 01 	sts	0x014B, r1
     4fe:	10 92 4a 01 	sts	0x014A, r1
		return false;
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret
	else{	// time out detta är inte mål
		time=0;
		count=0;
		return false;
	}*/
}
     506:	08 95       	ret

00000508 <detect_labyrint>:
bool detect_labyrint(){ //om robboten har kommmit in i en labyrint 
		#ifndef time
			static int time;
		#endif
		
	if(distans_left<25 && distans_right<25){ // om det finns väggar på båda sidor     
     508:	80 91 8d 01 	lds	r24, 0x018D
     50c:	89 31       	cpi	r24, 0x19	; 25
     50e:	08 f5       	brcc	.+66     	; 0x552 <detect_labyrint+0x4a>
     510:	80 91 92 01 	lds	r24, 0x0192
     514:	89 31       	cpi	r24, 0x19	; 25
     516:	e8 f4       	brcc	.+58     	; 0x552 <detect_labyrint+0x4a>
		
		if(Lab_reset_timer == 0){
     518:	80 91 4c 01 	lds	r24, 0x014C
     51c:	90 91 4d 01 	lds	r25, 0x014D
     520:	89 2b       	or	r24, r25
     522:	59 f4       	brne	.+22     	; 0x53a <detect_labyrint+0x32>
			Lab_reset_timer = 1;
     524:	81 e0       	ldi	r24, 0x01	; 1
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	90 93 4d 01 	sts	0x014D, r25
     52c:	80 93 4c 01 	sts	0x014C, r24
			counter_timer_line_lab = 0;
     530:	10 92 5b 01 	sts	0x015B, r1
     534:	10 92 5a 01 	sts	0x015A, r1
     538:	08 95       	ret
		}
		else if(counter_timer_line_lab >=30){  // 1 sekund borde vara lagom
     53a:	80 91 5a 01 	lds	r24, 0x015A
     53e:	90 91 5b 01 	lds	r25, 0x015B
     542:	4e 97       	sbiw	r24, 0x1e	; 30
     544:	64 f0       	brlt	.+24     	; 0x55e <detect_labyrint+0x56>
			Lab_reset_timer = 0;
     546:	10 92 4d 01 	sts	0x014D, r1
     54a:	10 92 4c 01 	sts	0x014C, r1
			return true;
     54e:	81 e0       	ldi	r24, 0x01	; 1
     550:	08 95       	ret
			time++;
			return false;
		}*/
	}
	else{ // det var ingen labyrint
		time = 0;
     552:	10 92 17 01 	sts	0x0117, r1
     556:	10 92 16 01 	sts	0x0116, r1
		return false;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	08 95       	ret
		else if(counter_timer_line_lab >=30){  // 1 sekund borde vara lagom
			Lab_reset_timer = 0;
			return true;
		}
		else{
			return false;
     55e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else{ // det var ingen labyrint
		time = 0;
		return false;
	}
     560:	08 95       	ret

00000562 <turn_left>:
	_delay_ms(100);
}


void turn_left(void){
	PORTB &= ~(1 << motor_dir_right);
     562:	2d 98       	cbi	0x05, 5	; 5
	PORTB |= (1 << motor_dir_left);
     564:	2e 9a       	sbi	0x05, 6	; 5
	motor_left = 60;//80;//60left;
     566:	8c e3       	ldi	r24, 0x3C	; 60
     568:	87 bd       	out	0x27, r24	; 39
	motor_right = 55;//70;//55right;
     56a:	87 e3       	ldi	r24, 0x37	; 55
     56c:	88 bd       	out	0x28, r24	; 40
     56e:	08 95       	ret

00000570 <turn_right>:
}

void turn_right(void){
	PORTB |= (1 << motor_dir_right);
     570:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motor_dir_left);
     572:	2e 98       	cbi	0x05, 6	; 5
	motor_left = 57;//80;//57left;
     574:	89 e3       	ldi	r24, 0x39	; 57
     576:	87 bd       	out	0x27, r24	; 39
	motor_right = 52;//52right;
     578:	84 e3       	ldi	r24, 0x34	; 52
     57a:	88 bd       	out	0x28, r24	; 40
     57c:	08 95       	ret

0000057e <PD_for_lab>:
int number_of_errors = 4;
int previous_errors_left[5];
int previous_errors_right[5];
int error_count = 0;

void PD_for_lab(int distance_left, int distance_right, int distance_front){
     57e:	4f 92       	push	r4
     580:	5f 92       	push	r5
     582:	6f 92       	push	r6
     584:	7f 92       	push	r7
     586:	8f 92       	push	r8
     588:	9f 92       	push	r9
     58a:	af 92       	push	r10
     58c:	bf 92       	push	r11
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	7a 01       	movw	r14, r20
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
     59c:	8c 01       	movw	r16, r24
     59e:	06 1b       	sub	r16, r22
     5a0:	17 0b       	sbc	r17, r23
     5a2:	10 93 90 01 	sts	0x0190, r17
     5a6:	00 93 8f 01 	sts	0x018F, r16
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
     5aa:	c0 91 3c 01 	lds	r28, 0x013C
     5ae:	d0 91 3d 01 	lds	r29, 0x013D
     5b2:	cc 0f       	add	r28, r28
     5b4:	dd 1f       	adc	r29, r29
     5b6:	c5 59       	subi	r28, 0x95	; 149
     5b8:	de 4f       	sbci	r29, 0xFE	; 254
     5ba:	88 81       	ld	r24, Y
     5bc:	99 81       	ldd	r25, Y+1	; 0x01
     5be:	b8 01       	movw	r22, r16
     5c0:	68 1b       	sub	r22, r24
     5c2:	79 0b       	sbc	r23, r25
     5c4:	07 2e       	mov	r0, r23
     5c6:	00 0c       	add	r0, r0
     5c8:	88 0b       	sbc	r24, r24
     5ca:	99 0b       	sbc	r25, r25
     5cc:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     5d0:	4b 01       	movw	r8, r22
     5d2:	5c 01       	movw	r10, r24
     5d4:	60 93 3e 01 	sts	0x013E, r22
     5d8:	70 93 3f 01 	sts	0x013F, r23
     5dc:	80 93 40 01 	sts	0x0140, r24
     5e0:	90 93 41 01 	sts	0x0141, r25
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
     5e4:	80 91 0d 01 	lds	r24, 0x010D
     5e8:	90 91 0e 01 	lds	r25, 0x010E
     5ec:	08 9f       	mul	r16, r24
     5ee:	b0 01       	movw	r22, r0
     5f0:	09 9f       	mul	r16, r25
     5f2:	70 0d       	add	r23, r0
     5f4:	18 9f       	mul	r17, r24
     5f6:	70 0d       	add	r23, r0
     5f8:	11 24       	eor	r1, r1
     5fa:	07 2e       	mov	r0, r23
     5fc:	00 0c       	add	r0, r0
     5fe:	88 0b       	sbc	r24, r24
     600:	99 0b       	sbc	r25, r25
     602:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     606:	2b 01       	movw	r4, r22
     608:	3c 01       	movw	r6, r24
     60a:	60 91 0b 01 	lds	r22, 0x010B
     60e:	70 91 0c 01 	lds	r23, 0x010C
     612:	07 2e       	mov	r0, r23
     614:	00 0c       	add	r0, r0
     616:	88 0b       	sbc	r24, r24
     618:	99 0b       	sbc	r25, r25
     61a:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     61e:	9b 01       	movw	r18, r22
     620:	ac 01       	movw	r20, r24
     622:	c5 01       	movw	r24, r10
     624:	b4 01       	movw	r22, r8
     626:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__mulsf3>
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	c3 01       	movw	r24, r6
     630:	b2 01       	movw	r22, r4
     632:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__addsf3>
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	40 e2       	ldi	r20, 0x20	; 32
     63c:	51 e4       	ldi	r21, 0x41	; 65
     63e:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divsf3>
     642:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fixsfsi>
     646:	70 93 a0 01 	sts	0x01A0, r23
     64a:	60 93 9f 01 	sts	0x019F, r22
	previous_errors_right[error_count] = current_error_lab;
     64e:	19 83       	std	Y+1, r17	; 0x01
     650:	08 83       	st	Y, r16
	
	if(output_right >= 0){
     652:	77 23       	and	r23, r23
     654:	bc f0       	brlt	.+46     	; 0x684 <PD_for_lab+0x106>
		motor_right = right;
     656:	80 91 60 01 	lds	r24, 0x0160
     65a:	88 bd       	out	0x28, r24	; 40
		if(output_right > left)
     65c:	80 91 62 01 	lds	r24, 0x0162
     660:	90 91 63 01 	lds	r25, 0x0163
     664:	20 91 9f 01 	lds	r18, 0x019F
     668:	30 91 a0 01 	lds	r19, 0x01A0
     66c:	82 17       	cp	r24, r18
     66e:	93 07       	cpc	r25, r19
     670:	24 f4       	brge	.+8      	; 0x67a <PD_for_lab+0xfc>
			output_right = left;
     672:	90 93 a0 01 	sts	0x01A0, r25
     676:	80 93 9f 01 	sts	0x019F, r24
		motor_left = left - output_right;	
     67a:	90 91 9f 01 	lds	r25, 0x019F
     67e:	89 1b       	sub	r24, r25
     680:	87 bd       	out	0x27, r24	; 39
     682:	1a c0       	rjmp	.+52     	; 0x6b8 <PD_for_lab+0x13a>
	}
	else if(output_right < 0){
		motor_left = left;
     684:	80 91 62 01 	lds	r24, 0x0162
     688:	87 bd       	out	0x27, r24	; 39
		if(output_right < -right)
     68a:	80 91 60 01 	lds	r24, 0x0160
     68e:	90 91 61 01 	lds	r25, 0x0161
     692:	22 27       	eor	r18, r18
     694:	33 27       	eor	r19, r19
     696:	28 1b       	sub	r18, r24
     698:	39 0b       	sbc	r19, r25
     69a:	40 91 9f 01 	lds	r20, 0x019F
     69e:	50 91 a0 01 	lds	r21, 0x01A0
     6a2:	42 17       	cp	r20, r18
     6a4:	53 07       	cpc	r21, r19
     6a6:	24 f4       	brge	.+8      	; 0x6b0 <PD_for_lab+0x132>
			output_right = -right;
     6a8:	30 93 a0 01 	sts	0x01A0, r19
     6ac:	20 93 9f 01 	sts	0x019F, r18
		motor_right = right + output_right;	
     6b0:	90 91 9f 01 	lds	r25, 0x019F
     6b4:	89 0f       	add	r24, r25
     6b6:	88 bd       	out	0x28, r24	; 40
		output_right = 0;
		
	else if(output_right <= (-right))
		output_right = -right;
	*/
	if(distance_front <= 35){
     6b8:	84 e2       	ldi	r24, 0x24	; 36
     6ba:	e8 16       	cp	r14, r24
     6bc:	f1 04       	cpc	r15, r1
     6be:	14 f4       	brge	.+4      	; 0x6c4 <PD_for_lab+0x146>
		motor_left = 0; //output_left = -left;// = 0; 
     6c0:	17 bc       	out	0x27, r1	; 39
		motor_right = 0;//	output_right = -right;//motor_right = 0;
     6c2:	18 bc       	out	0x28, r1	; 40
	
	/*if(previous_errors_left[error_count] <= -10){ // testgrej
		output_right = -motor_right;
		output_left = -motor_left;
	}*/
	if(error_count == 0)
     6c4:	80 91 3c 01 	lds	r24, 0x013C
     6c8:	90 91 3d 01 	lds	r25, 0x013D
     6cc:	89 2b       	or	r24, r25
     6ce:	21 f4       	brne	.+8      	; 0x6d8 <PD_for_lab+0x15a>
		PORTD ^= (1 << PD0);
     6d0:	9b b1       	in	r25, 0x0b	; 11
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	89 27       	eor	r24, r25
     6d6:	8b b9       	out	0x0b, r24	; 11
	
	//motor_left = left + output_left;
	//motor_right = right + output_right;
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	1f 91       	pop	r17
     6de:	0f 91       	pop	r16
     6e0:	ff 90       	pop	r15
     6e2:	ef 90       	pop	r14
     6e4:	bf 90       	pop	r11
     6e6:	af 90       	pop	r10
     6e8:	9f 90       	pop	r9
     6ea:	8f 90       	pop	r8
     6ec:	7f 90       	pop	r7
     6ee:	6f 90       	pop	r6
     6f0:	5f 90       	pop	r5
     6f2:	4f 90       	pop	r4
     6f4:	08 95       	ret

000006f6 <stand_still>:
int previous_errors[3];

short regulate_side = 0;

void stand_still(void){
	PORTB &= ~(1 << motor_dir_left); 
     6f6:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     6f8:	2d 98       	cbi	0x05, 5	; 5
	motor_left = 0;
     6fa:	17 bc       	out	0x27, r1	; 39
	motor_right = 0;
     6fc:	18 bc       	out	0x28, r1	; 40
     6fe:	08 95       	ret

00000700 <drive_forward_left>:
}

void drive_forward_left(int distance){
     700:	4f 92       	push	r4
     702:	5f 92       	push	r5
     704:	6f 92       	push	r6
     706:	7f 92       	push	r7
     708:	8f 92       	push	r8
     70a:	9f 92       	push	r9
     70c:	af 92       	push	r10
     70e:	bf 92       	push	r11
     710:	ef 92       	push	r14
     712:	ff 92       	push	r15
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     71c:	00 91 09 01 	lds	r16, 0x0109
     720:	10 91 0a 01 	lds	r17, 0x010A
     724:	08 1b       	sub	r16, r24
     726:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     728:	c0 91 3c 01 	lds	r28, 0x013C
     72c:	d0 91 3d 01 	lds	r29, 0x013D
     730:	ce 01       	movw	r24, r28
     732:	88 0f       	add	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	9c 01       	movw	r18, r24
     738:	2f 55       	subi	r18, 0x5F	; 95
     73a:	3e 4f       	sbci	r19, 0xFE	; 254
     73c:	79 01       	movw	r14, r18
     73e:	d9 01       	movw	r26, r18
     740:	8d 91       	ld	r24, X+
     742:	9c 91       	ld	r25, X
     744:	b8 01       	movw	r22, r16
     746:	68 1b       	sub	r22, r24
     748:	79 0b       	sbc	r23, r25
     74a:	07 2e       	mov	r0, r23
     74c:	00 0c       	add	r0, r0
     74e:	88 0b       	sbc	r24, r24
     750:	99 0b       	sbc	r25, r25
     752:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	60 93 3e 01 	sts	0x013E, r22
     75e:	70 93 3f 01 	sts	0x013F, r23
     762:	80 93 40 01 	sts	0x0140, r24
     766:	90 93 41 01 	sts	0x0141, r25
	int output = (p_constant_lab * current_error + d_constant_lab * derivate)/10;
     76a:	80 91 0d 01 	lds	r24, 0x010D
     76e:	90 91 0e 01 	lds	r25, 0x010E
     772:	08 9f       	mul	r16, r24
     774:	b0 01       	movw	r22, r0
     776:	09 9f       	mul	r16, r25
     778:	70 0d       	add	r23, r0
     77a:	18 9f       	mul	r17, r24
     77c:	70 0d       	add	r23, r0
     77e:	11 24       	eor	r1, r1
     780:	07 2e       	mov	r0, r23
     782:	00 0c       	add	r0, r0
     784:	88 0b       	sbc	r24, r24
     786:	99 0b       	sbc	r25, r25
     788:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     78c:	2b 01       	movw	r4, r22
     78e:	3c 01       	movw	r6, r24
     790:	60 91 0b 01 	lds	r22, 0x010B
     794:	70 91 0c 01 	lds	r23, 0x010C
     798:	07 2e       	mov	r0, r23
     79a:	00 0c       	add	r0, r0
     79c:	88 0b       	sbc	r24, r24
     79e:	99 0b       	sbc	r25, r25
     7a0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     7a4:	9b 01       	movw	r18, r22
     7a6:	ac 01       	movw	r20, r24
     7a8:	c5 01       	movw	r24, r10
     7aa:	b4 01       	movw	r22, r8
     7ac:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__mulsf3>
     7b0:	9b 01       	movw	r18, r22
     7b2:	ac 01       	movw	r20, r24
     7b4:	c3 01       	movw	r24, r6
     7b6:	b2 01       	movw	r22, r4
     7b8:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__addsf3>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	40 e2       	ldi	r20, 0x20	; 32
     7c2:	51 e4       	ldi	r21, 0x41	; 65
     7c4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divsf3>
     7c8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fixsfsi>
     7cc:	fb 01       	movw	r30, r22
	previous_errors[error_count] = current_error;
     7ce:	d7 01       	movw	r26, r14
     7d0:	0d 93       	st	X+, r16
     7d2:	1c 93       	st	X, r17

	if(++error_count >= number_of_errors)
     7d4:	21 96       	adiw	r28, 0x01	; 1
     7d6:	d0 93 3d 01 	sts	0x013D, r29
     7da:	c0 93 3c 01 	sts	0x013C, r28
     7de:	20 91 07 01 	lds	r18, 0x0107
     7e2:	30 91 08 01 	lds	r19, 0x0108
     7e6:	c2 17       	cp	r28, r18
     7e8:	d3 07       	cpc	r29, r19
     7ea:	24 f0       	brlt	.+8      	; 0x7f4 <drive_forward_left+0xf4>
		error_count=0;
     7ec:	10 92 3d 01 	sts	0x013D, r1
     7f0:	10 92 3c 01 	sts	0x013C, r1
	
	if(output <= (-left))
     7f4:	20 91 62 01 	lds	r18, 0x0162
     7f8:	30 91 63 01 	lds	r19, 0x0163
     7fc:	44 27       	eor	r20, r20
     7fe:	55 27       	eor	r21, r21
     800:	42 1b       	sub	r20, r18
     802:	53 0b       	sbc	r21, r19
     804:	4e 17       	cp	r20, r30
     806:	5f 07       	cpc	r21, r31
     808:	4c f4       	brge	.+18     	; 0x81c <drive_forward_left+0x11c>
		output = -left;
	
	else if(output >= right)
     80a:	e0 91 60 01 	lds	r30, 0x0160
     80e:	f0 91 61 01 	lds	r31, 0x0161
     812:	ab 01       	movw	r20, r22
     814:	e6 17       	cp	r30, r22
     816:	f7 07       	cpc	r31, r23
     818:	0c f4       	brge	.+2      	; 0x81c <drive_forward_left+0x11c>
     81a:	af 01       	movw	r20, r30
		output=right;
	
	if(output <= 0){
     81c:	14 16       	cp	r1, r20
     81e:	15 06       	cpc	r1, r21
     820:	4c f0       	brlt	.+18     	; 0x834 <drive_forward_left+0x134>
		motor_right = right;
     822:	90 91 60 01 	lds	r25, 0x0160
     826:	98 bd       	out	0x28, r25	; 40
		motor_left = left + output;
     828:	90 91 62 01 	lds	r25, 0x0162
     82c:	89 2f       	mov	r24, r25
     82e:	84 0f       	add	r24, r20
     830:	87 bd       	out	0x27, r24	; 39
     832:	06 c0       	rjmp	.+12     	; 0x840 <drive_forward_left+0x140>
	}
	else{ 
		motor_left = left;
     834:	27 bd       	out	0x27, r18	; 39
		motor_right = right - output;	
     836:	90 91 60 01 	lds	r25, 0x0160
     83a:	89 2f       	mov	r24, r25
     83c:	84 1b       	sub	r24, r20
     83e:	88 bd       	out	0x28, r24	; 40
	}
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	bf 90       	pop	r11
     84e:	af 90       	pop	r10
     850:	9f 90       	pop	r9
     852:	8f 90       	pop	r8
     854:	7f 90       	pop	r7
     856:	6f 90       	pop	r6
     858:	5f 90       	pop	r5
     85a:	4f 90       	pop	r4
     85c:	08 95       	ret

0000085e <drive_forward_right>:

void drive_forward_right(int distance, int distance_front){
     85e:	2f 92       	push	r2
     860:	3f 92       	push	r3
     862:	4f 92       	push	r4
     864:	5f 92       	push	r5
     866:	6f 92       	push	r6
     868:	7f 92       	push	r7
     86a:	8f 92       	push	r8
     86c:	9f 92       	push	r9
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	cf 93       	push	r28
     880:	df 93       	push	r29
     882:	7c 01       	movw	r14, r24
     884:	1b 01       	movw	r2, r22
	 int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     886:	c0 91 09 01 	lds	r28, 0x0109
     88a:	d0 91 0a 01 	lds	r29, 0x010A
     88e:	c8 1b       	sub	r28, r24
     890:	d9 0b       	sbc	r29, r25
	derivate = current_error - previous_errors[error_count];///10; //
     892:	c0 90 3c 01 	lds	r12, 0x013C
     896:	d0 90 3d 01 	lds	r13, 0x013D
     89a:	86 01       	movw	r16, r12
     89c:	00 0f       	add	r16, r16
     89e:	11 1f       	adc	r17, r17
     8a0:	0f 55       	subi	r16, 0x5F	; 95
     8a2:	1e 4f       	sbci	r17, 0xFE	; 254
     8a4:	f8 01       	movw	r30, r16
     8a6:	80 81       	ld	r24, Z
     8a8:	91 81       	ldd	r25, Z+1	; 0x01
     8aa:	be 01       	movw	r22, r28
     8ac:	68 1b       	sub	r22, r24
     8ae:	79 0b       	sbc	r23, r25
     8b0:	07 2e       	mov	r0, r23
     8b2:	00 0c       	add	r0, r0
     8b4:	88 0b       	sbc	r24, r24
     8b6:	99 0b       	sbc	r25, r25
     8b8:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     8bc:	4b 01       	movw	r8, r22
     8be:	5c 01       	movw	r10, r24
     8c0:	60 93 3e 01 	sts	0x013E, r22
     8c4:	70 93 3f 01 	sts	0x013F, r23
     8c8:	80 93 40 01 	sts	0x0140, r24
     8cc:	90 93 41 01 	sts	0x0141, r25
	int output = (p_constant_lab * current_error + d_constant_lab * derivate)/10;
     8d0:	80 91 0d 01 	lds	r24, 0x010D
     8d4:	90 91 0e 01 	lds	r25, 0x010E
     8d8:	c8 9f       	mul	r28, r24
     8da:	b0 01       	movw	r22, r0
     8dc:	c9 9f       	mul	r28, r25
     8de:	70 0d       	add	r23, r0
     8e0:	d8 9f       	mul	r29, r24
     8e2:	70 0d       	add	r23, r0
     8e4:	11 24       	eor	r1, r1
     8e6:	07 2e       	mov	r0, r23
     8e8:	00 0c       	add	r0, r0
     8ea:	88 0b       	sbc	r24, r24
     8ec:	99 0b       	sbc	r25, r25
     8ee:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     8f2:	2b 01       	movw	r4, r22
     8f4:	3c 01       	movw	r6, r24
     8f6:	60 91 0b 01 	lds	r22, 0x010B
     8fa:	70 91 0c 01 	lds	r23, 0x010C
     8fe:	07 2e       	mov	r0, r23
     900:	00 0c       	add	r0, r0
     902:	88 0b       	sbc	r24, r24
     904:	99 0b       	sbc	r25, r25
     906:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     90a:	9b 01       	movw	r18, r22
     90c:	ac 01       	movw	r20, r24
     90e:	c5 01       	movw	r24, r10
     910:	b4 01       	movw	r22, r8
     912:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__mulsf3>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	c3 01       	movw	r24, r6
     91c:	b2 01       	movw	r22, r4
     91e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <__addsf3>
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	40 e2       	ldi	r20, 0x20	; 32
     928:	51 e4       	ldi	r21, 0x41	; 65
     92a:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <__divsf3>
     92e:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fixsfsi>
     932:	9b 01       	movw	r18, r22
	previous_errors[error_count] = current_error;
     934:	f8 01       	movw	r30, r16
     936:	d1 83       	std	Z+1, r29	; 0x01
     938:	c0 83       	st	Z, r28

	if(++error_count >= number_of_errors)
     93a:	ff ef       	ldi	r31, 0xFF	; 255
     93c:	cf 1a       	sub	r12, r31
     93e:	df 0a       	sbc	r13, r31
     940:	d0 92 3d 01 	sts	0x013D, r13
     944:	c0 92 3c 01 	sts	0x013C, r12
     948:	40 91 07 01 	lds	r20, 0x0107
     94c:	50 91 08 01 	lds	r21, 0x0108
     950:	c4 16       	cp	r12, r20
     952:	d5 06       	cpc	r13, r21
     954:	24 f0       	brlt	.+8      	; 0x95e <drive_forward_right+0x100>
	error_count = 0;
     956:	10 92 3d 01 	sts	0x013D, r1
     95a:	10 92 3c 01 	sts	0x013C, r1
	
	if(output >= (left))
     95e:	40 91 62 01 	lds	r20, 0x0162
     962:	50 91 63 01 	lds	r21, 0x0163
     966:	24 17       	cp	r18, r20
     968:	35 07       	cpc	r19, r21
     96a:	64 f4       	brge	.+24     	; 0x984 <drive_forward_right+0x126>
	output = left;
	
	else if(output <= -right)
     96c:	20 91 60 01 	lds	r18, 0x0160
     970:	30 91 61 01 	lds	r19, 0x0161
     974:	31 95       	neg	r19
     976:	21 95       	neg	r18
     978:	31 09       	sbc	r19, r1
     97a:	62 17       	cp	r22, r18
     97c:	73 07       	cpc	r23, r19
     97e:	1c f4       	brge	.+6      	; 0x986 <drive_forward_right+0x128>
     980:	b9 01       	movw	r22, r18
     982:	01 c0       	rjmp	.+2      	; 0x986 <drive_forward_right+0x128>

	if(++error_count >= number_of_errors)
	error_count = 0;
	
	if(output >= (left))
	output = left;
     984:	ba 01       	movw	r22, r20
	
	else if(output <= -right)
	output = -right;
	
	if(output >= 0){
     986:	77 23       	and	r23, r23
     988:	44 f0       	brlt	.+16     	; 0x99a <drive_forward_right+0x13c>
		motor_right = right;
     98a:	80 91 60 01 	lds	r24, 0x0160
     98e:	88 bd       	out	0x28, r24	; 40
		motor_left = left - output;
     990:	80 91 62 01 	lds	r24, 0x0162
     994:	86 1b       	sub	r24, r22
     996:	87 bd       	out	0x27, r24	; 39
     998:	05 c0       	rjmp	.+10     	; 0x9a4 <drive_forward_right+0x146>
	}
	else{
		motor_left = left;
     99a:	47 bd       	out	0x27, r20	; 39
		motor_right = right + output;
     99c:	80 91 60 01 	lds	r24, 0x0160
     9a0:	68 0f       	add	r22, r24
     9a2:	68 bd       	out	0x28, r22	; 40
	}
	
	if(distance_front <= 60 && distance < 20){
     9a4:	2d e3       	ldi	r18, 0x3D	; 61
     9a6:	22 16       	cp	r2, r18
     9a8:	31 04       	cpc	r3, r1
     9aa:	dc f4       	brge	.+54     	; 0x9e2 <drive_forward_right+0x184>
     9ac:	44 e1       	ldi	r20, 0x14	; 20
     9ae:	e4 16       	cp	r14, r20
     9b0:	f1 04       	cpc	r15, r1
     9b2:	4c f4       	brge	.+18     	; 0x9c6 <drive_forward_right+0x168>
		turn_left();
     9b4:	d6 dd       	rcall	.-1108   	; 0x562 <turn_left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b6:	83 ed       	ldi	r24, 0xD3	; 211
     9b8:	90 e3       	ldi	r25, 0x30	; 48
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <drive_forward_right+0x15c>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <drive_forward_right+0x162>
     9c0:	00 00       	nop
		_delay_ms(50);	
		stand_still();
     9c2:	99 de       	rcall	.-718    	; 0x6f6 <stand_still>
     9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <drive_forward_right+0x184>
	}
	else if (distance_front <= 60 && distance > 25){
     9c6:	9a e1       	ldi	r25, 0x1A	; 26
     9c8:	e9 16       	cp	r14, r25
     9ca:	f1 04       	cpc	r15, r1
     9cc:	54 f0       	brlt	.+20     	; 0x9e2 <drive_forward_right+0x184>
     9ce:	ef e3       	ldi	r30, 0x3F	; 63
     9d0:	fd e0       	ldi	r31, 0x0D	; 13
     9d2:	23 e0       	ldi	r18, 0x03	; 3
     9d4:	e1 50       	subi	r30, 0x01	; 1
     9d6:	f0 40       	sbci	r31, 0x00	; 0
     9d8:	20 40       	sbci	r18, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <drive_forward_right+0x176>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <drive_forward_right+0x180>
     9de:	00 00       	nop
		turn_right;
		_delay_ms(1000);	
		stand_still();
     9e0:	8a de       	rcall	.-748    	; 0x6f6 <stand_still>
	}
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	bf 90       	pop	r11
     9f4:	af 90       	pop	r10
     9f6:	9f 90       	pop	r9
     9f8:	8f 90       	pop	r8
     9fa:	7f 90       	pop	r7
     9fc:	6f 90       	pop	r6
     9fe:	5f 90       	pop	r5
     a00:	4f 90       	pop	r4
     a02:	3f 90       	pop	r3
     a04:	2f 90       	pop	r2
     a06:	08 95       	ret

00000a08 <drive_forward>:

void drive_forward(void){
	PORTB &= ~(1 << motor_dir_left); 
     a08:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     a0a:	2d 98       	cbi	0x05, 5	; 5
	motor_left = left;
     a0c:	80 91 62 01 	lds	r24, 0x0162
     a10:	87 bd       	out	0x27, r24	; 39
	motor_right = right;
     a12:	80 91 60 01 	lds	r24, 0x0160
     a16:	88 bd       	out	0x28, r24	; 40
     a18:	08 95       	ret

00000a1a <linje>:
float current_position = 0;



	 
void linje(void){
     a1a:	4f 92       	push	r4
     a1c:	5f 92       	push	r5
     a1e:	6f 92       	push	r6
     a20:	7f 92       	push	r7
     a22:	8f 92       	push	r8
     a24:	9f 92       	push	r9
     a26:	af 92       	push	r10
     a28:	bf 92       	push	r11
     a2a:	cf 92       	push	r12
     a2c:	df 92       	push	r13
     a2e:	ef 92       	push	r14
     a30:	ff 92       	push	r15
	cli();
     a32:	f8 94       	cli
	int current_position_tmp = current_position;
     a34:	60 91 1d 01 	lds	r22, 0x011D
     a38:	70 91 1e 01 	lds	r23, 0x011E
     a3c:	80 91 1f 01 	lds	r24, 0x011F
     a40:	90 91 20 01 	lds	r25, 0x0120
     a44:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fixsfsi>
	sei();
     a48:	78 94       	sei
	
	current_error = setpoint - current_position_tmp;
     a4a:	20 91 2b 01 	lds	r18, 0x012B
     a4e:	30 91 2c 01 	lds	r19, 0x012C
     a52:	a9 01       	movw	r20, r18
     a54:	46 1b       	sub	r20, r22
     a56:	57 0b       	sbc	r21, r23
     a58:	ba 01       	movw	r22, r20
     a5a:	07 2e       	mov	r0, r23
     a5c:	00 0c       	add	r0, r0
     a5e:	88 0b       	sbc	r24, r24
     a60:	99 0b       	sbc	r25, r25
     a62:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     a66:	6b 01       	movw	r12, r22
     a68:	7c 01       	movw	r14, r24
     a6a:	60 93 27 01 	sts	0x0127, r22
     a6e:	70 93 28 01 	sts	0x0128, r23
     a72:	80 93 29 01 	sts	0x0129, r24
     a76:	90 93 2a 01 	sts	0x012A, r25
	derivate = (current_error -previous_error);					// Tror det var dt som saknades fÃ¶r derivatan
     a7a:	20 91 21 01 	lds	r18, 0x0121
     a7e:	30 91 22 01 	lds	r19, 0x0122
     a82:	40 91 23 01 	lds	r20, 0x0123
     a86:	50 91 24 01 	lds	r21, 0x0124
     a8a:	d1 d7       	rcall	.+4002   	; 0x1a2e <__subsf3>
     a8c:	4b 01       	movw	r8, r22
     a8e:	5c 01       	movw	r10, r24
     a90:	60 93 3e 01 	sts	0x013E, r22
     a94:	70 93 3f 01 	sts	0x013F, r23
     a98:	80 93 40 01 	sts	0x0140, r24
     a9c:	90 93 41 01 	sts	0x0141, r25
	output = (p_constant * current_error + d_constant * derivate);
     aa0:	60 91 02 01 	lds	r22, 0x0102
     aa4:	70 91 03 01 	lds	r23, 0x0103
     aa8:	07 2e       	mov	r0, r23
     aaa:	00 0c       	add	r0, r0
     aac:	88 0b       	sbc	r24, r24
     aae:	99 0b       	sbc	r25, r25
     ab0:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     ab4:	9b 01       	movw	r18, r22
     ab6:	ac 01       	movw	r20, r24
     ab8:	c7 01       	movw	r24, r14
     aba:	b6 01       	movw	r22, r12
     abc:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__mulsf3>
     ac0:	2b 01       	movw	r4, r22
     ac2:	3c 01       	movw	r6, r24
     ac4:	60 91 00 01 	lds	r22, 0x0100
     ac8:	70 91 01 01 	lds	r23, 0x0101
     acc:	07 2e       	mov	r0, r23
     ace:	00 0c       	add	r0, r0
     ad0:	88 0b       	sbc	r24, r24
     ad2:	99 0b       	sbc	r25, r25
     ad4:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <__floatsisf>
     ad8:	9b 01       	movw	r18, r22
     ada:	ac 01       	movw	r20, r24
     adc:	c5 01       	movw	r24, r10
     ade:	b4 01       	movw	r22, r8
     ae0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__mulsf3>
     ae4:	9b 01       	movw	r18, r22
     ae6:	ac 01       	movw	r20, r24
     ae8:	c3 01       	movw	r24, r6
     aea:	b2 01       	movw	r22, r4
     aec:	a1 d7       	rcall	.+3906   	; 0x1a30 <__addsf3>
     aee:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <__fixsfsi>
     af2:	9b 01       	movw	r18, r22
     af4:	70 93 26 01 	sts	0x0126, r23
     af8:	60 93 25 01 	sts	0x0125, r22
	previous_error = current_error;
     afc:	c0 92 21 01 	sts	0x0121, r12
     b00:	d0 92 22 01 	sts	0x0122, r13
     b04:	e0 92 23 01 	sts	0x0123, r14
     b08:	f0 92 24 01 	sts	0x0124, r15
//***********************************
//Reglering
//***********************************
		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     b0c:	40 91 50 01 	lds	r20, 0x0150
     b10:	50 91 51 01 	lds	r21, 0x0151
     b14:	45 2b       	or	r20, r21
     b16:	e9 f4       	brne	.+58     	; 0xb52 <linje+0x138>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     b18:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= (1 << motor_dir_right);
     b1a:	2d 9a       	sbi	0x05, 5	; 5
		motor_left = left/(2 * RGB_slow);
     b1c:	60 91 0f 01 	lds	r22, 0x010F
     b20:	70 91 10 01 	lds	r23, 0x0110
     b24:	66 0f       	add	r22, r22
     b26:	77 1f       	adc	r23, r23
     b28:	80 91 62 01 	lds	r24, 0x0162
     b2c:	90 91 63 01 	lds	r25, 0x0163
     b30:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     b34:	67 bd       	out	0x27, r22	; 39
		motor_right = right/(2 * RGB_slow);
     b36:	60 91 0f 01 	lds	r22, 0x010F
     b3a:	70 91 10 01 	lds	r23, 0x0110
     b3e:	66 0f       	add	r22, r22
     b40:	77 1f       	adc	r23, r23
     b42:	80 91 60 01 	lds	r24, 0x0160
     b46:	90 91 61 01 	lds	r25, 0x0161
     b4a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     b4e:	68 bd       	out	0x28, r22	; 40
     b50:	c3 c0       	rjmp	.+390    	; 0xcd8 <linje+0x2be>
	}
	else if(output < 0){							// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     b52:	77 23       	and	r23, r23
     b54:	0c f0       	brlt	.+2      	; 0xb58 <linje+0x13e>
     b56:	57 c0       	rjmp	.+174    	; 0xc06 <linje+0x1ec>
		if(abs(output) >= (right / RGB_slow)){					// FÃ¶r att unvika mÃ¤ttnad i regleringen
     b58:	9b 01       	movw	r18, r22
     b5a:	77 23       	and	r23, r23
     b5c:	24 f4       	brge	.+8      	; 0xb66 <linje+0x14c>
     b5e:	22 27       	eor	r18, r18
     b60:	33 27       	eor	r19, r19
     b62:	26 1b       	sub	r18, r22
     b64:	37 0b       	sbc	r19, r23
     b66:	80 91 60 01 	lds	r24, 0x0160
     b6a:	90 91 61 01 	lds	r25, 0x0161
     b6e:	60 91 0f 01 	lds	r22, 0x010F
     b72:	70 91 10 01 	lds	r23, 0x0110
     b76:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     b7a:	26 17       	cp	r18, r22
     b7c:	37 07       	cpc	r19, r23
     b7e:	24 f1       	brlt	.+72     	; 0xbc8 <linje+0x1ae>
			//PORTB |= (1 << motor_dir_left);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  
     b80:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   
     b82:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left / RGB_slow;
     b84:	80 91 62 01 	lds	r24, 0x0162
     b88:	90 91 63 01 	lds	r25, 0x0163
     b8c:	60 91 0f 01 	lds	r22, 0x010F
     b90:	70 91 10 01 	lds	r23, 0x0110
     b94:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     b98:	67 bd       	out	0x27, r22	; 39
			motor_right = (abs(output)- right) / RGB_slow;
     b9a:	80 91 25 01 	lds	r24, 0x0125
     b9e:	90 91 26 01 	lds	r25, 0x0126
     ba2:	99 23       	and	r25, r25
     ba4:	1c f4       	brge	.+6      	; 0xbac <linje+0x192>
     ba6:	91 95       	neg	r25
     ba8:	81 95       	neg	r24
     baa:	91 09       	sbc	r25, r1
     bac:	20 91 60 01 	lds	r18, 0x0160
     bb0:	30 91 61 01 	lds	r19, 0x0161
     bb4:	82 1b       	sub	r24, r18
     bb6:	93 0b       	sbc	r25, r19
     bb8:	60 91 0f 01 	lds	r22, 0x010F
     bbc:	70 91 10 01 	lds	r23, 0x0110
     bc0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     bc4:	68 bd       	out	0x28, r22	; 40
     bc6:	88 c0       	rjmp	.+272    	; 0xcd8 <linje+0x2be>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     bc8:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     bca:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left / RGB_slow;
     bcc:	80 91 62 01 	lds	r24, 0x0162
     bd0:	90 91 63 01 	lds	r25, 0x0163
     bd4:	60 91 0f 01 	lds	r22, 0x010F
     bd8:	70 91 10 01 	lds	r23, 0x0110
     bdc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     be0:	67 bd       	out	0x27, r22	; 39
			motor_right = (right + output) / RGB_slow;
     be2:	20 91 60 01 	lds	r18, 0x0160
     be6:	30 91 61 01 	lds	r19, 0x0161
     bea:	80 91 25 01 	lds	r24, 0x0125
     bee:	90 91 26 01 	lds	r25, 0x0126
     bf2:	82 0f       	add	r24, r18
     bf4:	93 1f       	adc	r25, r19
     bf6:	60 91 0f 01 	lds	r22, 0x010F
     bfa:	70 91 10 01 	lds	r23, 0x0110
     bfe:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     c02:	68 bd       	out	0x28, r22	; 40
     c04:	69 c0       	rjmp	.+210    	; 0xcd8 <linje+0x2be>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     c06:	16 16       	cp	r1, r22
     c08:	17 06       	cpc	r1, r23
     c0a:	0c f0       	brlt	.+2      	; 0xc0e <linje+0x1f4>
     c0c:	4b c0       	rjmp	.+150    	; 0xca4 <linje+0x28a>
		if(output >= (left / RGB_slow)){							// FÃ¶r att unvika mÃ¤ttnad i regleringen
     c0e:	80 91 62 01 	lds	r24, 0x0162
     c12:	90 91 63 01 	lds	r25, 0x0163
     c16:	60 91 0f 01 	lds	r22, 0x010F
     c1a:	70 91 10 01 	lds	r23, 0x0110
     c1e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     c22:	26 17       	cp	r18, r22
     c24:	37 07       	cpc	r19, r23
     c26:	fc f0       	brlt	.+62     	; 0xc66 <linje+0x24c>
			//PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_left);			// Set motor direction to backward  
     c28:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   
     c2a:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     c2c:	80 91 60 01 	lds	r24, 0x0160
     c30:	90 91 61 01 	lds	r25, 0x0161
     c34:	60 91 0f 01 	lds	r22, 0x010F
     c38:	70 91 10 01 	lds	r23, 0x0110
     c3c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     c40:	68 bd       	out	0x28, r22	; 40
			motor_left = (output - left) / RGB_slow;
     c42:	80 91 25 01 	lds	r24, 0x0125
     c46:	90 91 26 01 	lds	r25, 0x0126
     c4a:	20 91 62 01 	lds	r18, 0x0162
     c4e:	30 91 63 01 	lds	r19, 0x0163
     c52:	82 1b       	sub	r24, r18
     c54:	93 0b       	sbc	r25, r19
     c56:	60 91 0f 01 	lds	r22, 0x010F
     c5a:	70 91 10 01 	lds	r23, 0x0110
     c5e:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     c62:	67 bd       	out	0x27, r22	; 39
     c64:	39 c0       	rjmp	.+114    	; 0xcd8 <linje+0x2be>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     c66:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     c68:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     c6a:	80 91 60 01 	lds	r24, 0x0160
     c6e:	90 91 61 01 	lds	r25, 0x0161
     c72:	60 91 0f 01 	lds	r22, 0x010F
     c76:	70 91 10 01 	lds	r23, 0x0110
     c7a:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     c7e:	68 bd       	out	0x28, r22	; 40
			motor_left = (left - output) / RGB_slow;
     c80:	80 91 62 01 	lds	r24, 0x0162
     c84:	90 91 63 01 	lds	r25, 0x0163
     c88:	20 91 25 01 	lds	r18, 0x0125
     c8c:	30 91 26 01 	lds	r19, 0x0126
     c90:	82 1b       	sub	r24, r18
     c92:	93 0b       	sbc	r25, r19
     c94:	60 91 0f 01 	lds	r22, 0x010F
     c98:	70 91 10 01 	lds	r23, 0x0110
     c9c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     ca0:	67 bd       	out	0x27, r22	; 39
     ca2:	1a c0       	rjmp	.+52     	; 0xcd8 <linje+0x2be>
		}
	}
	else if(output==0){
     ca4:	67 2b       	or	r22, r23
     ca6:	c1 f4       	brne	.+48     	; 0xcd8 <linje+0x2be>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     ca8:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     caa:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left / RGB_slow;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     cac:	80 91 62 01 	lds	r24, 0x0162
     cb0:	90 91 63 01 	lds	r25, 0x0163
     cb4:	60 91 0f 01 	lds	r22, 0x010F
     cb8:	70 91 10 01 	lds	r23, 0x0110
     cbc:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     cc0:	67 bd       	out	0x27, r22	; 39
		motor_right = right / RGB_slow;
     cc2:	80 91 60 01 	lds	r24, 0x0160
     cc6:	90 91 61 01 	lds	r25, 0x0161
     cca:	60 91 0f 01 	lds	r22, 0x010F
     cce:	70 91 10 01 	lds	r23, 0x0110
     cd2:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__divmodhi4>
     cd6:	68 bd       	out	0x28, r22	; 40
	}
}
     cd8:	ff 90       	pop	r15
     cda:	ef 90       	pop	r14
     cdc:	df 90       	pop	r13
     cde:	cf 90       	pop	r12
     ce0:	bf 90       	pop	r11
     ce2:	af 90       	pop	r10
     ce4:	9f 90       	pop	r9
     ce6:	8f 90       	pop	r8
     ce8:	7f 90       	pop	r7
     cea:	6f 90       	pop	r6
     cec:	5f 90       	pop	r5
     cee:	4f 90       	pop	r4
     cf0:	08 95       	ret

00000cf2 <linje_main>:
int RGB_slow = 1;
int RGB_force = 0;

void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	RGB_slow = 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	90 93 10 01 	sts	0x0110, r25
     cfa:	80 93 0f 01 	sts	0x010F, r24
	/*if(distans_fram<34){
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
		PORTD |= (1 << PD1);
		PORTD |= (1 << PD0);
	}
	else*/ if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     cfe:	80 91 91 01 	lds	r24, 0x0191
     d02:	81 50       	subi	r24, 0x01	; 1
     d04:	83 30       	cpi	r24, 0x03	; 3
     d06:	b8 f4       	brcc	.+46     	; 0xd36 <linje_main+0x44>
		current_position=linje_RGBsveng();
     d08:	9f da       	rcall	.-2754   	; 0x248 <linje_RGBsveng>
     d0a:	68 2f       	mov	r22, r24
     d0c:	88 0f       	add	r24, r24
     d0e:	77 0b       	sbc	r23, r23
     d10:	88 0b       	sbc	r24, r24
     d12:	99 0b       	sbc	r25, r25
     d14:	8c d7       	rcall	.+3864   	; 0x1c2e <__floatsisf>
     d16:	60 93 1d 01 	sts	0x011D, r22
     d1a:	70 93 1e 01 	sts	0x011E, r23
     d1e:	80 93 1f 01 	sts	0x011F, r24
     d22:	90 93 20 01 	sts	0x0120, r25
		RGB_slow = 2;
     d26:	82 e0       	ldi	r24, 0x02	; 2
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	90 93 10 01 	sts	0x0110, r25
     d2e:	80 93 0f 01 	sts	0x010F, r24
		linje();
     d32:	73 ce       	rjmp	.-794    	; 0xa1a <linje>
     d34:	08 95       	ret
	}
	else if(detect_goal()==true){
     d36:	7b db       	rcall	.-2314   	; 0x42e <detect_goal>
     d38:	88 23       	and	r24, r24
     d3a:	79 f0       	breq	.+30     	; 0xd5a <linje_main+0x68>
     d3c:	2f e1       	ldi	r18, 0x1F	; 31
     d3e:	81 ea       	ldi	r24, 0xA1	; 161
     d40:	97 e0       	ldi	r25, 0x07	; 7
     d42:	21 50       	subi	r18, 0x01	; 1
     d44:	80 40       	sbci	r24, 0x00	; 0
     d46:	90 40       	sbci	r25, 0x00	; 0
     d48:	e1 f7       	brne	.-8      	; 0xd42 <linje_main+0x50>
     d4a:	00 c0       	rjmp	.+0      	; 0xd4c <linje_main+0x5a>
     d4c:	00 00       	nop
		
		_delay_ms(2500);
		start=0;
     d4e:	10 92 65 01 	sts	0x0165, r1
     d52:	10 92 64 01 	sts	0x0164, r1
		PORTD |= (1 << PD1);
     d56:	59 9a       	sbi	0x0b, 1	; 11
     d58:	08 95       	ret
		//signalera i mål och stanna
	}
	else if(detect_labyrint()==true){
     d5a:	d6 db       	rcall	.-2132   	; 0x508 <detect_labyrint>
     d5c:	88 23       	and	r24, r24
     d5e:	31 f0       	breq	.+12     	; 0xd6c <linje_main+0x7a>
		PORTD |= (1 << PD0);
     d60:	58 9a       	sbi	0x0b, 0	; 11
		start = 0;
     d62:	10 92 65 01 	sts	0x0165, r1
     d66:	10 92 64 01 	sts	0x0164, r1
     d6a:	08 95       	ret
		//regulator_mode=0; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
	}
	else{
		current_position=linje_get_error();
     d6c:	c0 d9       	rcall	.-3200   	; 0xee <linje_get_error>
     d6e:	bc 01       	movw	r22, r24
     d70:	99 0f       	add	r25, r25
     d72:	88 0b       	sbc	r24, r24
     d74:	99 0b       	sbc	r25, r25
     d76:	5b d7       	rcall	.+3766   	; 0x1c2e <__floatsisf>
     d78:	60 93 1d 01 	sts	0x011D, r22
     d7c:	70 93 1e 01 	sts	0x011E, r23
     d80:	80 93 1f 01 	sts	0x011F, r24
     d84:	90 93 20 01 	sts	0x0120, r25
		linje();
     d88:	48 ce       	rjmp	.-880    	; 0xa1a <linje>
     d8a:	08 95       	ret

00000d8c <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     d8c:	84 b5       	in	r24, 0x24	; 36
     d8e:	83 6a       	ori	r24, 0xA3	; 163
     d90:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     d92:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     d94:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     d96:	85 b5       	in	r24, 0x25	; 37
     d98:	83 60       	ori	r24, 0x03	; 3
     d9a:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     d9c:	88 e7       	ldi	r24, 0x78	; 120
     d9e:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     da0:	85 b1       	in	r24, 0x05	; 5
     da2:	15 b8       	out	0x05, r1	; 5
     da4:	08 95       	ret

00000da6 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     daa:	e1 e8       	ldi	r30, 0x81	; 129
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	8d 60       	ori	r24, 0x0D	; 13
     db2:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     db4:	80 ea       	ldi	r24, 0xA0	; 160
     db6:	95 e0       	ldi	r25, 0x05	; 5
     db8:	90 93 89 00 	sts	0x0089, r25
     dbc:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     dc0:	ef e6       	ldi	r30, 0x6F	; 111
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	82 60       	ori	r24, 0x02	; 2
     dc8:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     dca:	b1 9a       	sbi	0x16, 1	; 22
     dcc:	08 95       	ret

00000dce <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     dce:	1f 92       	push	r1
     dd0:	0f 92       	push	r0
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	0f 92       	push	r0
     dd6:	11 24       	eor	r1, r1
     dd8:	8f 93       	push	r24
     dda:	9f 93       	push	r25
	//regler_ready=1;
	//if(counter_timer<10)
	//counter_timer++;
	updaterad_labyrint = true;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	80 93 53 01 	sts	0x0153, r24
	counter_timer_line_lab++;
     de2:	80 91 5a 01 	lds	r24, 0x015A
     de6:	90 91 5b 01 	lds	r25, 0x015B
     dea:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_lab >= 50){
     dec:	82 33       	cpi	r24, 0x32	; 50
     dee:	91 05       	cpc	r25, r1
     df0:	2c f4       	brge	.+10     	; 0xdfc <__vector_13+0x2e>
ISR(TIMER1_COMPA_vect){
	//regler_ready=1;
	//if(counter_timer<10)
	//counter_timer++;
	updaterad_labyrint = true;
	counter_timer_line_lab++;
     df2:	90 93 5b 01 	sts	0x015B, r25
     df6:	80 93 5a 01 	sts	0x015A, r24
     dfa:	06 c0       	rjmp	.+12     	; 0xe08 <__vector_13+0x3a>
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
     dfc:	82 e3       	ldi	r24, 0x32	; 50
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	90 93 5b 01 	sts	0x015B, r25
     e04:	80 93 5a 01 	sts	0x015A, r24
	}
	counter_timer_line_RGB++;
     e08:	80 91 5c 01 	lds	r24, 0x015C
     e0c:	90 91 5d 01 	lds	r25, 0x015D
     e10:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_RGB >= 50){			
     e12:	82 33       	cpi	r24, 0x32	; 50
     e14:	91 05       	cpc	r25, r1
     e16:	2c f4       	brge	.+10     	; 0xe22 <__vector_13+0x54>
	updaterad_labyrint = true;
	counter_timer_line_lab++;
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
	}
	counter_timer_line_RGB++;
     e18:	90 93 5d 01 	sts	0x015D, r25
     e1c:	80 93 5c 01 	sts	0x015C, r24
     e20:	06 c0       	rjmp	.+12     	; 0xe2e <__vector_13+0x60>
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
     e22:	82 e3       	ldi	r24, 0x32	; 50
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	90 93 5d 01 	sts	0x015D, r25
     e2a:	80 93 5c 01 	sts	0x015C, r24
	}
	counter_timer_line_goal++;
     e2e:	80 91 58 01 	lds	r24, 0x0158
     e32:	90 91 59 01 	lds	r25, 0x0159
     e36:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_goal >= 50)
     e38:	82 33       	cpi	r24, 0x32	; 50
     e3a:	91 05       	cpc	r25, r1
     e3c:	2c f4       	brge	.+10     	; 0xe48 <__vector_13+0x7a>
	}
	counter_timer_line_RGB++;
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
	}
	counter_timer_line_goal++;
     e3e:	90 93 59 01 	sts	0x0159, r25
     e42:	80 93 58 01 	sts	0x0158, r24
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <__vector_13+0x86>
	if(counter_timer_line_goal >= 50)
		counter_timer_line_goal = 50;
     e48:	82 e3       	ldi	r24, 0x32	; 50
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	90 93 59 01 	sts	0x0159, r25
     e50:	80 93 58 01 	sts	0x0158, r24
		
	//count_waypoint++;			//räknare för att köra ur svängar i labyrinter
}
     e54:	9f 91       	pop	r25
     e56:	8f 91       	pop	r24
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     e62:	8d b3       	in	r24, 0x1d	; 29
     e64:	86 60       	ori	r24, 0x06	; 6
     e66:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     e68:	e9 e6       	ldi	r30, 0x69	; 105
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 62       	ori	r24, 0x28	; 40
     e70:	80 83       	st	Z, r24
     e72:	08 95       	ret

00000e74 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     e74:	1f 92       	push	r1
     e76:	0f 92       	push	r0
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	0f 92       	push	r0
     e7c:	11 24       	eor	r1, r1
     e7e:	8f 93       	push	r24
     e80:	9f 93       	push	r25
	if(drive_mode==1){
     e82:	80 91 66 01 	lds	r24, 0x0166
     e86:	90 91 67 01 	lds	r25, 0x0167
     e8a:	01 97       	sbiw	r24, 0x01	; 1
     e8c:	39 f4       	brne	.+14     	; 0xe9c <__vector_2+0x28>
		drive_mode=0;
     e8e:	10 92 67 01 	sts	0x0167, r1
     e92:	10 92 66 01 	sts	0x0166, r1
		PORTD |= (1 << PD1);
     e96:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     e98:	58 98       	cbi	0x0b, 0	; 11
     e9a:	0c c0       	rjmp	.+24     	; 0xeb4 <__vector_2+0x40>
	}
	else{
		start=0;
     e9c:	10 92 65 01 	sts	0x0165, r1
     ea0:	10 92 64 01 	sts	0x0164, r1
		drive_mode=1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	90 93 67 01 	sts	0x0167, r25
     eac:	80 93 66 01 	sts	0x0166, r24
		PORTD |= (1 << PD0);
     eb0:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     eb2:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     eb4:	e1 9a       	sbi	0x1c, 1	; 28
}
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti

00000ec4 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     ec4:	1f 92       	push	r1
     ec6:	0f 92       	push	r0
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	0f 92       	push	r0
     ecc:	11 24       	eor	r1, r1
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
	if(start==0){
     ed2:	80 91 64 01 	lds	r24, 0x0164
     ed6:	90 91 65 01 	lds	r25, 0x0165
     eda:	89 2b       	or	r24, r25
     edc:	39 f4       	brne	.+14     	; 0xeec <__vector_3+0x28>
		start=1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	90 93 65 01 	sts	0x0165, r25
     ee6:	80 93 64 01 	sts	0x0164, r24
     eea:	04 c0       	rjmp	.+8      	; 0xef4 <__vector_3+0x30>
	}
	else{
		start=0;
     eec:	10 92 65 01 	sts	0x0165, r1
     ef0:	10 92 64 01 	sts	0x0164, r1
	}
	EIFR |= (1<< INTF2);
     ef4:	e2 9a       	sbi	0x1c, 2	; 28
}
     ef6:	9f 91       	pop	r25
     ef8:	8f 91       	pop	r24
     efa:	0f 90       	pop	r0
     efc:	0f be       	out	0x3f, r0	; 63
     efe:	0f 90       	pop	r0
     f00:	1f 90       	pop	r1
     f02:	18 95       	reti

00000f04 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     f04:	88 23       	and	r24, r24
     f06:	69 f0       	breq	.+26     	; 0xf22 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     f08:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     f0a:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     f0c:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     f0e:	e9 e6       	ldi	r30, 0x69	; 105
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	83 60       	ori	r24, 0x03	; 3
     f16:	80 83       	st	Z, r24
		TWBR = 0x10;
     f18:	80 e1       	ldi	r24, 0x10	; 16
     f1a:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     f1e:	10 92 b9 00 	sts	0x00B9, r1
     f22:	08 95       	ret

00000f24 <i2c_send>:
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     f24:	8f 92       	push	r8
     f26:	9f 92       	push	r9
     f28:	af 92       	push	r10
     f2a:	bf 92       	push	r11
     f2c:	cf 92       	push	r12
     f2e:	df 92       	push	r13
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     f3c:	eb 01       	movw	r28, r22
     f3e:	08 81       	ld	r16, Y
     f40:	02 95       	swap	r16
     f42:	0f 70       	andi	r16, 0x0F	; 15
     f44:	10 e0       	ldi	r17, 0x00	; 0
     f46:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     f48:	68 94       	set
     f4a:	ee 24       	eor	r14, r14
     f4c:	e3 f8       	bld	r14, 3
     f4e:	f1 2c       	mov	r15, r1
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     f54:	ec eb       	ldi	r30, 0xBC	; 188
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	0f 2e       	mov	r0, r31
     f5a:	f4 ea       	ldi	r31, 0xA4	; 164
     f5c:	df 2e       	mov	r13, r31
     f5e:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     f60:	a9 eb       	ldi	r26, 0xB9	; 185
     f62:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     f64:	8e 7f       	andi	r24, 0xFE	; 254
     f66:	c8 2e       	mov	r12, r24
     f68:	6b eb       	ldi	r22, 0xBB	; 187
     f6a:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     f6c:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     f6e:	68 94       	set
     f70:	aa 24       	eor	r10, r10
     f72:	a4 f8       	bld	r10, 4
     f74:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     f76:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     f78:	90 81       	ld	r25, Z
     f7a:	99 23       	and	r25, r25
     f7c:	ec f7       	brge	.-6      	; 0xf78 <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     f7e:	2c 91       	ld	r18, X
     f80:	28 7f       	andi	r18, 0xF8	; 248
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	2e 15       	cp	r18, r14
     f86:	3f 05       	cpc	r19, r15
     f88:	69 f5       	brne	.+90     	; 0xfe4 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     f8a:	eb 01       	movw	r28, r22
     f8c:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     f8e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
     f90:	90 81       	ld	r25, Z
     f92:	99 23       	and	r25, r25
     f94:	ec f7       	brge	.-6      	; 0xf90 <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
     f96:	9c 91       	ld	r25, X
     f98:	98 7f       	andi	r25, 0xF8	; 248
     f9a:	98 31       	cpi	r25, 0x18	; 24
     f9c:	29 f0       	breq	.+10     	; 0xfa8 <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     f9e:	84 e9       	ldi	r24, 0x94	; 148
     fa0:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	1f c0       	rjmp	.+62     	; 0xfe6 <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
     fa8:	e4 01       	movw	r28, r8
     faa:	99 91       	ld	r25, Y+
     fac:	4e 01       	movw	r8, r28
     fae:	eb 01       	movw	r28, r22
     fb0:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
     fb2:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
     fb4:	90 81       	ld	r25, Z
     fb6:	99 23       	and	r25, r25
     fb8:	ec f7       	brge	.-6      	; 0xfb4 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
     fba:	9c 91       	ld	r25, X
     fbc:	98 7f       	andi	r25, 0xF8	; 248
     fbe:	98 32       	cpi	r25, 0x28	; 40
     fc0:	29 f0       	breq	.+10     	; 0xfcc <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     fc2:	84 e9       	ldi	r24, 0x94	; 148
     fc4:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     fc8:	80 e0       	ldi	r24, 0x00	; 0
     fca:	0d c0       	rjmp	.+26     	; 0xfe6 <i2c_send+0xc2>
	}
	counter++;
     fcc:	4f 5f       	subi	r20, 0xFF	; 255
     fce:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     fd0:	ea 2c       	mov	r14, r10
     fd2:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
     fd4:	04 17       	cp	r16, r20
     fd6:	15 07       	cpc	r17, r21
     fd8:	74 f6       	brge	.-100    	; 0xf76 <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     fda:	84 e9       	ldi	r24, 0x94	; 148
     fdc:	80 93 bc 00 	sts	0x00BC, r24
	return true;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	01 c0       	rjmp	.+2      	; 0xfe6 <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
     fe4:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	08 95       	ret

00001000 <req_gyro_turn>:
#include "asf.h"
int manual_function=0;
int gyro_left = 0;
int gyro_right = 0;

void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	1f 92       	push	r1
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	byte data[1] = { 0x07 };
    100a:	87 e0       	ldi	r24, 0x07	; 7
    100c:	89 83       	std	Y+1, r24	; 0x01
	i2c_send(0x06, data);
    100e:	be 01       	movw	r22, r28
    1010:	6f 5f       	subi	r22, 0xFF	; 255
    1012:	7f 4f       	sbci	r23, 0xFF	; 255
    1014:	86 e0       	ldi	r24, 0x06	; 6
    1016:	86 df       	rcall	.-244    	; 0xf24 <i2c_send>
	turning = true;
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	80 93 52 01 	sts	0x0152, r24
    101e:	87 ea       	ldi	r24, 0xA7	; 167
    1020:	91 e6       	ldi	r25, 0x61	; 97
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	f1 f7       	brne	.-4      	; 0x1022 <req_gyro_turn+0x22>
    1026:	00 c0       	rjmp	.+0      	; 0x1028 <req_gyro_turn+0x28>
    1028:	00 00       	nop
	_delay_ms(100);
}
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <manual_drive>:
//Funktioner fÃ¶r att styra robot fÃ¶r hÃ¶ger/vÃ¤nster eller framÃ¥t
//--------------------------------------------------------------

void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
    1032:	20 91 44 01 	lds	r18, 0x0144
    1036:	30 91 45 01 	lds	r19, 0x0145
    103a:	21 30       	cpi	r18, 0x01	; 1
    103c:	31 05       	cpc	r19, r1
    103e:	49 f4       	brne	.+18     	; 0x1052 <manual_drive+0x20>
				req_gyro_turn();											// Request gyroturn
				turn_left();												// Turn motors on for left spin						
				gyro_left = 1;												
			}
			else if(gyro_left == 1){					// 90 turn done
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
    1040:	10 92 47 01 	sts	0x0147, r1
    1044:	10 92 46 01 	sts	0x0146, r1
				gyro_left = 0;
    1048:	10 92 45 01 	sts	0x0145, r1
    104c:	10 92 44 01 	sts	0x0144, r1
    1050:	08 95       	ret
void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
			manual_function = 6;
		}
		else if(gyro_right == 1){
    1052:	80 91 42 01 	lds	r24, 0x0142
    1056:	90 91 43 01 	lds	r25, 0x0143
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	71 f4       	brne	.+28     	; 0x107a <manual_drive+0x48>
			manual_function = 5;	
    105e:	85 e0       	ldi	r24, 0x05	; 5
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	90 93 47 01 	sts	0x0147, r25
    1066:	80 93 46 01 	sts	0x0146, r24
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    106a:	80 91 42 01 	lds	r24, 0x0142
    106e:	90 91 43 01 	lds	r25, 0x0143
    1072:	00 97       	sbiw	r24, 0x00	; 0
    1074:	09 f0       	breq	.+2      	; 0x1078 <manual_drive+0x46>
    1076:	59 c0       	rjmp	.+178    	; 0x112a <manual_drive+0xf8>
    1078:	4f c0       	rjmp	.+158    	; 0x1118 <manual_drive+0xe6>
		}
		else if(gyro_right == 1){
			manual_function = 5;	
		}
		//*******************************
		if(manual_function == 0){											// Stand still = dont dare to move
    107a:	80 91 46 01 	lds	r24, 0x0146
    107e:	90 91 47 01 	lds	r25, 0x0147
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	29 f4       	brne	.+10     	; 0x1090 <manual_drive+0x5e>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    1086:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1088:	2d 98       	cbi	0x05, 5	; 5
			motor_left = 0;
    108a:	17 bc       	out	0x27, r1	; 39
			motor_right = 0;
    108c:	18 bc       	out	0x28, r1	; 40
    108e:	08 95       	ret
		}
		else if(manual_function == 1){										// Forward
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	91 05       	cpc	r25, r1
    1094:	49 f4       	brne	.+18     	; 0x10a8 <manual_drive+0x76>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    1096:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1098:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    109a:	80 91 62 01 	lds	r24, 0x0162
    109e:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    10a0:	80 91 60 01 	lds	r24, 0x0160
    10a4:	88 bd       	out	0x28, r24	; 40
    10a6:	08 95       	ret
		}
		else if(manual_function == 2){										// Backward
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	91 05       	cpc	r25, r1
    10ac:	59 f4       	brne	.+22     	; 0x10c4 <manual_drive+0x92>
			PORTB |= (1 << motor_dir_left) | (1 << motor_dir_right);		// Set motor direction to backward
    10ae:	85 b1       	in	r24, 0x05	; 5
    10b0:	80 66       	ori	r24, 0x60	; 96
    10b2:	85 b9       	out	0x05, r24	; 5
			motor_left = left-13;											// -n for adjusting so the motors "speed" are the same :D :D  ***Change depends on speed :D***
    10b4:	80 91 62 01 	lds	r24, 0x0162
    10b8:	8d 50       	subi	r24, 0x0D	; 13
    10ba:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
    10bc:	80 91 60 01 	lds	r24, 0x0160
    10c0:	88 bd       	out	0x28, r24	; 40
    10c2:	08 95       	ret
		}
		else if(manual_function == 3){										// Rightforward
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	81 f4       	brne	.+32     	; 0x10ea <manual_drive+0xb8>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10ca:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10cc:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
    10ce:	80 91 62 01 	lds	r24, 0x0162
    10d2:	87 bd       	out	0x27, r24	; 39
			motor_right = (right - (right/3));								// Speed value minus one third of the speedvalue
    10d4:	20 91 60 01 	lds	r18, 0x0160
    10d8:	90 91 61 01 	lds	r25, 0x0161
    10dc:	82 2f       	mov	r24, r18
    10de:	63 e0       	ldi	r22, 0x03	; 3
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	94 d6       	rcall	.+3368   	; 0x1e0c <__divmodhi4>
    10e4:	26 1b       	sub	r18, r22
    10e6:	28 bd       	out	0x28, r18	; 40
    10e8:	08 95       	ret
		}
		else if(manual_function == 4){										// Leftforward
    10ea:	84 30       	cpi	r24, 0x04	; 4
    10ec:	91 05       	cpc	r25, r1
    10ee:	81 f4       	brne	.+32     	; 0x1110 <manual_drive+0xde>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
    10f0:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    10f2:	2d 98       	cbi	0x05, 5	; 5
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
    10f4:	20 91 62 01 	lds	r18, 0x0162
    10f8:	90 91 63 01 	lds	r25, 0x0163
    10fc:	82 2f       	mov	r24, r18
    10fe:	63 e0       	ldi	r22, 0x03	; 3
    1100:	70 e0       	ldi	r23, 0x00	; 0
    1102:	84 d6       	rcall	.+3336   	; 0x1e0c <__divmodhi4>
    1104:	26 1b       	sub	r18, r22
    1106:	27 bd       	out	0x27, r18	; 39
			motor_right = right;
    1108:	80 91 60 01 	lds	r24, 0x0160
    110c:	88 bd       	out	0x28, r24	; 40
    110e:	08 95       	ret
		}
		else if(manual_function == 5){										// Spin right
    1110:	85 30       	cpi	r24, 0x05	; 5
    1112:	91 05       	cpc	r25, r1
    1114:	a9 f4       	brne	.+42     	; 0x1140 <manual_drive+0x10e>
    1116:	26 c0       	rjmp	.+76     	; 0x1164 <manual_drive+0x132>
			if(gyro_right == 0){											// Only once when pressed
				req_gyro_turn();											// Request gyroturn
    1118:	73 df       	rcall	.-282    	; 0x1000 <req_gyro_turn>
				turn_right();												// Turn motors on for left spin	
    111a:	2a da       	rcall	.-2988   	; 0x570 <turn_right>
				gyro_right = 1; 
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	90 93 43 01 	sts	0x0143, r25
    1124:	80 93 42 01 	sts	0x0142, r24
    1128:	08 95       	ret
			}
			else if(gyro_right == 1){				// 90 turn done
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	09 f5       	brne	.+66     	; 0x1170 <manual_drive+0x13e>
				manual_function = 0;										// kan behÃ¶vas nollstÃ¤llning av funktion (probably not)
    112e:	10 92 47 01 	sts	0x0147, r1
    1132:	10 92 46 01 	sts	0x0146, r1
				gyro_right = 0;												
    1136:	10 92 43 01 	sts	0x0143, r1
    113a:	10 92 42 01 	sts	0x0142, r1
    113e:	08 95       	ret
			}
		}
		else if(manual_function == 6){										// Spin left
    1140:	06 97       	sbiw	r24, 0x06	; 6
    1142:	59 f4       	brne	.+22     	; 0x115a <manual_drive+0x128>
			if(gyro_left == 0){												// Only once when pressed
    1144:	23 2b       	or	r18, r19
    1146:	a1 f4       	brne	.+40     	; 0x1170 <manual_drive+0x13e>
				req_gyro_turn();											// Request gyroturn
    1148:	5b df       	rcall	.-330    	; 0x1000 <req_gyro_turn>
				turn_left();												// Turn motors on for left spin						
    114a:	0b da       	rcall	.-3050   	; 0x562 <turn_left>
				gyro_left = 1;												
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	90 93 45 01 	sts	0x0145, r25
    1154:	80 93 44 01 	sts	0x0144, r24
    1158:	08 95       	ret
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
				gyro_left = 0;
			}
		}
		else{
			manual_function=0;												// why not :D 
    115a:	10 92 47 01 	sts	0x0147, r1
    115e:	10 92 46 01 	sts	0x0146, r1
    1162:	08 95       	ret
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    1164:	80 91 42 01 	lds	r24, 0x0142
    1168:	90 91 43 01 	lds	r25, 0x0143
    116c:	89 2b       	or	r24, r25
    116e:	a1 f2       	breq	.-88     	; 0x1118 <manual_drive+0xe6>
    1170:	08 95       	ret

00001172 <waypoint_lab>:


//-------------------------------------
//Funktioner som kommer styra roboten vid specialfall som tillexempel t-korsning eller en vanlig sväng
//-------------------------------------
void waypoint_lab(int distance_left,int distance_right,int distance_front,int st_value){ //t-korsning 
    1172:	9c 01       	movw	r18, r24
	
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    1174:	90 91 3a 01 	lds	r25, 0x013A
    1178:	91 11       	cpse	r25, r1
    117a:	12 c0       	rjmp	.+36     	; 0x11a0 <waypoint_lab+0x2e>
    117c:	80 91 04 01 	lds	r24, 0x0104
    1180:	90 91 05 01 	lds	r25, 0x0105
    1184:	84 17       	cp	r24, r20
    1186:	95 07       	cpc	r25, r21
    1188:	24 f4       	brge	.+8      	; 0x1192 <waypoint_lab+0x20>
		drive_forward();
    118a:	3e dc       	rcall	.-1924   	; 0xa08 <drive_forward>
		turn_done = false;
    118c:	10 92 39 01 	sts	0x0139, r1
    1190:	08 95       	ret
	}
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		ongoing_turn = true;
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	80 93 3a 01 	sts	0x013A, r24
		start_turn = true;
    1198:	80 93 3b 01 	sts	0x013B, r24
		stand_still();
    119c:	ac ca       	rjmp	.-2728   	; 0x6f6 <stand_still>
    119e:	08 95       	ret
	}
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
    11a0:	90 91 3b 01 	lds	r25, 0x013B
    11a4:	99 23       	and	r25, r25
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <waypoint_lab+0x4e>
		
		if(RGB_data == 3){					//RGB_data="blå" alltså sväng vänster vänster=blå
    11a8:	80 91 91 01 	lds	r24, 0x0191
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	19 f4       	brne	.+6      	; 0x11b6 <waypoint_lab+0x44>
			req_gyro_turn();
    11b0:	27 df       	rcall	.-434    	; 0x1000 <req_gyro_turn>
			turn_left();
    11b2:	d7 d9       	rcall	.-3154   	; 0x562 <turn_left>
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <waypoint_lab+0x48>
		}
		else {
			req_gyro_turn();
    11b6:	24 df       	rcall	.-440    	; 0x1000 <req_gyro_turn>
			turn_right();					//RGB_data="röd" alltså sväng höger
    11b8:	db d9       	rcall	.-3146   	; 0x570 <turn_right>
		}
		start_turn = false;					//Säger att svängen har inledits för att inte gå in i den här if-satsen igen
    11ba:	10 92 3b 01 	sts	0x013B, r1
    11be:	08 95       	ret
	}
	else if(ongoing_turn && !turning){	//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    11c0:	80 91 52 01 	lds	r24, 0x0152
    11c4:	81 11       	cpse	r24, r1
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <waypoint_lab+0x60>
		turn_done = true;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 93 39 01 	sts	0x0139, r24
		//count_waypoint = 0;
		drive_forward();
    11ce:	1c cc       	rjmp	.-1992   	; 0xa08 <drive_forward>
    11d0:	08 95       	ret
	}
	else if(turn_done && distance_right < 31 && distance_left < 31){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    11d2:	80 91 39 01 	lds	r24, 0x0139
    11d6:	88 23       	and	r24, r24
    11d8:	61 f0       	breq	.+24     	; 0x11f2 <waypoint_lab+0x80>
    11da:	6f 31       	cpi	r22, 0x1F	; 31
    11dc:	71 05       	cpc	r23, r1
    11de:	4c f4       	brge	.+18     	; 0x11f2 <waypoint_lab+0x80>
    11e0:	2f 31       	cpi	r18, 0x1F	; 31
    11e2:	31 05       	cpc	r19, r1
    11e4:	34 f4       	brge	.+12     	; 0x11f2 <waypoint_lab+0x80>
		waypoint = false;						
    11e6:	10 92 30 01 	sts	0x0130, r1
		ongoing_turn = false;
    11ea:	10 92 3a 01 	sts	0x013A, r1
		prepare_special_case = false;
    11ee:	10 92 37 01 	sts	0x0137, r1
    11f2:	08 95       	ret

000011f4 <oneway_turn_lab>:
	}
}

void oneway_turn_lab(int distance_left,int distance_right,int distance_front,int st_value){//roboten kommer fram till en enkel kurva antingen till höger eller vänster
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	ec 01       	movw	r28, r24
    11fe:	8b 01       	movw	r16, r22
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    1200:	80 91 3a 01 	lds	r24, 0x013A
    1204:	81 11       	cpse	r24, r1
    1206:	14 c0       	rjmp	.+40     	; 0x1230 <oneway_turn_lab+0x3c>
    1208:	80 91 04 01 	lds	r24, 0x0104
    120c:	90 91 05 01 	lds	r25, 0x0105
    1210:	84 17       	cp	r24, r20
    1212:	95 07       	cpc	r25, r21
    1214:	24 f4       	brge	.+8      	; 0x121e <oneway_turn_lab+0x2a>
		drive_forward();
    1216:	f8 db       	rcall	.-2064   	; 0xa08 <drive_forward>
		turn_done = false;
    1218:	10 92 39 01 	sts	0x0139, r1
    121c:	38 c0       	rjmp	.+112    	; 0x128e <oneway_turn_lab+0x9a>
	}
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		turn_done = false;
    121e:	10 92 39 01 	sts	0x0139, r1
		ongoing_turn = true;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	80 93 3a 01 	sts	0x013A, r24
		start_turn = true;
    1228:	80 93 3b 01 	sts	0x013B, r24
		stand_still();
    122c:	64 da       	rcall	.-2872   	; 0x6f6 <stand_still>
    122e:	2f c0       	rjmp	.+94     	; 0x128e <oneway_turn_lab+0x9a>
	}
	else if(start_turn){									//Roboten är inne i kurvan och redo o svänga 
    1230:	80 91 3b 01 	lds	r24, 0x013B
    1234:	88 23       	and	r24, r24
    1236:	d1 f0       	breq	.+52     	; 0x126c <oneway_turn_lab+0x78>
		if(distance_left > st_value){						//Kollar avstånd till höger och vänster för att -												//se vilket håll det ska svängas och inleder sedan sväng
    1238:	2c 17       	cp	r18, r28
    123a:	3d 07       	cpc	r19, r29
    123c:	4c f4       	brge	.+18     	; 0x1250 <oneway_turn_lab+0x5c>
			req_gyro_turn();
    123e:	e0 de       	rcall	.-576    	; 0x1000 <req_gyro_turn>
			turn_left();
    1240:	90 d9       	rcall	.-3296   	; 0x562 <turn_left>
			regulate_side = 1;
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	90 93 32 01 	sts	0x0132, r25
    124a:	80 93 31 01 	sts	0x0131, r24
    124e:	0b c0       	rjmp	.+22     	; 0x1266 <oneway_turn_lab+0x72>
		}
		else if(distance_right > st_value){
    1250:	26 17       	cp	r18, r22
    1252:	37 07       	cpc	r19, r23
    1254:	44 f4       	brge	.+16     	; 0x1266 <oneway_turn_lab+0x72>
			req_gyro_turn();
    1256:	d4 de       	rcall	.-600    	; 0x1000 <req_gyro_turn>
			turn_right();
    1258:	8b d9       	rcall	.-3306   	; 0x570 <turn_right>
			regulate_side = 2;
    125a:	82 e0       	ldi	r24, 0x02	; 2
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	90 93 32 01 	sts	0x0132, r25
    1262:	80 93 31 01 	sts	0x0131, r24
		}
		start_turn = false;										// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    1266:	10 92 3b 01 	sts	0x013B, r1
    126a:	11 c0       	rjmp	.+34     	; 0x128e <oneway_turn_lab+0x9a>
	}
	
	else if(ongoing_turn && !turn_done){					//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    126c:	80 91 39 01 	lds	r24, 0x0139
    1270:	81 11       	cpse	r24, r1
    1272:	0d c0       	rjmp	.+26     	; 0x128e <oneway_turn_lab+0x9a>
		//count_waypoint = 0; //oneway_turn
		//gyro_turn = 0;
		if(regulate_side == 1)
    1274:	80 91 31 01 	lds	r24, 0x0131
    1278:	90 91 32 01 	lds	r25, 0x0132
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	21 f4       	brne	.+8      	; 0x1288 <oneway_turn_lab+0x94>
			drive_forward_right(distance_right, distance_front);
    1280:	ba 01       	movw	r22, r20
    1282:	c8 01       	movw	r24, r16
    1284:	ec da       	rcall	.-2600   	; 0x85e <drive_forward_right>
    1286:	02 c0       	rjmp	.+4      	; 0x128c <oneway_turn_lab+0x98>
		else 
			drive_forward_left(distance_left);	
    1288:	ce 01       	movw	r24, r28
    128a:	3a da       	rcall	.-2956   	; 0x700 <drive_forward_left>
		drive_forward(); // Byt till left eller right beroende på riktning
    128c:	bd db       	rcall	.-2182   	; 0xa08 <drive_forward>
		oneway_turn = false;
		ongoing_turn = false;
		PORTD ^= (1 << PD0);
		prepare_special_case = false;
	}
	previous_right = distance_right;
    128e:	10 93 36 01 	sts	0x0136, r17
    1292:	00 93 35 01 	sts	0x0135, r16
	previous_left = distance_left;
    1296:	d0 93 34 01 	sts	0x0134, r29
    129a:	c0 93 33 01 	sts	0x0133, r28
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	08 95       	ret

000012a8 <twoway_turn_left_lab>:


//Måste testas
void twoway_turn_left_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram	
    12a8:	fc 01       	movw	r30, r24
	if(first_time){    //---kör fram i korsningen för att prepa sväng
    12aa:	90 91 06 01 	lds	r25, 0x0106
    12ae:	99 23       	and	r25, r25
    12b0:	69 f0       	breq	.+26     	; 0x12cc <twoway_turn_left_lab+0x24>
		sensor_front_tmp = distance_front;
    12b2:	50 93 8c 01 	sts	0x018C, r21
    12b6:	40 93 8b 01 	sts	0x018B, r20
	//	drive_forward();
		turn_done = false;
    12ba:	10 92 39 01 	sts	0x0139, r1
		first_time = false;
    12be:	10 92 06 01 	sts	0x0106, r1
		count_waypoint = 0;
    12c2:	10 92 5f 01 	sts	0x015F, r1
    12c6:	10 92 5e 01 	sts	0x015E, r1
    12ca:	08 95       	ret
    12cc:	cb 01       	movw	r24, r22
	}
	//Fungerar detta?! Måste nog göras om. Sensorerna är inte bra nog
	else if(!ongoing_turn && ++count_waypoint <= 1){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    12ce:	60 91 3a 01 	lds	r22, 0x013A
    12d2:	61 11       	cpse	r22, r1
    12d4:	5d c0       	rjmp	.+186    	; 0x1390 <twoway_turn_left_lab+0xe8>
    12d6:	60 91 5e 01 	lds	r22, 0x015E
    12da:	70 91 5f 01 	lds	r23, 0x015F
    12de:	6f 5f       	subi	r22, 0xFF	; 255
    12e0:	7f 4f       	sbci	r23, 0xFF	; 255
    12e2:	70 93 5f 01 	sts	0x015F, r23
    12e6:	60 93 5e 01 	sts	0x015E, r22
    12ea:	62 30       	cpi	r22, 0x02	; 2
    12ec:	71 05       	cpc	r23, r1
    12ee:	0c f0       	brlt	.+2      	; 0x12f2 <twoway_turn_left_lab+0x4a>
    12f0:	4a c0       	rjmp	.+148    	; 0x1386 <twoway_turn_left_lab+0xde>
		ongoing_turn = true;
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	80 93 3a 01 	sts	0x013A, r24
		start_turn = true;
    12f8:	80 93 3b 01 	sts	0x013B, r24
		stand_still();
    12fc:	fc c9       	rjmp	.-3080   	; 0x6f6 <stand_still>
    12fe:	08 95       	ret
	}
	
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
		
			if(RGB_data != 3){			//RGB säger inte att roboten ska svänga vänster så den kör rakt fram					
    1300:	20 91 91 01 	lds	r18, 0x0191
    1304:	23 30       	cpi	r18, 0x03	; 3
    1306:	41 f0       	breq	.+16     	; 0x1318 <twoway_turn_left_lab+0x70>
				drive_forward_right(distance_right, distance_front);	//kör efter väggen sen	
    1308:	ba 01       	movw	r22, r20
    130a:	a9 da       	rcall	.-2734   	; 0x85e <drive_forward_right>
				turn_done = true;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 39 01 	sts	0x0139, r24
				regler_against_wall = true;					
    1312:	80 93 38 01 	sts	0x0138, r24
    1316:	02 c0       	rjmp	.+4      	; 0x131c <twoway_turn_left_lab+0x74>
			}
			else {						//RGB säger att roboten ska svänga vänster så vänstersväng inleds samt kall på Gyro för att kontrollera 90-grader
				req_gyro_turn();
    1318:	73 de       	rcall	.-794    	; 0x1000 <req_gyro_turn>
				turn_left();
    131a:	23 d9       	rcall	.-3514   	; 0x562 <turn_left>
			}
												
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen	
    131c:	10 92 3b 01 	sts	0x013B, r1
    1320:	08 95       	ret
	}
	
	else if(ongoing_turn && RGB_data == 3 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    1322:	60 91 91 01 	lds	r22, 0x0191
    1326:	63 30       	cpi	r22, 0x03	; 3
    1328:	59 f4       	brne	.+22     	; 0x1340 <twoway_turn_left_lab+0x98>
    132a:	60 91 39 01 	lds	r22, 0x0139
    132e:	61 11       	cpse	r22, r1
    1330:	34 c0       	rjmp	.+104    	; 0x139a <twoway_turn_left_lab+0xf2>
		turn_done = true;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 39 01 	sts	0x0139, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    1338:	10 92 91 01 	sts	0x0191, r1
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    133c:	65 cb       	rjmp	.-2358   	; 0xa08 <drive_forward>
    133e:	08 95       	ret
	}
	
	else if(regler_against_wall && (distance_left > st_value )){
    1340:	60 91 38 01 	lds	r22, 0x0138
    1344:	66 23       	and	r22, r22
    1346:	31 f0       	breq	.+12     	; 0x1354 <twoway_turn_left_lab+0xac>
    1348:	2e 17       	cp	r18, r30
    134a:	3f 07       	cpc	r19, r31
    134c:	1c f4       	brge	.+6      	; 0x1354 <twoway_turn_left_lab+0xac>
		drive_forward_right(distance_right, distance_front);
    134e:	ba 01       	movw	r22, r20
    1350:	86 ca       	rjmp	.-2804   	; 0x85e <drive_forward_right>
    1352:	08 95       	ret
		twoway_turn_left = false;
		first_time = true;
		ongoing_turn = false;
	}*/
		
	else if(turn_done && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1354:	60 91 39 01 	lds	r22, 0x0139
    1358:	66 23       	and	r22, r22
    135a:	39 f1       	breq	.+78     	; 0x13aa <twoway_turn_left_lab+0x102>
    135c:	e2 17       	cp	r30, r18
    135e:	f3 07       	cpc	r31, r19
    1360:	24 f5       	brge	.+72     	; 0x13aa <twoway_turn_left_lab+0x102>
    1362:	82 17       	cp	r24, r18
    1364:	93 07       	cpc	r25, r19
    1366:	0c f5       	brge	.+66     	; 0x13aa <twoway_turn_left_lab+0x102>
    1368:	24 17       	cp	r18, r20
    136a:	35 07       	cpc	r19, r21
    136c:	f4 f4       	brge	.+60     	; 0x13aa <twoway_turn_left_lab+0x102>
		twoway_turn_left = false;
    136e:	10 92 2e 01 	sts	0x012E, r1
		ongoing_turn = false;
    1372:	10 92 3a 01 	sts	0x013A, r1
		first_time = true;
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	80 93 06 01 	sts	0x0106, r24
		regler_against_wall = false;
    137c:	10 92 38 01 	sts	0x0138, r1
		prepare_special_case = false;
    1380:	10 92 37 01 	sts	0x0137, r1
    1384:	08 95       	ret
		ongoing_turn = true;
		start_turn = true;
		stand_still();
	}
	
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1386:	60 91 3b 01 	lds	r22, 0x013B
    138a:	61 11       	cpse	r22, r1
    138c:	b9 cf       	rjmp	.-142    	; 0x1300 <twoway_turn_left_lab+0x58>
    138e:	d8 cf       	rjmp	.-80     	; 0x1340 <twoway_turn_left_lab+0x98>
    1390:	60 91 3b 01 	lds	r22, 0x013B
    1394:	61 11       	cpse	r22, r1
    1396:	b4 cf       	rjmp	.-152    	; 0x1300 <twoway_turn_left_lab+0x58>
    1398:	c4 cf       	rjmp	.-120    	; 0x1322 <twoway_turn_left_lab+0x7a>
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
	}
	
	else if(regler_against_wall && (distance_left > st_value )){
    139a:	60 91 38 01 	lds	r22, 0x0138
    139e:	66 23       	and	r22, r22
    13a0:	e9 f2       	breq	.-70     	; 0x135c <twoway_turn_left_lab+0xb4>
    13a2:	2e 17       	cp	r18, r30
    13a4:	3f 07       	cpc	r19, r31
    13a6:	d4 f6       	brge	.-76     	; 0x135c <twoway_turn_left_lab+0xb4>
    13a8:	d2 cf       	rjmp	.-92     	; 0x134e <twoway_turn_left_lab+0xa6>
    13aa:	08 95       	ret

000013ac <twoway_turn_right_lab>:
	}
}


//INTE KLAR + måste testas
void twoway_turn_right_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
    13ac:	dc 01       	movw	r26, r24
	++count_waypoint;
    13ae:	e0 91 5e 01 	lds	r30, 0x015E
    13b2:	f0 91 5f 01 	lds	r31, 0x015F
    13b6:	31 96       	adiw	r30, 0x01	; 1
    13b8:	f0 93 5f 01 	sts	0x015F, r31
    13bc:	e0 93 5e 01 	sts	0x015E, r30
	if(first_time){    //---kör fram i korsningen för att prepa sväng
    13c0:	90 91 06 01 	lds	r25, 0x0106
    13c4:	99 23       	and	r25, r25
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <twoway_turn_right_lab+0x34>
		drive_forward();
    13c8:	1f db       	rcall	.-2498   	; 0xa08 <drive_forward>
		turn_done = false;
    13ca:	10 92 39 01 	sts	0x0139, r1
		first_time = false;
    13ce:	10 92 06 01 	sts	0x0106, r1
		count_waypoint = 0;
    13d2:	10 92 5f 01 	sts	0x015F, r1
    13d6:	10 92 5e 01 	sts	0x015E, r1
		ongoing_turn = false;
    13da:	10 92 3a 01 	sts	0x013A, r1
    13de:	08 95       	ret
	}
	else if(!ongoing_turn && count_waypoint>= 1){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    13e0:	90 91 3a 01 	lds	r25, 0x013A
    13e4:	91 11       	cpse	r25, r1
    13e6:	0a c0       	rjmp	.+20     	; 0x13fc <twoway_turn_right_lab+0x50>
    13e8:	1e 16       	cp	r1, r30
    13ea:	1f 06       	cpc	r1, r31
    13ec:	3c f4       	brge	.+14     	; 0x13fc <twoway_turn_right_lab+0x50>
		ongoing_turn = true;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	80 93 3a 01 	sts	0x013A, r24
		start_turn = true;
    13f4:	80 93 3b 01 	sts	0x013B, r24
		stand_still();
    13f8:	7e c9       	rjmp	.-3332   	; 0x6f6 <stand_still>
    13fa:	08 95       	ret
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    13fc:	80 91 3b 01 	lds	r24, 0x013B
    1400:	88 23       	and	r24, r24
    1402:	89 f0       	breq	.+34     	; 0x1426 <twoway_turn_right_lab+0x7a>
		if(RGB_data == 2){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    1404:	80 91 91 01 	lds	r24, 0x0191
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	41 f4       	brne	.+16     	; 0x141c <twoway_turn_right_lab+0x70>
			drive_forward_left(distance_left);
    140c:	cd 01       	movw	r24, r26
    140e:	78 d9       	rcall	.-3344   	; 0x700 <drive_forward_left>
			turn_done = true;
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 93 39 01 	sts	0x0139, r24
			regler_against_wall = true;
    1416:	80 93 38 01 	sts	0x0138, r24
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <twoway_turn_right_lab+0x74>
		}
		else {						//RGB säger att roboten ska svänga höger så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    141c:	f1 dd       	rcall	.-1054   	; 0x1000 <req_gyro_turn>
			turn_right();
    141e:	a8 d8       	rcall	.-3760   	; 0x570 <turn_right>
		}	
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    1420:	10 92 3b 01 	sts	0x013B, r1
    1424:	08 95       	ret
	}
	
	// Rakt fram
	else if(regler_against_wall && (distance_right > st_value )){
    1426:	80 91 38 01 	lds	r24, 0x0138
    142a:	88 23       	and	r24, r24
    142c:	31 f0       	breq	.+12     	; 0x143a <twoway_turn_right_lab+0x8e>
    142e:	26 17       	cp	r18, r22
    1430:	37 07       	cpc	r19, r23
    1432:	1c f4       	brge	.+6      	; 0x143a <twoway_turn_right_lab+0x8e>
		drive_forward_left(distance_left);
    1434:	cd 01       	movw	r24, r26
    1436:	64 c9       	rjmp	.-3384   	; 0x700 <drive_forward_left>
    1438:	08 95       	ret
	}
	
	else if(RGB_data == 2 && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    143a:	80 91 91 01 	lds	r24, 0x0191
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	b9 f5       	brne	.+110    	; 0x14b0 <twoway_turn_right_lab+0x104>
    1442:	a2 17       	cp	r26, r18
    1444:	b3 07       	cpc	r27, r19
    1446:	bc f5       	brge	.+110    	; 0x14b6 <twoway_turn_right_lab+0x10a>
    1448:	62 17       	cp	r22, r18
    144a:	73 07       	cpc	r23, r19
    144c:	a4 f5       	brge	.+104    	; 0x14b6 <twoway_turn_right_lab+0x10a>
    144e:	24 17       	cp	r18, r20
    1450:	35 07       	cpc	r19, r21
    1452:	8c f5       	brge	.+98     	; 0x14b6 <twoway_turn_right_lab+0x10a>
		twoway_turn_right = false;
    1454:	10 92 2d 01 	sts	0x012D, r1
		first_time = true;
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	80 93 06 01 	sts	0x0106, r24
		ongoing_turn = false;
    145e:	10 92 3a 01 	sts	0x013A, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    1462:	10 92 91 01 	sts	0x0191, r1
		regler_against_wall = false;
    1466:	10 92 38 01 	sts	0x0138, r1
		prepare_special_case = false;
    146a:	10 92 37 01 	sts	0x0137, r1
    146e:	08 95       	ret
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    1470:	80 91 39 01 	lds	r24, 0x0139
    1474:	81 11       	cpse	r24, r1
    1476:	09 c0       	rjmp	.+18     	; 0x148a <twoway_turn_right_lab+0xde>
		turn_done = true;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 39 01 	sts	0x0139, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    147e:	c4 ca       	rjmp	.-2680   	; 0xa08 <drive_forward>
    1480:	08 95       	ret
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1482:	80 91 39 01 	lds	r24, 0x0139
    1486:	88 23       	and	r24, r24
    1488:	b1 f0       	breq	.+44     	; 0x14b6 <twoway_turn_right_lab+0x10a>
    148a:	a2 17       	cp	r26, r18
    148c:	b3 07       	cpc	r27, r19
    148e:	9c f4       	brge	.+38     	; 0x14b6 <twoway_turn_right_lab+0x10a>
    1490:	62 17       	cp	r22, r18
    1492:	73 07       	cpc	r23, r19
    1494:	84 f4       	brge	.+32     	; 0x14b6 <twoway_turn_right_lab+0x10a>
    1496:	24 17       	cp	r18, r20
    1498:	35 07       	cpc	r19, r21
    149a:	6c f4       	brge	.+26     	; 0x14b6 <twoway_turn_right_lab+0x10a>
		twoway_turn_right = false;
    149c:	10 92 2d 01 	sts	0x012D, r1
		ongoing_turn = false;
    14a0:	10 92 3a 01 	sts	0x013A, r1
		first_time = true;
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	80 93 06 01 	sts	0x0106, r24
		prepare_special_case = false;
    14aa:	10 92 37 01 	sts	0x0137, r1
    14ae:	08 95       	ret
		regler_against_wall = false;
		prepare_special_case = false;
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    14b0:	91 11       	cpse	r25, r1
    14b2:	de cf       	rjmp	.-68     	; 0x1470 <twoway_turn_right_lab+0xc4>
    14b4:	e6 cf       	rjmp	.-52     	; 0x1482 <twoway_turn_right_lab+0xd6>
    14b6:	08 95       	ret

000014b8 <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
    14b8:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
    14ba:	40 91 8a 01 	lds	r20, 0x018A
    14be:	50 e0       	ldi	r21, 0x00	; 0
	int sensor_right_tmp = distans_right;
    14c0:	60 91 92 01 	lds	r22, 0x0192
    14c4:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
    14c6:	80 91 8d 01 	lds	r24, 0x018D
    14ca:	90 e0       	ldi	r25, 0x00	; 0
	sei();
    14cc:	78 94       	sei
	int st_value = 35;
	
	if(waypoint){
    14ce:	20 91 30 01 	lds	r18, 0x0130
    14d2:	22 23       	and	r18, r18
    14d4:	21 f0       	breq	.+8      	; 0x14de <labyreg+0x26>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    14d6:	23 e2       	ldi	r18, 0x23	; 35
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	4b ce       	rjmp	.-874    	; 0x1172 <waypoint_lab>
		return;	
    14dc:	08 95       	ret
	}
	else if(oneway_turn){
    14de:	20 91 2f 01 	lds	r18, 0x012F
    14e2:	22 23       	and	r18, r18
    14e4:	21 f0       	breq	.+8      	; 0x14ee <labyreg+0x36>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    14e6:	23 e2       	ldi	r18, 0x23	; 35
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	84 ce       	rjmp	.-760    	; 0x11f4 <oneway_turn_lab>
		return;
    14ec:	08 95       	ret
	}
	else if(twoway_turn_left){
    14ee:	20 91 2e 01 	lds	r18, 0x012E
    14f2:	22 23       	and	r18, r18
    14f4:	21 f0       	breq	.+8      	; 0x14fe <labyreg+0x46>
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    14f6:	23 e2       	ldi	r18, 0x23	; 35
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	d6 ce       	rjmp	.-596    	; 0x12a8 <twoway_turn_left_lab>
		return;
    14fc:	08 95       	ret
	}
	else if(twoway_turn_right){
    14fe:	20 91 2d 01 	lds	r18, 0x012D
    1502:	22 23       	and	r18, r18
    1504:	21 f0       	breq	.+8      	; 0x150e <labyreg+0x56>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1506:	23 e2       	ldi	r18, 0x23	; 35
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	50 cf       	rjmp	.-352    	; 0x13ac <twoway_turn_right_lab>
		return;
    150c:	08 95       	ret
	}	
	
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
    150e:	83 32       	cpi	r24, 0x23	; 35
    1510:	91 05       	cpc	r25, r1
    1512:	0c f0       	brlt	.+2      	; 0x1516 <labyreg+0x5e>
    1514:	55 c0       	rjmp	.+170    	; 0x15c0 <labyreg+0x108>
    1516:	63 32       	cpi	r22, 0x23	; 35
    1518:	71 05       	cpc	r23, r1
    151a:	0c f0       	brlt	.+2      	; 0x151e <labyreg+0x66>
    151c:	4d c0       	rjmp	.+154    	; 0x15b8 <labyreg+0x100>
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
    151e:	2f c8       	rjmp	.-4002   	; 0x57e <PD_for_lab>
    1520:	08 95       	ret
	
	// förbered specialfall
	else if((sensor_left_tmp > st_value || sensor_left_tmp > st_value) && !prepare_special_case && sensor_front_tmp >= 50){
    1522:	42 33       	cpi	r20, 0x32	; 50
    1524:	51 05       	cpc	r21, r1
    1526:	0c f4       	brge	.+2      	; 0x152a <labyreg+0x72>
    1528:	4f c0       	rjmp	.+158    	; 0x15c8 <labyreg+0x110>
		prepare_special_case = true;
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	80 93 37 01 	sts	0x0137, r24
		drive_forward();
    1530:	6b ca       	rjmp	.-2858   	; 0xa08 <drive_forward>
    1532:	08 95       	ret
	}
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < 60 && sensor_right_tmp > st_value) 
    1534:	4c 33       	cpi	r20, 0x3C	; 60
    1536:	51 05       	cpc	r21, r1
    1538:	0c f0       	brlt	.+2      	; 0x153c <labyreg+0x84>
    153a:	63 c0       	rjmp	.+198    	; 0x1602 <labyreg+0x14a>
    153c:	64 32       	cpi	r22, 0x24	; 36
    153e:	71 05       	cpc	r23, r1
    1540:	0c f4       	brge	.+2      	; 0x1544 <labyreg+0x8c>
    1542:	47 c0       	rjmp	.+142    	; 0x15d2 <labyreg+0x11a>
    1544:	06 c0       	rjmp	.+12     	; 0x1552 <labyreg+0x9a>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < 60 && sensor_right_tmp < st_value)))	{
    1546:	4c 33       	cpi	r20, 0x3C	; 60
    1548:	51 05       	cpc	r21, r1
    154a:	54 f4       	brge	.+20     	; 0x1560 <labyreg+0xa8>
    154c:	63 32       	cpi	r22, 0x23	; 35
    154e:	71 05       	cpc	r23, r1
    1550:	3c f4       	brge	.+14     	; 0x1560 <labyreg+0xa8>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1552:	23 e2       	ldi	r18, 0x23	; 35
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4e de       	rcall	.-868    	; 0x11f4 <oneway_turn_lab>
		oneway_turn = true;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	80 93 2f 01 	sts	0x012F, r24
    155e:	08 95       	ret
	}
	//t-korsning rakt framifrån
	else if((sensor_left_tmp > st_value && sensor_front_tmp < st_value && sensor_right_tmp > st_value))	{	
    1560:	43 32       	cpi	r20, 0x23	; 35
    1562:	51 05       	cpc	r21, r1
    1564:	54 f4       	brge	.+20     	; 0x157a <labyreg+0xc2>
    1566:	64 32       	cpi	r22, 0x24	; 36
    1568:	71 05       	cpc	r23, r1
    156a:	3c f0       	brlt	.+14     	; 0x157a <labyreg+0xc2>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    156c:	23 e2       	ldi	r18, 0x23	; 35
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	00 de       	rcall	.-1024   	; 0x1172 <waypoint_lab>
		waypoint = true;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	80 93 30 01 	sts	0x0130, r24
    1578:	08 95       	ret
	}
	// T-korsning där roboten kan köra framåt eller åt vänster
	else if(sensor_left_tmp > st_value && sensor_front_tmp > st_value && sensor_right_tmp < st_value){
    157a:	44 32       	cpi	r20, 0x24	; 36
    157c:	51 05       	cpc	r21, r1
    157e:	d4 f0       	brlt	.+52     	; 0x15b4 <labyreg+0xfc>
    1580:	63 32       	cpi	r22, 0x23	; 35
    1582:	71 05       	cpc	r23, r1
    1584:	5c f5       	brge	.+86     	; 0x15dc <labyreg+0x124>
		twoway_turn_left = true;
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	20 93 2e 01 	sts	0x012E, r18
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    158c:	23 e2       	ldi	r18, 0x23	; 35
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	8b ce       	rjmp	.-746    	; 0x12a8 <twoway_turn_left_lab>
    1592:	08 95       	ret
	}
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value && sensor_right_tmp > st_value){
    1594:	83 32       	cpi	r24, 0x23	; 35
    1596:	91 05       	cpc	r25, r1
    1598:	6c f4       	brge	.+26     	; 0x15b4 <labyreg+0xfc>
    159a:	44 32       	cpi	r20, 0x24	; 36
    159c:	51 05       	cpc	r21, r1
    159e:	54 f0       	brlt	.+20     	; 0x15b4 <labyreg+0xfc>
    15a0:	64 32       	cpi	r22, 0x24	; 36
    15a2:	71 05       	cpc	r23, r1
    15a4:	3c f0       	brlt	.+14     	; 0x15b4 <labyreg+0xfc>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    15a6:	23 e2       	ldi	r18, 0x23	; 35
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	00 df       	rcall	.-512    	; 0x13ac <twoway_turn_right_lab>
		twoway_turn_right = true;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	80 93 2d 01 	sts	0x012D, r24
    15b2:	08 95       	ret
		_delay_ms(50);
		motor_left = 0;
		motor_right = 0;
		//PORTD ^= (1 << PD1);
		*/
		stand_still();
    15b4:	a0 c8       	rjmp	.-3776   	; 0x6f6 <stand_still>
    15b6:	08 95       	ret
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
	
	// förbered specialfall
	else if((sensor_left_tmp > st_value || sensor_left_tmp > st_value) && !prepare_special_case && sensor_front_tmp >= 50){
    15b8:	84 32       	cpi	r24, 0x24	; 36
    15ba:	91 05       	cpc	r25, r1
    15bc:	9c f4       	brge	.+38     	; 0x15e4 <labyreg+0x12c>
    15be:	1c c0       	rjmp	.+56     	; 0x15f8 <labyreg+0x140>
    15c0:	84 32       	cpi	r24, 0x24	; 36
    15c2:	91 05       	cpc	r25, r1
    15c4:	a4 f4       	brge	.+40     	; 0x15ee <labyreg+0x136>
    15c6:	f6 cf       	rjmp	.-20     	; 0x15b4 <labyreg+0xfc>
		prepare_special_case = true;
		drive_forward();
	}
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < 60 && sensor_right_tmp > st_value) 
    15c8:	83 32       	cpi	r24, 0x23	; 35
    15ca:	91 05       	cpc	r25, r1
    15cc:	0c f4       	brge	.+2      	; 0x15d0 <labyreg+0x118>
    15ce:	b2 cf       	rjmp	.-156    	; 0x1534 <labyreg+0x7c>
    15d0:	ba cf       	rjmp	.-140    	; 0x1546 <labyreg+0x8e>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < 60 && sensor_right_tmp < st_value)))	{
    15d2:	84 32       	cpi	r24, 0x24	; 36
    15d4:	91 05       	cpc	r25, r1
    15d6:	0c f0       	brlt	.+2      	; 0x15da <labyreg+0x122>
    15d8:	b9 cf       	rjmp	.-142    	; 0x154c <labyreg+0x94>
    15da:	dc cf       	rjmp	.-72     	; 0x1594 <labyreg+0xdc>
	else if(sensor_left_tmp > st_value && sensor_front_tmp > st_value && sensor_right_tmp < st_value){
		twoway_turn_left = true;
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
	}
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value && sensor_right_tmp > st_value){
    15dc:	83 32       	cpi	r24, 0x23	; 35
    15de:	91 05       	cpc	r25, r1
    15e0:	fc f2       	brlt	.-66     	; 0x15a0 <labyreg+0xe8>
    15e2:	e8 cf       	rjmp	.-48     	; 0x15b4 <labyreg+0xfc>
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value)
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
	
	// förbered specialfall
	else if((sensor_left_tmp > st_value || sensor_left_tmp > st_value) && !prepare_special_case && sensor_front_tmp >= 50){
    15e4:	20 91 37 01 	lds	r18, 0x0137
    15e8:	21 11       	cpse	r18, r1
    15ea:	a4 cf       	rjmp	.-184    	; 0x1534 <labyreg+0x7c>
    15ec:	9a cf       	rjmp	.-204    	; 0x1522 <labyreg+0x6a>
    15ee:	20 91 37 01 	lds	r18, 0x0137
    15f2:	21 11       	cpse	r18, r1
    15f4:	a8 cf       	rjmp	.-176    	; 0x1546 <labyreg+0x8e>
    15f6:	95 cf       	rjmp	.-214    	; 0x1522 <labyreg+0x6a>
		prepare_special_case = true;
		drive_forward();
	}
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < 60 && sensor_right_tmp > st_value) 
    15f8:	4c 33       	cpi	r20, 0x3C	; 60
    15fa:	51 05       	cpc	r21, r1
    15fc:	0c f4       	brge	.+2      	; 0x1600 <labyreg+0x148>
    15fe:	9e cf       	rjmp	.-196    	; 0x153c <labyreg+0x84>
    1600:	cc cf       	rjmp	.-104    	; 0x159a <labyreg+0xe2>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < 60 && sensor_right_tmp < st_value)))	{
    1602:	84 32       	cpi	r24, 0x24	; 36
    1604:	91 05       	cpc	r25, r1
    1606:	0c f0       	brlt	.+2      	; 0x160a <labyreg+0x152>
    1608:	ab cf       	rjmp	.-170    	; 0x1560 <labyreg+0xa8>
    160a:	c4 cf       	rjmp	.-120    	; 0x1594 <labyreg+0xdc>

0000160c <regulator>:
		//motor_left = 70;
		//motor_right = 60;
		//PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
		//PORTB |= (1 << motor_dir_left);									// Set motor direction to backward
//	}
	if((regulator_mode == 1) && (regler_ready_linje == 1)){
    160c:	80 91 56 01 	lds	r24, 0x0156
    1610:	90 91 57 01 	lds	r25, 0x0157
    1614:	81 30       	cpi	r24, 0x01	; 1
    1616:	91 05       	cpc	r25, r1
    1618:	61 f4       	brne	.+24     	; 0x1632 <regulator+0x26>
    161a:	80 91 54 01 	lds	r24, 0x0154
    161e:	90 91 55 01 	lds	r25, 0x0155
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	89 f4       	brne	.+34     	; 0x1648 <regulator+0x3c>
		linje_main();
    1626:	65 db       	rcall	.-2358   	; 0xcf2 <linje_main>
		regler_ready_linje = 0;
    1628:	10 92 55 01 	sts	0x0155, r1
    162c:	10 92 54 01 	sts	0x0154, r1
    1630:	08 95       	ret
	}

	else if(regulator_mode == 0){	
    1632:	89 2b       	or	r24, r25
    1634:	49 f4       	brne	.+18     	; 0x1648 <regulator+0x3c>
		
		PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1636:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_left);	
    1638:	2e 98       	cbi	0x05, 6	; 5
		if(updaterad_labyrint){
    163a:	80 91 53 01 	lds	r24, 0x0153
    163e:	88 23       	and	r24, r24
    1640:	19 f0       	breq	.+6      	; 0x1648 <regulator+0x3c>
			updaterad_labyrint = false;
    1642:	10 92 53 01 	sts	0x0153, r1
			labyreg();//kalla pÃ¥ labyrint funktion
    1646:	38 cf       	rjmp	.-400    	; 0x14b8 <labyreg>
    1648:	08 95       	ret

0000164a <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
    164a:	ec eb       	ldi	r30, 0xBC	; 188
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	90 81       	ld	r25, Z
    1650:	94 6a       	ori	r25, 0xA4	; 164
    1652:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
    1654:	90 81       	ld	r25, Z
    1656:	99 23       	and	r25, r25
    1658:	ec f7       	brge	.-6      	; 0x1654 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
    165a:	90 91 b9 00 	lds	r25, 0x00B9
    165e:	98 7f       	andi	r25, 0xF8	; 248
    1660:	98 30       	cpi	r25, 0x08	; 8
    1662:	29 f0       	breq	.+10     	; 0x166e <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    1664:	84 e9       	ldi	r24, 0x94	; 148
    1666:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    166a:	80 e0       	ldi	r24, 0x00	; 0
    166c:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
    166e:	81 60       	ori	r24, 0x01	; 1
    1670:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    1674:	84 e8       	ldi	r24, 0x84	; 132
    1676:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
    167a:	ec eb       	ldi	r30, 0xBC	; 188
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	88 23       	and	r24, r24
    1682:	ec f7       	brge	.-6      	; 0x167e <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
    1684:	80 91 b9 00 	lds	r24, 0x00B9
    1688:	88 7f       	andi	r24, 0xF8	; 248
    168a:	80 34       	cpi	r24, 0x40	; 64
    168c:	29 f0       	breq	.+10     	; 0x1698 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    168e:	84 e9       	ldi	r24, 0x94	; 148
    1690:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
    1698:	ec eb       	ldi	r30, 0xBC	; 188
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	84 68       	ori	r24, 0x84	; 132
    16a0:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    16a2:	80 81       	ld	r24, Z
    16a4:	88 23       	and	r24, r24
    16a6:	ec f7       	brge	.-6      	; 0x16a2 <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data = TWDR; //ta emot data 
    16a8:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    16ac:	94 e9       	ldi	r25, 0x94	; 148
    16ae:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
    16b2:	08 95       	ret

000016b4 <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
    16b4:	20 91 14 01 	lds	r18, 0x0114
    16b8:	30 91 15 01 	lds	r19, 0x0115
    16bc:	21 15       	cp	r18, r1
    16be:	31 05       	cpc	r19, r1
    16c0:	89 f4       	brne	.+34     	; 0x16e4 <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
    16c2:	28 2f       	mov	r18, r24
    16c4:	22 95       	swap	r18
    16c6:	2f 70       	andi	r18, 0x0F	; 15
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	30 93 13 01 	sts	0x0113, r19
    16ce:	20 93 12 01 	sts	0x0112, r18
		i2c_data[counter] = data;
    16d2:	80 93 75 01 	sts	0x0175, r24
		counter++;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	90 93 15 01 	sts	0x0115, r25
    16de:	80 93 14 01 	sts	0x0114, r24
    16e2:	18 c0       	rjmp	.+48     	; 0x1714 <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
    16e4:	40 91 12 01 	lds	r20, 0x0112
    16e8:	50 91 13 01 	lds	r21, 0x0113
    16ec:	4f 5f       	subi	r20, 0xFF	; 255
    16ee:	5f 4f       	sbci	r21, 0xFF	; 255
    16f0:	24 17       	cp	r18, r20
    16f2:	35 07       	cpc	r19, r21
    16f4:	5c f4       	brge	.+22     	; 0x170c <i2c_store_data+0x58>
		i2c_data[counter] = data;
    16f6:	f9 01       	movw	r30, r18
    16f8:	eb 58       	subi	r30, 0x8B	; 139
    16fa:	fe 4f       	sbci	r31, 0xFE	; 254
    16fc:	80 83       	st	Z, r24
		counter++;
    16fe:	2f 5f       	subi	r18, 0xFF	; 255
    1700:	3f 4f       	sbci	r19, 0xFF	; 255
    1702:	30 93 15 01 	sts	0x0115, r19
    1706:	20 93 14 01 	sts	0x0114, r18
    170a:	04 c0       	rjmp	.+8      	; 0x1714 <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
    170c:	f9 01       	movw	r30, r18
    170e:	eb 58       	subi	r30, 0x8B	; 139
    1710:	fe 4f       	sbci	r31, 0xFE	; 254
    1712:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
    1714:	80 91 12 01 	lds	r24, 0x0112
    1718:	90 91 13 01 	lds	r25, 0x0113
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	20 91 14 01 	lds	r18, 0x0114
    1722:	30 91 15 01 	lds	r19, 0x0115
    1726:	28 17       	cp	r18, r24
    1728:	39 07       	cpc	r19, r25
    172a:	44 f0       	brlt	.+16     	; 0x173c <i2c_store_data+0x88>
		i2c_newdata = true;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 1c 01 	sts	0x011C, r24
		counter = 0;
    1732:	10 92 15 01 	sts	0x0115, r1
    1736:	10 92 14 01 	sts	0x0114, r1
		EIMSK &= ~(1<<INT0);
    173a:	e8 98       	cbi	0x1d, 0	; 29
    173c:	08 95       	ret

0000173e <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
    173e:	1f 92       	push	r1
    1740:	0f 92       	push	r0
    1742:	0f b6       	in	r0, 0x3f	; 63
    1744:	0f 92       	push	r0
    1746:	11 24       	eor	r1, r1
    1748:	0b b6       	in	r0, 0x3b	; 59
    174a:	0f 92       	push	r0
    174c:	2f 93       	push	r18
    174e:	3f 93       	push	r19
    1750:	4f 93       	push	r20
    1752:	5f 93       	push	r21
    1754:	6f 93       	push	r22
    1756:	7f 93       	push	r23
    1758:	8f 93       	push	r24
    175a:	9f 93       	push	r25
    175c:	af 93       	push	r26
    175e:	bf 93       	push	r27
    1760:	ef 93       	push	r30
    1762:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1764:	00 00       	nop
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
    1766:	36 9b       	sbis	0x06, 6	; 6
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__vector_1+0x34>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	6e df       	rcall	.-292    	; 0x164a <i2c_recive>
    176e:	a2 df       	rcall	.-188    	; 0x16b4 <i2c_store_data>
    1770:	05 c0       	rjmp	.+10     	; 0x177c <__vector_1+0x3e>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
    1772:	37 9b       	sbis	0x06, 7	; 6
    1774:	03 c0       	rjmp	.+6      	; 0x177c <__vector_1+0x3e>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
    1776:	86 e0       	ldi	r24, 0x06	; 6
    1778:	68 df       	rcall	.-304    	; 0x164a <i2c_recive>
    177a:	9c df       	rcall	.-200    	; 0x16b4 <i2c_store_data>
	}
}
    177c:	ff 91       	pop	r31
    177e:	ef 91       	pop	r30
    1780:	bf 91       	pop	r27
    1782:	af 91       	pop	r26
    1784:	9f 91       	pop	r25
    1786:	8f 91       	pop	r24
    1788:	7f 91       	pop	r23
    178a:	6f 91       	pop	r22
    178c:	5f 91       	pop	r21
    178e:	4f 91       	pop	r20
    1790:	3f 91       	pop	r19
    1792:	2f 91       	pop	r18
    1794:	0f 90       	pop	r0
    1796:	0b be       	out	0x3b, r0	; 59
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
    17a2:	80 91 1c 01 	lds	r24, 0x011C
    17a6:	88 23       	and	r24, r24
    17a8:	09 f4       	brne	.+2      	; 0x17ac <i2c_handel_data+0xa>
    17aa:	08 c1       	rjmp	.+528    	; 0x19bc <i2c_handel_data+0x21a>
	{
		i2c_newdata=false;
    17ac:	10 92 1c 01 	sts	0x011C, r1
		if(!((i2c_data[0]>>3)&0x01)){
    17b0:	80 91 75 01 	lds	r24, 0x0175
    17b4:	83 fd       	sbrc	r24, 3
    17b6:	07 c0       	rjmp	.+14     	; 0x17c6 <i2c_handel_data+0x24>
    17b8:	24 e6       	ldi	r18, 0x64	; 100
    17ba:	2a 95       	dec	r18
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <i2c_handel_data+0x18>
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
    17be:	65 e7       	ldi	r22, 0x75	; 117
    17c0:	71 e0       	ldi	r23, 0x01	; 1
    17c2:	82 e0       	ldi	r24, 0x02	; 2
    17c4:	af db       	rcall	.-2210   	; 0xf24 <i2c_send>
		}
		
		switch (i2c_data[0] & 0x0f){
    17c6:	80 91 75 01 	lds	r24, 0x0175
    17ca:	e8 2f       	mov	r30, r24
    17cc:	ef 70       	andi	r30, 0x0F	; 15
    17ce:	8e 2f       	mov	r24, r30
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	fc 01       	movw	r30, r24
    17d4:	ea 5b       	subi	r30, 0xBA	; 186
    17d6:	ff 4f       	sbci	r31, 0xFF	; 255
    17d8:	2c c3       	rjmp	.+1624   	; 0x1e32 <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
    17da:	80 91 76 01 	lds	r24, 0x0176
    17de:	80 93 8e 01 	sts	0x018E, r24
				break;
    17e2:	eb c0       	rjmp	.+470    	; 0x19ba <i2c_handel_data+0x218>
			case 0x01 ://avståndssensorer
				distans_right = i2c_data[3];
    17e4:	e5 e7       	ldi	r30, 0x75	; 117
    17e6:	f1 e0       	ldi	r31, 0x01	; 1
    17e8:	83 81       	ldd	r24, Z+3	; 0x03
    17ea:	80 93 92 01 	sts	0x0192, r24
				distans_fram = i2c_data[2];;
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	80 93 8a 01 	sts	0x018A, r24
				distans_left = i2c_data[1];
    17f4:	81 81       	ldd	r24, Z+1	; 0x01
    17f6:	80 93 8d 01 	sts	0x018D, r24
				//updaterad_labyrint = true;
				break;
    17fa:	df c0       	rjmp	.+446    	; 0x19ba <i2c_handel_data+0x218>
			case 0x02 :// refelxsensor data
				regler_ready_linje = 1;					// Ny data har lästs in då uppdaterar vi regleringen
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	90 93 55 01 	sts	0x0155, r25
    1804:	80 93 54 01 	sts	0x0154, r24
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
    1808:	e5 e7       	ldi	r30, 0x75	; 117
    180a:	f1 e0       	ldi	r31, 0x01	; 1
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	98 2f       	mov	r25, r24
    1812:	88 27       	eor	r24, r24
    1814:	21 81       	ldd	r18, Z+1	; 0x01
    1816:	82 0f       	add	r24, r18
    1818:	91 1d       	adc	r25, r1
    181a:	90 93 85 01 	sts	0x0185, r25
    181e:	80 93 84 01 	sts	0x0184, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
    1822:	83 81       	ldd	r24, Z+3	; 0x03
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	90 93 9e 01 	sts	0x019E, r25
    182a:	80 93 9d 01 	sts	0x019D, r24
				break;
    182e:	c5 c0       	rjmp	.+394    	; 0x19ba <i2c_handel_data+0x218>
			case 0x03 :
				RGB_data=1;//"röd";"
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	80 93 91 01 	sts	0x0191, r24
				break;
    1836:	c1 c0       	rjmp	.+386    	; 0x19ba <i2c_handel_data+0x218>
			case 0x04 :
				RGB_data=2;//"grön";
    1838:	82 e0       	ldi	r24, 0x02	; 2
    183a:	80 93 91 01 	sts	0x0191, r24
				break;		
    183e:	bd c0       	rjmp	.+378    	; 0x19ba <i2c_handel_data+0x218>
			case 0x05 :
				RGB_data=3;//"blå";
    1840:	83 e0       	ldi	r24, 0x03	; 3
    1842:	80 93 91 01 	sts	0x0191, r24
				break;
    1846:	b9 c0       	rjmp	.+370    	; 0x19ba <i2c_handel_data+0x218>
			case 0x06 : // gyro klart
				gyro_90 = true;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	80 93 6a 01 	sts	0x016A, r24
				turning = false;
    184e:	10 92 52 01 	sts	0x0152, r1
				motor_right = 0;
    1852:	18 bc       	out	0x28, r1	; 40
				motor_left = 0;
    1854:	17 bc       	out	0x27, r1	; 39
				updaterad_labyrint = false;
    1856:	10 92 53 01 	sts	0x0153, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    185a:	8f e9       	ldi	r24, 0x9F	; 159
    185c:	96 e8       	ldi	r25, 0x86	; 134
    185e:	21 e0       	ldi	r18, 0x01	; 1
    1860:	81 50       	subi	r24, 0x01	; 1
    1862:	90 40       	sbci	r25, 0x00	; 0
    1864:	20 40       	sbci	r18, 0x00	; 0
    1866:	e1 f7       	brne	.-8      	; 0x1860 <i2c_handel_data+0xbe>
    1868:	00 c0       	rjmp	.+0      	; 0x186a <i2c_handel_data+0xc8>
    186a:	00 00       	nop
    186c:	a6 c0       	rjmp	.+332    	; 0x19ba <i2c_handel_data+0x218>
				break;
			case 0x07 :// gyro data
				// Kod vi skickar till sensor
				break;
			case 0x08 : // manuel stå still
				manual_function=0;
    186e:	10 92 47 01 	sts	0x0147, r1
    1872:	10 92 46 01 	sts	0x0146, r1
				break;
    1876:	a1 c0       	rjmp	.+322    	; 0x19ba <i2c_handel_data+0x218>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	90 93 47 01 	sts	0x0147, r25
    1880:	80 93 46 01 	sts	0x0146, r24
				break;
    1884:	9a c0       	rjmp	.+308    	; 0x19ba <i2c_handel_data+0x218>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
    1886:	82 e0       	ldi	r24, 0x02	; 2
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	90 93 47 01 	sts	0x0147, r25
    188e:	80 93 46 01 	sts	0x0146, r24
				break;
    1892:	93 c0       	rjmp	.+294    	; 0x19ba <i2c_handel_data+0x218>
			case 0x0b ://manuel vänster fram
				manual_function=4;
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	90 93 47 01 	sts	0x0147, r25
    189c:	80 93 46 01 	sts	0x0146, r24
				break;
    18a0:	8c c0       	rjmp	.+280    	; 0x19ba <i2c_handel_data+0x218>
			case 0x0c ://manuel höger fram
				manual_function=3;
    18a2:	83 e0       	ldi	r24, 0x03	; 3
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	90 93 47 01 	sts	0x0147, r25
    18aa:	80 93 46 01 	sts	0x0146, r24
				break;
    18ae:	85 c0       	rjmp	.+266    	; 0x19ba <i2c_handel_data+0x218>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
    18b0:	86 e0       	ldi	r24, 0x06	; 6
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	90 93 47 01 	sts	0x0147, r25
    18b8:	80 93 46 01 	sts	0x0146, r24
				break;
    18bc:	7e c0       	rjmp	.+252    	; 0x19ba <i2c_handel_data+0x218>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
    18be:	85 e0       	ldi	r24, 0x05	; 5
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	90 93 47 01 	sts	0x0147, r25
    18c6:	80 93 46 01 	sts	0x0146, r24
				break;
    18ca:	77 c0       	rjmp	.+238    	; 0x19ba <i2c_handel_data+0x218>
			case 0x0f :	// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
    18cc:	80 91 76 01 	lds	r24, 0x0176
    18d0:	80 3f       	cpi	r24, 0xF0	; 240
    18d2:	09 f5       	brne	.+66     	; 0x1916 <i2c_handel_data+0x174>
					if(start==1){
    18d4:	80 91 64 01 	lds	r24, 0x0164
    18d8:	90 91 65 01 	lds	r25, 0x0165
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	29 f4       	brne	.+10     	; 0x18ea <i2c_handel_data+0x148>
						start=0;
    18e0:	10 92 65 01 	sts	0x0165, r1
    18e4:	10 92 64 01 	sts	0x0164, r1
    18e8:	68 c0       	rjmp	.+208    	; 0x19ba <i2c_handel_data+0x218>
    18ea:	eb e6       	ldi	r30, 0x6B	; 107
    18ec:	f1 e0       	ldi	r31, 0x01	; 1
    18ee:	a3 e9       	ldi	r26, 0x93	; 147
    18f0:	b1 e0       	ldi	r27, 0x01	; 1
    18f2:	85 e7       	ldi	r24, 0x75	; 117
    18f4:	91 e0       	ldi	r25, 0x01	; 1
					}
					else{
						for(int i = 0; i < 5; i++){						
							previous_errors_right[i] = 0;
    18f6:	11 92       	st	Z+, r1
    18f8:	11 92       	st	Z+, r1
							previous_errors_left[i] = 0;
    18fa:	1d 92       	st	X+, r1
    18fc:	1d 92       	st	X+, r1
				if(i2c_data[1]==0xf0){
					if(start==1){
						start=0;
					}
					else{
						for(int i = 0; i < 5; i++){						
    18fe:	e8 17       	cp	r30, r24
    1900:	f9 07       	cpc	r31, r25
    1902:	c9 f7       	brne	.-14     	; 0x18f6 <i2c_handel_data+0x154>
							previous_errors_right[i] = 0;
							previous_errors_left[i] = 0;
						}
						start=1;
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	90 93 65 01 	sts	0x0165, r25
    190c:	80 93 64 01 	sts	0x0164, r24
						RGB_data = 0;
    1910:	10 92 91 01 	sts	0x0191, r1
    1914:	52 c0       	rjmp	.+164    	; 0x19ba <i2c_handel_data+0x218>
					}
				}
				else if(i2c_data[1]==0x0f){
    1916:	8f 30       	cpi	r24, 0x0F	; 15
    1918:	f1 f4       	brne	.+60     	; 0x1956 <i2c_handel_data+0x1b4>
					if(drive_mode==1){
    191a:	80 91 66 01 	lds	r24, 0x0166
    191e:	90 91 67 01 	lds	r25, 0x0167
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	59 f4       	brne	.+22     	; 0x193c <i2c_handel_data+0x19a>
						PORTD |= (1 << PD1);
    1926:	59 9a       	sbi	0x0b, 1	; 11
						PORTD &= ~(1 << PD0);
    1928:	58 98       	cbi	0x0b, 0	; 11
						drive_mode=0;
    192a:	10 92 67 01 	sts	0x0167, r1
    192e:	10 92 66 01 	sts	0x0166, r1
						start=0;
    1932:	10 92 65 01 	sts	0x0165, r1
    1936:	10 92 64 01 	sts	0x0164, r1
    193a:	3f c0       	rjmp	.+126    	; 0x19ba <i2c_handel_data+0x218>
					}
					else{
						PORTD |= (1 << PD0);
    193c:	58 9a       	sbi	0x0b, 0	; 11
						PORTD &= ~(1 << PD1);
    193e:	59 98       	cbi	0x0b, 1	; 11
						drive_mode=1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	90 93 67 01 	sts	0x0167, r25
    1948:	80 93 66 01 	sts	0x0166, r24
						start=0;
    194c:	10 92 65 01 	sts	0x0165, r1
    1950:	10 92 64 01 	sts	0x0164, r1
    1954:	32 c0       	rjmp	.+100    	; 0x19ba <i2c_handel_data+0x218>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
    1956:	81 11       	cpse	r24, r1
    1958:	0f c0       	rjmp	.+30     	; 0x1978 <i2c_handel_data+0x1d6>
					d_constant = i2c_data[2] & 0xff;
    195a:	e5 e7       	ldi	r30, 0x75	; 117
    195c:	f1 e0       	ldi	r31, 0x01	; 1
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	90 93 01 01 	sts	0x0101, r25
    1966:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3] & 0xff;
    196a:	83 81       	ldd	r24, Z+3	; 0x03
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	90 93 03 01 	sts	0x0103, r25
    1972:	80 93 02 01 	sts	0x0102, r24
    1976:	21 c0       	rjmp	.+66     	; 0x19ba <i2c_handel_data+0x218>
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	79 f4       	brne	.+30     	; 0x199a <i2c_handel_data+0x1f8>
					d_constant_lab = i2c_data[2] & 0xff;
    197c:	e5 e7       	ldi	r30, 0x75	; 117
    197e:	f1 e0       	ldi	r31, 0x01	; 1
    1980:	82 81       	ldd	r24, Z+2	; 0x02
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	90 93 0c 01 	sts	0x010C, r25
    1988:	80 93 0b 01 	sts	0x010B, r24
					p_constant_lab = i2c_data[3] & 0xff;
    198c:	83 81       	ldd	r24, Z+3	; 0x03
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	90 93 0e 01 	sts	0x010E, r25
    1994:	80 93 0d 01 	sts	0x010D, r24
    1998:	10 c0       	rjmp	.+32     	; 0x19ba <i2c_handel_data+0x218>
				}
				else if(i2c_data[1]==0x02){
    199a:	82 30       	cpi	r24, 0x02	; 2
    199c:	71 f4       	brne	.+28     	; 0x19ba <i2c_handel_data+0x218>
					left = i2c_data[2] & 0xff;
    199e:	e5 e7       	ldi	r30, 0x75	; 117
    19a0:	f1 e0       	ldi	r31, 0x01	; 1
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	90 93 63 01 	sts	0x0163, r25
    19aa:	80 93 62 01 	sts	0x0162, r24
					right = i2c_data[3] & 0xff;
    19ae:	83 81       	ldd	r24, Z+3	; 0x03
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	90 93 61 01 	sts	0x0161, r25
    19b6:	80 93 60 01 	sts	0x0160, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
    19ba:	e8 9a       	sbi	0x1d, 0	; 29
    19bc:	08 95       	ret

000019be <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
    19be:	51 da       	rcall	.-2910   	; 0xe62 <interrupt_init>
	board_init();
    19c0:	0e 94 76 00 	call	0xec	; 0xec <board_init>
	initengine();
    19c4:	e3 d9       	rcall	.-3130   	; 0xd8c <initengine>
	timerinit();
    19c6:	ef d9       	rcall	.-3106   	; 0xda6 <timerinit>
	i2c_setup(1);
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	9c da       	rcall	.-2760   	; 0xf04 <i2c_setup>
	sei();
    19cc:	78 94       	sei
	//***********Set motors speed value here *****************
	left=180;				// kanske räcker med en variable för båda om båda kör exakt lika fort
    19ce:	84 eb       	ldi	r24, 0xB4	; 180
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	90 93 63 01 	sts	0x0163, r25
    19d6:	80 93 62 01 	sts	0x0162, r24
	right=170;
    19da:	8a ea       	ldi	r24, 0xAA	; 170
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	90 93 61 01 	sts	0x0161, r25
    19e2:	80 93 60 01 	sts	0x0160, r24
	//********************************************************
	motor_left=left;
    19e6:	84 eb       	ldi	r24, 0xB4	; 180
    19e8:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
    19ea:	80 91 60 01 	lds	r24, 0x0160
    19ee:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
    19f0:	d8 de       	rcall	.-592    	; 0x17a2 <i2c_handel_data>
		if(turning)
    19f2:	80 91 52 01 	lds	r24, 0x0152
    19f6:	81 11       	cpse	r24, r1
    19f8:	fb cf       	rjmp	.-10     	; 0x19f0 <main+0x32>
			;
		else if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
    19fa:	80 91 66 01 	lds	r24, 0x0166
    19fe:	90 91 67 01 	lds	r25, 0x0167
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	71 f4       	brne	.+28     	; 0x1a24 <main+0x66>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			//if((gyro_left == 1)|| (gyro_right == 1)){
			//	drive_mode = 0;
			//}
			if(start == 1){
    1a08:	80 91 64 01 	lds	r24, 0x0164
    1a0c:	90 91 65 01 	lds	r25, 0x0165
    1a10:	81 30       	cpi	r24, 0x01	; 1
    1a12:	91 05       	cpc	r25, r1
    1a14:	11 f4       	brne	.+4      	; 0x1a1a <main+0x5c>
				regulator();	
    1a16:	fa dd       	rcall	.-1036   	; 0x160c <regulator>
    1a18:	eb cf       	rjmp	.-42     	; 0x19f0 <main+0x32>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
    1a1a:	89 2b       	or	r24, r25
    1a1c:	49 f7       	brne	.-46     	; 0x19f0 <main+0x32>
				motor_left=0;
    1a1e:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
    1a20:	18 bc       	out	0x28, r1	; 40
    1a22:	e6 cf       	rjmp	.-52     	; 0x19f0 <main+0x32>
			}
		}
		else if(drive_mode==0){										// Drivemode is manual
    1a24:	89 2b       	or	r24, r25
    1a26:	21 f7       	brne	.-56     	; 0x19f0 <main+0x32>
			PORTD |= (1 << PD1);
    1a28:	59 9a       	sbi	0x0b, 1	; 11
			manual_drive();
    1a2a:	03 db       	rcall	.-2554   	; 0x1032 <manual_drive>
    1a2c:	e1 cf       	rjmp	.-62     	; 0x19f0 <main+0x32>

00001a2e <__subsf3>:
    1a2e:	50 58       	subi	r21, 0x80	; 128

00001a30 <__addsf3>:
    1a30:	bb 27       	eor	r27, r27
    1a32:	aa 27       	eor	r26, r26
    1a34:	0e d0       	rcall	.+28     	; 0x1a52 <__addsf3x>
    1a36:	4d c1       	rjmp	.+666    	; 0x1cd2 <__fp_round>
    1a38:	3e d1       	rcall	.+636    	; 0x1cb6 <__fp_pscA>
    1a3a:	30 f0       	brcs	.+12     	; 0x1a48 <__addsf3+0x18>
    1a3c:	43 d1       	rcall	.+646    	; 0x1cc4 <__fp_pscB>
    1a3e:	20 f0       	brcs	.+8      	; 0x1a48 <__addsf3+0x18>
    1a40:	31 f4       	brne	.+12     	; 0x1a4e <__addsf3+0x1e>
    1a42:	9f 3f       	cpi	r25, 0xFF	; 255
    1a44:	11 f4       	brne	.+4      	; 0x1a4a <__addsf3+0x1a>
    1a46:	1e f4       	brtc	.+6      	; 0x1a4e <__addsf3+0x1e>
    1a48:	33 c1       	rjmp	.+614    	; 0x1cb0 <__fp_nan>
    1a4a:	0e f4       	brtc	.+2      	; 0x1a4e <__addsf3+0x1e>
    1a4c:	e0 95       	com	r30
    1a4e:	e7 fb       	bst	r30, 7
    1a50:	29 c1       	rjmp	.+594    	; 0x1ca4 <__fp_inf>

00001a52 <__addsf3x>:
    1a52:	e9 2f       	mov	r30, r25
    1a54:	4f d1       	rcall	.+670    	; 0x1cf4 <__fp_split3>
    1a56:	80 f3       	brcs	.-32     	; 0x1a38 <__addsf3+0x8>
    1a58:	ba 17       	cp	r27, r26
    1a5a:	62 07       	cpc	r22, r18
    1a5c:	73 07       	cpc	r23, r19
    1a5e:	84 07       	cpc	r24, r20
    1a60:	95 07       	cpc	r25, r21
    1a62:	18 f0       	brcs	.+6      	; 0x1a6a <__addsf3x+0x18>
    1a64:	71 f4       	brne	.+28     	; 0x1a82 <__addsf3x+0x30>
    1a66:	9e f5       	brtc	.+102    	; 0x1ace <__addsf3x+0x7c>
    1a68:	67 c1       	rjmp	.+718    	; 0x1d38 <__fp_zero>
    1a6a:	0e f4       	brtc	.+2      	; 0x1a6e <__addsf3x+0x1c>
    1a6c:	e0 95       	com	r30
    1a6e:	0b 2e       	mov	r0, r27
    1a70:	ba 2f       	mov	r27, r26
    1a72:	a0 2d       	mov	r26, r0
    1a74:	0b 01       	movw	r0, r22
    1a76:	b9 01       	movw	r22, r18
    1a78:	90 01       	movw	r18, r0
    1a7a:	0c 01       	movw	r0, r24
    1a7c:	ca 01       	movw	r24, r20
    1a7e:	a0 01       	movw	r20, r0
    1a80:	11 24       	eor	r1, r1
    1a82:	ff 27       	eor	r31, r31
    1a84:	59 1b       	sub	r21, r25
    1a86:	99 f0       	breq	.+38     	; 0x1aae <__addsf3x+0x5c>
    1a88:	59 3f       	cpi	r21, 0xF9	; 249
    1a8a:	50 f4       	brcc	.+20     	; 0x1aa0 <__addsf3x+0x4e>
    1a8c:	50 3e       	cpi	r21, 0xE0	; 224
    1a8e:	68 f1       	brcs	.+90     	; 0x1aea <__addsf3x+0x98>
    1a90:	1a 16       	cp	r1, r26
    1a92:	f0 40       	sbci	r31, 0x00	; 0
    1a94:	a2 2f       	mov	r26, r18
    1a96:	23 2f       	mov	r18, r19
    1a98:	34 2f       	mov	r19, r20
    1a9a:	44 27       	eor	r20, r20
    1a9c:	58 5f       	subi	r21, 0xF8	; 248
    1a9e:	f3 cf       	rjmp	.-26     	; 0x1a86 <__addsf3x+0x34>
    1aa0:	46 95       	lsr	r20
    1aa2:	37 95       	ror	r19
    1aa4:	27 95       	ror	r18
    1aa6:	a7 95       	ror	r26
    1aa8:	f0 40       	sbci	r31, 0x00	; 0
    1aaa:	53 95       	inc	r21
    1aac:	c9 f7       	brne	.-14     	; 0x1aa0 <__addsf3x+0x4e>
    1aae:	7e f4       	brtc	.+30     	; 0x1ace <__addsf3x+0x7c>
    1ab0:	1f 16       	cp	r1, r31
    1ab2:	ba 0b       	sbc	r27, r26
    1ab4:	62 0b       	sbc	r22, r18
    1ab6:	73 0b       	sbc	r23, r19
    1ab8:	84 0b       	sbc	r24, r20
    1aba:	ba f0       	brmi	.+46     	; 0x1aea <__addsf3x+0x98>
    1abc:	91 50       	subi	r25, 0x01	; 1
    1abe:	a1 f0       	breq	.+40     	; 0x1ae8 <__addsf3x+0x96>
    1ac0:	ff 0f       	add	r31, r31
    1ac2:	bb 1f       	adc	r27, r27
    1ac4:	66 1f       	adc	r22, r22
    1ac6:	77 1f       	adc	r23, r23
    1ac8:	88 1f       	adc	r24, r24
    1aca:	c2 f7       	brpl	.-16     	; 0x1abc <__addsf3x+0x6a>
    1acc:	0e c0       	rjmp	.+28     	; 0x1aea <__addsf3x+0x98>
    1ace:	ba 0f       	add	r27, r26
    1ad0:	62 1f       	adc	r22, r18
    1ad2:	73 1f       	adc	r23, r19
    1ad4:	84 1f       	adc	r24, r20
    1ad6:	48 f4       	brcc	.+18     	; 0x1aea <__addsf3x+0x98>
    1ad8:	87 95       	ror	r24
    1ada:	77 95       	ror	r23
    1adc:	67 95       	ror	r22
    1ade:	b7 95       	ror	r27
    1ae0:	f7 95       	ror	r31
    1ae2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ae4:	08 f0       	brcs	.+2      	; 0x1ae8 <__addsf3x+0x96>
    1ae6:	b3 cf       	rjmp	.-154    	; 0x1a4e <__addsf3+0x1e>
    1ae8:	93 95       	inc	r25
    1aea:	88 0f       	add	r24, r24
    1aec:	08 f0       	brcs	.+2      	; 0x1af0 <__addsf3x+0x9e>
    1aee:	99 27       	eor	r25, r25
    1af0:	ee 0f       	add	r30, r30
    1af2:	97 95       	ror	r25
    1af4:	87 95       	ror	r24
    1af6:	08 95       	ret

00001af8 <__divsf3>:
    1af8:	0c d0       	rcall	.+24     	; 0x1b12 <__divsf3x>
    1afa:	eb c0       	rjmp	.+470    	; 0x1cd2 <__fp_round>
    1afc:	e3 d0       	rcall	.+454    	; 0x1cc4 <__fp_pscB>
    1afe:	40 f0       	brcs	.+16     	; 0x1b10 <__divsf3+0x18>
    1b00:	da d0       	rcall	.+436    	; 0x1cb6 <__fp_pscA>
    1b02:	30 f0       	brcs	.+12     	; 0x1b10 <__divsf3+0x18>
    1b04:	21 f4       	brne	.+8      	; 0x1b0e <__divsf3+0x16>
    1b06:	5f 3f       	cpi	r21, 0xFF	; 255
    1b08:	19 f0       	breq	.+6      	; 0x1b10 <__divsf3+0x18>
    1b0a:	cc c0       	rjmp	.+408    	; 0x1ca4 <__fp_inf>
    1b0c:	51 11       	cpse	r21, r1
    1b0e:	15 c1       	rjmp	.+554    	; 0x1d3a <__fp_szero>
    1b10:	cf c0       	rjmp	.+414    	; 0x1cb0 <__fp_nan>

00001b12 <__divsf3x>:
    1b12:	f0 d0       	rcall	.+480    	; 0x1cf4 <__fp_split3>
    1b14:	98 f3       	brcs	.-26     	; 0x1afc <__divsf3+0x4>

00001b16 <__divsf3_pse>:
    1b16:	99 23       	and	r25, r25
    1b18:	c9 f3       	breq	.-14     	; 0x1b0c <__divsf3+0x14>
    1b1a:	55 23       	and	r21, r21
    1b1c:	b1 f3       	breq	.-20     	; 0x1b0a <__divsf3+0x12>
    1b1e:	95 1b       	sub	r25, r21
    1b20:	55 0b       	sbc	r21, r21
    1b22:	bb 27       	eor	r27, r27
    1b24:	aa 27       	eor	r26, r26
    1b26:	62 17       	cp	r22, r18
    1b28:	73 07       	cpc	r23, r19
    1b2a:	84 07       	cpc	r24, r20
    1b2c:	38 f0       	brcs	.+14     	; 0x1b3c <__divsf3_pse+0x26>
    1b2e:	9f 5f       	subi	r25, 0xFF	; 255
    1b30:	5f 4f       	sbci	r21, 0xFF	; 255
    1b32:	22 0f       	add	r18, r18
    1b34:	33 1f       	adc	r19, r19
    1b36:	44 1f       	adc	r20, r20
    1b38:	aa 1f       	adc	r26, r26
    1b3a:	a9 f3       	breq	.-22     	; 0x1b26 <__divsf3_pse+0x10>
    1b3c:	33 d0       	rcall	.+102    	; 0x1ba4 <__divsf3_pse+0x8e>
    1b3e:	0e 2e       	mov	r0, r30
    1b40:	3a f0       	brmi	.+14     	; 0x1b50 <__divsf3_pse+0x3a>
    1b42:	e0 e8       	ldi	r30, 0x80	; 128
    1b44:	30 d0       	rcall	.+96     	; 0x1ba6 <__divsf3_pse+0x90>
    1b46:	91 50       	subi	r25, 0x01	; 1
    1b48:	50 40       	sbci	r21, 0x00	; 0
    1b4a:	e6 95       	lsr	r30
    1b4c:	00 1c       	adc	r0, r0
    1b4e:	ca f7       	brpl	.-14     	; 0x1b42 <__divsf3_pse+0x2c>
    1b50:	29 d0       	rcall	.+82     	; 0x1ba4 <__divsf3_pse+0x8e>
    1b52:	fe 2f       	mov	r31, r30
    1b54:	27 d0       	rcall	.+78     	; 0x1ba4 <__divsf3_pse+0x8e>
    1b56:	66 0f       	add	r22, r22
    1b58:	77 1f       	adc	r23, r23
    1b5a:	88 1f       	adc	r24, r24
    1b5c:	bb 1f       	adc	r27, r27
    1b5e:	26 17       	cp	r18, r22
    1b60:	37 07       	cpc	r19, r23
    1b62:	48 07       	cpc	r20, r24
    1b64:	ab 07       	cpc	r26, r27
    1b66:	b0 e8       	ldi	r27, 0x80	; 128
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <__divsf3_pse+0x56>
    1b6a:	bb 0b       	sbc	r27, r27
    1b6c:	80 2d       	mov	r24, r0
    1b6e:	bf 01       	movw	r22, r30
    1b70:	ff 27       	eor	r31, r31
    1b72:	93 58       	subi	r25, 0x83	; 131
    1b74:	5f 4f       	sbci	r21, 0xFF	; 255
    1b76:	2a f0       	brmi	.+10     	; 0x1b82 <__divsf3_pse+0x6c>
    1b78:	9e 3f       	cpi	r25, 0xFE	; 254
    1b7a:	51 05       	cpc	r21, r1
    1b7c:	68 f0       	brcs	.+26     	; 0x1b98 <__divsf3_pse+0x82>
    1b7e:	92 c0       	rjmp	.+292    	; 0x1ca4 <__fp_inf>
    1b80:	dc c0       	rjmp	.+440    	; 0x1d3a <__fp_szero>
    1b82:	5f 3f       	cpi	r21, 0xFF	; 255
    1b84:	ec f3       	brlt	.-6      	; 0x1b80 <__divsf3_pse+0x6a>
    1b86:	98 3e       	cpi	r25, 0xE8	; 232
    1b88:	dc f3       	brlt	.-10     	; 0x1b80 <__divsf3_pse+0x6a>
    1b8a:	86 95       	lsr	r24
    1b8c:	77 95       	ror	r23
    1b8e:	67 95       	ror	r22
    1b90:	b7 95       	ror	r27
    1b92:	f7 95       	ror	r31
    1b94:	9f 5f       	subi	r25, 0xFF	; 255
    1b96:	c9 f7       	brne	.-14     	; 0x1b8a <__divsf3_pse+0x74>
    1b98:	88 0f       	add	r24, r24
    1b9a:	91 1d       	adc	r25, r1
    1b9c:	96 95       	lsr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	97 f9       	bld	r25, 7
    1ba2:	08 95       	ret
    1ba4:	e1 e0       	ldi	r30, 0x01	; 1
    1ba6:	66 0f       	add	r22, r22
    1ba8:	77 1f       	adc	r23, r23
    1baa:	88 1f       	adc	r24, r24
    1bac:	bb 1f       	adc	r27, r27
    1bae:	62 17       	cp	r22, r18
    1bb0:	73 07       	cpc	r23, r19
    1bb2:	84 07       	cpc	r24, r20
    1bb4:	ba 07       	cpc	r27, r26
    1bb6:	20 f0       	brcs	.+8      	; 0x1bc0 <__divsf3_pse+0xaa>
    1bb8:	62 1b       	sub	r22, r18
    1bba:	73 0b       	sbc	r23, r19
    1bbc:	84 0b       	sbc	r24, r20
    1bbe:	ba 0b       	sbc	r27, r26
    1bc0:	ee 1f       	adc	r30, r30
    1bc2:	88 f7       	brcc	.-30     	; 0x1ba6 <__divsf3_pse+0x90>
    1bc4:	e0 95       	com	r30
    1bc6:	08 95       	ret

00001bc8 <__fixsfsi>:
    1bc8:	04 d0       	rcall	.+8      	; 0x1bd2 <__fixunssfsi>
    1bca:	68 94       	set
    1bcc:	b1 11       	cpse	r27, r1
    1bce:	b5 c0       	rjmp	.+362    	; 0x1d3a <__fp_szero>
    1bd0:	08 95       	ret

00001bd2 <__fixunssfsi>:
    1bd2:	98 d0       	rcall	.+304    	; 0x1d04 <__fp_splitA>
    1bd4:	88 f0       	brcs	.+34     	; 0x1bf8 <__fixunssfsi+0x26>
    1bd6:	9f 57       	subi	r25, 0x7F	; 127
    1bd8:	90 f0       	brcs	.+36     	; 0x1bfe <__fixunssfsi+0x2c>
    1bda:	b9 2f       	mov	r27, r25
    1bdc:	99 27       	eor	r25, r25
    1bde:	b7 51       	subi	r27, 0x17	; 23
    1be0:	a0 f0       	brcs	.+40     	; 0x1c0a <__fixunssfsi+0x38>
    1be2:	d1 f0       	breq	.+52     	; 0x1c18 <__fixunssfsi+0x46>
    1be4:	66 0f       	add	r22, r22
    1be6:	77 1f       	adc	r23, r23
    1be8:	88 1f       	adc	r24, r24
    1bea:	99 1f       	adc	r25, r25
    1bec:	1a f0       	brmi	.+6      	; 0x1bf4 <__fixunssfsi+0x22>
    1bee:	ba 95       	dec	r27
    1bf0:	c9 f7       	brne	.-14     	; 0x1be4 <__fixunssfsi+0x12>
    1bf2:	12 c0       	rjmp	.+36     	; 0x1c18 <__fixunssfsi+0x46>
    1bf4:	b1 30       	cpi	r27, 0x01	; 1
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <__fixunssfsi+0x46>
    1bf8:	9f d0       	rcall	.+318    	; 0x1d38 <__fp_zero>
    1bfa:	b1 e0       	ldi	r27, 0x01	; 1
    1bfc:	08 95       	ret
    1bfe:	9c c0       	rjmp	.+312    	; 0x1d38 <__fp_zero>
    1c00:	67 2f       	mov	r22, r23
    1c02:	78 2f       	mov	r23, r24
    1c04:	88 27       	eor	r24, r24
    1c06:	b8 5f       	subi	r27, 0xF8	; 248
    1c08:	39 f0       	breq	.+14     	; 0x1c18 <__fixunssfsi+0x46>
    1c0a:	b9 3f       	cpi	r27, 0xF9	; 249
    1c0c:	cc f3       	brlt	.-14     	; 0x1c00 <__fixunssfsi+0x2e>
    1c0e:	86 95       	lsr	r24
    1c10:	77 95       	ror	r23
    1c12:	67 95       	ror	r22
    1c14:	b3 95       	inc	r27
    1c16:	d9 f7       	brne	.-10     	; 0x1c0e <__fixunssfsi+0x3c>
    1c18:	3e f4       	brtc	.+14     	; 0x1c28 <__fixunssfsi+0x56>
    1c1a:	90 95       	com	r25
    1c1c:	80 95       	com	r24
    1c1e:	70 95       	com	r23
    1c20:	61 95       	neg	r22
    1c22:	7f 4f       	sbci	r23, 0xFF	; 255
    1c24:	8f 4f       	sbci	r24, 0xFF	; 255
    1c26:	9f 4f       	sbci	r25, 0xFF	; 255
    1c28:	08 95       	ret

00001c2a <__floatunsisf>:
    1c2a:	e8 94       	clt
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <__floatsisf+0x12>

00001c2e <__floatsisf>:
    1c2e:	97 fb       	bst	r25, 7
    1c30:	3e f4       	brtc	.+14     	; 0x1c40 <__floatsisf+0x12>
    1c32:	90 95       	com	r25
    1c34:	80 95       	com	r24
    1c36:	70 95       	com	r23
    1c38:	61 95       	neg	r22
    1c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c40:	99 23       	and	r25, r25
    1c42:	a9 f0       	breq	.+42     	; 0x1c6e <__floatsisf+0x40>
    1c44:	f9 2f       	mov	r31, r25
    1c46:	96 e9       	ldi	r25, 0x96	; 150
    1c48:	bb 27       	eor	r27, r27
    1c4a:	93 95       	inc	r25
    1c4c:	f6 95       	lsr	r31
    1c4e:	87 95       	ror	r24
    1c50:	77 95       	ror	r23
    1c52:	67 95       	ror	r22
    1c54:	b7 95       	ror	r27
    1c56:	f1 11       	cpse	r31, r1
    1c58:	f8 cf       	rjmp	.-16     	; 0x1c4a <__floatsisf+0x1c>
    1c5a:	fa f4       	brpl	.+62     	; 0x1c9a <__floatsisf+0x6c>
    1c5c:	bb 0f       	add	r27, r27
    1c5e:	11 f4       	brne	.+4      	; 0x1c64 <__floatsisf+0x36>
    1c60:	60 ff       	sbrs	r22, 0
    1c62:	1b c0       	rjmp	.+54     	; 0x1c9a <__floatsisf+0x6c>
    1c64:	6f 5f       	subi	r22, 0xFF	; 255
    1c66:	7f 4f       	sbci	r23, 0xFF	; 255
    1c68:	8f 4f       	sbci	r24, 0xFF	; 255
    1c6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c6c:	16 c0       	rjmp	.+44     	; 0x1c9a <__floatsisf+0x6c>
    1c6e:	88 23       	and	r24, r24
    1c70:	11 f0       	breq	.+4      	; 0x1c76 <__floatsisf+0x48>
    1c72:	96 e9       	ldi	r25, 0x96	; 150
    1c74:	11 c0       	rjmp	.+34     	; 0x1c98 <__floatsisf+0x6a>
    1c76:	77 23       	and	r23, r23
    1c78:	21 f0       	breq	.+8      	; 0x1c82 <__floatsisf+0x54>
    1c7a:	9e e8       	ldi	r25, 0x8E	; 142
    1c7c:	87 2f       	mov	r24, r23
    1c7e:	76 2f       	mov	r23, r22
    1c80:	05 c0       	rjmp	.+10     	; 0x1c8c <__floatsisf+0x5e>
    1c82:	66 23       	and	r22, r22
    1c84:	71 f0       	breq	.+28     	; 0x1ca2 <__floatsisf+0x74>
    1c86:	96 e8       	ldi	r25, 0x86	; 134
    1c88:	86 2f       	mov	r24, r22
    1c8a:	70 e0       	ldi	r23, 0x00	; 0
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	2a f0       	brmi	.+10     	; 0x1c9a <__floatsisf+0x6c>
    1c90:	9a 95       	dec	r25
    1c92:	66 0f       	add	r22, r22
    1c94:	77 1f       	adc	r23, r23
    1c96:	88 1f       	adc	r24, r24
    1c98:	da f7       	brpl	.-10     	; 0x1c90 <__floatsisf+0x62>
    1c9a:	88 0f       	add	r24, r24
    1c9c:	96 95       	lsr	r25
    1c9e:	87 95       	ror	r24
    1ca0:	97 f9       	bld	r25, 7
    1ca2:	08 95       	ret

00001ca4 <__fp_inf>:
    1ca4:	97 f9       	bld	r25, 7
    1ca6:	9f 67       	ori	r25, 0x7F	; 127
    1ca8:	80 e8       	ldi	r24, 0x80	; 128
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	60 e0       	ldi	r22, 0x00	; 0
    1cae:	08 95       	ret

00001cb0 <__fp_nan>:
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	80 ec       	ldi	r24, 0xC0	; 192
    1cb4:	08 95       	ret

00001cb6 <__fp_pscA>:
    1cb6:	00 24       	eor	r0, r0
    1cb8:	0a 94       	dec	r0
    1cba:	16 16       	cp	r1, r22
    1cbc:	17 06       	cpc	r1, r23
    1cbe:	18 06       	cpc	r1, r24
    1cc0:	09 06       	cpc	r0, r25
    1cc2:	08 95       	ret

00001cc4 <__fp_pscB>:
    1cc4:	00 24       	eor	r0, r0
    1cc6:	0a 94       	dec	r0
    1cc8:	12 16       	cp	r1, r18
    1cca:	13 06       	cpc	r1, r19
    1ccc:	14 06       	cpc	r1, r20
    1cce:	05 06       	cpc	r0, r21
    1cd0:	08 95       	ret

00001cd2 <__fp_round>:
    1cd2:	09 2e       	mov	r0, r25
    1cd4:	03 94       	inc	r0
    1cd6:	00 0c       	add	r0, r0
    1cd8:	11 f4       	brne	.+4      	; 0x1cde <__fp_round+0xc>
    1cda:	88 23       	and	r24, r24
    1cdc:	52 f0       	brmi	.+20     	; 0x1cf2 <__fp_round+0x20>
    1cde:	bb 0f       	add	r27, r27
    1ce0:	40 f4       	brcc	.+16     	; 0x1cf2 <__fp_round+0x20>
    1ce2:	bf 2b       	or	r27, r31
    1ce4:	11 f4       	brne	.+4      	; 0x1cea <__fp_round+0x18>
    1ce6:	60 ff       	sbrs	r22, 0
    1ce8:	04 c0       	rjmp	.+8      	; 0x1cf2 <__fp_round+0x20>
    1cea:	6f 5f       	subi	r22, 0xFF	; 255
    1cec:	7f 4f       	sbci	r23, 0xFF	; 255
    1cee:	8f 4f       	sbci	r24, 0xFF	; 255
    1cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf2:	08 95       	ret

00001cf4 <__fp_split3>:
    1cf4:	57 fd       	sbrc	r21, 7
    1cf6:	90 58       	subi	r25, 0x80	; 128
    1cf8:	44 0f       	add	r20, r20
    1cfa:	55 1f       	adc	r21, r21
    1cfc:	59 f0       	breq	.+22     	; 0x1d14 <__fp_splitA+0x10>
    1cfe:	5f 3f       	cpi	r21, 0xFF	; 255
    1d00:	71 f0       	breq	.+28     	; 0x1d1e <__fp_splitA+0x1a>
    1d02:	47 95       	ror	r20

00001d04 <__fp_splitA>:
    1d04:	88 0f       	add	r24, r24
    1d06:	97 fb       	bst	r25, 7
    1d08:	99 1f       	adc	r25, r25
    1d0a:	61 f0       	breq	.+24     	; 0x1d24 <__fp_splitA+0x20>
    1d0c:	9f 3f       	cpi	r25, 0xFF	; 255
    1d0e:	79 f0       	breq	.+30     	; 0x1d2e <__fp_splitA+0x2a>
    1d10:	87 95       	ror	r24
    1d12:	08 95       	ret
    1d14:	12 16       	cp	r1, r18
    1d16:	13 06       	cpc	r1, r19
    1d18:	14 06       	cpc	r1, r20
    1d1a:	55 1f       	adc	r21, r21
    1d1c:	f2 cf       	rjmp	.-28     	; 0x1d02 <__fp_split3+0xe>
    1d1e:	46 95       	lsr	r20
    1d20:	f1 df       	rcall	.-30     	; 0x1d04 <__fp_splitA>
    1d22:	08 c0       	rjmp	.+16     	; 0x1d34 <__fp_splitA+0x30>
    1d24:	16 16       	cp	r1, r22
    1d26:	17 06       	cpc	r1, r23
    1d28:	18 06       	cpc	r1, r24
    1d2a:	99 1f       	adc	r25, r25
    1d2c:	f1 cf       	rjmp	.-30     	; 0x1d10 <__fp_splitA+0xc>
    1d2e:	86 95       	lsr	r24
    1d30:	71 05       	cpc	r23, r1
    1d32:	61 05       	cpc	r22, r1
    1d34:	08 94       	sec
    1d36:	08 95       	ret

00001d38 <__fp_zero>:
    1d38:	e8 94       	clt

00001d3a <__fp_szero>:
    1d3a:	bb 27       	eor	r27, r27
    1d3c:	66 27       	eor	r22, r22
    1d3e:	77 27       	eor	r23, r23
    1d40:	cb 01       	movw	r24, r22
    1d42:	97 f9       	bld	r25, 7
    1d44:	08 95       	ret

00001d46 <__mulsf3>:
    1d46:	0b d0       	rcall	.+22     	; 0x1d5e <__mulsf3x>
    1d48:	c4 cf       	rjmp	.-120    	; 0x1cd2 <__fp_round>
    1d4a:	b5 df       	rcall	.-150    	; 0x1cb6 <__fp_pscA>
    1d4c:	28 f0       	brcs	.+10     	; 0x1d58 <__mulsf3+0x12>
    1d4e:	ba df       	rcall	.-140    	; 0x1cc4 <__fp_pscB>
    1d50:	18 f0       	brcs	.+6      	; 0x1d58 <__mulsf3+0x12>
    1d52:	95 23       	and	r25, r21
    1d54:	09 f0       	breq	.+2      	; 0x1d58 <__mulsf3+0x12>
    1d56:	a6 cf       	rjmp	.-180    	; 0x1ca4 <__fp_inf>
    1d58:	ab cf       	rjmp	.-170    	; 0x1cb0 <__fp_nan>
    1d5a:	11 24       	eor	r1, r1
    1d5c:	ee cf       	rjmp	.-36     	; 0x1d3a <__fp_szero>

00001d5e <__mulsf3x>:
    1d5e:	ca df       	rcall	.-108    	; 0x1cf4 <__fp_split3>
    1d60:	a0 f3       	brcs	.-24     	; 0x1d4a <__mulsf3+0x4>

00001d62 <__mulsf3_pse>:
    1d62:	95 9f       	mul	r25, r21
    1d64:	d1 f3       	breq	.-12     	; 0x1d5a <__mulsf3+0x14>
    1d66:	95 0f       	add	r25, r21
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	55 1f       	adc	r21, r21
    1d6c:	62 9f       	mul	r22, r18
    1d6e:	f0 01       	movw	r30, r0
    1d70:	72 9f       	mul	r23, r18
    1d72:	bb 27       	eor	r27, r27
    1d74:	f0 0d       	add	r31, r0
    1d76:	b1 1d       	adc	r27, r1
    1d78:	63 9f       	mul	r22, r19
    1d7a:	aa 27       	eor	r26, r26
    1d7c:	f0 0d       	add	r31, r0
    1d7e:	b1 1d       	adc	r27, r1
    1d80:	aa 1f       	adc	r26, r26
    1d82:	64 9f       	mul	r22, r20
    1d84:	66 27       	eor	r22, r22
    1d86:	b0 0d       	add	r27, r0
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	66 1f       	adc	r22, r22
    1d8c:	82 9f       	mul	r24, r18
    1d8e:	22 27       	eor	r18, r18
    1d90:	b0 0d       	add	r27, r0
    1d92:	a1 1d       	adc	r26, r1
    1d94:	62 1f       	adc	r22, r18
    1d96:	73 9f       	mul	r23, r19
    1d98:	b0 0d       	add	r27, r0
    1d9a:	a1 1d       	adc	r26, r1
    1d9c:	62 1f       	adc	r22, r18
    1d9e:	83 9f       	mul	r24, r19
    1da0:	a0 0d       	add	r26, r0
    1da2:	61 1d       	adc	r22, r1
    1da4:	22 1f       	adc	r18, r18
    1da6:	74 9f       	mul	r23, r20
    1da8:	33 27       	eor	r19, r19
    1daa:	a0 0d       	add	r26, r0
    1dac:	61 1d       	adc	r22, r1
    1dae:	23 1f       	adc	r18, r19
    1db0:	84 9f       	mul	r24, r20
    1db2:	60 0d       	add	r22, r0
    1db4:	21 1d       	adc	r18, r1
    1db6:	82 2f       	mov	r24, r18
    1db8:	76 2f       	mov	r23, r22
    1dba:	6a 2f       	mov	r22, r26
    1dbc:	11 24       	eor	r1, r1
    1dbe:	9f 57       	subi	r25, 0x7F	; 127
    1dc0:	50 40       	sbci	r21, 0x00	; 0
    1dc2:	8a f0       	brmi	.+34     	; 0x1de6 <__mulsf3_pse+0x84>
    1dc4:	e1 f0       	breq	.+56     	; 0x1dfe <__mulsf3_pse+0x9c>
    1dc6:	88 23       	and	r24, r24
    1dc8:	4a f0       	brmi	.+18     	; 0x1ddc <__mulsf3_pse+0x7a>
    1dca:	ee 0f       	add	r30, r30
    1dcc:	ff 1f       	adc	r31, r31
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	66 1f       	adc	r22, r22
    1dd2:	77 1f       	adc	r23, r23
    1dd4:	88 1f       	adc	r24, r24
    1dd6:	91 50       	subi	r25, 0x01	; 1
    1dd8:	50 40       	sbci	r21, 0x00	; 0
    1dda:	a9 f7       	brne	.-22     	; 0x1dc6 <__mulsf3_pse+0x64>
    1ddc:	9e 3f       	cpi	r25, 0xFE	; 254
    1dde:	51 05       	cpc	r21, r1
    1de0:	70 f0       	brcs	.+28     	; 0x1dfe <__mulsf3_pse+0x9c>
    1de2:	60 cf       	rjmp	.-320    	; 0x1ca4 <__fp_inf>
    1de4:	aa cf       	rjmp	.-172    	; 0x1d3a <__fp_szero>
    1de6:	5f 3f       	cpi	r21, 0xFF	; 255
    1de8:	ec f3       	brlt	.-6      	; 0x1de4 <__mulsf3_pse+0x82>
    1dea:	98 3e       	cpi	r25, 0xE8	; 232
    1dec:	dc f3       	brlt	.-10     	; 0x1de4 <__mulsf3_pse+0x82>
    1dee:	86 95       	lsr	r24
    1df0:	77 95       	ror	r23
    1df2:	67 95       	ror	r22
    1df4:	b7 95       	ror	r27
    1df6:	f7 95       	ror	r31
    1df8:	e7 95       	ror	r30
    1dfa:	9f 5f       	subi	r25, 0xFF	; 255
    1dfc:	c1 f7       	brne	.-16     	; 0x1dee <__mulsf3_pse+0x8c>
    1dfe:	fe 2b       	or	r31, r30
    1e00:	88 0f       	add	r24, r24
    1e02:	91 1d       	adc	r25, r1
    1e04:	96 95       	lsr	r25
    1e06:	87 95       	ror	r24
    1e08:	97 f9       	bld	r25, 7
    1e0a:	08 95       	ret

00001e0c <__divmodhi4>:
    1e0c:	97 fb       	bst	r25, 7
    1e0e:	07 2e       	mov	r0, r23
    1e10:	16 f4       	brtc	.+4      	; 0x1e16 <__divmodhi4+0xa>
    1e12:	00 94       	com	r0
    1e14:	06 d0       	rcall	.+12     	; 0x1e22 <__divmodhi4_neg1>
    1e16:	77 fd       	sbrc	r23, 7
    1e18:	08 d0       	rcall	.+16     	; 0x1e2a <__divmodhi4_neg2>
    1e1a:	14 d0       	rcall	.+40     	; 0x1e44 <__udivmodhi4>
    1e1c:	07 fc       	sbrc	r0, 7
    1e1e:	05 d0       	rcall	.+10     	; 0x1e2a <__divmodhi4_neg2>
    1e20:	3e f4       	brtc	.+14     	; 0x1e30 <__divmodhi4_exit>

00001e22 <__divmodhi4_neg1>:
    1e22:	90 95       	com	r25
    1e24:	81 95       	neg	r24
    1e26:	9f 4f       	sbci	r25, 0xFF	; 255
    1e28:	08 95       	ret

00001e2a <__divmodhi4_neg2>:
    1e2a:	70 95       	com	r23
    1e2c:	61 95       	neg	r22
    1e2e:	7f 4f       	sbci	r23, 0xFF	; 255

00001e30 <__divmodhi4_exit>:
    1e30:	08 95       	ret

00001e32 <__tablejump2__>:
    1e32:	ee 0f       	add	r30, r30
    1e34:	ff 1f       	adc	r31, r31
    1e36:	00 24       	eor	r0, r0
    1e38:	00 1c       	adc	r0, r0
    1e3a:	0b be       	out	0x3b, r0	; 59
    1e3c:	07 90       	elpm	r0, Z+
    1e3e:	f6 91       	elpm	r31, Z
    1e40:	e0 2d       	mov	r30, r0
    1e42:	09 94       	ijmp

00001e44 <__udivmodhi4>:
    1e44:	aa 1b       	sub	r26, r26
    1e46:	bb 1b       	sub	r27, r27
    1e48:	51 e1       	ldi	r21, 0x11	; 17
    1e4a:	07 c0       	rjmp	.+14     	; 0x1e5a <__udivmodhi4_ep>

00001e4c <__udivmodhi4_loop>:
    1e4c:	aa 1f       	adc	r26, r26
    1e4e:	bb 1f       	adc	r27, r27
    1e50:	a6 17       	cp	r26, r22
    1e52:	b7 07       	cpc	r27, r23
    1e54:	10 f0       	brcs	.+4      	; 0x1e5a <__udivmodhi4_ep>
    1e56:	a6 1b       	sub	r26, r22
    1e58:	b7 0b       	sbc	r27, r23

00001e5a <__udivmodhi4_ep>:
    1e5a:	88 1f       	adc	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	5a 95       	dec	r21
    1e60:	a9 f7       	brne	.-22     	; 0x1e4c <__udivmodhi4_loop>
    1e62:	80 95       	com	r24
    1e64:	90 95       	com	r25
    1e66:	bc 01       	movw	r22, r24
    1e68:	cd 01       	movw	r24, r26
    1e6a:	08 95       	ret

00001e6c <_exit>:
    1e6c:	f8 94       	cli

00001e6e <__stop_program>:
    1e6e:	ff cf       	rjmp	.-2      	; 0x1e6e <__stop_program>
