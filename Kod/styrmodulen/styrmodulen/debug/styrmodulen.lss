
styrmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001fcc  00002060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ba  00800120  00800120  00002080  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002080  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000020b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000149f  00000000  00000000  00002240  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000338  00000000  00000000  000036df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001dbb  00000000  00000000  00003a17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004f0  00000000  00000000  000057d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010958  00000000  00000000  00005cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c7b  00000000  00000000  0001661c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00018297  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00003f12  00000000  00000000  000183c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
       2:	00 00       	nop
       4:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__vector_1>
       8:	87 c6       	rjmp	.+3342   	; 0xd18 <__vector_2>
       a:	00 00       	nop
       c:	ad c6       	rjmp	.+3418   	; 0xd68 <__vector_3>
       e:	00 00       	nop
      10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
      12:	00 00       	nop
      14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
      16:	00 00       	nop
      18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
      1a:	00 00       	nop
      1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
      1e:	00 00       	nop
      20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
      22:	00 00       	nop
      24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
      26:	00 00       	nop
      28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
      2a:	00 00       	nop
      2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
      32:	00 00       	nop
      34:	12 c6       	rjmp	.+3108   	; 0xc5a <__vector_13>
      36:	00 00       	nop
      38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
      3a:	00 00       	nop
      3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
      3e:	00 00       	nop
      40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
      46:	00 00       	nop
      48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
      4e:	00 00       	nop
      50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
      52:	00 00       	nop
      54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
      56:	00 00       	nop
      58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
      5a:	00 00       	nop
      5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
      5e:	00 00       	nop
      60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
      62:	00 00       	nop
      64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
      66:	00 00       	nop
      68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
      6a:	00 00       	nop
      6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
      6e:	00 00       	nop
      70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
      72:	00 00       	nop
      74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
      76:	00 00       	nop
      78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
      7a:	00 00       	nop
      7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
      7e:	00 00       	nop
      80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
      82:	00 00       	nop
      84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
      86:	00 00       	nop
      88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7f 0c       	add	r7, r15
      8e:	84 0c       	add	r8, r4
      90:	90 0c       	add	r9, r0
      92:	aa 0c       	add	r10, r10
      94:	ae 0c       	add	r10, r14
      96:	b2 0c       	add	r11, r2
      98:	b6 0c       	add	r11, r6
      9a:	8b 0d       	add	r24, r11
      9c:	c9 0c       	add	r12, r9
      9e:	ce 0c       	add	r12, r14
      a0:	d5 0c       	add	r13, r5
      a2:	dc 0c       	add	r13, r12
      a4:	e3 0c       	add	r14, r3
      a6:	ea 0c       	add	r14, r10
      a8:	f1 0c       	add	r15, r1
      aa:	f8 0c       	add	r15, r8

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	d0 e4       	ldi	r29, 0x40	; 64
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	ec ec       	ldi	r30, 0xCC	; 204
      c0:	ff e1       	ldi	r31, 0x1F	; 31
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	0b bf       	out	0x3b, r16	; 59
      c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
      c8:	07 90       	elpm	r0, Z+
      ca:	0d 92       	st	X+, r0
      cc:	a0 32       	cpi	r26, 0x20	; 32
      ce:	b1 07       	cpc	r27, r17
      d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
      d2:	21 e0       	ldi	r18, 0x01	; 1
      d4:	a0 e2       	ldi	r26, 0x20	; 32
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
      da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
      dc:	aa 3d       	cpi	r26, 0xDA	; 218
      de:	b2 07       	cpc	r27, r18
      e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
      e2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <main>
      e6:	0c 94 e4 0f 	jmp	0x1fc8	; 0x1fc8 <_exit>

000000ea <__bad_interrupt>:
      ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
      ec:	08 95       	ret

000000ee <linje_get_error>:
	return styr_fel;
}



int linje_get_error(){
      ee:	2f 92       	push	r2
      f0:	3f 92       	push	r3
      f2:	4f 92       	push	r4
      f4:	5f 92       	push	r5
      f6:	6f 92       	push	r6
      f8:	7f 92       	push	r7
      fa:	8f 92       	push	r8
      fc:	9f 92       	push	r9
      fe:	af 92       	push	r10
     100:	bf 92       	push	r11
     102:	cf 92       	push	r12
     104:	df 92       	push	r13
     106:	ef 92       	push	r14
     108:	ff 92       	push	r15
     10a:	0f 93       	push	r16
     10c:	1f 93       	push	r17
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
	float styr_fel=0;
	fel_antal=0;
     112:	10 92 5b 01 	sts	0x015B, r1
     116:	10 92 5a 01 	sts	0x015A, r1
	cli();
     11a:	f8 94       	cli
	int Reflex_data_tmp = Reflex_data;
     11c:	80 90 97 01 	lds	r8, 0x0197
     120:	90 90 98 01 	lds	r9, 0x0198
	int Reflex_data2_tmp = Reflex_data2;
     124:	20 90 c0 01 	lds	r2, 0x01C0
     128:	30 90 c1 01 	lds	r3, 0x01C1
	sei();
     12c:	78 94       	sei
     12e:	c0 90 5a 01 	lds	r12, 0x015A
     132:	d0 90 5b 01 	lds	r13, 0x015B
     136:	05 e0       	ldi	r16, 0x05	; 5
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	d0 e0       	ldi	r29, 0x00	; 0
}



int linje_get_error(){
	float styr_fel=0;
     13e:	41 2c       	mov	r4, r1
     140:	51 2c       	mov	r5, r1
     142:	32 01       	movw	r6, r4
     144:	0f 2e       	mov	r0, r31
     146:	f5 e0       	ldi	r31, 0x05	; 5
     148:	af 2e       	mov	r10, r31
     14a:	b1 2c       	mov	r11, r1
     14c:	f0 2d       	mov	r31, r0
     14e:	c5 01       	movw	r24, r10
     150:	80 1b       	sub	r24, r16
     152:	91 0b       	sbc	r25, r17
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
	{
		if(i < 8){ //första 8 sensorenrna
     154:	08 97       	sbiw	r24, 0x08	; 8
     156:	14 f5       	brge	.+68     	; 0x19c <linje_get_error+0xae>
			styr_fel += ((5-i) * ((Reflex_data_tmp>>(i*2))&3));
     158:	74 01       	movw	r14, r8
     15a:	0c 2e       	mov	r0, r28
     15c:	02 c0       	rjmp	.+4      	; 0x162 <linje_get_error+0x74>
     15e:	f5 94       	asr	r15
     160:	e7 94       	ror	r14
     162:	0a 94       	dec	r0
     164:	e2 f7       	brpl	.-8      	; 0x15e <linje_get_error+0x70>
     166:	83 e0       	ldi	r24, 0x03	; 3
     168:	e8 22       	and	r14, r24
     16a:	ff 24       	eor	r15, r15
     16c:	0e 9d       	mul	r16, r14
     16e:	b0 01       	movw	r22, r0
     170:	0f 9d       	mul	r16, r15
     172:	70 0d       	add	r23, r0
     174:	1e 9d       	mul	r17, r14
     176:	70 0d       	add	r23, r0
     178:	11 24       	eor	r1, r1
     17a:	07 2e       	mov	r0, r23
     17c:	00 0c       	add	r0, r0
     17e:	88 0b       	sbc	r24, r24
     180:	99 0b       	sbc	r25, r25
     182:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     186:	9b 01       	movw	r18, r22
     188:	ac 01       	movw	r20, r24
     18a:	c3 01       	movw	r24, r6
     18c:	b2 01       	movw	r22, r4
     18e:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     192:	2b 01       	movw	r4, r22
     194:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data_tmp>>(i*2))&0x3);
     196:	ce 0c       	add	r12, r14
     198:	df 1c       	adc	r13, r15
     19a:	22 c0       	rjmp	.+68     	; 0x1e0 <linje_get_error+0xf2>
     19c:	ce 01       	movw	r24, r28
     19e:	40 97       	sbiw	r24, 0x10	; 16
		}
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
     1a0:	71 01       	movw	r14, r2
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <linje_get_error+0xba>
     1a4:	f5 94       	asr	r15
     1a6:	e7 94       	ror	r14
     1a8:	8a 95       	dec	r24
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <linje_get_error+0xb6>
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	e8 22       	and	r14, r24
     1b0:	ff 24       	eor	r15, r15
     1b2:	0e 9d       	mul	r16, r14
     1b4:	b0 01       	movw	r22, r0
     1b6:	0f 9d       	mul	r16, r15
     1b8:	70 0d       	add	r23, r0
     1ba:	1e 9d       	mul	r17, r14
     1bc:	70 0d       	add	r23, r0
     1be:	11 24       	eor	r1, r1
     1c0:	07 2e       	mov	r0, r23
     1c2:	00 0c       	add	r0, r0
     1c4:	88 0b       	sbc	r24, r24
     1c6:	99 0b       	sbc	r25, r25
     1c8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     1cc:	9b 01       	movw	r18, r22
     1ce:	ac 01       	movw	r20, r24
     1d0:	c3 01       	movw	r24, r6
     1d2:	b2 01       	movw	r22, r4
     1d4:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     1d8:	2b 01       	movw	r4, r22
     1da:	3c 01       	movw	r6, r24
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
     1dc:	ce 0c       	add	r12, r14
     1de:	df 1c       	adc	r13, r15
     1e0:	22 96       	adiw	r28, 0x02	; 2
     1e2:	01 50       	subi	r16, 0x01	; 1
     1e4:	11 09       	sbc	r17, r1
	fel_antal=0;
	cli();
	int Reflex_data_tmp = Reflex_data;
	int Reflex_data2_tmp = Reflex_data2;
	sei();
	for(int i=0;i<11;i++) //vikta sensorer från -5 till 5 med 0 i mitten 
     1e6:	c6 31       	cpi	r28, 0x16	; 22
     1e8:	d1 05       	cpc	r29, r1
     1ea:	09 f0       	breq	.+2      	; 0x1ee <linje_get_error+0x100>
     1ec:	b0 cf       	rjmp	.-160    	; 0x14e <linje_get_error+0x60>
     1ee:	d0 92 5b 01 	sts	0x015B, r13
     1f2:	c0 92 5a 01 	sts	0x015A, r12
		else{ // sista 3 sensorerna
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
     1f6:	c1 14       	cp	r12, r1
     1f8:	d1 04       	cpc	r13, r1
     1fa:	69 f0       	breq	.+26     	; 0x216 <linje_get_error+0x128>
		styr_fel = 0; //kan inte dela med 0, specialfall
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
     1fc:	b6 01       	movw	r22, r12
     1fe:	dd 0c       	add	r13, r13
     200:	88 0b       	sbc	r24, r24
     202:	99 0b       	sbc	r25, r25
     204:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     208:	9b 01       	movw	r18, r22
     20a:	ac 01       	movw	r20, r24
     20c:	c3 01       	movw	r24, r6
     20e:	b2 01       	movw	r22, r4
     210:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     214:	03 c0       	rjmp	.+6      	; 0x21c <linje_get_error+0x12e>
			styr_fel += ((5-i) * ((Reflex_data2_tmp>>((i-8)*2))&3));
			fel_antal += ((Reflex_data2_tmp>>((i-8)*2))&0x3);
		}
	}
	if (fel_antal == 0)
		styr_fel = 0; //kan inte dela med 0, specialfall
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	70 e0       	ldi	r23, 0x00	; 0
     21a:	cb 01       	movw	r24, r22
	else
		styr_fel /= fel_antal; // få fram medelvärde av viktade sensorer
	return styr_fel;
     21c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fixsfsi>
}
     220:	cb 01       	movw	r24, r22
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	df 90       	pop	r13
     230:	cf 90       	pop	r12
     232:	bf 90       	pop	r11
     234:	af 90       	pop	r10
     236:	9f 90       	pop	r9
     238:	8f 90       	pop	r8
     23a:	7f 90       	pop	r7
     23c:	6f 90       	pop	r6
     23e:	5f 90       	pop	r5
     240:	4f 90       	pop	r4
     242:	3f 90       	pop	r3
     244:	2f 90       	pop	r2
     246:	08 95       	ret

00000248 <linje_RGBsveng>:
	}
	
}

signed char linje_RGBsveng() //om RGB ger utslag
{
     248:	cf 93       	push	r28
     24a:	df 93       	push	r29
	cli();
     24c:	f8 94       	cli
	signed char styr_fel=0x00;
	int Reflex_data_tmp = Reflex_data;
     24e:	40 91 97 01 	lds	r20, 0x0197
     252:	50 91 98 01 	lds	r21, 0x0198
	int Reflex_data2_tmp = Reflex_data2;
     256:	60 91 c0 01 	lds	r22, 0x01C0
     25a:	70 91 c1 01 	lds	r23, 0x01C1
	sei();
     25e:	78 94       	sei
		time=0;
	}
	else // fortsätt med RGB sväng
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
     260:	80 91 aa 01 	lds	r24, 0x01AA
     264:	88 23       	and	r24, r24
     266:	09 f4       	brne	.+2      	; 0x26a <linje_RGBsveng+0x22>
     268:	a3 c0       	rjmp	.+326    	; 0x3b0 <linje_RGBsveng+0x168>
     26a:	20 91 58 01 	lds	r18, 0x0158
     26e:	30 91 59 01 	lds	r19, 0x0159
     272:	23 2b       	or	r18, r19
     274:	b1 f4       	brne	.+44     	; 0x2a2 <linje_RGBsveng+0x5a>
     276:	20 91 54 01 	lds	r18, 0x0154
     27a:	30 91 55 01 	lds	r19, 0x0155
     27e:	23 2b       	or	r18, r19
     280:	81 f4       	brne	.+32     	; 0x2a2 <linje_RGBsveng+0x5a>
		counter_timer_line_RGB = 0;
     282:	10 92 65 01 	sts	0x0165, r1
     286:	10 92 64 01 	sts	0x0164, r1
		RGB_reset_timer = 1;
     28a:	81 e0       	ldi	r24, 0x01	; 1
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	90 93 59 01 	sts	0x0159, r25
     292:	80 93 58 01 	sts	0x0158, r24
		RGB_force = 1;
     296:	90 93 55 01 	sts	0x0155, r25
     29a:	80 93 54 01 	sts	0x0154, r24
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     29e:	80 e0       	ldi	r24, 0x00	; 0
		time++;*/
	
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
     2a0:	8e c0       	rjmp	.+284    	; 0x3be <linje_RGBsveng+0x176>
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     2a2:	20 91 64 01 	lds	r18, 0x0164
     2a6:	30 91 65 01 	lds	r19, 0x0165
     2aa:	24 30       	cpi	r18, 0x04	; 4
     2ac:	31 05       	cpc	r19, r1
     2ae:	0c f0       	brlt	.+2      	; 0x2b2 <linje_RGBsveng+0x6a>
     2b0:	6f c0       	rjmp	.+222    	; 0x390 <linje_RGBsveng+0x148>
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
     2b2:	83 30       	cpi	r24, 0x03	; 3
     2b4:	71 f5       	brne	.+92     	; 0x312 <linje_RGBsveng+0xca>
     2b6:	a0 ef       	ldi	r26, 0xF0	; 240
     2b8:	bf ef       	ldi	r27, 0xFF	; 255
     2ba:	2b ef       	ldi	r18, 0xFB	; 251
     2bc:	e0 e0       	ldi	r30, 0x00	; 0
     2be:	f0 e0       	ldi	r31, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
			
			for(int i=0;i<11;i++)
			{
				if (styr_fel==0){
     2c2:	81 11       	cpse	r24, r1
     2c4:	1f c0       	rjmp	.+62     	; 0x304 <linje_RGBsveng+0xbc>
					if(i < 8){ //första 8 sensorenrna
     2c6:	e8 30       	cpi	r30, 0x08	; 8
     2c8:	f1 05       	cpc	r31, r1
     2ca:	84 f4       	brge	.+32     	; 0x2ec <linje_RGBsveng+0xa4>
     2cc:	cf 01       	movw	r24, r30
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     2d2:	ea 01       	movw	r28, r20
     2d4:	02 c0       	rjmp	.+4      	; 0x2da <linje_RGBsveng+0x92>
     2d6:	d5 95       	asr	r29
     2d8:	c7 95       	ror	r28
     2da:	8a 95       	dec	r24
     2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <linje_RGBsveng+0x8e>
     2de:	ce 01       	movw	r24, r28
     2e0:	86 95       	lsr	r24
     2e2:	81 70       	andi	r24, 0x01	; 1
     2e4:	28 9f       	mul	r18, r24
     2e6:	80 2d       	mov	r24, r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0c c0       	rjmp	.+24     	; 0x304 <linje_RGBsveng+0xbc>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     2ec:	cb 01       	movw	r24, r22
     2ee:	0a 2e       	mov	r0, r26
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <linje_RGBsveng+0xae>
     2f2:	95 95       	asr	r25
     2f4:	87 95       	ror	r24
     2f6:	0a 94       	dec	r0
     2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <linje_RGBsveng+0xaa>
     2fa:	86 95       	lsr	r24
     2fc:	81 70       	andi	r24, 0x01	; 1
     2fe:	28 9f       	mul	r18, r24
     300:	80 2d       	mov	r24, r0
     302:	11 24       	eor	r1, r1
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
		
		if(RGB_data==3){ //sväng höger reglera bara på sensor mest till höger
			
			for(int i=0;i<11;i++)
     304:	31 96       	adiw	r30, 0x01	; 1
     306:	2f 5f       	subi	r18, 0xFF	; 255
     308:	12 96       	adiw	r26, 0x02	; 2
     30a:	26 30       	cpi	r18, 0x06	; 6
     30c:	d1 f6       	brne	.-76     	; 0x2c2 <linje_RGBsveng+0x7a>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
		styr_fel = -3;
     30e:	8d ef       	ldi	r24, 0xFD	; 253
     310:	56 c0       	rjmp	.+172    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data==2){ //raktfram
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	69 f4       	brne	.+26     	; 0x330 <linje_RGBsveng+0xe8>
			
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
     316:	40 7f       	andi	r20, 0xF0	; 240
     318:	50 93 98 01 	sts	0x0198, r21
     31c:	40 93 97 01 	sts	0x0197, r20
			Reflex_data2 = Reflex_data2_tmp & 0x03;
     320:	63 70       	andi	r22, 0x03	; 3
     322:	77 27       	eor	r23, r23
     324:	70 93 c1 01 	sts	0x01C1, r23
     328:	60 93 c0 01 	sts	0x01C0, r22
			return linje_get_error();
     32c:	e0 de       	rcall	.-576    	; 0xee <linje_get_error>
     32e:	47 c0       	rjmp	.+142    	; 0x3be <linje_RGBsveng+0x176>
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
     330:	81 30       	cpi	r24, 0x01	; 1
     332:	d1 f5       	brne	.+116    	; 0x3a8 <linje_RGBsveng+0x160>
     334:	a6 e0       	ldi	r26, 0x06	; 6
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	e6 e0       	ldi	r30, 0x06	; 6
     33a:	8b e0       	ldi	r24, 0x0B	; 11
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	20 e0       	ldi	r18, 0x00	; 0
			for(int i=11;i>0;i--){
				if (styr_fel == 0){
     340:	21 11       	cpse	r18, r1
     342:	1f c0       	rjmp	.+62     	; 0x382 <linje_RGBsveng+0x13a>
					if(i < 8){ //första 8 sensorenrna
     344:	88 30       	cpi	r24, 0x08	; 8
     346:	91 05       	cpc	r25, r1
     348:	84 f4       	brge	.+32     	; 0x36a <linje_RGBsveng+0x122>
     34a:	9c 01       	movw	r18, r24
     34c:	22 0f       	add	r18, r18
     34e:	33 1f       	adc	r19, r19
						styr_fel= (i-5) * ((Reflex_data_tmp >> (i * 2) & 0x02)>>1);
     350:	ea 01       	movw	r28, r20
     352:	02 c0       	rjmp	.+4      	; 0x358 <linje_RGBsveng+0x110>
     354:	d5 95       	asr	r29
     356:	c7 95       	ror	r28
     358:	2a 95       	dec	r18
     35a:	e2 f7       	brpl	.-8      	; 0x354 <linje_RGBsveng+0x10c>
     35c:	9e 01       	movw	r18, r28
     35e:	26 95       	lsr	r18
     360:	21 70       	andi	r18, 0x01	; 1
     362:	e2 9f       	mul	r30, r18
     364:	20 2d       	mov	r18, r0
     366:	11 24       	eor	r1, r1
     368:	0c c0       	rjmp	.+24     	; 0x382 <linje_RGBsveng+0x13a>
					}
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
     36a:	9b 01       	movw	r18, r22
     36c:	0a 2e       	mov	r0, r26
     36e:	02 c0       	rjmp	.+4      	; 0x374 <linje_RGBsveng+0x12c>
     370:	35 95       	asr	r19
     372:	27 95       	ror	r18
     374:	0a 94       	dec	r0
     376:	e2 f7       	brpl	.-8      	; 0x370 <linje_RGBsveng+0x128>
     378:	26 95       	lsr	r18
     37a:	21 70       	andi	r18, 0x01	; 1
     37c:	e2 9f       	mul	r30, r18
     37e:	20 2d       	mov	r18, r0
     380:	11 24       	eor	r1, r1
     382:	01 97       	sbiw	r24, 0x01	; 1
     384:	e1 50       	subi	r30, 0x01	; 1
     386:	12 97       	sbiw	r26, 0x02	; 2
			Reflex_data = Reflex_data_tmp & 0xfff0; //ignorera yttersta sensorer
			Reflex_data2 = Reflex_data2_tmp & 0x03;
			return linje_get_error();
		}
		else if(RGB_data == 1){// sväng hvänster reglera bara på sensor mest till vänster
			for(int i=11;i>0;i--){
     388:	00 97       	sbiw	r24, 0x00	; 0
     38a:	d1 f6       	brne	.-76     	; 0x340 <linje_RGBsveng+0xf8>
					else{ // sista 3 sensorerna
						styr_fel= (i-5) * ((Reflex_data2_tmp >> ((i-8) * 2) & 0x02)>>1);
					}
				}
			}
			styr_fel = 3;
     38c:	83 e0       	ldi	r24, 0x03	; 3
     38e:	17 c0       	rjmp	.+46     	; 0x3be <linje_RGBsveng+0x176>
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
		}
	}
	else{
		RGB_data=0;
     390:	10 92 aa 01 	sts	0x01AA, r1
		RGB_reset_timer = 0;
     394:	10 92 59 01 	sts	0x0159, r1
     398:	10 92 58 01 	sts	0x0158, r1
		RGB_force = 0;
     39c:	10 92 55 01 	sts	0x0155, r1
     3a0:	10 92 54 01 	sts	0x0154, r1
}

signed char linje_RGBsveng() //om RGB ger utslag
{
	cli();
	signed char styr_fel=0x00;
     3a4:	80 e0       	ldi	r24, 0x00	; 0
     3a6:	0b c0       	rjmp	.+22     	; 0x3be <linje_RGBsveng+0x176>
				}
			}
			styr_fel = 3;
		}
		else{
			return 0x00; //något har blivit fel hoppas på att det löser sig
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	09 c0       	rjmp	.+18     	; 0x3be <linje_RGBsveng+0x176>
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	07 c0       	rjmp	.+14     	; 0x3be <linje_RGBsveng+0x176>
	if((RGB_data > 0) && (RGB_reset_timer == 0) && (RGB_force == 0)){  // Detta kommer bara göras en gång då vi fått någon RGB data , röd/blå/grön
		counter_timer_line_RGB = 0;
		RGB_reset_timer = 1;
		RGB_force = 1;
	}
	else if(counter_timer_line_RGB <= 3){  // 2sekunder ish
     3b0:	80 91 64 01 	lds	r24, 0x0164
     3b4:	90 91 65 01 	lds	r25, 0x0165
     3b8:	04 97       	sbiw	r24, 0x04	; 4
     3ba:	c4 f3       	brlt	.-16     	; 0x3ac <linje_RGBsveng+0x164>
     3bc:	e9 cf       	rjmp	.-46     	; 0x390 <linje_RGBsveng+0x148>
		RGB_force = 0;
		
	}
	 
	return styr_fel;
}
     3be:	df 91       	pop	r29
     3c0:	cf 91       	pop	r28
     3c2:	08 95       	ret

000003c4 <sekvens_goal_detekted>:
bool sekvens_goal_detekted(){
	//int fel_antal=0;
	#ifndef time
		static int prew_fel_antal=0;
	#endif
	linje_get_error();		// Borde uppdatera fel_antal
     3c4:	94 de       	rcall	.-728    	; 0xee <linje_get_error>
	if(fel_antal>28){		// om robbot paserar tejp på tvären 
     3c6:	80 91 5a 01 	lds	r24, 0x015A
     3ca:	90 91 5b 01 	lds	r25, 0x015B
     3ce:	8d 31       	cpi	r24, 0x1D	; 29
     3d0:	91 05       	cpc	r25, r1
     3d2:	5c f0       	brlt	.+22     	; 0x3ea <sekvens_goal_detekted+0x26>
		PORTD |= (1 << PD1);
     3d4:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     3d6:	80 91 5a 01 	lds	r24, 0x015A
     3da:	90 91 5b 01 	lds	r25, 0x015B
     3de:	90 93 25 01 	sts	0x0125, r25
     3e2:	80 93 24 01 	sts	0x0124, r24
		return true;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	08 95       	ret
	}
	else if(prew_fel_antal+fel_antal>36 && prew_fel_antal <=28 && RGB_data==0){
     3ea:	20 91 24 01 	lds	r18, 0x0124
     3ee:	30 91 25 01 	lds	r19, 0x0125
     3f2:	ac 01       	movw	r20, r24
     3f4:	42 0f       	add	r20, r18
     3f6:	53 1f       	adc	r21, r19
     3f8:	45 32       	cpi	r20, 0x25	; 37
     3fa:	51 05       	cpc	r21, r1
     3fc:	94 f0       	brlt	.+36     	; 0x422 <sekvens_goal_detekted+0x5e>
     3fe:	2d 31       	cpi	r18, 0x1D	; 29
     400:	31 05       	cpc	r19, r1
     402:	7c f4       	brge	.+30     	; 0x422 <sekvens_goal_detekted+0x5e>
     404:	20 91 aa 01 	lds	r18, 0x01AA
     408:	21 11       	cpse	r18, r1
     40a:	0b c0       	rjmp	.+22     	; 0x422 <sekvens_goal_detekted+0x5e>
		PORTD |= (1 << PD1);
     40c:	59 9a       	sbi	0x0b, 1	; 11
		prew_fel_antal=fel_antal;
     40e:	80 91 5a 01 	lds	r24, 0x015A
     412:	90 91 5b 01 	lds	r25, 0x015B
     416:	90 93 25 01 	sts	0x0125, r25
     41a:	80 93 24 01 	sts	0x0124, r24
		return true;
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	08 95       	ret
	}
	else{
		prew_fel_antal=fel_antal;
     422:	90 93 25 01 	sts	0x0125, r25
     426:	80 93 24 01 	sts	0x0124, r24
		return false;
     42a:	80 e0       	ldi	r24, 0x00	; 0
	}
	if(fel_antal>3 & fel_antal < 7 & max-min > 5 & max-min < 8) // måste kalibreras bör nog vara && ?
		return true;
	return false;
	*/
}
     42c:	08 95       	ret

0000042e <detect_goal>:
bool detect_goal(){// brettar om robotten är i mål eller inte
		#ifndef time
			static int time;
			static int count;
		#endif
		linje_get_error();		// Borde uppdatera fel_antal
     42e:	5f de       	rcall	.-834    	; 0xee <linje_get_error>
	int goal_timer = 5;  //10 funkar 8/10
	
	if((Goal_reset_timer == 0) && (sekvens_goal_detekted() == true)){		
     430:	80 91 56 01 	lds	r24, 0x0156
     434:	90 91 57 01 	lds	r25, 0x0157
     438:	89 2b       	or	r24, r25
     43a:	69 f4       	brne	.+26     	; 0x456 <detect_goal+0x28>
     43c:	c3 df       	rcall	.-122    	; 0x3c4 <sekvens_goal_detekted>
     43e:	88 23       	and	r24, r24
     440:	51 f0       	breq	.+20     	; 0x456 <detect_goal+0x28>
		Goal_reset_timer = 1;	
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	90 93 57 01 	sts	0x0157, r25
     44a:	80 93 56 01 	sts	0x0156, r24
		counter_timer_line_goal = 0;																						// Nollar timern som sitter i timerintrerruptet, ISR för timern sker 10ggr per sekund						
     44e:	10 92 61 01 	sts	0x0161, r1
     452:	10 92 60 01 	sts	0x0160, r1
	}	
	if((sekvens_goal_detekted() == true) && ((count == 0) | (count == 2)) && (counter_timer_line_goal < goal_timer)){		//linje 1(count=0) eller 2(count=2) upptäkt procid
     456:	b6 df       	rcall	.-148    	; 0x3c4 <sekvens_goal_detekted>
     458:	88 23       	and	r24, r24
     45a:	d1 f0       	breq	.+52     	; 0x490 <detect_goal+0x62>
     45c:	80 91 26 01 	lds	r24, 0x0126
     460:	90 91 27 01 	lds	r25, 0x0127
     464:	9c 01       	movw	r18, r24
     466:	2d 7f       	andi	r18, 0xFD	; 253
     468:	23 2b       	or	r18, r19
     46a:	91 f4       	brne	.+36     	; 0x490 <detect_goal+0x62>
     46c:	20 91 60 01 	lds	r18, 0x0160
     470:	30 91 61 01 	lds	r19, 0x0161
     474:	25 30       	cpi	r18, 0x05	; 5
     476:	31 05       	cpc	r19, r1
     478:	5c f4       	brge	.+22     	; 0x490 <detect_goal+0x62>
		count++;
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	90 93 27 01 	sts	0x0127, r25
     480:	80 93 26 01 	sts	0x0126, r24
		PORTD ^= (1 << PD1);
     484:	9b b1       	in	r25, 0x0b	; 11
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	89 27       	eor	r24, r25
     48a:	8b b9       	out	0x0b, r24	; 11
		return false;
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == false) && ((count == 1) | (count == 3)) && (counter_timer_line_goal < goal_timer)){	// mellanrum mellan linje 1-2(count=1) eller 2-3(count=3) upptäkt
     490:	99 df       	rcall	.-206    	; 0x3c4 <sekvens_goal_detekted>
     492:	81 11       	cpse	r24, r1
     494:	1b c0       	rjmp	.+54     	; 0x4cc <detect_goal+0x9e>
     496:	20 91 26 01 	lds	r18, 0x0126
     49a:	30 91 27 01 	lds	r19, 0x0127
     49e:	a9 01       	movw	r20, r18
     4a0:	4d 7f       	andi	r20, 0xFD	; 253
     4a2:	41 30       	cpi	r20, 0x01	; 1
     4a4:	51 05       	cpc	r21, r1
     4a6:	91 f4       	brne	.+36     	; 0x4cc <detect_goal+0x9e>
     4a8:	40 91 60 01 	lds	r20, 0x0160
     4ac:	50 91 61 01 	lds	r21, 0x0161
     4b0:	45 30       	cpi	r20, 0x05	; 5
     4b2:	51 05       	cpc	r21, r1
     4b4:	5c f4       	brge	.+22     	; 0x4cc <detect_goal+0x9e>
		count++;
     4b6:	2f 5f       	subi	r18, 0xFF	; 255
     4b8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ba:	30 93 27 01 	sts	0x0127, r19
     4be:	20 93 26 01 	sts	0x0126, r18
		PORTD ^= (1 << PD1);
     4c2:	2b b1       	in	r18, 0x0b	; 11
     4c4:	92 e0       	ldi	r25, 0x02	; 2
     4c6:	92 27       	eor	r25, r18
     4c8:	9b b9       	out	0x0b, r25	; 11
		return false;																		
     4ca:	08 95       	ret
	}
	else if((sekvens_goal_detekted() == true) && (count == 4)  && (counter_timer_line_goal < goal_timer)){					//linje 3 upptäkt indikerar mål
     4cc:	7b df       	rcall	.-266    	; 0x3c4 <sekvens_goal_detekted>
     4ce:	88 23       	and	r24, r24
     4d0:	e1 f0       	breq	.+56     	; 0x50a <detect_goal+0xdc>
     4d2:	80 91 26 01 	lds	r24, 0x0126
     4d6:	90 91 27 01 	lds	r25, 0x0127
     4da:	04 97       	sbiw	r24, 0x04	; 4
     4dc:	b1 f4       	brne	.+44     	; 0x50a <detect_goal+0xdc>
     4de:	80 91 60 01 	lds	r24, 0x0160
     4e2:	90 91 61 01 	lds	r25, 0x0161
     4e6:	05 97       	sbiw	r24, 0x05	; 5
     4e8:	0c f0       	brlt	.+2      	; 0x4ec <detect_goal+0xbe>
     4ea:	3f c0       	rjmp	.+126    	; 0x56a <detect_goal+0x13c>
		//Goal_reset_timer = 0;
		//return true;
		PORTD ^= (1 << PD1);
     4ec:	9b b1       	in	r25, 0x0b	; 11
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	89 27       	eor	r24, r25
     4f2:	8b b9       	out	0x0b, r24	; 11
		count++;
     4f4:	80 91 26 01 	lds	r24, 0x0126
     4f8:	90 91 27 01 	lds	r25, 0x0127
     4fc:	01 96       	adiw	r24, 0x01	; 1
     4fe:	90 93 27 01 	sts	0x0127, r25
     502:	80 93 26 01 	sts	0x0126, r24
		return false;
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	08 95       	ret
	}
	else if((Reflex_data == 0 && Reflex_data2==0) && (count == 5)  && (counter_timer_line_goal < goal_timer)){
     50a:	80 91 97 01 	lds	r24, 0x0197
     50e:	90 91 98 01 	lds	r25, 0x0198
     512:	89 2b       	or	r24, r25
     514:	c9 f4       	brne	.+50     	; 0x548 <detect_goal+0x11a>
     516:	80 91 c0 01 	lds	r24, 0x01C0
     51a:	90 91 c1 01 	lds	r25, 0x01C1
     51e:	89 2b       	or	r24, r25
     520:	99 f4       	brne	.+38     	; 0x548 <detect_goal+0x11a>
     522:	80 91 26 01 	lds	r24, 0x0126
     526:	90 91 27 01 	lds	r25, 0x0127
     52a:	05 97       	sbiw	r24, 0x05	; 5
     52c:	69 f4       	brne	.+26     	; 0x548 <detect_goal+0x11a>
     52e:	80 91 60 01 	lds	r24, 0x0160
     532:	90 91 61 01 	lds	r25, 0x0161
     536:	05 97       	sbiw	r24, 0x05	; 5
     538:	6c f4       	brge	.+26     	; 0x554 <detect_goal+0x126>
		Goal_reset_timer = 0;
     53a:	10 92 57 01 	sts	0x0157, r1
     53e:	10 92 56 01 	sts	0x0156, r1
		PORTD |= (1 << PD1);
     542:	59 9a       	sbi	0x0b, 1	; 11
		return true;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	08 95       	ret
	}
	else if(counter_timer_line_goal >= goal_timer){																			// Timeout, tiden har passerat. Alltså inget mål utan bara en T korsning
     548:	80 91 60 01 	lds	r24, 0x0160
     54c:	90 91 61 01 	lds	r25, 0x0161
     550:	05 97       	sbiw	r24, 0x05	; 5
     552:	54 f0       	brlt	.+20     	; 0x568 <detect_goal+0x13a>
		count = 0;
     554:	10 92 27 01 	sts	0x0127, r1
     558:	10 92 26 01 	sts	0x0126, r1
		Goal_reset_timer = 0;
     55c:	10 92 57 01 	sts	0x0157, r1
     560:	10 92 56 01 	sts	0x0156, r1
		return false;
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	08 95       	ret
     568:	08 95       	ret
		//return true;
		PORTD ^= (1 << PD1);
		count++;
		return false;
	}
	else if((Reflex_data == 0 && Reflex_data2==0) && (count == 5)  && (counter_timer_line_goal < goal_timer)){
     56a:	80 91 97 01 	lds	r24, 0x0197
     56e:	90 91 98 01 	lds	r25, 0x0198
     572:	89 2b       	or	r24, r25
     574:	79 f7       	brne	.-34     	; 0x554 <detect_goal+0x126>
     576:	e8 cf       	rjmp	.-48     	; 0x548 <detect_goal+0x11a>

00000578 <detect_labyrint>:
bool detect_labyrint(){ //om robboten har kommmit in i en labyrint 
		#ifndef time
			static int time;
		#endif
		
	if(distans_left<30 && distans_right<30 && fel_antal==0){ // om det finns väggar på båda sidor     
     578:	80 91 a3 01 	lds	r24, 0x01A3
     57c:	8e 31       	cpi	r24, 0x1E	; 30
     57e:	68 f4       	brcc	.+26     	; 0x59a <detect_labyrint+0x22>
     580:	80 91 ab 01 	lds	r24, 0x01AB
     584:	8e 31       	cpi	r24, 0x1E	; 30
     586:	58 f4       	brcc	.+22     	; 0x59e <detect_labyrint+0x26>
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	20 91 5a 01 	lds	r18, 0x015A
     58e:	30 91 5b 01 	lds	r19, 0x015B
     592:	23 2b       	or	r18, r19
     594:	29 f0       	breq	.+10     	; 0x5a0 <detect_labyrint+0x28>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	08 95       	ret
		}*/
		
	}
	else{ // det var ingen labyrint
		//time = 0;
		return false;
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	08 95       	ret
     59e:	80 e0       	ldi	r24, 0x00	; 0
	}
     5a0:	08 95       	ret

000005a2 <stand_still>:
	PORTB &= ~(1 << PB1);
	
}

void stand_still(void){
	PORTB &= ~(1 << motor_dir_left);
     5a2:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     5a4:	2d 98       	cbi	0x05, 5	; 5
	motor_left = 0;
     5a6:	17 bc       	out	0x27, r1	; 39
	motor_right = 0;
     5a8:	18 bc       	out	0x28, r1	; 40
     5aa:	08 95       	ret

000005ac <drive_forward>:
}

void drive_forward(void){
	PORTB &= ~(1 << motor_dir_left);
     5ac:	2e 98       	cbi	0x05, 6	; 5
	PORTB &= ~(1 << motor_dir_right);
     5ae:	2d 98       	cbi	0x05, 5	; 5
	motor_left = laby_left_speed;
     5b0:	80 91 17 01 	lds	r24, 0x0117
     5b4:	87 bd       	out	0x27, r24	; 39
	motor_right = laby_right_speed;
     5b6:	80 91 15 01 	lds	r24, 0x0115
     5ba:	88 bd       	out	0x28, r24	; 40
     5bc:	08 95       	ret

000005be <turn_left>:
}

void turn_left(void){
	PORTB &= ~(1 << motor_dir_right);
     5be:	2d 98       	cbi	0x05, 5	; 5
	PORTB |= (1 << motor_dir_left);
     5c0:	2e 9a       	sbi	0x05, 6	; 5
	motor_left = 60;//80;//60left;
     5c2:	8c e3       	ldi	r24, 0x3C	; 60
     5c4:	87 bd       	out	0x27, r24	; 39
	motor_right = 55;//70;//55right;
     5c6:	87 e3       	ldi	r24, 0x37	; 55
     5c8:	88 bd       	out	0x28, r24	; 40
     5ca:	08 95       	ret

000005cc <turn_right>:
}

void turn_right(void){
	PORTB |= (1 << motor_dir_right);
     5cc:	2d 9a       	sbi	0x05, 5	; 5
	PORTB &= ~(1 << motor_dir_left);
     5ce:	2e 98       	cbi	0x05, 6	; 5
	motor_left = 57;//80;//57left;
     5d0:	89 e3       	ldi	r24, 0x39	; 57
     5d2:	87 bd       	out	0x27, r24	; 39
	motor_right = 52;//52right;
     5d4:	84 e3       	ldi	r24, 0x34	; 52
     5d6:	88 bd       	out	0x28, r24	; 40
     5d8:	08 95       	ret

000005da <drive_forward_left>:

short regulate_side = 0;



void drive_forward_left(int distance , int distance_front){
     5da:	4f 92       	push	r4
     5dc:	5f 92       	push	r5
     5de:	6f 92       	push	r6
     5e0:	7f 92       	push	r7
     5e2:	8f 92       	push	r8
     5e4:	9f 92       	push	r9
     5e6:	af 92       	push	r10
     5e8:	bf 92       	push	r11
     5ea:	ef 92       	push	r14
     5ec:	ff 92       	push	r15
     5ee:	0f 93       	push	r16
     5f0:	1f 93       	push	r17
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     5f6:	00 91 0d 01 	lds	r16, 0x010D
     5fa:	10 91 0e 01 	lds	r17, 0x010E
     5fe:	08 1b       	sub	r16, r24
     600:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     602:	c0 91 48 01 	lds	r28, 0x0148
     606:	d0 91 49 01 	lds	r29, 0x0149
     60a:	ce 01       	movw	r24, r28
     60c:	88 0f       	add	r24, r24
     60e:	99 1f       	adc	r25, r25
     610:	9c 01       	movw	r18, r24
     612:	2c 53       	subi	r18, 0x3C	; 60
     614:	3e 4f       	sbci	r19, 0xFE	; 254
     616:	79 01       	movw	r14, r18
     618:	d9 01       	movw	r26, r18
     61a:	8d 91       	ld	r24, X+
     61c:	9c 91       	ld	r25, X
     61e:	b8 01       	movw	r22, r16
     620:	68 1b       	sub	r22, r24
     622:	79 0b       	sbc	r23, r25
     624:	07 2e       	mov	r0, r23
     626:	00 0c       	add	r0, r0
     628:	88 0b       	sbc	r24, r24
     62a:	99 0b       	sbc	r25, r25
     62c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     630:	4b 01       	movw	r8, r22
     632:	5c 01       	movw	r10, r24
     634:	60 93 4a 01 	sts	0x014A, r22
     638:	70 93 4b 01 	sts	0x014B, r23
     63c:	80 93 4c 01 	sts	0x014C, r24
     640:	90 93 4d 01 	sts	0x014D, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     644:	80 91 0a 01 	lds	r24, 0x010A
     648:	90 91 0b 01 	lds	r25, 0x010B
     64c:	08 9f       	mul	r16, r24
     64e:	b0 01       	movw	r22, r0
     650:	09 9f       	mul	r16, r25
     652:	70 0d       	add	r23, r0
     654:	18 9f       	mul	r17, r24
     656:	70 0d       	add	r23, r0
     658:	11 24       	eor	r1, r1
     65a:	07 2e       	mov	r0, r23
     65c:	00 0c       	add	r0, r0
     65e:	88 0b       	sbc	r24, r24
     660:	99 0b       	sbc	r25, r25
     662:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     666:	2b 01       	movw	r4, r22
     668:	3c 01       	movw	r6, r24
     66a:	60 91 08 01 	lds	r22, 0x0108
     66e:	70 91 09 01 	lds	r23, 0x0109
     672:	07 2e       	mov	r0, r23
     674:	00 0c       	add	r0, r0
     676:	88 0b       	sbc	r24, r24
     678:	99 0b       	sbc	r25, r25
     67a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     67e:	9b 01       	movw	r18, r22
     680:	ac 01       	movw	r20, r24
     682:	c5 01       	movw	r24, r10
     684:	b4 01       	movw	r22, r8
     686:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__mulsf3>
     68a:	9b 01       	movw	r18, r22
     68c:	ac 01       	movw	r20, r24
     68e:	c3 01       	movw	r24, r6
     690:	b2 01       	movw	r22, r4
     692:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e2       	ldi	r20, 0x20	; 32
     69c:	51 e4       	ldi	r21, 0x41	; 65
     69e:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     6a2:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fixsfsi>
     6a6:	fb 01       	movw	r30, r22
	previous_errors[error_count] = current_error;
     6a8:	d7 01       	movw	r26, r14
     6aa:	0d 93       	st	X+, r16
     6ac:	1c 93       	st	X, r17
	
	
	if(++error_count >= number_of_errors_sc)
     6ae:	21 96       	adiw	r28, 0x01	; 1
     6b0:	d0 93 49 01 	sts	0x0149, r29
     6b4:	c0 93 48 01 	sts	0x0148, r28
     6b8:	20 91 04 01 	lds	r18, 0x0104
     6bc:	30 91 05 01 	lds	r19, 0x0105
     6c0:	c2 17       	cp	r28, r18
     6c2:	d3 07       	cpc	r29, r19
     6c4:	24 f0       	brlt	.+8      	; 0x6ce <drive_forward_left+0xf4>
		error_count=0;
     6c6:	10 92 49 01 	sts	0x0149, r1
     6ca:	10 92 48 01 	sts	0x0148, r1
	
	if(output <= (-laby_left_speed))
     6ce:	20 91 17 01 	lds	r18, 0x0117
     6d2:	30 91 18 01 	lds	r19, 0x0118
     6d6:	44 27       	eor	r20, r20
     6d8:	55 27       	eor	r21, r21
     6da:	42 1b       	sub	r20, r18
     6dc:	53 0b       	sbc	r21, r19
     6de:	4e 17       	cp	r20, r30
     6e0:	5f 07       	cpc	r21, r31
     6e2:	4c f4       	brge	.+18     	; 0x6f6 <drive_forward_left+0x11c>
		output = -laby_left_speed;
	
	else if(output >= laby_right_speed)
     6e4:	e0 91 15 01 	lds	r30, 0x0115
     6e8:	f0 91 16 01 	lds	r31, 0x0116
     6ec:	ab 01       	movw	r20, r22
     6ee:	e6 17       	cp	r30, r22
     6f0:	f7 07       	cpc	r31, r23
     6f2:	0c f4       	brge	.+2      	; 0x6f6 <drive_forward_left+0x11c>
     6f4:	af 01       	movw	r20, r30
		output=laby_right_speed;
	
	if(output <= 0){
     6f6:	14 16       	cp	r1, r20
     6f8:	15 06       	cpc	r1, r21
     6fa:	4c f0       	brlt	.+18     	; 0x70e <drive_forward_left+0x134>
		motor_right = laby_right_speed;
     6fc:	90 91 15 01 	lds	r25, 0x0115
     700:	98 bd       	out	0x28, r25	; 40
		motor_left = laby_left_speed + output;
     702:	90 91 17 01 	lds	r25, 0x0117
     706:	89 2f       	mov	r24, r25
     708:	84 0f       	add	r24, r20
     70a:	87 bd       	out	0x27, r24	; 39
     70c:	06 c0       	rjmp	.+12     	; 0x71a <drive_forward_left+0x140>
	}
	else{ 
		motor_left = laby_left_speed;
     70e:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed - output;	
     710:	90 91 15 01 	lds	r25, 0x0115
     714:	89 2f       	mov	r24, r25
     716:	84 1b       	sub	r24, r20
     718:	88 bd       	out	0x28, r24	; 40
	}
}
     71a:	df 91       	pop	r29
     71c:	cf 91       	pop	r28
     71e:	1f 91       	pop	r17
     720:	0f 91       	pop	r16
     722:	ff 90       	pop	r15
     724:	ef 90       	pop	r14
     726:	bf 90       	pop	r11
     728:	af 90       	pop	r10
     72a:	9f 90       	pop	r9
     72c:	8f 90       	pop	r8
     72e:	7f 90       	pop	r7
     730:	6f 90       	pop	r6
     732:	5f 90       	pop	r5
     734:	4f 90       	pop	r4
     736:	08 95       	ret

00000738 <drive_forward_right>:



void drive_forward_right(int distance, int distance_front){
     738:	4f 92       	push	r4
     73a:	5f 92       	push	r5
     73c:	6f 92       	push	r6
     73e:	7f 92       	push	r7
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
	int current_error = distance_wall_desired - distance; //-sensor_left_tmp
     754:	00 91 0d 01 	lds	r16, 0x010D
     758:	10 91 0e 01 	lds	r17, 0x010E
     75c:	08 1b       	sub	r16, r24
     75e:	19 0b       	sbc	r17, r25
	derivate = current_error - previous_errors[error_count];///10; //
     760:	c0 91 48 01 	lds	r28, 0x0148
     764:	d0 91 49 01 	lds	r29, 0x0149
     768:	ce 01       	movw	r24, r28
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	9c 01       	movw	r18, r24
     770:	2c 53       	subi	r18, 0x3C	; 60
     772:	3e 4f       	sbci	r19, 0xFE	; 254
     774:	79 01       	movw	r14, r18
     776:	f9 01       	movw	r30, r18
     778:	80 81       	ld	r24, Z
     77a:	91 81       	ldd	r25, Z+1	; 0x01
     77c:	b8 01       	movw	r22, r16
     77e:	68 1b       	sub	r22, r24
     780:	79 0b       	sbc	r23, r25
     782:	07 2e       	mov	r0, r23
     784:	00 0c       	add	r0, r0
     786:	88 0b       	sbc	r24, r24
     788:	99 0b       	sbc	r25, r25
     78a:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     78e:	4b 01       	movw	r8, r22
     790:	5c 01       	movw	r10, r24
     792:	60 93 4a 01 	sts	0x014A, r22
     796:	70 93 4b 01 	sts	0x014B, r23
     79a:	80 93 4c 01 	sts	0x014C, r24
     79e:	90 93 4d 01 	sts	0x014D, r25
	int output = (p_wall * current_error + d_wall * derivate)/10;
     7a2:	80 91 0a 01 	lds	r24, 0x010A
     7a6:	90 91 0b 01 	lds	r25, 0x010B
     7aa:	08 9f       	mul	r16, r24
     7ac:	b0 01       	movw	r22, r0
     7ae:	09 9f       	mul	r16, r25
     7b0:	70 0d       	add	r23, r0
     7b2:	18 9f       	mul	r17, r24
     7b4:	70 0d       	add	r23, r0
     7b6:	11 24       	eor	r1, r1
     7b8:	07 2e       	mov	r0, r23
     7ba:	00 0c       	add	r0, r0
     7bc:	88 0b       	sbc	r24, r24
     7be:	99 0b       	sbc	r25, r25
     7c0:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     7c4:	2b 01       	movw	r4, r22
     7c6:	3c 01       	movw	r6, r24
     7c8:	60 91 08 01 	lds	r22, 0x0108
     7cc:	70 91 09 01 	lds	r23, 0x0109
     7d0:	07 2e       	mov	r0, r23
     7d2:	00 0c       	add	r0, r0
     7d4:	88 0b       	sbc	r24, r24
     7d6:	99 0b       	sbc	r25, r25
     7d8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     7dc:	9b 01       	movw	r18, r22
     7de:	ac 01       	movw	r20, r24
     7e0:	c5 01       	movw	r24, r10
     7e2:	b4 01       	movw	r22, r8
     7e4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__mulsf3>
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	c3 01       	movw	r24, r6
     7ee:	b2 01       	movw	r22, r4
     7f0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e2       	ldi	r20, 0x20	; 32
     7fa:	51 e4       	ldi	r21, 0x41	; 65
     7fc:	0e 94 2a 0e 	call	0x1c54	; 0x1c54 <__divsf3>
     800:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fixsfsi>
     804:	ab 01       	movw	r20, r22
	previous_errors[error_count] = current_error;
     806:	f7 01       	movw	r30, r14
     808:	11 83       	std	Z+1, r17	; 0x01
     80a:	00 83       	st	Z, r16


	if(++error_count >= number_of_errors_sc)
     80c:	21 96       	adiw	r28, 0x01	; 1
     80e:	d0 93 49 01 	sts	0x0149, r29
     812:	c0 93 48 01 	sts	0x0148, r28
     816:	20 91 04 01 	lds	r18, 0x0104
     81a:	30 91 05 01 	lds	r19, 0x0105
     81e:	c2 17       	cp	r28, r18
     820:	d3 07       	cpc	r29, r19
     822:	24 f0       	brlt	.+8      	; 0x82c <drive_forward_right+0xf4>
		error_count = 0;
     824:	10 92 49 01 	sts	0x0149, r1
     828:	10 92 48 01 	sts	0x0148, r1
	
	if(output >= (laby_left_speed))
     82c:	20 91 17 01 	lds	r18, 0x0117
     830:	30 91 18 01 	lds	r19, 0x0118
     834:	42 17       	cp	r20, r18
     836:	53 07       	cpc	r21, r19
     838:	64 f4       	brge	.+24     	; 0x852 <drive_forward_right+0x11a>
		output = laby_left_speed;
	
	else if(output <= -laby_right_speed)
     83a:	40 91 15 01 	lds	r20, 0x0115
     83e:	50 91 16 01 	lds	r21, 0x0116
     842:	51 95       	neg	r21
     844:	41 95       	neg	r20
     846:	51 09       	sbc	r21, r1
     848:	64 17       	cp	r22, r20
     84a:	75 07       	cpc	r23, r21
     84c:	1c f4       	brge	.+6      	; 0x854 <drive_forward_right+0x11c>
     84e:	ba 01       	movw	r22, r20
     850:	01 c0       	rjmp	.+2      	; 0x854 <drive_forward_right+0x11c>

	if(++error_count >= number_of_errors_sc)
		error_count = 0;
	
	if(output >= (laby_left_speed))
		output = laby_left_speed;
     852:	b9 01       	movw	r22, r18
	
	else if(output <= -laby_right_speed)
		output = -laby_right_speed;
	
	if(output >= 0){
     854:	77 23       	and	r23, r23
     856:	44 f0       	brlt	.+16     	; 0x868 <drive_forward_right+0x130>
		motor_right = laby_right_speed;
     858:	80 91 15 01 	lds	r24, 0x0115
     85c:	88 bd       	out	0x28, r24	; 40
		motor_left = laby_left_speed - output;
     85e:	80 91 17 01 	lds	r24, 0x0117
     862:	86 1b       	sub	r24, r22
     864:	87 bd       	out	0x27, r24	; 39
     866:	05 c0       	rjmp	.+10     	; 0x872 <drive_forward_right+0x13a>
	}
	else{
		motor_left = laby_left_speed;
     868:	27 bd       	out	0x27, r18	; 39
		motor_right = laby_right_speed + output;
     86a:	80 91 15 01 	lds	r24, 0x0115
     86e:	68 0f       	add	r22, r24
     870:	68 bd       	out	0x28, r22	; 40
		motor_left = 57;//80;//57left;
		motor_right = 52;//52right;
		_delay_ms(80);	
		stand_still();
	}*/
}
     872:	df 91       	pop	r29
     874:	cf 91       	pop	r28
     876:	1f 91       	pop	r17
     878:	0f 91       	pop	r16
     87a:	ff 90       	pop	r15
     87c:	ef 90       	pop	r14
     87e:	bf 90       	pop	r11
     880:	af 90       	pop	r10
     882:	9f 90       	pop	r9
     884:	8f 90       	pop	r8
     886:	7f 90       	pop	r7
     888:	6f 90       	pop	r6
     88a:	5f 90       	pop	r5
     88c:	4f 90       	pop	r4
     88e:	08 95       	ret

00000890 <linje>:
float current_position = 0;



	 
void linje(void){
     890:	4f 92       	push	r4
     892:	5f 92       	push	r5
     894:	6f 92       	push	r6
     896:	7f 92       	push	r7
     898:	8f 92       	push	r8
     89a:	9f 92       	push	r9
     89c:	af 92       	push	r10
     89e:	bf 92       	push	r11
     8a0:	cf 92       	push	r12
     8a2:	df 92       	push	r13
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
	cli();
     8a8:	f8 94       	cli
	int current_position_tmp = current_position;
     8aa:	60 91 29 01 	lds	r22, 0x0129
     8ae:	70 91 2a 01 	lds	r23, 0x012A
     8b2:	80 91 2b 01 	lds	r24, 0x012B
     8b6:	90 91 2c 01 	lds	r25, 0x012C
     8ba:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fixsfsi>
	sei();
     8be:	78 94       	sei
	
	current_error = setpoint - current_position_tmp;
     8c0:	20 91 37 01 	lds	r18, 0x0137
     8c4:	30 91 38 01 	lds	r19, 0x0138
     8c8:	a9 01       	movw	r20, r18
     8ca:	46 1b       	sub	r20, r22
     8cc:	57 0b       	sbc	r21, r23
     8ce:	ba 01       	movw	r22, r20
     8d0:	07 2e       	mov	r0, r23
     8d2:	00 0c       	add	r0, r0
     8d4:	88 0b       	sbc	r24, r24
     8d6:	99 0b       	sbc	r25, r25
     8d8:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     8dc:	6b 01       	movw	r12, r22
     8de:	7c 01       	movw	r14, r24
     8e0:	60 93 33 01 	sts	0x0133, r22
     8e4:	70 93 34 01 	sts	0x0134, r23
     8e8:	80 93 35 01 	sts	0x0135, r24
     8ec:	90 93 36 01 	sts	0x0136, r25
	derivate = (current_error -previous_error);					// Tror det var dt som saknades fÃ¶r derivatan
     8f0:	20 91 2d 01 	lds	r18, 0x012D
     8f4:	30 91 2e 01 	lds	r19, 0x012E
     8f8:	40 91 2f 01 	lds	r20, 0x012F
     8fc:	50 91 30 01 	lds	r21, 0x0130
     900:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__subsf3>
     904:	4b 01       	movw	r8, r22
     906:	5c 01       	movw	r10, r24
     908:	60 93 4a 01 	sts	0x014A, r22
     90c:	70 93 4b 01 	sts	0x014B, r23
     910:	80 93 4c 01 	sts	0x014C, r24
     914:	90 93 4d 01 	sts	0x014D, r25
	output = (p_constant * current_error + d_constant * derivate);
     918:	60 91 02 01 	lds	r22, 0x0102
     91c:	70 91 03 01 	lds	r23, 0x0103
     920:	07 2e       	mov	r0, r23
     922:	00 0c       	add	r0, r0
     924:	88 0b       	sbc	r24, r24
     926:	99 0b       	sbc	r25, r25
     928:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     92c:	9b 01       	movw	r18, r22
     92e:	ac 01       	movw	r20, r24
     930:	c7 01       	movw	r24, r14
     932:	b6 01       	movw	r22, r12
     934:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__mulsf3>
     938:	2b 01       	movw	r4, r22
     93a:	3c 01       	movw	r6, r24
     93c:	60 91 00 01 	lds	r22, 0x0100
     940:	70 91 01 01 	lds	r23, 0x0101
     944:	07 2e       	mov	r0, r23
     946:	00 0c       	add	r0, r0
     948:	88 0b       	sbc	r24, r24
     94a:	99 0b       	sbc	r25, r25
     94c:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     950:	9b 01       	movw	r18, r22
     952:	ac 01       	movw	r20, r24
     954:	c5 01       	movw	r24, r10
     956:	b4 01       	movw	r22, r8
     958:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__mulsf3>
     95c:	9b 01       	movw	r18, r22
     95e:	ac 01       	movw	r20, r24
     960:	c3 01       	movw	r24, r6
     962:	b2 01       	movw	r22, r4
     964:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <__addsf3>
     968:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <__fixsfsi>
     96c:	9b 01       	movw	r18, r22
     96e:	70 93 32 01 	sts	0x0132, r23
     972:	60 93 31 01 	sts	0x0131, r22
	previous_error = current_error;
     976:	c0 92 2d 01 	sts	0x012D, r12
     97a:	d0 92 2e 01 	sts	0x012E, r13
     97e:	e0 92 2f 01 	sts	0x012F, r14
     982:	f0 92 30 01 	sts	0x0130, r15
//***********************************
//Reglering
//***********************************
		
	if (fel_antal==0){ //om utanfÃ¶r linje behÃ¶ver kanske en tidsbegrÃ¤nsning 
     986:	40 91 5a 01 	lds	r20, 0x015A
     98a:	50 91 5b 01 	lds	r21, 0x015B
     98e:	45 2b       	or	r20, r21
     990:	e9 f4       	brne	.+58     	; 0x9cc <linje+0x13c>
		PORTB |= (1 << motor_dir_left); //baka tillbaka till linjen fÃ¶r hoppnngsvis
     992:	2e 9a       	sbi	0x05, 6	; 5
		PORTB |= (1 << motor_dir_right);
     994:	2d 9a       	sbi	0x05, 5	; 5
		motor_left = left/(2 * RGB_slow);
     996:	60 91 19 01 	lds	r22, 0x0119
     99a:	70 91 1a 01 	lds	r23, 0x011A
     99e:	66 0f       	add	r22, r22
     9a0:	77 1f       	adc	r23, r23
     9a2:	80 91 68 01 	lds	r24, 0x0168
     9a6:	90 91 69 01 	lds	r25, 0x0169
     9aa:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     9ae:	67 bd       	out	0x27, r22	; 39
		motor_right = right/(2 * RGB_slow);
     9b0:	60 91 19 01 	lds	r22, 0x0119
     9b4:	70 91 1a 01 	lds	r23, 0x011A
     9b8:	66 0f       	add	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	80 91 66 01 	lds	r24, 0x0166
     9c0:	90 91 67 01 	lds	r25, 0x0167
     9c4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     9c8:	68 bd       	out	0x28, r22	; 40
     9ca:	c3 c0       	rjmp	.+390    	; 0xb52 <linje+0x2c2>
	}
	else if(output < 0){							// Utsignalen Ã¤r negativ, beror pÃ¥ derivatan bl.a
     9cc:	77 23       	and	r23, r23
     9ce:	0c f0       	brlt	.+2      	; 0x9d2 <linje+0x142>
     9d0:	57 c0       	rjmp	.+174    	; 0xa80 <linje+0x1f0>
		if(abs(output) >= (right / RGB_slow)){					// FÃ¶r att unvika mÃ¤ttnad i regleringen
     9d2:	9b 01       	movw	r18, r22
     9d4:	77 23       	and	r23, r23
     9d6:	24 f4       	brge	.+8      	; 0x9e0 <linje+0x150>
     9d8:	22 27       	eor	r18, r18
     9da:	33 27       	eor	r19, r19
     9dc:	26 1b       	sub	r18, r22
     9de:	37 0b       	sbc	r19, r23
     9e0:	80 91 66 01 	lds	r24, 0x0166
     9e4:	90 91 67 01 	lds	r25, 0x0167
     9e8:	60 91 19 01 	lds	r22, 0x0119
     9ec:	70 91 1a 01 	lds	r23, 0x011A
     9f0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     9f4:	26 17       	cp	r18, r22
     9f6:	37 07       	cpc	r19, r23
     9f8:	24 f1       	brlt	.+72     	; 0xa42 <linje+0x1b2>
			//PORTB |= (1 << motor_dir_left);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  
     9fa:	2d 9a       	sbi	0x05, 5	; 5
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   
     9fc:	2e 98       	cbi	0x05, 6	; 5
			motor_left = left / RGB_slow;
     9fe:	80 91 68 01 	lds	r24, 0x0168
     a02:	90 91 69 01 	lds	r25, 0x0169
     a06:	60 91 19 01 	lds	r22, 0x0119
     a0a:	70 91 1a 01 	lds	r23, 0x011A
     a0e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     a12:	67 bd       	out	0x27, r22	; 39
			motor_right = (abs(output)- right) / RGB_slow;
     a14:	80 91 31 01 	lds	r24, 0x0131
     a18:	90 91 32 01 	lds	r25, 0x0132
     a1c:	99 23       	and	r25, r25
     a1e:	1c f4       	brge	.+6      	; 0xa26 <linje+0x196>
     a20:	91 95       	neg	r25
     a22:	81 95       	neg	r24
     a24:	91 09       	sbc	r25, r1
     a26:	20 91 66 01 	lds	r18, 0x0166
     a2a:	30 91 67 01 	lds	r19, 0x0167
     a2e:	82 1b       	sub	r24, r18
     a30:	93 0b       	sbc	r25, r19
     a32:	60 91 19 01 	lds	r22, 0x0119
     a36:	70 91 1a 01 	lds	r23, 0x011A
     a3a:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     a3e:	68 bd       	out	0x28, r22	; 40
     a40:	88 c0       	rjmp	.+272    	; 0xb52 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     a42:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     a44:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left / RGB_slow;
     a46:	80 91 68 01 	lds	r24, 0x0168
     a4a:	90 91 69 01 	lds	r25, 0x0169
     a4e:	60 91 19 01 	lds	r22, 0x0119
     a52:	70 91 1a 01 	lds	r23, 0x011A
     a56:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     a5a:	67 bd       	out	0x27, r22	; 39
			motor_right = (right + output) / RGB_slow;
     a5c:	20 91 66 01 	lds	r18, 0x0166
     a60:	30 91 67 01 	lds	r19, 0x0167
     a64:	80 91 31 01 	lds	r24, 0x0131
     a68:	90 91 32 01 	lds	r25, 0x0132
     a6c:	82 0f       	add	r24, r18
     a6e:	93 1f       	adc	r25, r19
     a70:	60 91 19 01 	lds	r22, 0x0119
     a74:	70 91 1a 01 	lds	r23, 0x011A
     a78:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     a7c:	68 bd       	out	0x28, r22	; 40
     a7e:	69 c0       	rjmp	.+210    	; 0xb52 <linje+0x2c2>
		}
	}
	else if(output > 0){							// Utsignalen Ã¤r posetiv, beror pÃ¥ derivatan bl.a
     a80:	16 16       	cp	r1, r22
     a82:	17 06       	cpc	r1, r23
     a84:	0c f0       	brlt	.+2      	; 0xa88 <linje+0x1f8>
     a86:	4b c0       	rjmp	.+150    	; 0xb1e <linje+0x28e>
		if(output >= (left / RGB_slow)){							// FÃ¶r att unvika mÃ¤ttnad i regleringen
     a88:	80 91 68 01 	lds	r24, 0x0168
     a8c:	90 91 69 01 	lds	r25, 0x0169
     a90:	60 91 19 01 	lds	r22, 0x0119
     a94:	70 91 1a 01 	lds	r23, 0x011A
     a98:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     a9c:	26 17       	cp	r18, r22
     a9e:	37 07       	cpc	r19, r23
     aa0:	fc f0       	brlt	.+62     	; 0xae0 <linje+0x250>
			//PORTB |= (1 << motor_dir_right);		// Set motor direction to backward  ****Ã¤ndrade iomed att vi defineat fel motor
			//PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward   ****Ã¤ndrade iomed att vi defineat fel motor
			PORTB |= (1 << motor_dir_left);			// Set motor direction to backward  
     aa2:	2e 9a       	sbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward   
     aa4:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     aa6:	80 91 66 01 	lds	r24, 0x0166
     aaa:	90 91 67 01 	lds	r25, 0x0167
     aae:	60 91 19 01 	lds	r22, 0x0119
     ab2:	70 91 1a 01 	lds	r23, 0x011A
     ab6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     aba:	68 bd       	out	0x28, r22	; 40
			motor_left = (output - left) / RGB_slow;
     abc:	80 91 31 01 	lds	r24, 0x0131
     ac0:	90 91 32 01 	lds	r25, 0x0132
     ac4:	20 91 68 01 	lds	r18, 0x0168
     ac8:	30 91 69 01 	lds	r19, 0x0169
     acc:	82 1b       	sub	r24, r18
     ace:	93 0b       	sbc	r25, r19
     ad0:	60 91 19 01 	lds	r22, 0x0119
     ad4:	70 91 1a 01 	lds	r23, 0x011A
     ad8:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     adc:	67 bd       	out	0x27, r22	; 39
     ade:	39 c0       	rjmp	.+114    	; 0xb52 <linje+0x2c2>
		}
		else {
			PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     ae0:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     ae2:	2d 98       	cbi	0x05, 5	; 5
			motor_right = right / RGB_slow;
     ae4:	80 91 66 01 	lds	r24, 0x0166
     ae8:	90 91 67 01 	lds	r25, 0x0167
     aec:	60 91 19 01 	lds	r22, 0x0119
     af0:	70 91 1a 01 	lds	r23, 0x011A
     af4:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     af8:	68 bd       	out	0x28, r22	; 40
			motor_left = (left - output) / RGB_slow;
     afa:	80 91 68 01 	lds	r24, 0x0168
     afe:	90 91 69 01 	lds	r25, 0x0169
     b02:	20 91 31 01 	lds	r18, 0x0131
     b06:	30 91 32 01 	lds	r19, 0x0132
     b0a:	82 1b       	sub	r24, r18
     b0c:	93 0b       	sbc	r25, r19
     b0e:	60 91 19 01 	lds	r22, 0x0119
     b12:	70 91 1a 01 	lds	r23, 0x011A
     b16:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     b1a:	67 bd       	out	0x27, r22	; 39
     b1c:	1a c0       	rjmp	.+52     	; 0xb52 <linje+0x2c2>
		}
	}
	else if(output==0){
     b1e:	67 2b       	or	r22, r23
     b20:	c1 f4       	brne	.+48     	; 0xb52 <linje+0x2c2>
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     b22:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     b24:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left / RGB_slow;																			 //Om nu detta funkar sÃ¥ nÃ¤r den hoppar mellan 0 och +/-1 kommer den kÃ¶ra rakt, kan nog bli lite / \ pÃ¥ linjen men typish rakt :D
     b26:	80 91 68 01 	lds	r24, 0x0168
     b2a:	90 91 69 01 	lds	r25, 0x0169
     b2e:	60 91 19 01 	lds	r22, 0x0119
     b32:	70 91 1a 01 	lds	r23, 0x011A
     b36:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     b3a:	67 bd       	out	0x27, r22	; 39
		motor_right = right / RGB_slow;
     b3c:	80 91 66 01 	lds	r24, 0x0166
     b40:	90 91 67 01 	lds	r25, 0x0167
     b44:	60 91 19 01 	lds	r22, 0x0119
     b48:	70 91 1a 01 	lds	r23, 0x011A
     b4c:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <__divmodhi4>
     b50:	68 bd       	out	0x28, r22	; 40
	}
}
     b52:	ff 90       	pop	r15
     b54:	ef 90       	pop	r14
     b56:	df 90       	pop	r13
     b58:	cf 90       	pop	r12
     b5a:	bf 90       	pop	r11
     b5c:	af 90       	pop	r10
     b5e:	9f 90       	pop	r9
     b60:	8f 90       	pop	r8
     b62:	7f 90       	pop	r7
     b64:	6f 90       	pop	r6
     b66:	5f 90       	pop	r5
     b68:	4f 90       	pop	r4
     b6a:	08 95       	ret

00000b6c <linje_main>:
int RGB_slow = 1;
int RGB_force = 0;

void linje_main() //funktion so  sköter linjeföjlning och hantering av specialfall
{
	RGB_slow = 1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 1a 01 	sts	0x011A, r25
     b74:	80 93 19 01 	sts	0x0119, r24
	/*if(distans_fram<34){
		start=0; // kör inte in i väggar (värkar som sensor fram ger minimum 30)
		PORTD |= (1 << PD1);
		PORTD |= (1 << PD0);
	}
	else*/ if((RGB_data==1) | (RGB_data==2) | (RGB_data==3)){ // == röd,grön,blå
     b78:	80 91 aa 01 	lds	r24, 0x01AA
     b7c:	81 50       	subi	r24, 0x01	; 1
     b7e:	83 30       	cpi	r24, 0x03	; 3
     b80:	c0 f4       	brcc	.+48     	; 0xbb2 <linje_main+0x46>
		current_position=linje_RGBsveng();
     b82:	62 db       	rcall	.-2364   	; 0x248 <linje_RGBsveng>
     b84:	68 2f       	mov	r22, r24
     b86:	88 0f       	add	r24, r24
     b88:	77 0b       	sbc	r23, r23
     b8a:	88 0b       	sbc	r24, r24
     b8c:	99 0b       	sbc	r25, r25
     b8e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     b92:	60 93 29 01 	sts	0x0129, r22
     b96:	70 93 2a 01 	sts	0x012A, r23
     b9a:	80 93 2b 01 	sts	0x012B, r24
     b9e:	90 93 2c 01 	sts	0x012C, r25
		RGB_slow = 2;
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	90 93 1a 01 	sts	0x011A, r25
     baa:	80 93 19 01 	sts	0x0119, r24
		linje();
     bae:	70 ce       	rjmp	.-800    	; 0x890 <linje>
     bb0:	08 95       	ret
	}
	else if(detect_goal()){
     bb2:	3d dc       	rcall	.-1926   	; 0x42e <detect_goal>
     bb4:	88 23       	and	r24, r24
     bb6:	b1 f0       	breq	.+44     	; 0xbe4 <linje_main+0x78>
		//kör rakt fram tills paserat mål förhoppnngsvis
		PORTB &= ~(1 << motor_dir_left);		// Set motor direction to forward
     bb8:	2e 98       	cbi	0x05, 6	; 5
		PORTB &= ~(1 << motor_dir_right);		// Set motor direction to forward
     bba:	2d 98       	cbi	0x05, 5	; 5
		motor_left = left;
     bbc:	80 91 68 01 	lds	r24, 0x0168
     bc0:	87 bd       	out	0x27, r24	; 39
		motor_right = right;
     bc2:	80 91 66 01 	lds	r24, 0x0166
     bc6:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bc8:	2f ef       	ldi	r18, 0xFF	; 255
     bca:	8f ef       	ldi	r24, 0xFF	; 255
     bcc:	91 e1       	ldi	r25, 0x11	; 17
     bce:	21 50       	subi	r18, 0x01	; 1
     bd0:	80 40       	sbci	r24, 0x00	; 0
     bd2:	90 40       	sbci	r25, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <linje_main+0x62>
     bd6:	00 c0       	rjmp	.+0      	; 0xbd8 <linje_main+0x6c>
     bd8:	00 00       	nop
		_delay_ms(400);
		start=0;
     bda:	10 92 6b 01 	sts	0x016B, r1
     bde:	10 92 6a 01 	sts	0x016A, r1
     be2:	08 95       	ret
		//PORTD |= (1 << PD1);
		//signalera i mål och stanna
	}
	else if(detect_labyrint()){
     be4:	c9 dc       	rcall	.-1646   	; 0x578 <detect_labyrint>
     be6:	88 23       	and	r24, r24
     be8:	31 f0       	breq	.+12     	; 0xbf6 <linje_main+0x8a>
		PORTD |= (1 << PD0);
     bea:	58 9a       	sbi	0x0b, 0	; 11
		//start = 0;
		regulator_mode=0; //byt till kör i labyrintmode(är 2 rätt eller ska det vara 0)
     bec:	10 92 1c 01 	sts	0x011C, r1
     bf0:	10 92 1b 01 	sts	0x011B, r1
     bf4:	08 95       	ret
	}
	else{
		current_position=linje_get_error();
     bf6:	7b da       	rcall	.-2826   	; 0xee <linje_get_error>
     bf8:	bc 01       	movw	r22, r24
     bfa:	99 0f       	add	r25, r25
     bfc:	88 0b       	sbc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <__floatsisf>
     c04:	60 93 29 01 	sts	0x0129, r22
     c08:	70 93 2a 01 	sts	0x012A, r23
     c0c:	80 93 2b 01 	sts	0x012B, r24
     c10:	90 93 2c 01 	sts	0x012C, r25
		linje();
     c14:	3d ce       	rjmp	.-902    	; 0x890 <linje>
     c16:	08 95       	ret

00000c18 <initengine>:

// ------------------------------------------------------------------------------------------------------
// -- Init first time for engine/ motors
// ------------------------------------------------------------------------------------------------------
void initengine(void){
	TCCR0A |= (1 << COM0A1) | (1 << COM0B1) | (1 << WGM01) | (1 << WGM00);  //0xA3; // Initiate fast PWM so that it goes high longer for bigger values on OCR0A and OCR0B
     c18:	84 b5       	in	r24, 0x24	; 36
     c1a:	83 6a       	ori	r24, 0xA3	; 163
     c1c:	84 bd       	out	0x24, r24	; 36
	motor_left=0;      // Initiate speed=0 on both engines
     c1e:	17 bc       	out	0x27, r1	; 39
	motor_right=0;
     c20:	18 bc       	out	0x28, r1	; 40
	TCCR0B |= (1 << CS00) | (1 << CS01) ;       //0x0B;// test differnt values shouldnt matter what it is imo (clk freq for the PWM 1/8 main clk)
     c22:	85 b5       	in	r24, 0x25	; 37
     c24:	83 60       	ori	r24, 0x03	; 3
     c26:	85 bd       	out	0x25, r24	; 37
	
	DDRB = 0x78;								//set I/0 ports
     c28:	88 e7       	ldi	r24, 0x78	; 120
     c2a:	84 b9       	out	0x04, r24	; 4
	PORTB &=  (0 << motor_dir_left) | (0 << motor_dir_right);			//set motors to move forward as default
     c2c:	85 b1       	in	r24, 0x05	; 5
     c2e:	15 b8       	out	0x05, r1	; 5
     c30:	08 95       	ret

00000c32 <timerinit>:
}
// ------------------------------------------------------------------------------------------------------
// -- Timer init with interrupt, first time
// ------------------------------------------------------------------------------------------------------
void timerinit(void){
	DDRD = 0x03; // set dport 0&1 to output
     c32:	83 e0       	ldi	r24, 0x03	; 3
     c34:	8a b9       	out	0x0a, r24	; 10
	TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10); // enable timer compare and prescale 1/1024
     c36:	e1 e8       	ldi	r30, 0x81	; 129
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	8d 60       	ori	r24, 0x0D	; 13
     c3e:	80 83       	st	Z, r24
	OCR1A = 1440; // compare if timer count up to 1440 (0,1*14745600/1024=1440)
     c40:	80 ea       	ldi	r24, 0xA0	; 160
     c42:	95 e0       	ldi	r25, 0x05	; 5
     c44:	90 93 89 00 	sts	0x0089, r25
     c48:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 |= (1 << OCIE1A);
     c4c:	ef e6       	ldi	r30, 0x6F	; 111
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	80 81       	ld	r24, Z
     c52:	82 60       	ori	r24, 0x02	; 2
     c54:	80 83       	st	Z, r24
	TIFR1 |= (1 << OCF1A); // enable timer compare interrupt
     c56:	b1 9a       	sbi	0x16, 1	; 22
     c58:	08 95       	ret

00000c5a <__vector_13>:
}
// -- Interrupt
ISR(TIMER1_COMPA_vect){
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	8f 93       	push	r24
     c66:	9f 93       	push	r25
	//regler_ready=1;
	if(turn_delay < 2)
     c68:	80 91 13 01 	lds	r24, 0x0113
     c6c:	90 91 14 01 	lds	r25, 0x0114
     c70:	82 30       	cpi	r24, 0x02	; 2
     c72:	91 05       	cpc	r25, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <__vector_13+0x26>
		turn_delay++;
     c76:	01 96       	adiw	r24, 0x01	; 1
     c78:	90 93 14 01 	sts	0x0114, r25
     c7c:	80 93 13 01 	sts	0x0113, r24
	
	updaterad_labyrint = true;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	80 93 5d 01 	sts	0x015D, r24
	counter_timer_line_lab++;
     c86:	80 91 62 01 	lds	r24, 0x0162
     c8a:	90 91 63 01 	lds	r25, 0x0163
     c8e:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_lab >= 50){
     c90:	82 33       	cpi	r24, 0x32	; 50
     c92:	91 05       	cpc	r25, r1
     c94:	2c f4       	brge	.+10     	; 0xca0 <__vector_13+0x46>
	//regler_ready=1;
	if(turn_delay < 2)
		turn_delay++;
	
	updaterad_labyrint = true;
	counter_timer_line_lab++;
     c96:	90 93 63 01 	sts	0x0163, r25
     c9a:	80 93 62 01 	sts	0x0162, r24
     c9e:	06 c0       	rjmp	.+12     	; 0xcac <__vector_13+0x52>
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
     ca0:	82 e3       	ldi	r24, 0x32	; 50
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	90 93 63 01 	sts	0x0163, r25
     ca8:	80 93 62 01 	sts	0x0162, r24
	}
	counter_timer_line_RGB++;
     cac:	80 91 64 01 	lds	r24, 0x0164
     cb0:	90 91 65 01 	lds	r25, 0x0165
     cb4:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_RGB >= 50){			
     cb6:	82 33       	cpi	r24, 0x32	; 50
     cb8:	91 05       	cpc	r25, r1
     cba:	2c f4       	brge	.+10     	; 0xcc6 <__vector_13+0x6c>
	updaterad_labyrint = true;
	counter_timer_line_lab++;
	if(counter_timer_line_lab >= 50){
		counter_timer_line_lab = 50;			// för att undvika overflow
	}
	counter_timer_line_RGB++;
     cbc:	90 93 65 01 	sts	0x0165, r25
     cc0:	80 93 64 01 	sts	0x0164, r24
     cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <__vector_13+0x78>
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
     cc6:	82 e3       	ldi	r24, 0x32	; 50
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	90 93 65 01 	sts	0x0165, r25
     cce:	80 93 64 01 	sts	0x0164, r24
	}
	counter_timer_line_goal++;
     cd2:	80 91 60 01 	lds	r24, 0x0160
     cd6:	90 91 61 01 	lds	r25, 0x0161
     cda:	01 96       	adiw	r24, 0x01	; 1
	if(counter_timer_line_goal >= 50)
     cdc:	82 33       	cpi	r24, 0x32	; 50
     cde:	91 05       	cpc	r25, r1
     ce0:	2c f4       	brge	.+10     	; 0xcec <__vector_13+0x92>
	}
	counter_timer_line_RGB++;
	if(counter_timer_line_RGB >= 50){			
		counter_timer_line_RGB = 50;			// för att undvika overflow
	}
	counter_timer_line_goal++;
     ce2:	90 93 61 01 	sts	0x0161, r25
     ce6:	80 93 60 01 	sts	0x0160, r24
     cea:	06 c0       	rjmp	.+12     	; 0xcf8 <__vector_13+0x9e>
	if(counter_timer_line_goal >= 50)
		counter_timer_line_goal = 50;
     cec:	82 e3       	ldi	r24, 0x32	; 50
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	90 93 61 01 	sts	0x0161, r25
     cf4:	80 93 60 01 	sts	0x0160, r24
		
	//count_waypoint++;			//räknare för att köra ur svängar i labyrinter
}
     cf8:	9f 91       	pop	r25
     cfa:	8f 91       	pop	r24
     cfc:	0f 90       	pop	r0
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	0f 90       	pop	r0
     d02:	1f 90       	pop	r1
     d04:	18 95       	reti

00000d06 <interrupt_init>:
// ------------------------------------------------------------------------------------------------------
// -- External interrupt for INT1 and INT2
// ------------------------------------------------------------------------------------------------------
void interrupt_init(void){
	EIMSK |= (1 << INT1) | (1 << INT2);			//Enable INT1 and INT2
     d06:	8d b3       	in	r24, 0x1d	; 29
     d08:	86 60       	ori	r24, 0x06	; 6
     d0a:	8d bb       	out	0x1d, r24	; 29
	EICRA |= (1 << ISC11) | (1 << ISC21);		//The falling edge of INTn generates asynchronously an interrupt request.
     d0c:	e9 e6       	ldi	r30, 0x69	; 105
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	88 62       	ori	r24, 0x28	; 40
     d14:	80 83       	st	Z, r24
     d16:	08 95       	ret

00000d18 <__vector_2>:
}
// -- External interrupt for INT1
ISR(INT1_vect){						// INT1 is Manual/ auto button
     d18:	1f 92       	push	r1
     d1a:	0f 92       	push	r0
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	0f 92       	push	r0
     d20:	11 24       	eor	r1, r1
     d22:	8f 93       	push	r24
     d24:	9f 93       	push	r25
	if(drive_mode==1){
     d26:	80 91 6c 01 	lds	r24, 0x016C
     d2a:	90 91 6d 01 	lds	r25, 0x016D
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	39 f4       	brne	.+14     	; 0xd40 <__vector_2+0x28>
		drive_mode=0;
     d32:	10 92 6d 01 	sts	0x016D, r1
     d36:	10 92 6c 01 	sts	0x016C, r1
		PORTD |= (1 << PD1);
     d3a:	59 9a       	sbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD0);
     d3c:	58 98       	cbi	0x0b, 0	; 11
     d3e:	0c c0       	rjmp	.+24     	; 0xd58 <__vector_2+0x40>
	}
	else{
		start=0;
     d40:	10 92 6b 01 	sts	0x016B, r1
     d44:	10 92 6a 01 	sts	0x016A, r1
		drive_mode=1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	90 93 6d 01 	sts	0x016D, r25
     d50:	80 93 6c 01 	sts	0x016C, r24
		PORTD |= (1 << PD0);
     d54:	58 9a       	sbi	0x0b, 0	; 11
		PORTD &= ~(1 << PD1);
     d56:	59 98       	cbi	0x0b, 1	; 11
	}
	EIFR |= (1<< INTF1);
     d58:	e1 9a       	sbi	0x1c, 1	; 28
}
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	0f 90       	pop	r0
     d60:	0f be       	out	0x3f, r0	; 63
     d62:	0f 90       	pop	r0
     d64:	1f 90       	pop	r1
     d66:	18 95       	reti

00000d68 <__vector_3>:
// -- External interrupt for INT2
ISR(INT2_vect){						// INT2 is start and turn off
     d68:	1f 92       	push	r1
     d6a:	0f 92       	push	r0
     d6c:	0f b6       	in	r0, 0x3f	; 63
     d6e:	0f 92       	push	r0
     d70:	11 24       	eor	r1, r1
     d72:	8f 93       	push	r24
     d74:	9f 93       	push	r25
	if(start==0){
     d76:	80 91 6a 01 	lds	r24, 0x016A
     d7a:	90 91 6b 01 	lds	r25, 0x016B
     d7e:	89 2b       	or	r24, r25
     d80:	39 f4       	brne	.+14     	; 0xd90 <__vector_3+0x28>
		start=1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	90 93 6b 01 	sts	0x016B, r25
     d8a:	80 93 6a 01 	sts	0x016A, r24
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <__vector_3+0x30>
	}
	else{
		start=0;
     d90:	10 92 6b 01 	sts	0x016B, r1
     d94:	10 92 6a 01 	sts	0x016A, r1
	}
	EIFR |= (1<< INTF2);
     d98:	e2 9a       	sbi	0x1c, 2	; 28
}
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <i2c_setup>:
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
	}
}

void i2c_setup(bool master) {
	if (master){
     da8:	88 23       	and	r24, r24
     daa:	69 f0       	breq	.+26     	; 0xdc6 <i2c_setup+0x1e>
		DDRC &=~(1<<PC6);
     dac:	3e 98       	cbi	0x07, 6	; 7
		//PORTC = 1 <<PC6;
		
		DDRC &=~(1<<PC7);
     dae:	3f 98       	cbi	0x07, 7	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK  |= 1<<INT0;					// Enable INT0
     db0:	e8 9a       	sbi	0x1d, 0	; 29
		EICRA |= (1<<ISC01)|(1<<ISC00); // Trigger INT0 on rising edge
     db2:	e9 e6       	ldi	r30, 0x69	; 105
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	83 60       	ori	r24, 0x03	; 3
     dba:	80 83       	st	Z, r24
		TWBR = 0x10;
     dbc:	80 e1       	ldi	r24, 0x10	; 16
     dbe:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0); // set TWI till master
     dc2:	10 92 b9 00 	sts	0x00B9, r1
     dc6:	08 95       	ret

00000dc8 <i2c_send>:
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
     dc8:	8f 92       	push	r8
     dca:	9f 92       	push	r9
     dcc:	af 92       	push	r10
     dce:	bf 92       	push	r11
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
     dde:	df 93       	push	r29
	int number_bytes =(( data[0]>>4 ) & 0x0f);
     de0:	eb 01       	movw	r28, r22
     de2:	08 81       	ld	r16, Y
     de4:	02 95       	swap	r16
     de6:	0f 70       	andi	r16, 0x0F	; 15
     de8:	10 e0       	ldi	r17, 0x00	; 0
     dea:	4b 01       	movw	r8, r22
	int counter = 0;
	int start = TW_START;
     dec:	68 94       	set
     dee:	ee 24       	eor	r14, r14
     df0:	e3 f8       	bld	r14, 3
     df2:	f1 2c       	mov	r15, r1
	}
};
	
bool i2c_send(byte prossesor,byte data[]){ //skicka arayen data till prossesor
	int number_bytes =(( data[0]>>4 ) & 0x0f);
	int counter = 0;
     df4:	40 e0       	ldi	r20, 0x00	; 0
     df6:	50 e0       	ldi	r21, 0x00	; 0
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     df8:	ec eb       	ldi	r30, 0xBC	; 188
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	0f 2e       	mov	r0, r31
     dfe:	f4 ea       	ldi	r31, 0xA4	; 164
     e00:	df 2e       	mov	r13, r31
     e02:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
     e04:	a9 eb       	ldi	r26, 0xB9	; 185
     e06:	b0 e0       	ldi	r27, 0x00	; 0
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     e08:	8e 7f       	andi	r24, 0xFE	; 254
     e0a:	c8 2e       	mov	r12, r24
     e0c:	6b eb       	ldi	r22, 0xBB	; 187
     e0e:	70 e0       	ldi	r23, 0x00	; 0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     e10:	84 e8       	ldi	r24, 0x84	; 132
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	counter++;
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     e12:	68 94       	set
     e14:	aa 24       	eor	r10, r10
     e16:	a4 f8       	bld	r10, 4
     e18:	b1 2c       	mov	r11, r1
	int counter = 0;
	int start = TW_START;
	
	do{
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
     e1a:	d0 82       	st	Z, r13
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
     e1c:	90 81       	ld	r25, Z
     e1e:	99 23       	and	r25, r25
     e20:	ec f7       	brge	.-6      	; 0xe1c <i2c_send+0x54>
	
	if((TWSR & 0xF8) != start) // om status inte är start
     e22:	2c 91       	ld	r18, X
     e24:	28 7f       	andi	r18, 0xF8	; 248
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	2e 15       	cp	r18, r14
     e2a:	3f 05       	cpc	r19, r15
     e2c:	69 f5       	brne	.+90     	; 0xe88 <i2c_send+0xc0>
		return false;		
	TWDR = prossesor&0xfe;//sista bit R/W sätt till Write
     e2e:	eb 01       	movw	r28, r22
     e30:	c8 82       	st	Y, r12
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
     e32:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
     e34:	90 81       	ld	r25, Z
     e36:	99 23       	and	r25, r25
     e38:	ec f7       	brge	.-6      	; 0xe34 <i2c_send+0x6c>
	if((TWSR & 0xF8) !=0x18) //om adress skickat och fått ack
     e3a:	9c 91       	ld	r25, X
     e3c:	98 7f       	andi	r25, 0xF8	; 248
     e3e:	98 31       	cpi	r25, 0x18	; 24
     e40:	29 f0       	breq	.+10     	; 0xe4c <i2c_send+0x84>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     e42:	84 e9       	ldi	r24, 0x94	; 148
     e44:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	1f c0       	rjmp	.+62     	; 0xe8a <i2c_send+0xc2>
	}
		
	TWDR = data[counter];		//placera data i TWI buferten
     e4c:	e4 01       	movw	r28, r8
     e4e:	99 91       	ld	r25, Y+
     e50:	4e 01       	movw	r8, r28
     e52:	eb 01       	movw	r28, r22
     e54:	98 83       	st	Y, r25
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data	
     e56:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK	
     e58:	90 81       	ld	r25, Z
     e5a:	99 23       	and	r25, r25
     e5c:	ec f7       	brge	.-6      	; 0xe58 <i2c_send+0x90>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK) //om data sent och ack recived
     e5e:	9c 91       	ld	r25, X
     e60:	98 7f       	andi	r25, 0xF8	; 248
     e62:	98 32       	cpi	r25, 0x28	; 40
     e64:	29 f0       	breq	.+10     	; 0xe70 <i2c_send+0xa8>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
     e66:	84 e9       	ldi	r24, 0x94	; 148
     e68:	80 93 bc 00 	sts	0x00BC, r24
		return false;
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <i2c_send+0xc2>
	}
	counter++;
     e70:	4f 5f       	subi	r20, 0xFF	; 255
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
     e74:	ea 2c       	mov	r14, r10
     e76:	fb 2c       	mov	r15, r11
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
     e78:	04 17       	cp	r16, r20
     e7a:	15 07       	cpc	r17, r21
     e7c:	74 f6       	brge	.-100    	; 0xe1a <i2c_send+0x52>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
     e7e:	84 e9       	ldi	r24, 0x94	; 148
     e80:	80 93 bc 00 	sts	0x00BC, r24
	return true;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <i2c_send+0xc2>
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status inte är start
		return false;		
     e88:	80 e0       	ldi	r24, 0x00	; 0
	
	start=TW_REP_START;	// om vi ska skicka mer data gör repeated start istället för start
	}while (counter <= number_bytes);	//om vi har mer data att skicka skicka den
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	df 90       	pop	r13
     e98:	cf 90       	pop	r12
     e9a:	bf 90       	pop	r11
     e9c:	af 90       	pop	r10
     e9e:	9f 90       	pop	r9
     ea0:	8f 90       	pop	r8
     ea2:	08 95       	ret

00000ea4 <req_gyro_turn>:
int gyro_right = 0;
int laby_left_speed = 100;
int laby_right_speed = 93;
int turn_delay = 2;

void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	1f 92       	push	r1
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
	byte data[1] = { 0x07 };
     eae:	87 e0       	ldi	r24, 0x07	; 7
     eb0:	89 83       	std	Y+1, r24	; 0x01
	i2c_send(0x06, data);
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	86 e0       	ldi	r24, 0x06	; 6
     eba:	86 df       	rcall	.-244    	; 0xdc8 <i2c_send>
	turning = true;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 5c 01 	sts	0x015C, r24
	turn_delay = 0;
     ec2:	10 92 14 01 	sts	0x0114, r1
     ec6:	10 92 13 01 	sts	0x0113, r1
	while(turn_delay < 2){
		PORTB |= (1 << PB1);
     eca:	29 9a       	sbi	0x05, 1	; 5
void req_gyro_turn(void){ // fuktion man kallar pÃ¥ fÃ¶r att starta Gyro infÃ¶r 90 graders svÃ¤ng
	byte data[1] = { 0x07 };
	i2c_send(0x06, data);
	turning = true;
	turn_delay = 0;
	while(turn_delay < 2){
     ecc:	80 91 13 01 	lds	r24, 0x0113
     ed0:	90 91 14 01 	lds	r25, 0x0114
     ed4:	02 97       	sbiw	r24, 0x02	; 2
     ed6:	cc f3       	brlt	.-14     	; 0xeca <req_gyro_turn+0x26>
		PORTB |= (1 << PB1);
	}
	PORTB &= ~(1 << PB1);
     ed8:	29 98       	cbi	0x05, 1	; 5
	
}
     eda:	0f 90       	pop	r0
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	08 95       	ret

00000ee2 <manual_drive>:
//Funktioner fÃ¶r att styra robot fÃ¶r hÃ¶ger/vÃ¤nster eller framÃ¥t
//--------------------------------------------------------------

void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
     ee2:	20 91 50 01 	lds	r18, 0x0150
     ee6:	30 91 51 01 	lds	r19, 0x0151
     eea:	21 30       	cpi	r18, 0x01	; 1
     eec:	31 05       	cpc	r19, r1
     eee:	49 f4       	brne	.+18     	; 0xf02 <manual_drive+0x20>
				req_gyro_turn();											// Request gyroturn
				turn_left();												// Turn motors on for left spin						
				gyro_left = 1;												
			}
			else if(gyro_left == 1){					// 90 turn done
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
     ef0:	10 92 53 01 	sts	0x0153, r1
     ef4:	10 92 52 01 	sts	0x0152, r1
				gyro_left = 0;
     ef8:	10 92 51 01 	sts	0x0151, r1
     efc:	10 92 50 01 	sts	0x0150, r1
     f00:	08 95       	ret
void manual_drive(){
		//******************************* Om vÃ¤nster eller hÃ¶ger-svÃ¤ng har startats sÃ¥ kÃ¶r vi klart den, skippa andra inkommandon 
		if(gyro_left == 1){
			manual_function = 6;
		}
		else if(gyro_right == 1){
     f02:	80 91 4e 01 	lds	r24, 0x014E
     f06:	90 91 4f 01 	lds	r25, 0x014F
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	71 f4       	brne	.+28     	; 0xf2a <manual_drive+0x48>
			manual_function = 5;	
     f0e:	85 e0       	ldi	r24, 0x05	; 5
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	90 93 53 01 	sts	0x0153, r25
     f16:	80 93 52 01 	sts	0x0152, r24
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
     f1a:	80 91 4e 01 	lds	r24, 0x014E
     f1e:	90 91 4f 01 	lds	r25, 0x014F
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	09 f0       	breq	.+2      	; 0xf28 <manual_drive+0x46>
     f26:	59 c0       	rjmp	.+178    	; 0xfda <manual_drive+0xf8>
     f28:	4f c0       	rjmp	.+158    	; 0xfc8 <manual_drive+0xe6>
		}
		else if(gyro_right == 1){
			manual_function = 5;	
		}
		//*******************************
		if(manual_function == 0){											// Stand still = dont dare to move
     f2a:	80 91 52 01 	lds	r24, 0x0152
     f2e:	90 91 53 01 	lds	r25, 0x0153
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	29 f4       	brne	.+10     	; 0xf40 <manual_drive+0x5e>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
     f36:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
     f38:	2d 98       	cbi	0x05, 5	; 5
			motor_left = 0;
     f3a:	17 bc       	out	0x27, r1	; 39
			motor_right = 0;
     f3c:	18 bc       	out	0x28, r1	; 40
     f3e:	08 95       	ret
		}
		else if(manual_function == 1){										// Forward
     f40:	81 30       	cpi	r24, 0x01	; 1
     f42:	91 05       	cpc	r25, r1
     f44:	49 f4       	brne	.+18     	; 0xf58 <manual_drive+0x76>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
     f46:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
     f48:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
     f4a:	80 91 68 01 	lds	r24, 0x0168
     f4e:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
     f50:	80 91 66 01 	lds	r24, 0x0166
     f54:	88 bd       	out	0x28, r24	; 40
     f56:	08 95       	ret
		}
		else if(manual_function == 2){										// Backward
     f58:	82 30       	cpi	r24, 0x02	; 2
     f5a:	91 05       	cpc	r25, r1
     f5c:	59 f4       	brne	.+22     	; 0xf74 <manual_drive+0x92>
			PORTB |= (1 << motor_dir_left) | (1 << motor_dir_right);		// Set motor direction to backward
     f5e:	85 b1       	in	r24, 0x05	; 5
     f60:	80 66       	ori	r24, 0x60	; 96
     f62:	85 b9       	out	0x05, r24	; 5
			motor_left = left-13;											// -n for adjusting so the motors "speed" are the same :D :D  ***Change depends on speed :D***
     f64:	80 91 68 01 	lds	r24, 0x0168
     f68:	8d 50       	subi	r24, 0x0D	; 13
     f6a:	87 bd       	out	0x27, r24	; 39
			motor_right = right;
     f6c:	80 91 66 01 	lds	r24, 0x0166
     f70:	88 bd       	out	0x28, r24	; 40
     f72:	08 95       	ret
		}
		else if(manual_function == 3){										// Rightforward
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	91 05       	cpc	r25, r1
     f78:	81 f4       	brne	.+32     	; 0xf9a <manual_drive+0xb8>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
     f7a:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
     f7c:	2d 98       	cbi	0x05, 5	; 5
			motor_left = left;
     f7e:	80 91 68 01 	lds	r24, 0x0168
     f82:	87 bd       	out	0x27, r24	; 39
			motor_right = (right - (right/3));								// Speed value minus one third of the speedvalue
     f84:	20 91 66 01 	lds	r18, 0x0166
     f88:	90 91 67 01 	lds	r25, 0x0167
     f8c:	82 2f       	mov	r24, r18
     f8e:	63 e0       	ldi	r22, 0x03	; 3
     f90:	70 e0       	ldi	r23, 0x00	; 0
     f92:	ea d7       	rcall	.+4052   	; 0x1f68 <__divmodhi4>
     f94:	26 1b       	sub	r18, r22
     f96:	28 bd       	out	0x28, r18	; 40
     f98:	08 95       	ret
		}
		else if(manual_function == 4){										// Leftforward
     f9a:	84 30       	cpi	r24, 0x04	; 4
     f9c:	91 05       	cpc	r25, r1
     f9e:	81 f4       	brne	.+32     	; 0xfc0 <manual_drive+0xde>
			PORTB &= ~(1 << motor_dir_left);								// Set motor direction to forward
     fa0:	2e 98       	cbi	0x05, 6	; 5
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
     fa2:	2d 98       	cbi	0x05, 5	; 5
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
     fa4:	20 91 68 01 	lds	r18, 0x0168
     fa8:	90 91 69 01 	lds	r25, 0x0169
     fac:	82 2f       	mov	r24, r18
     fae:	63 e0       	ldi	r22, 0x03	; 3
     fb0:	70 e0       	ldi	r23, 0x00	; 0
     fb2:	da d7       	rcall	.+4020   	; 0x1f68 <__divmodhi4>
     fb4:	26 1b       	sub	r18, r22
     fb6:	27 bd       	out	0x27, r18	; 39
			motor_right = right;
     fb8:	80 91 66 01 	lds	r24, 0x0166
     fbc:	88 bd       	out	0x28, r24	; 40
     fbe:	08 95       	ret
		}
		else if(manual_function == 5){										// Spin right
     fc0:	85 30       	cpi	r24, 0x05	; 5
     fc2:	91 05       	cpc	r25, r1
     fc4:	a9 f4       	brne	.+42     	; 0xff0 <manual_drive+0x10e>
     fc6:	26 c0       	rjmp	.+76     	; 0x1014 <manual_drive+0x132>
			if(gyro_right == 0){											// Only once when pressed
				req_gyro_turn();											// Request gyroturn
     fc8:	6d df       	rcall	.-294    	; 0xea4 <req_gyro_turn>
				turn_right();												// Turn motors on for left spin	
     fca:	00 db       	rcall	.-2560   	; 0x5cc <turn_right>
				gyro_right = 1; 
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	90 93 4f 01 	sts	0x014F, r25
     fd4:	80 93 4e 01 	sts	0x014E, r24
     fd8:	08 95       	ret
			}
			else if(gyro_right == 1){				// 90 turn done
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	09 f5       	brne	.+66     	; 0x1020 <manual_drive+0x13e>
				manual_function = 0;										// kan behÃ¶vas nollstÃ¤llning av funktion (probably not)
     fde:	10 92 53 01 	sts	0x0153, r1
     fe2:	10 92 52 01 	sts	0x0152, r1
				gyro_right = 0;												
     fe6:	10 92 4f 01 	sts	0x014F, r1
     fea:	10 92 4e 01 	sts	0x014E, r1
     fee:	08 95       	ret
			}
		}
		else if(manual_function == 6){										// Spin left
     ff0:	06 97       	sbiw	r24, 0x06	; 6
     ff2:	59 f4       	brne	.+22     	; 0x100a <manual_drive+0x128>
			if(gyro_left == 0){												// Only once when pressed
     ff4:	23 2b       	or	r18, r19
     ff6:	a1 f4       	brne	.+40     	; 0x1020 <manual_drive+0x13e>
				req_gyro_turn();											// Request gyroturn
     ff8:	55 df       	rcall	.-342    	; 0xea4 <req_gyro_turn>
				turn_left();												// Turn motors on for left spin						
     ffa:	e1 da       	rcall	.-2622   	; 0x5be <turn_left>
				gyro_left = 1;												
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	90 93 51 01 	sts	0x0151, r25
    1004:	80 93 50 01 	sts	0x0150, r24
    1008:	08 95       	ret
				manual_function = 0;										//kanske behÃ¶vs nollstÃ¤lla funktion  (probably not monsieur)
				gyro_left = 0;
			}
		}
		else{
			manual_function=0;												// why not :D 
    100a:	10 92 53 01 	sts	0x0153, r1
    100e:	10 92 52 01 	sts	0x0152, r1
    1012:	08 95       	ret
			PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
			motor_left = (left - (left/3));									// Speed value minus one third of the speedvalue
			motor_right = right;
		}
		else if(manual_function == 5){										// Spin right
			if(gyro_right == 0){											// Only once when pressed
    1014:	80 91 4e 01 	lds	r24, 0x014E
    1018:	90 91 4f 01 	lds	r25, 0x014F
    101c:	89 2b       	or	r24, r25
    101e:	a1 f2       	breq	.-88     	; 0xfc8 <manual_drive+0xe6>
    1020:	08 95       	ret

00001022 <PD_for_lab>:
int number_of_errors = 4;
int previous_errors_left[10];
int previous_errors_right[10];
int error_count = 0;

void PD_for_lab(int distance_left, int distance_right, int distance_front){
    1022:	4f 92       	push	r4
    1024:	5f 92       	push	r5
    1026:	6f 92       	push	r6
    1028:	7f 92       	push	r7
    102a:	8f 92       	push	r8
    102c:	9f 92       	push	r9
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	7a 01       	movw	r14, r20
	//räkna ut fel höger
	current_error_lab = distance_left - distance_right; //-sensor_left_tmp
    1040:	8c 01       	movw	r16, r24
    1042:	06 1b       	sub	r16, r22
    1044:	17 0b       	sbc	r17, r23
    1046:	10 93 a9 01 	sts	0x01A9, r17
    104a:	00 93 a8 01 	sts	0x01A8, r16
	derivate = current_error_lab - previous_errors_right[error_count];///10; //
    104e:	c0 91 48 01 	lds	r28, 0x0148
    1052:	d0 91 49 01 	lds	r29, 0x0149
    1056:	cc 0f       	add	r28, r28
    1058:	dd 1f       	adc	r29, r29
    105a:	cc 58       	subi	r28, 0x8C	; 140
    105c:	de 4f       	sbci	r29, 0xFE	; 254
    105e:	88 81       	ld	r24, Y
    1060:	99 81       	ldd	r25, Y+1	; 0x01
    1062:	b8 01       	movw	r22, r16
    1064:	68 1b       	sub	r22, r24
    1066:	79 0b       	sbc	r23, r25
    1068:	07 2e       	mov	r0, r23
    106a:	00 0c       	add	r0, r0
    106c:	88 0b       	sbc	r24, r24
    106e:	99 0b       	sbc	r25, r25
    1070:	8c d6       	rcall	.+3352   	; 0x1d8a <__floatsisf>
    1072:	4b 01       	movw	r8, r22
    1074:	5c 01       	movw	r10, r24
    1076:	60 93 4a 01 	sts	0x014A, r22
    107a:	70 93 4b 01 	sts	0x014B, r23
    107e:	80 93 4c 01 	sts	0x014C, r24
    1082:	90 93 4d 01 	sts	0x014D, r25
	/*if (derivate < 3 && derivate > -3)
		derivate = 0;*/
	output_right = (p_constant_lab * current_error_lab + d_constant_lab * derivate)/10;
    1086:	80 91 11 01 	lds	r24, 0x0111
    108a:	90 91 12 01 	lds	r25, 0x0112
    108e:	08 9f       	mul	r16, r24
    1090:	b0 01       	movw	r22, r0
    1092:	09 9f       	mul	r16, r25
    1094:	70 0d       	add	r23, r0
    1096:	18 9f       	mul	r17, r24
    1098:	70 0d       	add	r23, r0
    109a:	11 24       	eor	r1, r1
    109c:	07 2e       	mov	r0, r23
    109e:	00 0c       	add	r0, r0
    10a0:	88 0b       	sbc	r24, r24
    10a2:	99 0b       	sbc	r25, r25
    10a4:	72 d6       	rcall	.+3300   	; 0x1d8a <__floatsisf>
    10a6:	2b 01       	movw	r4, r22
    10a8:	3c 01       	movw	r6, r24
    10aa:	60 91 0f 01 	lds	r22, 0x010F
    10ae:	70 91 10 01 	lds	r23, 0x0110
    10b2:	07 2e       	mov	r0, r23
    10b4:	00 0c       	add	r0, r0
    10b6:	88 0b       	sbc	r24, r24
    10b8:	99 0b       	sbc	r25, r25
    10ba:	67 d6       	rcall	.+3278   	; 0x1d8a <__floatsisf>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	c5 01       	movw	r24, r10
    10c2:	b4 01       	movw	r22, r8
    10c4:	ee d6       	rcall	.+3548   	; 0x1ea2 <__mulsf3>
    10c6:	9b 01       	movw	r18, r22
    10c8:	ac 01       	movw	r20, r24
    10ca:	c3 01       	movw	r24, r6
    10cc:	b2 01       	movw	r22, r4
    10ce:	5e d5       	rcall	.+2748   	; 0x1b8c <__addsf3>
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e2       	ldi	r20, 0x20	; 32
    10d6:	51 e4       	ldi	r21, 0x41	; 65
    10d8:	bd d5       	rcall	.+2938   	; 0x1c54 <__divsf3>
    10da:	24 d6       	rcall	.+3144   	; 0x1d24 <__fixsfsi>
    10dc:	70 93 c3 01 	sts	0x01C3, r23
    10e0:	60 93 c2 01 	sts	0x01C2, r22
	previous_errors_right[error_count] = current_error_lab;
    10e4:	19 83       	std	Y+1, r17	; 0x01
    10e6:	08 83       	st	Y, r16
	
	if(output_right >= 0){
    10e8:	77 23       	and	r23, r23
    10ea:	bc f0       	brlt	.+46     	; 0x111a <PD_for_lab+0xf8>
		motor_right = laby_right_speed;
    10ec:	80 91 15 01 	lds	r24, 0x0115
    10f0:	88 bd       	out	0x28, r24	; 40
		if(output_right > laby_left_speed)
    10f2:	80 91 17 01 	lds	r24, 0x0117
    10f6:	90 91 18 01 	lds	r25, 0x0118
    10fa:	20 91 c2 01 	lds	r18, 0x01C2
    10fe:	30 91 c3 01 	lds	r19, 0x01C3
    1102:	82 17       	cp	r24, r18
    1104:	93 07       	cpc	r25, r19
    1106:	24 f4       	brge	.+8      	; 0x1110 <PD_for_lab+0xee>
			output_right = laby_left_speed;
    1108:	90 93 c3 01 	sts	0x01C3, r25
    110c:	80 93 c2 01 	sts	0x01C2, r24
		motor_left = laby_left_speed - output_right;	
    1110:	90 91 c2 01 	lds	r25, 0x01C2
    1114:	89 1b       	sub	r24, r25
    1116:	87 bd       	out	0x27, r24	; 39
    1118:	1a c0       	rjmp	.+52     	; 0x114e <PD_for_lab+0x12c>
	}
	else if(output_right < 0){
		motor_left = laby_left_speed;
    111a:	80 91 17 01 	lds	r24, 0x0117
    111e:	87 bd       	out	0x27, r24	; 39
		if(output_right < -laby_right_speed)
    1120:	80 91 15 01 	lds	r24, 0x0115
    1124:	90 91 16 01 	lds	r25, 0x0116
    1128:	22 27       	eor	r18, r18
    112a:	33 27       	eor	r19, r19
    112c:	28 1b       	sub	r18, r24
    112e:	39 0b       	sbc	r19, r25
    1130:	40 91 c2 01 	lds	r20, 0x01C2
    1134:	50 91 c3 01 	lds	r21, 0x01C3
    1138:	42 17       	cp	r20, r18
    113a:	53 07       	cpc	r21, r19
    113c:	24 f4       	brge	.+8      	; 0x1146 <PD_for_lab+0x124>
			output_right = -laby_right_speed;
    113e:	30 93 c3 01 	sts	0x01C3, r19
    1142:	20 93 c2 01 	sts	0x01C2, r18
		motor_right = laby_right_speed + output_right;	
    1146:	90 91 c2 01 	lds	r25, 0x01C2
    114a:	89 0f       	add	r24, r25
    114c:	88 bd       	out	0x28, r24	; 40
			stand_still();
			for(int i = 0; i < number_of_errors ; i++){
				previous_errors_right[i] = 0;
		}
		}*/
	if(distance_front <= 35){
    114e:	84 e2       	ldi	r24, 0x24	; 36
    1150:	e8 16       	cp	r14, r24
    1152:	f1 04       	cpc	r15, r1
    1154:	14 f4       	brge	.+4      	; 0x115a <PD_for_lab+0x138>
		req_gyro_turn();
    1156:	a6 de       	rcall	.-692    	; 0xea4 <req_gyro_turn>
		turn_right();//	output_right = -right;//motor_right = 0;
    1158:	39 da       	rcall	.-2958   	; 0x5cc <turn_right>
	//if(error_count == 0)
	//	PORTD ^= (1 << PD0);
	
	//motor_left = left + output_left;
	//motor_right = right + output_right;
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	9f 90       	pop	r9
    116c:	8f 90       	pop	r8
    116e:	7f 90       	pop	r7
    1170:	6f 90       	pop	r6
    1172:	5f 90       	pop	r5
    1174:	4f 90       	pop	r4
    1176:	08 95       	ret

00001178 <waypoint_lab>:

//-------------------------------------
//Funktioner som kommer styra roboten vid specialfall som tillexempel t-korsning eller en vanlig sväng
//-------------------------------------
void waypoint_lab(int distance_left,int distance_right,int distance_front,int st_value){ //t-korsning 
    1178:	fc 01       	movw	r30, r24
	//PORTD ^= ( 1 << PD1 );
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    117a:	90 91 46 01 	lds	r25, 0x0146
    117e:	91 11       	cpse	r25, r1
    1180:	40 c0       	rjmp	.+128    	; 0x1202 <waypoint_lab+0x8a>
    1182:	80 91 06 01 	lds	r24, 0x0106
    1186:	90 91 07 01 	lds	r25, 0x0107
    118a:	84 17       	cp	r24, r20
    118c:	95 07       	cpc	r25, r21
    118e:	24 f4       	brge	.+8      	; 0x1198 <waypoint_lab+0x20>
		drive_forward();
    1190:	0d da       	rcall	.-3046   	; 0x5ac <drive_forward>
		turn_done = false;
    1192:	10 92 45 01 	sts	0x0145, r1
    1196:	08 95       	ret
	}
	
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		ongoing_turn = true;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    119e:	80 93 47 01 	sts	0x0147, r24
		turn_done = false;
    11a2:	10 92 45 01 	sts	0x0145, r1
		stand_still();
    11a6:	fd c9       	rjmp	.-3078   	; 0x5a2 <stand_still>
    11a8:	08 95       	ret
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
		
		if(RGB_data == 3){					//RGB_data="blå" alltså sväng vänster vänster=blå
    11aa:	80 91 aa 01 	lds	r24, 0x01AA
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	19 f4       	brne	.+6      	; 0x11b8 <waypoint_lab+0x40>
			req_gyro_turn();
    11b2:	78 de       	rcall	.-784    	; 0xea4 <req_gyro_turn>
			turn_left();
    11b4:	04 da       	rcall	.-3064   	; 0x5be <turn_left>
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <waypoint_lab+0x44>
		}
		else {
			req_gyro_turn();
    11b8:	75 de       	rcall	.-790    	; 0xea4 <req_gyro_turn>
			turn_right();					//RGB_data="röd" alltså sväng höger
    11ba:	08 da       	rcall	.-3056   	; 0x5cc <turn_right>
		}
		start_turn = false;					//Säger att svängen har inledits för att inte gå in i den här if-satsen igen
    11bc:	10 92 47 01 	sts	0x0147, r1
    11c0:	08 95       	ret
	}
	
	else if(ongoing_turn && !turning && (distance_left > st_value || distance_right > st_value)){	//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    11c2:	80 91 5c 01 	lds	r24, 0x015C
    11c6:	81 11       	cpse	r24, r1
    11c8:	0b c0       	rjmp	.+22     	; 0x11e0 <waypoint_lab+0x68>
    11ca:	2e 17       	cp	r18, r30
    11cc:	3f 07       	cpc	r19, r31
    11ce:	1c f0       	brlt	.+6      	; 0x11d6 <waypoint_lab+0x5e>
    11d0:	26 17       	cp	r18, r22
    11d2:	37 07       	cpc	r19, r23
    11d4:	2c f4       	brge	.+10     	; 0x11e0 <waypoint_lab+0x68>
		turn_done = true;
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	80 93 45 01 	sts	0x0145, r24
		//count_waypoint = 0;
		drive_forward(); // Byt till att reglera mot vägg
    11dc:	e7 c9       	rjmp	.-3122   	; 0x5ac <drive_forward>
    11de:	08 95       	ret
	}
	
	else if(ongoing_turn && turn_done && distance_right < st_value && distance_left < st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    11e0:	80 91 45 01 	lds	r24, 0x0145
    11e4:	88 23       	and	r24, r24
    11e6:	91 f0       	breq	.+36     	; 0x120c <waypoint_lab+0x94>
    11e8:	62 17       	cp	r22, r18
    11ea:	73 07       	cpc	r23, r19
    11ec:	7c f4       	brge	.+30     	; 0x120c <waypoint_lab+0x94>
    11ee:	e2 17       	cp	r30, r18
    11f0:	f3 07       	cpc	r31, r19
    11f2:	64 f4       	brge	.+24     	; 0x120c <waypoint_lab+0x94>
		waypoint = false;						
    11f4:	10 92 3c 01 	sts	0x013C, r1
		ongoing_turn = false;
    11f8:	10 92 46 01 	sts	0x0146, r1
		prepare_special_case = false;
    11fc:	10 92 43 01 	sts	0x0143, r1
    1200:	08 95       	ret
		start_turn = true;
		turn_done = false;
		stand_still();
	}
	
	else if(start_turn){					//startar svängen, kollar RGB, om vänster gira vänster annars gira höger(med eller utan rgb indikation).
    1202:	80 91 47 01 	lds	r24, 0x0147
    1206:	81 11       	cpse	r24, r1
    1208:	d0 cf       	rjmp	.-96     	; 0x11aa <waypoint_lab+0x32>
    120a:	db cf       	rjmp	.-74     	; 0x11c2 <waypoint_lab+0x4a>
    120c:	08 95       	ret

0000120e <oneway_turn_lab>:
		ongoing_turn = false;
		prepare_special_case = false;
	}
}

void oneway_turn_lab(int distance_left,int distance_right,int distance_front,int st_value){//roboten kommer fram till en enkel kurva antingen till höger eller vänster
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	ec 01       	movw	r28, r24
    1218:	8b 01       	movw	r16, r22
	PORTD ^= ( 1 << PD0 );
    121a:	8b b1       	in	r24, 0x0b	; 11
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	98 27       	eor	r25, r24
    1220:	9b b9       	out	0x0b, r25	; 11
	if(!ongoing_turn && distance_front > min_distance_front){    //---kör fram i korsningen för att prepa sväng
    1222:	80 91 46 01 	lds	r24, 0x0146
    1226:	81 11       	cpse	r24, r1
    1228:	14 c0       	rjmp	.+40     	; 0x1252 <oneway_turn_lab+0x44>
    122a:	80 91 06 01 	lds	r24, 0x0106
    122e:	90 91 07 01 	lds	r25, 0x0107
    1232:	84 17       	cp	r24, r20
    1234:	95 07       	cpc	r25, r21
    1236:	24 f4       	brge	.+8      	; 0x1240 <oneway_turn_lab+0x32>
		drive_forward();
    1238:	b9 d9       	rcall	.-3214   	; 0x5ac <drive_forward>
		turn_done = false;
    123a:	10 92 45 01 	sts	0x0145, r1
    123e:	4e c0       	rjmp	.+156    	; 0x12dc <oneway_turn_lab+0xce>
	}
	else if(!ongoing_turn && distance_front <= min_distance_front){			// redo att påbörja sväng
		turn_done = false;
    1240:	10 92 45 01 	sts	0x0145, r1
		ongoing_turn = true;
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    124a:	80 93 47 01 	sts	0x0147, r24
		stand_still();
    124e:	a9 d9       	rcall	.-3246   	; 0x5a2 <stand_still>
    1250:	45 c0       	rjmp	.+138    	; 0x12dc <oneway_turn_lab+0xce>
	}
	else if(start_turn){	
    1252:	80 91 47 01 	lds	r24, 0x0147
    1256:	88 23       	and	r24, r24
    1258:	d1 f0       	breq	.+52     	; 0x128e <oneway_turn_lab+0x80>
		start_turn = false;									//Roboten är inne i kurvan och redo o svänga 
    125a:	10 92 47 01 	sts	0x0147, r1
		if(distance_left > st_value){						//Kollar avstånd till höger och vänster för att -												//se vilket håll det ska svängas och inleder sedan sväng
    125e:	2c 17       	cp	r18, r28
    1260:	3d 07       	cpc	r19, r29
    1262:	4c f4       	brge	.+18     	; 0x1276 <oneway_turn_lab+0x68>
			req_gyro_turn();
    1264:	1f de       	rcall	.-962    	; 0xea4 <req_gyro_turn>
			turn_left();
    1266:	ab d9       	rcall	.-3242   	; 0x5be <turn_left>
			regulate_side = 1;
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	90 93 3e 01 	sts	0x013E, r25
    1270:	80 93 3d 01 	sts	0x013D, r24
    1274:	33 c0       	rjmp	.+102    	; 0x12dc <oneway_turn_lab+0xce>
		}
		else if(distance_right > st_value){
    1276:	26 17       	cp	r18, r22
    1278:	37 07       	cpc	r19, r23
    127a:	84 f5       	brge	.+96     	; 0x12dc <oneway_turn_lab+0xce>
			req_gyro_turn();
    127c:	13 de       	rcall	.-986    	; 0xea4 <req_gyro_turn>
			turn_right();
    127e:	a6 d9       	rcall	.-3252   	; 0x5cc <turn_right>
			regulate_side = 2;
    1280:	82 e0       	ldi	r24, 0x02	; 2
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	90 93 3e 01 	sts	0x013E, r25
    1288:	80 93 3d 01 	sts	0x013D, r24
    128c:	27 c0       	rjmp	.+78     	; 0x12dc <oneway_turn_lab+0xce>
		//previous_right = 0;
		//previous_left = 0;
		//return;
	}
	
	else if(ongoing_turn && !turn_done && (distance_left > st_value || distance_right > st_value)){					//Gyrot singnalerar att svängen är klar och det är klart att börja köra ur den
    128e:	80 91 45 01 	lds	r24, 0x0145
    1292:	81 11       	cpse	r24, r1
    1294:	23 c0       	rjmp	.+70     	; 0x12dc <oneway_turn_lab+0xce>
    1296:	2c 17       	cp	r18, r28
    1298:	3d 07       	cpc	r19, r29
    129a:	1c f0       	brlt	.+6      	; 0x12a2 <oneway_turn_lab+0x94>
    129c:	26 17       	cp	r18, r22
    129e:	37 07       	cpc	r19, r23
    12a0:	74 f4       	brge	.+28     	; 0x12be <oneway_turn_lab+0xb0>
		//count_waypoint = 0; //oneway_turn
		//gyro_turn = 0;
		//drive_forward();
		//drive_forward();
		if(regulate_side == 1)
    12a2:	80 91 3d 01 	lds	r24, 0x013D
    12a6:	90 91 3e 01 	lds	r25, 0x013E
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <oneway_turn_lab+0xa8>
			drive_forward_right(distance_right, distance_front);
    12ae:	ba 01       	movw	r22, r20
    12b0:	c8 01       	movw	r24, r16
    12b2:	42 da       	rcall	.-2940   	; 0x738 <drive_forward_right>
    12b4:	13 c0       	rjmp	.+38     	; 0x12dc <oneway_turn_lab+0xce>
		else 
			drive_forward_left(distance_left, distance_front);	
    12b6:	ba 01       	movw	r22, r20
    12b8:	ce 01       	movw	r24, r28
    12ba:	8f d9       	rcall	.-3298   	; 0x5da <drive_forward_left>
    12bc:	0f c0       	rjmp	.+30     	; 0x12dc <oneway_turn_lab+0xce>
		//drive_forward(); // Byt till left eller right beroende på riktning
	}
	
	else if(!turn_done && distance_left < st_value && distance_right < st_value /*&& previous_left < st_value && previous_right < st_value*/){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    12be:	c2 17       	cp	r28, r18
    12c0:	d3 07       	cpc	r29, r19
    12c2:	64 f4       	brge	.+24     	; 0x12dc <oneway_turn_lab+0xce>
    12c4:	62 17       	cp	r22, r18
    12c6:	73 07       	cpc	r23, r19
    12c8:	4c f4       	brge	.+18     	; 0x12dc <oneway_turn_lab+0xce>
		turn_done = true;
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	80 93 45 01 	sts	0x0145, r24
		oneway_turn = false;
    12d0:	10 92 3b 01 	sts	0x013B, r1
		ongoing_turn = false;
    12d4:	10 92 46 01 	sts	0x0146, r1
		//PORTD ^= (1 << PD0);
		prepare_special_case = false;
    12d8:	10 92 43 01 	sts	0x0143, r1
	}
	previous_right = distance_right;
    12dc:	10 93 42 01 	sts	0x0142, r17
    12e0:	00 93 41 01 	sts	0x0141, r16
	previous_left = distance_left;
    12e4:	d0 93 40 01 	sts	0x0140, r29
    12e8:	c0 93 3f 01 	sts	0x013F, r28
}
    12ec:	df 91       	pop	r29
    12ee:	cf 91       	pop	r28
    12f0:	1f 91       	pop	r17
    12f2:	0f 91       	pop	r16
    12f4:	08 95       	ret

000012f6 <twoway_turn_left_lab>:


//Måste testas
void twoway_turn_left_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram	
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    1300:	8b 01       	movw	r16, r22
	PORTD |= (1 << PD1);
    1302:	59 9a       	sbi	0x0b, 1	; 11
	if(!ongoing_turn /*&& ++count_waypoint <= 1*/){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    1304:	80 91 46 01 	lds	r24, 0x0146
    1308:	81 11       	cpse	r24, r1
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <twoway_turn_left_lab+0x2c>
		ongoing_turn = true;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    1312:	80 93 47 01 	sts	0x0147, r24
		stand_still();
    1316:	45 d9       	rcall	.-3446   	; 0x5a2 <stand_still>
		turn_done = false;
    1318:	10 92 45 01 	sts	0x0145, r1
		first_time = false;
    131c:	10 92 0c 01 	sts	0x010C, r1
    1320:	7a c0       	rjmp	.+244    	; 0x1416 <twoway_turn_left_lab+0x120>
		//count_waypoint = 0;
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1322:	80 91 47 01 	lds	r24, 0x0147
    1326:	88 23       	and	r24, r24
    1328:	c1 f0       	breq	.+48     	; 0x135a <twoway_turn_left_lab+0x64>
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    132a:	10 92 47 01 	sts	0x0147, r1
		if(RGB_data != 3){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    132e:	80 91 aa 01 	lds	r24, 0x01AA
    1332:	83 30       	cpi	r24, 0x03	; 3
    1334:	39 f0       	breq	.+14     	; 0x1344 <twoway_turn_left_lab+0x4e>
			drive_forward();
    1336:	3a d9       	rcall	.-3468   	; 0x5ac <drive_forward>
			//drive_forward_right(distance_right, distance_front);
			turn_done = true;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	80 93 45 01 	sts	0x0145, r24
			regler_against_wall = true;
    133e:	80 93 44 01 	sts	0x0144, r24
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <twoway_turn_left_lab+0x52>
			}
		else {						//RGB säger att roboten ska svänga vänster så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    1344:	af dd       	rcall	.-1186   	; 0xea4 <req_gyro_turn>
			turn_left();
    1346:	3b d9       	rcall	.-3466   	; 0x5be <turn_left>
		}
			
		previous_right = 0;
    1348:	10 92 42 01 	sts	0x0142, r1
    134c:	10 92 41 01 	sts	0x0141, r1
		previous_left = 0;
    1350:	10 92 40 01 	sts	0x0140, r1
    1354:	10 92 3f 01 	sts	0x013F, r1
		return;
    1358:	6d c0       	rjmp	.+218    	; 0x1434 <twoway_turn_left_lab+0x13e>
	}
	
	// Rakt fram11
	else if(regler_against_wall && (distance_left > st_value )){
    135a:	80 91 44 01 	lds	r24, 0x0144
    135e:	88 23       	and	r24, r24
    1360:	31 f0       	breq	.+12     	; 0x136e <twoway_turn_left_lab+0x78>
    1362:	2c 17       	cp	r18, r28
    1364:	3d 07       	cpc	r19, r29
    1366:	0c f0       	brlt	.+2      	; 0x136a <twoway_turn_left_lab+0x74>
    1368:	5f c0       	rjmp	.+190    	; 0x1428 <twoway_turn_left_lab+0x132>
		drive_forward();
    136a:	20 d9       	rcall	.-3520   	; 0x5ac <drive_forward>
    136c:	54 c0       	rjmp	.+168    	; 0x1416 <twoway_turn_left_lab+0x120>
		//drive_forward_right(distance_right, distance_front);
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    136e:	80 91 aa 01 	lds	r24, 0x01AA
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	19 f1       	breq	.+70     	; 0x13bc <twoway_turn_left_lab+0xc6>
    1376:	2c 17       	cp	r18, r28
    1378:	3d 07       	cpc	r19, r29
    137a:	4c f1       	brlt	.+82     	; 0x13ce <twoway_turn_left_lab+0xd8>
    137c:	20 17       	cp	r18, r16
    137e:	31 07       	cpc	r19, r17
    1380:	34 f1       	brlt	.+76     	; 0x13ce <twoway_turn_left_lab+0xd8>
    1382:	80 91 3f 01 	lds	r24, 0x013F
    1386:	90 91 40 01 	lds	r25, 0x0140
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	fc f4       	brge	.+62     	; 0x13ce <twoway_turn_left_lab+0xd8>
    1390:	80 91 41 01 	lds	r24, 0x0141
    1394:	90 91 42 01 	lds	r25, 0x0142
    1398:	82 17       	cp	r24, r18
    139a:	93 07       	cpc	r25, r19
    139c:	c4 f4       	brge	.+48     	; 0x13ce <twoway_turn_left_lab+0xd8>
		twoway_turn_left = false;
    139e:	10 92 3a 01 	sts	0x013A, r1
		first_time = true;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    13a8:	10 92 46 01 	sts	0x0146, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    13ac:	10 92 aa 01 	sts	0x01AA, r1
		regler_against_wall = false;
    13b0:	10 92 44 01 	sts	0x0144, r1
		PORTD &= ~(1 << PD1);
    13b4:	59 98       	cbi	0x0b, 1	; 11
		prepare_special_case = false;
    13b6:	10 92 43 01 	sts	0x0143, r1
    13ba:	2d c0       	rjmp	.+90     	; 0x1416 <twoway_turn_left_lab+0x120>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data == 3 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    13bc:	80 91 45 01 	lds	r24, 0x0145
    13c0:	81 11       	cpse	r24, r1
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <twoway_turn_left_lab+0xe0>
		turn_done = true;
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	80 93 45 01 	sts	0x0145, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    13ca:	f0 d8       	rcall	.-3616   	; 0x5ac <drive_forward>
    13cc:	24 c0       	rjmp	.+72     	; 0x1416 <twoway_turn_left_lab+0x120>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    13ce:	80 91 45 01 	lds	r24, 0x0145
    13d2:	88 23       	and	r24, r24
    13d4:	01 f1       	breq	.+64     	; 0x1416 <twoway_turn_left_lab+0x120>
    13d6:	c2 17       	cp	r28, r18
    13d8:	d3 07       	cpc	r29, r19
    13da:	ec f4       	brge	.+58     	; 0x1416 <twoway_turn_left_lab+0x120>
    13dc:	02 17       	cp	r16, r18
    13de:	13 07       	cpc	r17, r19
    13e0:	d4 f4       	brge	.+52     	; 0x1416 <twoway_turn_left_lab+0x120>
    13e2:	80 91 3f 01 	lds	r24, 0x013F
    13e6:	90 91 40 01 	lds	r25, 0x0140
    13ea:	82 17       	cp	r24, r18
    13ec:	93 07       	cpc	r25, r19
    13ee:	9c f4       	brge	.+38     	; 0x1416 <twoway_turn_left_lab+0x120>
    13f0:	80 91 41 01 	lds	r24, 0x0141
    13f4:	90 91 42 01 	lds	r25, 0x0142
    13f8:	82 17       	cp	r24, r18
    13fa:	93 07       	cpc	r25, r19
    13fc:	64 f4       	brge	.+24     	; 0x1416 <twoway_turn_left_lab+0x120>
		twoway_turn_left = false;
    13fe:	10 92 3a 01 	sts	0x013A, r1
		PORTD &= ~(1 << PD1);
    1402:	59 98       	cbi	0x0b, 1	; 11
		ongoing_turn = false;
    1404:	10 92 46 01 	sts	0x0146, r1
		first_time = true;
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    140e:	10 92 43 01 	sts	0x0143, r1
		RGB_data = 0;
    1412:	10 92 aa 01 	sts	0x01AA, r1
	}
	previous_right = distance_right;
    1416:	10 93 42 01 	sts	0x0142, r17
    141a:	00 93 41 01 	sts	0x0141, r16
	previous_left = distance_left;	
    141e:	d0 93 40 01 	sts	0x0140, r29
    1422:	c0 93 3f 01 	sts	0x013F, r28
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <twoway_turn_left_lab+0x13e>
	else if(regler_against_wall && (distance_left > st_value )){
		drive_forward();
		//drive_forward_right(distance_right, distance_front);
	}
	
	else if(RGB_data != 3 && distance_left <= st_value && distance_right <= st_value && previous_left < st_value && previous_right < st_value){// && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    1428:	80 91 aa 01 	lds	r24, 0x01AA
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	09 f0       	breq	.+2      	; 0x1432 <twoway_turn_left_lab+0x13c>
    1430:	a5 cf       	rjmp	.-182    	; 0x137c <twoway_turn_left_lab+0x86>
    1432:	c4 cf       	rjmp	.-120    	; 0x13bc <twoway_turn_left_lab+0xc6>
		prepare_special_case = false;
		RGB_data = 0;
	}
	previous_right = distance_right;
	previous_left = distance_left;	
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	1f 91       	pop	r17
    143a:	0f 91       	pop	r16
    143c:	08 95       	ret

0000143e <twoway_turn_right_lab>:


//INTE KLAR + måste testas
void twoway_turn_right_lab(int distance_left,int distance_right,int distance_front,int st_value){// roboten kommer fram till ett vägskäl där den antingen kan svänga åt höger/vänster eller köra raktfram
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	8c 01       	movw	r16, r24
    1448:	eb 01       	movw	r28, r22
	++count_waypoint;
    144a:	e0 91 1d 01 	lds	r30, 0x011D
    144e:	f0 91 1e 01 	lds	r31, 0x011E
    1452:	31 96       	adiw	r30, 0x01	; 1
    1454:	f0 93 1e 01 	sts	0x011E, r31
    1458:	e0 93 1d 01 	sts	0x011D, r30
	if(first_time){    //---kör fram i korsningen för att prepa sväng
    145c:	90 91 0c 01 	lds	r25, 0x010C
    1460:	99 23       	and	r25, r25
    1462:	61 f0       	breq	.+24     	; 0x147c <twoway_turn_right_lab+0x3e>
		drive_forward();
    1464:	a3 d8       	rcall	.-3770   	; 0x5ac <drive_forward>
		turn_done = false;
    1466:	10 92 45 01 	sts	0x0145, r1
		first_time = false;
    146a:	10 92 0c 01 	sts	0x010C, r1
		count_waypoint = 0;
    146e:	10 92 1e 01 	sts	0x011E, r1
    1472:	10 92 1d 01 	sts	0x011D, r1
		ongoing_turn = false;
    1476:	10 92 46 01 	sts	0x0146, r1
    147a:	6a c0       	rjmp	.+212    	; 0x1550 <twoway_turn_right_lab+0x112>
	}
	else if(!ongoing_turn && count_waypoint>= 1){	// Roboten har kört ut i kurvan och signalerar att den är klar och svänga
    147c:	80 91 46 01 	lds	r24, 0x0146
    1480:	81 11       	cpse	r24, r1
    1482:	0a c0       	rjmp	.+20     	; 0x1498 <twoway_turn_right_lab+0x5a>
    1484:	1e 16       	cp	r1, r30
    1486:	1f 06       	cpc	r1, r31
    1488:	3c f4       	brge	.+14     	; 0x1498 <twoway_turn_right_lab+0x5a>
		ongoing_turn = true;
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	80 93 46 01 	sts	0x0146, r24
		start_turn = true;
    1490:	80 93 47 01 	sts	0x0147, r24
		stand_still();
    1494:	86 d8       	rcall	.-3828   	; 0x5a2 <stand_still>
    1496:	5c c0       	rjmp	.+184    	; 0x1550 <twoway_turn_right_lab+0x112>
	}
	else if(start_turn){				//Robot är inne i kurva och kontrollerar vilket håll den ska svänga
    1498:	90 91 47 01 	lds	r25, 0x0147
    149c:	99 23       	and	r25, r25
    149e:	c1 f0       	breq	.+48     	; 0x14d0 <twoway_turn_right_lab+0x92>
		if(RGB_data == 2){			//RGB säger inte att roboten ska svänga höger så den kör rakt fram
    14a0:	80 91 aa 01 	lds	r24, 0x01AA
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	39 f4       	brne	.+14     	; 0x14b6 <twoway_turn_right_lab+0x78>
			//drive_forward_left(distance_left, distance_front);
			drive_forward();
    14a8:	81 d8       	rcall	.-3838   	; 0x5ac <drive_forward>
			turn_done = true;
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	80 93 45 01 	sts	0x0145, r24
			regler_against_wall = true;
    14b0:	80 93 44 01 	sts	0x0144, r24
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <twoway_turn_right_lab+0x7c>
		}
		else {						//RGB säger att roboten ska svänga höger så högersväng inleds samt kall på Gyro för att kontrollera 90-grader
			req_gyro_turn();
    14b6:	f6 dc       	rcall	.-1556   	; 0xea4 <req_gyro_turn>
			turn_right();
    14b8:	89 d8       	rcall	.-3822   	; 0x5cc <turn_right>
		}	
		previous_right = 0;
    14ba:	10 92 42 01 	sts	0x0142, r1
    14be:	10 92 41 01 	sts	0x0141, r1
		previous_left = 0;
    14c2:	10 92 40 01 	sts	0x0140, r1
    14c6:	10 92 3f 01 	sts	0x013F, r1
		start_turn = false;				// Signalerar att sväng har	inledits för att inte gå in i denna if igen
    14ca:	10 92 47 01 	sts	0x0147, r1
		return;
    14ce:	51 c0       	rjmp	.+162    	; 0x1572 <twoway_turn_right_lab+0x134>
	}
	
	// Rakt fram
	else if(regler_against_wall && (distance_right > st_value )){
    14d0:	90 91 44 01 	lds	r25, 0x0144
    14d4:	99 23       	and	r25, r25
    14d6:	29 f0       	breq	.+10     	; 0x14e2 <twoway_turn_right_lab+0xa4>
    14d8:	2c 17       	cp	r18, r28
    14da:	3d 07       	cpc	r19, r29
    14dc:	14 f4       	brge	.+4      	; 0x14e2 <twoway_turn_right_lab+0xa4>
		drive_forward();
    14de:	66 d8       	rcall	.-3892   	; 0x5ac <drive_forward>
    14e0:	37 c0       	rjmp	.+110    	; 0x1550 <twoway_turn_right_lab+0x112>
		//drive_forward_left(distance_left, distance_front);
	}
	
	else if(RGB_data == 2 && distance_left < st_value && distance_right < st_value && distance_front > st_value){	//Roboten har kört igenom kurvan och återgår till vanlig reglering
    14e2:	90 91 aa 01 	lds	r25, 0x01AA
    14e6:	92 30       	cpi	r25, 0x02	; 2
    14e8:	e1 f5       	brne	.+120    	; 0x1562 <twoway_turn_right_lab+0x124>
    14ea:	02 17       	cp	r16, r18
    14ec:	13 07       	cpc	r17, r19
    14ee:	84 f5       	brge	.+96     	; 0x1550 <twoway_turn_right_lab+0x112>
    14f0:	c2 17       	cp	r28, r18
    14f2:	d3 07       	cpc	r29, r19
    14f4:	6c f5       	brge	.+90     	; 0x1550 <twoway_turn_right_lab+0x112>
    14f6:	24 17       	cp	r18, r20
    14f8:	35 07       	cpc	r19, r21
    14fa:	b4 f5       	brge	.+108    	; 0x1568 <twoway_turn_right_lab+0x12a>
		twoway_turn_right = false;
    14fc:	10 92 39 01 	sts	0x0139, r1
		first_time = true;
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	80 93 0c 01 	sts	0x010C, r24
		ongoing_turn = false;
    1506:	10 92 46 01 	sts	0x0146, r1
		RGB_data = 0;				// RGB värdet nollsätts för att kunna kontrollera för nästa kurva
    150a:	10 92 aa 01 	sts	0x01AA, r1
		regler_against_wall = false;
    150e:	10 92 44 01 	sts	0x0144, r1
		prepare_special_case = false;
    1512:	10 92 43 01 	sts	0x0143, r1
    1516:	1c c0       	rjmp	.+56     	; 0x1550 <twoway_turn_right_lab+0x112>
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    1518:	80 91 45 01 	lds	r24, 0x0145
    151c:	81 11       	cpse	r24, r1
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <twoway_turn_right_lab+0xf4>
		turn_done = true;
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 45 01 	sts	0x0145, r24
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
    1526:	42 d8       	rcall	.-3964   	; 0x5ac <drive_forward>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <twoway_turn_right_lab+0x112>
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    152a:	80 91 45 01 	lds	r24, 0x0145
    152e:	88 23       	and	r24, r24
    1530:	79 f0       	breq	.+30     	; 0x1550 <twoway_turn_right_lab+0x112>
    1532:	02 17       	cp	r16, r18
    1534:	13 07       	cpc	r17, r19
    1536:	64 f4       	brge	.+24     	; 0x1550 <twoway_turn_right_lab+0x112>
    1538:	c2 17       	cp	r28, r18
    153a:	d3 07       	cpc	r29, r19
    153c:	4c f4       	brge	.+18     	; 0x1550 <twoway_turn_right_lab+0x112>
		twoway_turn_right = false;
    153e:	10 92 39 01 	sts	0x0139, r1
		ongoing_turn = false;
    1542:	10 92 46 01 	sts	0x0146, r1
		first_time = true;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	80 93 0c 01 	sts	0x010C, r24
		prepare_special_case = false;
    154c:	10 92 43 01 	sts	0x0143, r1
	}
	previous_right = distance_right;
    1550:	d0 93 42 01 	sts	0x0142, r29
    1554:	c0 93 41 01 	sts	0x0141, r28
	previous_left = distance_left;
    1558:	10 93 40 01 	sts	0x0140, r17
    155c:	00 93 3f 01 	sts	0x013F, r16
    1560:	08 c0       	rjmp	.+16     	; 0x1572 <twoway_turn_right_lab+0x134>
		regler_against_wall = false;
		prepare_special_case = false;
	}
	
	// SVÄÄÄÄNG
	else if(ongoing_turn && RGB_data != 2 && !turn_done){ //RGB sensor visar på att vi ska svänga vänster och RGB säger att vi roterat 90-grader	
    1562:	81 11       	cpse	r24, r1
    1564:	d9 cf       	rjmp	.-78     	; 0x1518 <twoway_turn_right_lab+0xda>
    1566:	e1 cf       	rjmp	.-62     	; 0x152a <twoway_turn_right_lab+0xec>
		turn_done = true;
		//count_waypoint = 0;			//counter som används för att roboten ska köra i 0.5 sek för att komma ur kurvor 
		drive_forward();			// motorerna kör framåt för att komma ur kurvan
	}
	
	else if(turn_done && distance_left < st_value && distance_right < st_value ){//&& distance_front > st_value){	//sväng är klar och roboten har kört ur kurvan, återgå till vanlig PD-reglering
    1568:	80 91 45 01 	lds	r24, 0x0145
    156c:	88 23       	and	r24, r24
    156e:	81 f3       	breq	.-32     	; 0x1550 <twoway_turn_right_lab+0x112>
    1570:	e6 cf       	rjmp	.-52     	; 0x153e <twoway_turn_right_lab+0x100>
		first_time = true;
		prepare_special_case = false;
	}
	previous_right = distance_right;
	previous_left = distance_left;
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	08 95       	ret

0000157c <labyreg>:
int sensor_left;
int sensor_right;

                 
void labyreg(){
	cli();
    157c:	f8 94       	cli
	int sensor_front_tmp = distans_fram;
    157e:	40 91 9d 01 	lds	r20, 0x019D
	int sensor_right_tmp = distans_right;
    1582:	60 91 ab 01 	lds	r22, 0x01AB
	int sensor_left_tmp = distans_left;
    1586:	80 91 a3 01 	lds	r24, 0x01A3
	sei();
    158a:	78 94       	sei
	int st_value = 35;
	int st_value_front = 40;
	/*if(true)      //testplats för reglering
		drive_forward_right(sensor_right_tmp, sensor_front_tmp);
	
	else*/ if(Reflex_data != 0 || Reflex_data2 != 0)
    158c:	20 91 97 01 	lds	r18, 0x0197
    1590:	30 91 98 01 	lds	r19, 0x0198
    1594:	23 2b       	or	r18, r19
    1596:	31 f4       	brne	.+12     	; 0x15a4 <labyreg+0x28>
    1598:	20 91 c0 01 	lds	r18, 0x01C0
    159c:	30 91 c1 01 	lds	r19, 0x01C1
    15a0:	23 2b       	or	r18, r19
    15a2:	39 f0       	breq	.+14     	; 0x15b2 <labyreg+0x36>
		regulator_mode = 1;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	90 93 1c 01 	sts	0x011C, r25
    15ac:	80 93 1b 01 	sts	0x011B, r24
    15b0:	08 95       	ret
int sensor_right;

                 
void labyreg(){
	cli();
	int sensor_front_tmp = distans_fram;
    15b2:	50 e0       	ldi	r21, 0x00	; 0
	int sensor_right_tmp = distans_right;
    15b4:	70 e0       	ldi	r23, 0x00	; 0
	int sensor_left_tmp = distans_left;
    15b6:	90 e0       	ldi	r25, 0x00	; 0
	/*if(true)      //testplats för reglering
		drive_forward_right(sensor_right_tmp, sensor_front_tmp);
	
	else*/ if(Reflex_data != 0 || Reflex_data2 != 0)
		regulator_mode = 1;
	else if(waypoint){
    15b8:	20 91 3c 01 	lds	r18, 0x013C
    15bc:	22 23       	and	r18, r18
    15be:	21 f0       	breq	.+8      	; 0x15c8 <labyreg+0x4c>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    15c0:	23 e2       	ldi	r18, 0x23	; 35
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	d9 cd       	rjmp	.-1102   	; 0x1178 <waypoint_lab>
		return;	
    15c6:	08 95       	ret
	}
	else if(oneway_turn){
    15c8:	20 91 3b 01 	lds	r18, 0x013B
    15cc:	22 23       	and	r18, r18
    15ce:	21 f0       	breq	.+8      	; 0x15d8 <labyreg+0x5c>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    15d0:	23 e2       	ldi	r18, 0x23	; 35
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	1c ce       	rjmp	.-968    	; 0x120e <oneway_turn_lab>
		return;
    15d6:	08 95       	ret
	}
	else if(twoway_turn_left){
    15d8:	20 91 3a 01 	lds	r18, 0x013A
    15dc:	22 23       	and	r18, r18
    15de:	21 f0       	breq	.+8      	; 0x15e8 <labyreg+0x6c>
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    15e0:	23 e2       	ldi	r18, 0x23	; 35
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	88 ce       	rjmp	.-752    	; 0x12f6 <twoway_turn_left_lab>
		return;
    15e6:	08 95       	ret
	}
	else if(twoway_turn_right){
    15e8:	20 91 39 01 	lds	r18, 0x0139
    15ec:	22 23       	and	r18, r18
    15ee:	21 f0       	breq	.+8      	; 0x15f8 <labyreg+0x7c>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    15f0:	23 e2       	ldi	r18, 0x23	; 35
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	24 cf       	rjmp	.-440    	; 0x143e <twoway_turn_right_lab>
		return;
    15f6:	08 95       	ret
	}	
	
	else if(count_waypoint < 4){
    15f8:	20 91 1d 01 	lds	r18, 0x011D
    15fc:	30 91 1e 01 	lds	r19, 0x011E
    1600:	24 30       	cpi	r18, 0x04	; 4
    1602:	31 05       	cpc	r19, r1
    1604:	5c f4       	brge	.+22     	; 0x161c <labyreg+0xa0>
		count_waypoint++;
    1606:	2f 5f       	subi	r18, 0xFF	; 255
    1608:	3f 4f       	sbci	r19, 0xFF	; 255
    160a:	30 93 1e 01 	sts	0x011E, r19
    160e:	20 93 1d 01 	sts	0x011D, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1612:	81 e3       	ldi	r24, 0x31	; 49
    1614:	8a 95       	dec	r24
    1616:	f1 f7       	brne	.-4      	; 0x1614 <labyreg+0x98>
    1618:	00 00       	nop
    161a:	08 95       	ret
		_delay_us(10);
	}
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value){
    161c:	83 32       	cpi	r24, 0x23	; 35
    161e:	91 05       	cpc	r25, r1
    1620:	34 f4       	brge	.+12     	; 0x162e <labyreg+0xb2>
    1622:	63 32       	cpi	r22, 0x23	; 35
    1624:	71 05       	cpc	r23, r1
    1626:	0c f0       	brlt	.+2      	; 0x162a <labyreg+0xae>
    1628:	5b c0       	rjmp	.+182    	; 0x16e0 <labyreg+0x164>
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
    162a:	fb cc       	rjmp	.-1546   	; 0x1022 <PD_for_lab>
    162c:	08 95       	ret
	}
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case /*sensor_front_tmp >= st_value_front*/){
    162e:	20 91 43 01 	lds	r18, 0x0143
    1632:	21 11       	cpse	r18, r1
    1634:	0a c0       	rjmp	.+20     	; 0x164a <labyreg+0xce>
		prepare_special_case = true;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	80 93 43 01 	sts	0x0143, r24
		count_waypoint = 0;
    163c:	10 92 1e 01 	sts	0x011E, r1
    1640:	10 92 1d 01 	sts	0x011D, r1
		drive_forward();
    1644:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <drive_forward>
    1648:	08 95       	ret
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
    164a:	83 32       	cpi	r24, 0x23	; 35
    164c:	91 05       	cpc	r25, r1
    164e:	0c f0       	brlt	.+2      	; 0x1652 <labyreg+0xd6>
    1650:	4c c0       	rjmp	.+152    	; 0x16ea <labyreg+0x16e>
    1652:	48 32       	cpi	r20, 0x28	; 40
    1654:	51 05       	cpc	r21, r1
    1656:	0c f0       	brlt	.+2      	; 0x165a <labyreg+0xde>
    1658:	4d c0       	rjmp	.+154    	; 0x16f4 <labyreg+0x178>
    165a:	64 32       	cpi	r22, 0x24	; 36
    165c:	71 05       	cpc	r23, r1
    165e:	c4 f1       	brlt	.+112    	; 0x16d0 <labyreg+0x154>
    1660:	06 c0       	rjmp	.+12     	; 0x166e <labyreg+0xf2>
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    1662:	48 32       	cpi	r20, 0x28	; 40
    1664:	51 05       	cpc	r21, r1
    1666:	a4 f4       	brge	.+40     	; 0x1690 <labyreg+0x114>
    1668:	63 32       	cpi	r22, 0x23	; 35
    166a:	71 05       	cpc	r23, r1
    166c:	3c f4       	brge	.+14     	; 0x167c <labyreg+0x100>
		oneway_turn_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    166e:	23 e2       	ldi	r18, 0x23	; 35
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	cd dd       	rcall	.-1126   	; 0x120e <oneway_turn_lab>
		oneway_turn = true;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	80 93 3b 01 	sts	0x013B, r24
    167a:	08 95       	ret
		
	}
	
	//t-korsning rakt framifrån
	else if((sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value))	{	
    167c:	64 32       	cpi	r22, 0x24	; 36
    167e:	71 05       	cpc	r23, r1
    1680:	3c f0       	brlt	.+14     	; 0x1690 <labyreg+0x114>
		waypoint_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    1682:	23 e2       	ldi	r18, 0x23	; 35
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	78 dd       	rcall	.-1296   	; 0x1178 <waypoint_lab>
		waypoint = true;
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	80 93 3c 01 	sts	0x013C, r24
    168e:	08 95       	ret
		//PORTD |= (1 << PD1);
		
	}
	
	// T-korsning där roboten kan köra framåt eller åt vänster
	else if(sensor_left_tmp > st_value && sensor_front_tmp > st_value_front && sensor_right_tmp < st_value){
    1690:	49 32       	cpi	r20, 0x29	; 41
    1692:	51 05       	cpc	r21, r1
    1694:	d4 f0       	brlt	.+52     	; 0x16ca <labyreg+0x14e>
    1696:	63 32       	cpi	r22, 0x23	; 35
    1698:	71 05       	cpc	r23, r1
    169a:	f4 f4       	brge	.+60     	; 0x16d8 <labyreg+0x15c>
		twoway_turn_left = true;
    169c:	21 e0       	ldi	r18, 0x01	; 1
    169e:	20 93 3a 01 	sts	0x013A, r18
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16a2:	23 e2       	ldi	r18, 0x23	; 35
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	27 ce       	rjmp	.-946    	; 0x12f6 <twoway_turn_left_lab>
    16a8:	08 95       	ret
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    16aa:	83 32       	cpi	r24, 0x23	; 35
    16ac:	91 05       	cpc	r25, r1
    16ae:	6c f4       	brge	.+26     	; 0x16ca <labyreg+0x14e>
    16b0:	49 32       	cpi	r20, 0x29	; 41
    16b2:	51 05       	cpc	r21, r1
    16b4:	54 f0       	brlt	.+20     	; 0x16ca <labyreg+0x14e>
    16b6:	64 32       	cpi	r22, 0x24	; 36
    16b8:	71 05       	cpc	r23, r1
    16ba:	3c f0       	brlt	.+14     	; 0x16ca <labyreg+0x14e>
		twoway_turn_right_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
    16bc:	23 e2       	ldi	r18, 0x23	; 35
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	be de       	rcall	.-644    	; 0x143e <twoway_turn_right_lab>
		twoway_turn_right = true;
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	80 93 39 01 	sts	0x0139, r24
    16c8:	08 95       	ret
	}
	else{
		stand_still();
    16ca:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <stand_still>
    16ce:	08 95       	ret
		drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    16d0:	84 32       	cpi	r24, 0x24	; 36
    16d2:	91 05       	cpc	r25, r1
    16d4:	9c f4       	brge	.+38     	; 0x16fc <labyreg+0x180>
    16d6:	ec cf       	rjmp	.-40     	; 0x16b0 <labyreg+0x134>
		twoway_turn_left = true;
		twoway_turn_left_lab(sensor_left_tmp,sensor_right_tmp,sensor_front_tmp,st_value);
	}
	
	// T-korsning där roboten kan köra framåt eller åt höger	
	else if(sensor_left_tmp < st_value && sensor_front_tmp > st_value_front && sensor_right_tmp > st_value){
    16d8:	83 32       	cpi	r24, 0x23	; 35
    16da:	91 05       	cpc	r25, r1
    16dc:	64 f3       	brlt	.-40     	; 0x16b6 <labyreg+0x13a>
    16de:	f5 cf       	rjmp	.-22     	; 0x16ca <labyreg+0x14e>
	// Normalfall
	else if(sensor_left_tmp < st_value &&/* sensor_front_tmp > st_value && */sensor_right_tmp < st_value){
		PD_for_lab(sensor_left_tmp, sensor_right_tmp, sensor_front_tmp);
	}
	// förbered specialfall
	else if((sensor_left_tmp >= st_value || sensor_right_tmp >= st_value) && !prepare_special_case /*sensor_front_tmp >= st_value_front*/){
    16e0:	20 91 43 01 	lds	r18, 0x0143
    16e4:	21 11       	cpse	r18, r1
    16e6:	b5 cf       	rjmp	.-150    	; 0x1652 <labyreg+0xd6>
    16e8:	a6 cf       	rjmp	.-180    	; 0x1636 <labyreg+0xba>
		drive_forward();
	}
	
	//Enkelsväng	
	else if(((sensor_left_tmp < st_value && sensor_front_tmp < st_value_front && sensor_right_tmp > st_value) 
		|| (sensor_left_tmp > st_value && sensor_front_tmp < st_value_front && sensor_right_tmp < st_value)))	{
    16ea:	84 32       	cpi	r24, 0x24	; 36
    16ec:	91 05       	cpc	r25, r1
    16ee:	0c f0       	brlt	.+2      	; 0x16f2 <labyreg+0x176>
    16f0:	b8 cf       	rjmp	.-144    	; 0x1662 <labyreg+0xe6>
    16f2:	eb cf       	rjmp	.-42     	; 0x16ca <labyreg+0x14e>
    16f4:	84 32       	cpi	r24, 0x24	; 36
    16f6:	91 05       	cpc	r25, r1
    16f8:	5c f6       	brge	.-106    	; 0x1690 <labyreg+0x114>
    16fa:	d7 cf       	rjmp	.-82     	; 0x16aa <labyreg+0x12e>
    16fc:	63 32       	cpi	r22, 0x23	; 35
    16fe:	71 05       	cpc	r23, r1
    1700:	3c f6       	brge	.-114    	; 0x1690 <labyreg+0x114>
    1702:	b5 cf       	rjmp	.-150    	; 0x166e <labyreg+0xf2>

00001704 <regulator>:
		//motor_right = 60;
		//PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
		//PORTB |= (1 << motor_dir_left);									// Set motor direction to backward
//	}

	if((regulator_mode == 1) && (regler_ready_linje == 1)){
    1704:	80 91 1b 01 	lds	r24, 0x011B
    1708:	90 91 1c 01 	lds	r25, 0x011C
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	91 05       	cpc	r25, r1
    1710:	e9 f4       	brne	.+58     	; 0x174c <regulator+0x48>
    1712:	80 91 5e 01 	lds	r24, 0x015E
    1716:	90 91 5f 01 	lds	r25, 0x015F
    171a:	01 97       	sbiw	r24, 0x01	; 1
    171c:	11 f5       	brne	.+68     	; 0x1762 <regulator+0x5e>
		left=180;				// kanske rÃ¤cker med en variable fÃ¶r bÃ¥da om bÃ¥da kÃ¶r exakt lika fort
    171e:	84 eb       	ldi	r24, 0xB4	; 180
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	90 93 69 01 	sts	0x0169, r25
    1726:	80 93 68 01 	sts	0x0168, r24
		right=170;
    172a:	8a ea       	ldi	r24, 0xAA	; 170
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	90 93 67 01 	sts	0x0167, r25
    1732:	80 93 66 01 	sts	0x0166, r24
		motor_left=left;
    1736:	84 eb       	ldi	r24, 0xB4	; 180
    1738:	87 bd       	out	0x27, r24	; 39
		motor_right=right;
    173a:	80 91 66 01 	lds	r24, 0x0166
    173e:	88 bd       	out	0x28, r24	; 40
		linje_main();
    1740:	15 da       	rcall	.-3030   	; 0xb6c <linje_main>
		regler_ready_linje = 0;
    1742:	10 92 5f 01 	sts	0x015F, r1
    1746:	10 92 5e 01 	sts	0x015E, r1
    174a:	08 95       	ret
	}

	else if(regulator_mode == 0){	
    174c:	89 2b       	or	r24, r25
    174e:	49 f4       	brne	.+18     	; 0x1762 <regulator+0x5e>
		
		PORTB &= ~(1 << motor_dir_right);								// Set motor direction to forward
    1750:	2d 98       	cbi	0x05, 5	; 5
		PORTB &= ~(1 << motor_dir_left);	
    1752:	2e 98       	cbi	0x05, 6	; 5

		if(updaterad_labyrint == true){
    1754:	80 91 5d 01 	lds	r24, 0x015D
    1758:	88 23       	and	r24, r24
    175a:	19 f0       	breq	.+6      	; 0x1762 <regulator+0x5e>
		
			updaterad_labyrint = false;
    175c:	10 92 5d 01 	sts	0x015D, r1
			labyreg();//kalla pÃ¥ labyrint funktion
    1760:	0d cf       	rjmp	.-486    	; 0x157c <labyreg>
    1762:	08 95       	ret

00001764 <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	//int size = 0;

	TWCR |= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
    1764:	ec eb       	ldi	r30, 0xBC	; 188
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	90 81       	ld	r25, Z
    176a:	94 6a       	ori	r25, 0xA4	; 164
    176c:	90 83       	st	Z, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
    176e:	90 81       	ld	r25, Z
    1770:	99 23       	and	r25, r25
    1772:	ec f7       	brge	.-6      	; 0x176e <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
    1774:	90 91 b9 00 	lds	r25, 0x00B9
    1778:	98 7f       	andi	r25, 0xF8	; 248
    177a:	98 30       	cpi	r25, 0x08	; 8
    177c:	29 f0       	breq	.+10     	; 0x1788 <i2c_recive+0x24>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    177e:	84 e9       	ldi	r24, 0x94	; 148
    1780:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	08 95       	ret
	}
	TWDR = prossesor | 0x01;	//adress och Read 
    1788:	81 60       	ori	r24, 0x01	; 1
    178a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    178e:	84 e8       	ldi	r24, 0x84	; 132
    1790:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
    1794:	ec eb       	ldi	r30, 0xBC	; 188
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	88 23       	and	r24, r24
    179c:	ec f7       	brge	.-6      	; 0x1798 <i2c_recive+0x34>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK) // om slav adress har skickats och ack har fåtts
    179e:	80 91 b9 00 	lds	r24, 0x00B9
    17a2:	88 7f       	andi	r24, 0xF8	; 248
    17a4:	80 34       	cpi	r24, 0x40	; 64
    17a6:	29 f0       	breq	.+10     	; 0x17b2 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    17a8:	84 e9       	ldi	r24, 0x94	; 148
    17aa:	80 93 bc 00 	sts	0x00BC, r24
		return false;
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	08 95       	ret
	}
	
	TWCR |= (1<<TWINT)|(1<<TWEN);
    17b2:	ec eb       	ldi	r30, 0xBC	; 188
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	84 68       	ori	r24, 0x84	; 132
    17ba:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
    17bc:	80 81       	ld	r24, Z
    17be:	88 23       	and	r24, r24
    17c0:	ec f7       	brge	.-6      	; 0x17bc <i2c_recive+0x58>
	}*/
	/*if(counter == 0){
		data = data[(TWDR>>4) & 0x0f];
		size= (TWDR>>4) & 0x0f;
	}*/
	data = TWDR; //ta emot data 
    17c2:	80 91 bb 00 	lds	r24, 0x00BB
	counter++;	
	start=TW_REP_START;
	//TWCR = (1<<TWINT);
	//while(!(TWCR & (1<<TWINT)));
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
    17c6:	94 e9       	ldi	r25, 0x94	; 148
    17c8:	90 93 bc 00 	sts	0x00BC, r25
	return data;
}
    17cc:	08 95       	ret

000017ce <i2c_store_data>:

void i2c_store_data(byte data) //bygger ihop data till en aray liknande den som blev skickad och sätter flaggan i2c_newdata då all data i ett paket motaget
{
	static int counter;
	static int size;
	if(counter == 0){ //om första databiten ta ut mängd data som kommer komma 
    17ce:	20 91 22 01 	lds	r18, 0x0122
    17d2:	30 91 23 01 	lds	r19, 0x0123
    17d6:	21 15       	cp	r18, r1
    17d8:	31 05       	cpc	r19, r1
    17da:	89 f4       	brne	.+34     	; 0x17fe <i2c_store_data+0x30>
		size = (data>>4) & 0x0f;
    17dc:	28 2f       	mov	r18, r24
    17de:	22 95       	swap	r18
    17e0:	2f 70       	andi	r18, 0x0F	; 15
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	30 93 21 01 	sts	0x0121, r19
    17e8:	20 93 20 01 	sts	0x0120, r18
		i2c_data[counter] = data;
    17ec:	80 93 88 01 	sts	0x0188, r24
		counter++;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	90 93 23 01 	sts	0x0123, r25
    17f8:	80 93 22 01 	sts	0x0122, r24
    17fc:	18 c0       	rjmp	.+48     	; 0x182e <i2c_store_data+0x60>
	}
	else if(counter < size+1){ //fyll på arayen med data
    17fe:	40 91 20 01 	lds	r20, 0x0120
    1802:	50 91 21 01 	lds	r21, 0x0121
    1806:	4f 5f       	subi	r20, 0xFF	; 255
    1808:	5f 4f       	sbci	r21, 0xFF	; 255
    180a:	24 17       	cp	r18, r20
    180c:	35 07       	cpc	r19, r21
    180e:	5c f4       	brge	.+22     	; 0x1826 <i2c_store_data+0x58>
		i2c_data[counter] = data;
    1810:	f9 01       	movw	r30, r18
    1812:	e8 57       	subi	r30, 0x78	; 120
    1814:	fe 4f       	sbci	r31, 0xFE	; 254
    1816:	80 83       	st	Z, r24
		counter++;
    1818:	2f 5f       	subi	r18, 0xFF	; 255
    181a:	3f 4f       	sbci	r19, 0xFF	; 255
    181c:	30 93 23 01 	sts	0x0123, r19
    1820:	20 93 22 01 	sts	0x0122, r18
    1824:	04 c0       	rjmp	.+8      	; 0x182e <i2c_store_data+0x60>
	}
	else{
		i2c_data[counter] = data;
    1826:	f9 01       	movw	r30, r18
    1828:	e8 57       	subi	r30, 0x78	; 120
    182a:	fe 4f       	sbci	r31, 0xFE	; 254
    182c:	80 83       	st	Z, r24
	}
	if(counter>=size+1){ // aray färdig all data motagen
    182e:	80 91 20 01 	lds	r24, 0x0120
    1832:	90 91 21 01 	lds	r25, 0x0121
    1836:	01 96       	adiw	r24, 0x01	; 1
    1838:	20 91 22 01 	lds	r18, 0x0122
    183c:	30 91 23 01 	lds	r19, 0x0123
    1840:	28 17       	cp	r18, r24
    1842:	39 07       	cpc	r19, r25
    1844:	44 f0       	brlt	.+16     	; 0x1856 <i2c_store_data+0x88>
		i2c_newdata = true;
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	80 93 28 01 	sts	0x0128, r24
		counter = 0;
    184c:	10 92 23 01 	sts	0x0123, r1
    1850:	10 92 22 01 	sts	0x0122, r1
		EIMSK &= ~(1<<INT0);
    1854:	e8 98       	cbi	0x1d, 0	; 29
    1856:	08 95       	ret

00001858 <__vector_1>:
byte i2c_data[15];
bool i2c_newdata=false;
int Reflex_data;
//aidshub was here
ISR(INT0_vect)// händer om annan processor kör request to send
{	
    1858:	1f 92       	push	r1
    185a:	0f 92       	push	r0
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	0f 92       	push	r0
    1860:	11 24       	eor	r1, r1
    1862:	0b b6       	in	r0, 0x3b	; 59
    1864:	0f 92       	push	r0
    1866:	2f 93       	push	r18
    1868:	3f 93       	push	r19
    186a:	4f 93       	push	r20
    186c:	5f 93       	push	r21
    186e:	6f 93       	push	r22
    1870:	7f 93       	push	r23
    1872:	8f 93       	push	r24
    1874:	9f 93       	push	r25
    1876:	af 93       	push	r26
    1878:	bf 93       	push	r27
    187a:	ef 93       	push	r30
    187c:	ff 93       	push	r31
    187e:	85 e0       	ldi	r24, 0x05	; 5
    1880:	8a 95       	dec	r24
    1882:	f1 f7       	brne	.-4      	; 0x1880 <__vector_1+0x28>
	_delay_us(1);
	if (PINC&(1<< PC6)){	//komunikation vill skicka
    1884:	36 9b       	sbis	0x06, 6	; 6
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <__vector_1+0x38>
		i2c_store_data(i2c_recive(0x02)); // adress processor 1
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	6c df       	rcall	.-296    	; 0x1764 <i2c_recive>
    188c:	a0 df       	rcall	.-192    	; 0x17ce <i2c_store_data>
    188e:	05 c0       	rjmp	.+10     	; 0x189a <__vector_1+0x42>
		//PORTD ^=(1 << PD0);
	}
	else if(PINC&(1<< PC7)){ //sensor vill skicka  
    1890:	37 9b       	sbis	0x06, 7	; 6
    1892:	03 c0       	rjmp	.+6      	; 0x189a <__vector_1+0x42>
		i2c_store_data(i2c_recive(0x06)); // adress processor 3
    1894:	86 e0       	ldi	r24, 0x06	; 6
    1896:	66 df       	rcall	.-308    	; 0x1764 <i2c_recive>
    1898:	9a df       	rcall	.-204    	; 0x17ce <i2c_store_data>
	}
}
    189a:	ff 91       	pop	r31
    189c:	ef 91       	pop	r30
    189e:	bf 91       	pop	r27
    18a0:	af 91       	pop	r26
    18a2:	9f 91       	pop	r25
    18a4:	8f 91       	pop	r24
    18a6:	7f 91       	pop	r23
    18a8:	6f 91       	pop	r22
    18aa:	5f 91       	pop	r21
    18ac:	4f 91       	pop	r20
    18ae:	3f 91       	pop	r19
    18b0:	2f 91       	pop	r18
    18b2:	0f 90       	pop	r0
    18b4:	0b be       	out	0x3b, r0	; 59
    18b6:	0f 90       	pop	r0
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	0f 90       	pop	r0
    18bc:	1f 90       	pop	r1
    18be:	18 95       	reti

000018c0 <i2c_handel_data>:
	}

}

void i2c_handel_data(void){ //hanterar den motagna datan och läger den på rätt plats och skickar vidare sensordata till komunikation
	if(i2c_newdata==true)
    18c0:	80 91 28 01 	lds	r24, 0x0128
    18c4:	88 23       	and	r24, r24
    18c6:	09 f4       	brne	.+2      	; 0x18ca <i2c_handel_data+0xa>
    18c8:	27 c1       	rjmp	.+590    	; 0x1b18 <i2c_handel_data+0x258>
	{
		i2c_newdata=false;
    18ca:	10 92 28 01 	sts	0x0128, r1
		if(!((i2c_data[0]>>3)&0x01)){
    18ce:	80 91 88 01 	lds	r24, 0x0188
    18d2:	83 fd       	sbrc	r24, 3
    18d4:	0a c0       	rjmp	.+20     	; 0x18ea <i2c_handel_data+0x2a>
    18d6:	81 e5       	ldi	r24, 0x51	; 81
    18d8:	94 e0       	ldi	r25, 0x04	; 4
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <i2c_handel_data+0x1a>
    18de:	00 c0       	rjmp	.+0      	; 0x18e0 <i2c_handel_data+0x20>
    18e0:	00 00       	nop
			_delay_us(300);
			i2c_send(0x02,i2c_data);// send to komunikation
    18e2:	68 e8       	ldi	r22, 0x88	; 136
    18e4:	71 e0       	ldi	r23, 0x01	; 1
    18e6:	82 e0       	ldi	r24, 0x02	; 2
    18e8:	6f da       	rcall	.-2850   	; 0xdc8 <i2c_send>
		}
		
		switch (i2c_data[0] & 0x0f){
    18ea:	80 91 88 01 	lds	r24, 0x0188
    18ee:	e8 2f       	mov	r30, r24
    18f0:	ef 70       	andi	r30, 0x0F	; 15
    18f2:	8e 2f       	mov	r24, r30
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	fc 01       	movw	r30, r24
    18f8:	ea 5b       	subi	r30, 0xBA	; 186
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	48 c3       	rjmp	.+1680   	; 0x1f8e <__tablejump2__>
			case 0x00 ://batteri nivå
				batteri=i2c_data[1],i2c_data[2];
    18fe:	80 91 89 01 	lds	r24, 0x0189
    1902:	80 93 a7 01 	sts	0x01A7, r24
				break;
    1906:	07 c1       	rjmp	.+526    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x01 ://avståndssensorer  plockar fram medianen av dom senaste 3 värdena ser krongligt ut men är bara hitta mittenvärdet och lägg det i distans_xxx
				distans_right = i2c_data[3];
    1908:	e8 e8       	ldi	r30, 0x88	; 136
    190a:	f1 e0       	ldi	r31, 0x01	; 1
    190c:	83 81       	ldd	r24, Z+3	; 0x03
    190e:	80 93 ab 01 	sts	0x01AB, r24
				distans_fram = i2c_data[2];
    1912:	82 81       	ldd	r24, Z+2	; 0x02
    1914:	80 93 9d 01 	sts	0x019D, r24
				distans_left = i2c_data[1];
    1918:	81 81       	ldd	r24, Z+1	; 0x01
    191a:	80 93 a3 01 	sts	0x01A3, r24
				else
					distans_left=distans_left_median[2];
				distans_left_median[2]=distans_left_median[1];
				distans_left_median[1]=distans_left_median[0];
				//updaterad_labyrint = true;*/
				break;
    191e:	fb c0       	rjmp	.+502    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x02 :// refelxsensor data
				regler_ready_linje = 1;					// Ny data har lästs in då uppdaterar vi regleringen
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	90 93 5f 01 	sts	0x015F, r25
    1928:	80 93 5e 01 	sts	0x015E, r24
				Reflex_data = (i2c_data[2]<<8) + i2c_data[1];
    192c:	e8 e8       	ldi	r30, 0x88	; 136
    192e:	f1 e0       	ldi	r31, 0x01	; 1
    1930:	82 81       	ldd	r24, Z+2	; 0x02
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	98 2f       	mov	r25, r24
    1936:	88 27       	eor	r24, r24
    1938:	21 81       	ldd	r18, Z+1	; 0x01
    193a:	82 0f       	add	r24, r18
    193c:	91 1d       	adc	r25, r1
    193e:	90 93 98 01 	sts	0x0198, r25
    1942:	80 93 97 01 	sts	0x0197, r24
				Reflex_data2 = i2c_data[3];// går inte att få in mer än 16 bitar i en int...
    1946:	83 81       	ldd	r24, Z+3	; 0x03
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	90 93 c1 01 	sts	0x01C1, r25
    194e:	80 93 c0 01 	sts	0x01C0, r24
				break;
    1952:	e1 c0       	rjmp	.+450    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x03 :
				RGB_data=1;//"röd";"
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	80 93 aa 01 	sts	0x01AA, r24
				break;
    195a:	dd c0       	rjmp	.+442    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x04 :
				RGB_data=2;//"grön";
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	80 93 aa 01 	sts	0x01AA, r24
				break;		
    1962:	d9 c0       	rjmp	.+434    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x05 :
				RGB_data=3;//"blå";
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	80 93 aa 01 	sts	0x01AA, r24
				break;
    196a:	d5 c0       	rjmp	.+426    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x06 : // gyro klart
				gyro_90 = true;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 93 73 01 	sts	0x0173, r24
				turning = false;
    1972:	10 92 5c 01 	sts	0x015C, r1
				motor_right = 0;
    1976:	18 bc       	out	0x28, r1	; 40
				motor_left = 0;
    1978:	17 bc       	out	0x27, r1	; 39
				updaterad_labyrint = false;
    197a:	10 92 5d 01 	sts	0x015D, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    197e:	9f ef       	ldi	r25, 0xFF	; 255
    1980:	2f e7       	ldi	r18, 0x7F	; 127
    1982:	86 e1       	ldi	r24, 0x16	; 22
    1984:	91 50       	subi	r25, 0x01	; 1
    1986:	20 40       	sbci	r18, 0x00	; 0
    1988:	80 40       	sbci	r24, 0x00	; 0
    198a:	e1 f7       	brne	.-8      	; 0x1984 <i2c_handel_data+0xc4>
    198c:	00 c0       	rjmp	.+0      	; 0x198e <i2c_handel_data+0xce>
    198e:	00 00       	nop
    1990:	c2 c0       	rjmp	.+388    	; 0x1b16 <i2c_handel_data+0x256>
				break;
			case 0x07 :// gyro data
				// Kod vi skickar till sensor
				break;
			case 0x08 : // manuel stå still
				manual_function=0;
    1992:	10 92 53 01 	sts	0x0153, r1
    1996:	10 92 52 01 	sts	0x0152, r1
				break;
    199a:	bd c0       	rjmp	.+378    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x09 : //manuel kar rakt fram
				manual_function=1;			
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	90 93 53 01 	sts	0x0153, r25
    19a4:	80 93 52 01 	sts	0x0152, r24
				break;
    19a8:	b6 c0       	rjmp	.+364    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x0a : //manuel kör bakåt
				manual_function=2;				
    19aa:	82 e0       	ldi	r24, 0x02	; 2
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	90 93 53 01 	sts	0x0153, r25
    19b2:	80 93 52 01 	sts	0x0152, r24
				break;
    19b6:	af c0       	rjmp	.+350    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x0b ://manuel vänster fram
				manual_function=4;
    19b8:	84 e0       	ldi	r24, 0x04	; 4
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	90 93 53 01 	sts	0x0153, r25
    19c0:	80 93 52 01 	sts	0x0152, r24
				break;
    19c4:	a8 c0       	rjmp	.+336    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x0c ://manuel höger fram
				manual_function=3;
    19c6:	83 e0       	ldi	r24, 0x03	; 3
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	90 93 53 01 	sts	0x0153, r25
    19ce:	80 93 52 01 	sts	0x0152, r24
				break;
    19d2:	a1 c0       	rjmp	.+322    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x0d :// spin på stället åt vänster
				manual_function=6;
    19d4:	86 e0       	ldi	r24, 0x06	; 6
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	90 93 53 01 	sts	0x0153, r25
    19dc:	80 93 52 01 	sts	0x0152, r24
				break;
    19e0:	9a c0       	rjmp	.+308    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x0e :// spin på stället åt höger
				manual_function=5;
    19e2:	85 e0       	ldi	r24, 0x05	; 5
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	90 93 53 01 	sts	0x0153, r25
    19ea:	80 93 52 01 	sts	0x0152, r24
				break;
    19ee:	93 c0       	rjmp	.+294    	; 0x1b16 <i2c_handel_data+0x256>
			case 0x0f :	// GUI skickar en extra byte där vi behandlar knapparna "man/auto" samt "start" (av/på) (används för extrafunktioner i almenhet som inte får plats i vanliga data tabellen)
				if(i2c_data[1]==0xf0){
    19f0:	80 91 89 01 	lds	r24, 0x0189
    19f4:	80 3f       	cpi	r24, 0xF0	; 240
    19f6:	09 f5       	brne	.+66     	; 0x1a3a <i2c_handel_data+0x17a>
					if(start==1){
    19f8:	80 91 6a 01 	lds	r24, 0x016A
    19fc:	90 91 6b 01 	lds	r25, 0x016B
    1a00:	01 97       	sbiw	r24, 0x01	; 1
    1a02:	29 f4       	brne	.+10     	; 0x1a0e <i2c_handel_data+0x14e>
						start=0;
    1a04:	10 92 6b 01 	sts	0x016B, r1
    1a08:	10 92 6a 01 	sts	0x016A, r1
    1a0c:	84 c0       	rjmp	.+264    	; 0x1b16 <i2c_handel_data+0x256>
    1a0e:	e4 e7       	ldi	r30, 0x74	; 116
    1a10:	f1 e0       	ldi	r31, 0x01	; 1
    1a12:	ac ea       	ldi	r26, 0xAC	; 172
    1a14:	b1 e0       	ldi	r27, 0x01	; 1
    1a16:	8e e7       	ldi	r24, 0x7E	; 126
    1a18:	91 e0       	ldi	r25, 0x01	; 1
					}
					else{
						for(int i = 0; i < 5; i++){						
							previous_errors_right[i] = 0;
    1a1a:	11 92       	st	Z+, r1
    1a1c:	11 92       	st	Z+, r1
							previous_errors_left[i] = 0;
    1a1e:	1d 92       	st	X+, r1
    1a20:	1d 92       	st	X+, r1
				if(i2c_data[1]==0xf0){
					if(start==1){
						start=0;
					}
					else{
						for(int i = 0; i < 5; i++){						
    1a22:	e8 17       	cp	r30, r24
    1a24:	f9 07       	cpc	r31, r25
    1a26:	c9 f7       	brne	.-14     	; 0x1a1a <i2c_handel_data+0x15a>
							previous_errors_right[i] = 0;
							previous_errors_left[i] = 0;
						}
						start=1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	90 93 6b 01 	sts	0x016B, r25
    1a30:	80 93 6a 01 	sts	0x016A, r24
						RGB_data = 0;
    1a34:	10 92 aa 01 	sts	0x01AA, r1
    1a38:	6e c0       	rjmp	.+220    	; 0x1b16 <i2c_handel_data+0x256>
						  
					}
				}
				else if(i2c_data[1]==0x0f){
    1a3a:	8f 30       	cpi	r24, 0x0F	; 15
    1a3c:	f1 f4       	brne	.+60     	; 0x1a7a <i2c_handel_data+0x1ba>
					if(drive_mode==1){
    1a3e:	80 91 6c 01 	lds	r24, 0x016C
    1a42:	90 91 6d 01 	lds	r25, 0x016D
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	59 f4       	brne	.+22     	; 0x1a60 <i2c_handel_data+0x1a0>
						PORTD |= (1 << PD1);
    1a4a:	59 9a       	sbi	0x0b, 1	; 11
						PORTD &= ~(1 << PD0);
    1a4c:	58 98       	cbi	0x0b, 0	; 11
						drive_mode=0;
    1a4e:	10 92 6d 01 	sts	0x016D, r1
    1a52:	10 92 6c 01 	sts	0x016C, r1
						start=0;
    1a56:	10 92 6b 01 	sts	0x016B, r1
    1a5a:	10 92 6a 01 	sts	0x016A, r1
    1a5e:	5b c0       	rjmp	.+182    	; 0x1b16 <i2c_handel_data+0x256>
					}
					else{
						PORTD |= (1 << PD0);
    1a60:	58 9a       	sbi	0x0b, 0	; 11
						PORTD &= ~(1 << PD1);
    1a62:	59 98       	cbi	0x0b, 1	; 11
						drive_mode=1;
    1a64:	81 e0       	ldi	r24, 0x01	; 1
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	90 93 6d 01 	sts	0x016D, r25
    1a6c:	80 93 6c 01 	sts	0x016C, r24
						start=0;
    1a70:	10 92 6b 01 	sts	0x016B, r1
    1a74:	10 92 6a 01 	sts	0x016A, r1
    1a78:	4e c0       	rjmp	.+156    	; 0x1b16 <i2c_handel_data+0x256>
					}
				}
				else if(i2c_data[1]==0x00){			// Ändra P och D konstant för linje
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	1b c0       	rjmp	.+54     	; 0x1ab4 <i2c_handel_data+0x1f4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a7e:	96 e3       	ldi	r25, 0x36	; 54
    1a80:	9a 95       	dec	r25
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <i2c_handel_data+0x1c0>
    1a84:	00 00       	nop
					_delay_us(11);
					d_constant = i2c_data[2] ;
    1a86:	e8 e8       	ldi	r30, 0x88	; 136
    1a88:	f1 e0       	ldi	r31, 0x01	; 1
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	90 93 01 01 	sts	0x0101, r25
    1a92:	80 93 00 01 	sts	0x0100, r24
					p_constant = i2c_data[3] ;
    1a96:	23 81       	ldd	r18, Z+3	; 0x03
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	30 93 03 01 	sts	0x0103, r19
    1a9e:	20 93 02 01 	sts	0x0102, r18
					if(d_constant == 180)
    1aa2:	84 3b       	cpi	r24, 0xB4	; 180
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <i2c_handel_data+0x1ea>
					PORTD |= (1 << PD1);
    1aa8:	59 9a       	sbi	0x0b, 1	; 11
    1aaa:	26 e3       	ldi	r18, 0x36	; 54
    1aac:	2a 95       	dec	r18
    1aae:	f1 f7       	brne	.-4      	; 0x1aac <i2c_handel_data+0x1ec>
    1ab0:	00 00       	nop
    1ab2:	31 c0       	rjmp	.+98     	; 0x1b16 <i2c_handel_data+0x256>
					_delay_us(11);
				}
				else if(i2c_data[1]==0x01){			// Ändra P och D konstant för labyrint
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	f9 f4       	brne	.+62     	; 0x1af6 <i2c_handel_data+0x236>
    1ab8:	81 e3       	ldi	r24, 0x31	; 49
    1aba:	8a 95       	dec	r24
    1abc:	f1 f7       	brne	.-4      	; 0x1aba <i2c_handel_data+0x1fa>
    1abe:	00 00       	nop

					_delay_us(10);
					d_constant_lab = i2c_data[3] ;
    1ac0:	e8 e8       	ldi	r30, 0x88	; 136
    1ac2:	f1 e0       	ldi	r31, 0x01	; 1
    1ac4:	83 81       	ldd	r24, Z+3	; 0x03
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	90 93 10 01 	sts	0x0110, r25
    1acc:	80 93 0f 01 	sts	0x010F, r24
					p_constant_lab = i2c_data[2] ;
    1ad0:	22 81       	ldd	r18, Z+2	; 0x02
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	30 93 12 01 	sts	0x0112, r19
    1ad8:	20 93 11 01 	sts	0x0111, r18
					p_wall = i2c_data[2] ;
    1adc:	30 93 0b 01 	sts	0x010B, r19
    1ae0:	20 93 0a 01 	sts	0x010A, r18
					d_wall = i2c_data[3] ;
    1ae4:	90 93 09 01 	sts	0x0109, r25
    1ae8:	80 93 08 01 	sts	0x0108, r24
    1aec:	91 e3       	ldi	r25, 0x31	; 49
    1aee:	9a 95       	dec	r25
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <i2c_handel_data+0x22e>
    1af2:	00 00       	nop
    1af4:	10 c0       	rjmp	.+32     	; 0x1b16 <i2c_handel_data+0x256>
					_delay_us(10);
	}
				else if(i2c_data[1]==0x02){
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	71 f4       	brne	.+28     	; 0x1b16 <i2c_handel_data+0x256>
					left = i2c_data[2] & 0xff;
    1afa:	e8 e8       	ldi	r30, 0x88	; 136
    1afc:	f1 e0       	ldi	r31, 0x01	; 1
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	90 93 69 01 	sts	0x0169, r25
    1b06:	80 93 68 01 	sts	0x0168, r24
					right = i2c_data[3] & 0xff;
    1b0a:	83 81       	ldd	r24, Z+3	; 0x03
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	90 93 67 01 	sts	0x0167, r25
    1b12:	80 93 66 01 	sts	0x0166, r24
				
				break;		
			default :
				break;
		}
		EIMSK |= (1<<INT0);
    1b16:	e8 9a       	sbi	0x1d, 0	; 29
    1b18:	08 95       	ret

00001b1a <main>:
#include "i2c_master.c"


int main(void)
{
	interrupt_init();
    1b1a:	f5 d8       	rcall	.-3606   	; 0xd06 <interrupt_init>
	board_init();
    1b1c:	0e 94 76 00 	call	0xec	; 0xec <board_init>
	initengine();
    1b20:	7b d8       	rcall	.-3850   	; 0xc18 <initengine>
	timerinit();
    1b22:	87 d8       	rcall	.-3826   	; 0xc32 <timerinit>
	i2c_setup(1);
    1b24:	81 e0       	ldi	r24, 0x01	; 1
    1b26:	40 d9       	rcall	.-3456   	; 0xda8 <i2c_setup>
	sei();
    1b28:	78 94       	sei
	//***********Set motors speed value here *****************
	left=180;				// kanske räcker med en variable för båda om båda kör exakt lika fort
    1b2a:	84 eb       	ldi	r24, 0xB4	; 180
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	90 93 69 01 	sts	0x0169, r25
    1b32:	80 93 68 01 	sts	0x0168, r24
	right=170;
    1b36:	8a ea       	ldi	r24, 0xAA	; 170
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	90 93 67 01 	sts	0x0167, r25
    1b3e:	80 93 66 01 	sts	0x0166, r24
	//********************************************************
	motor_left=left;
    1b42:	84 eb       	ldi	r24, 0xB4	; 180
    1b44:	87 bd       	out	0x27, r24	; 39
	motor_right=right;
    1b46:	80 91 66 01 	lds	r24, 0x0166
    1b4a:	88 bd       	out	0x28, r24	; 40
	while(1){
		i2c_handel_data();  //test av fregulito
    1b4c:	b9 de       	rcall	.-654    	; 0x18c0 <i2c_handel_data>
		if(turning)
    1b4e:	80 91 5c 01 	lds	r24, 0x015C
    1b52:	81 11       	cpse	r24, r1
    1b54:	fb cf       	rjmp	.-10     	; 0x1b4c <main+0x32>
			;
		else if(drive_mode == 1){						// Drivemode is auto    // (drive_mode == 1 && start == 1)
    1b56:	80 91 6c 01 	lds	r24, 0x016C
    1b5a:	90 91 6d 01 	lds	r25, 0x016D
    1b5e:	81 30       	cpi	r24, 0x01	; 1
    1b60:	91 05       	cpc	r25, r1
    1b62:	71 f4       	brne	.+28     	; 0x1b80 <main+0x66>
			//current_position = arre[count_arre];	// används för att simulera linjeföljning, arrayen ändras i globala
			//if((gyro_left == 1)|| (gyro_right == 1)){
			//	drive_mode = 0;
			//}
			if(start == 1){
    1b64:	80 91 6a 01 	lds	r24, 0x016A
    1b68:	90 91 6b 01 	lds	r25, 0x016B
    1b6c:	81 30       	cpi	r24, 0x01	; 1
    1b6e:	91 05       	cpc	r25, r1
    1b70:	11 f4       	brne	.+4      	; 0x1b76 <main+0x5c>
				regulator();	
    1b72:	c8 dd       	rcall	.-1136   	; 0x1704 <regulator>
    1b74:	eb cf       	rjmp	.-42     	; 0x1b4c <main+0x32>
			}
			else if(start == 0){					// if start is zero then turn off the auto, stops motors
    1b76:	89 2b       	or	r24, r25
    1b78:	49 f7       	brne	.-46     	; 0x1b4c <main+0x32>
				motor_left=0;
    1b7a:	17 bc       	out	0x27, r1	; 39
				motor_right=0;
    1b7c:	18 bc       	out	0x28, r1	; 40
    1b7e:	e6 cf       	rjmp	.-52     	; 0x1b4c <main+0x32>
			}
		}
		else if(drive_mode==0){										// Drivemode is manual
    1b80:	89 2b       	or	r24, r25
    1b82:	21 f7       	brne	.-56     	; 0x1b4c <main+0x32>
			PORTD |= (1 << PD1);
    1b84:	59 9a       	sbi	0x0b, 1	; 11
			manual_drive();
    1b86:	ad d9       	rcall	.-3238   	; 0xee2 <manual_drive>
    1b88:	e1 cf       	rjmp	.-62     	; 0x1b4c <main+0x32>

00001b8a <__subsf3>:
    1b8a:	50 58       	subi	r21, 0x80	; 128

00001b8c <__addsf3>:
    1b8c:	bb 27       	eor	r27, r27
    1b8e:	aa 27       	eor	r26, r26
    1b90:	0e d0       	rcall	.+28     	; 0x1bae <__addsf3x>
    1b92:	4d c1       	rjmp	.+666    	; 0x1e2e <__fp_round>
    1b94:	3e d1       	rcall	.+636    	; 0x1e12 <__fp_pscA>
    1b96:	30 f0       	brcs	.+12     	; 0x1ba4 <__addsf3+0x18>
    1b98:	43 d1       	rcall	.+646    	; 0x1e20 <__fp_pscB>
    1b9a:	20 f0       	brcs	.+8      	; 0x1ba4 <__addsf3+0x18>
    1b9c:	31 f4       	brne	.+12     	; 0x1baa <__addsf3+0x1e>
    1b9e:	9f 3f       	cpi	r25, 0xFF	; 255
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <__addsf3+0x1a>
    1ba2:	1e f4       	brtc	.+6      	; 0x1baa <__addsf3+0x1e>
    1ba4:	33 c1       	rjmp	.+614    	; 0x1e0c <__fp_nan>
    1ba6:	0e f4       	brtc	.+2      	; 0x1baa <__addsf3+0x1e>
    1ba8:	e0 95       	com	r30
    1baa:	e7 fb       	bst	r30, 7
    1bac:	29 c1       	rjmp	.+594    	; 0x1e00 <__fp_inf>

00001bae <__addsf3x>:
    1bae:	e9 2f       	mov	r30, r25
    1bb0:	4f d1       	rcall	.+670    	; 0x1e50 <__fp_split3>
    1bb2:	80 f3       	brcs	.-32     	; 0x1b94 <__addsf3+0x8>
    1bb4:	ba 17       	cp	r27, r26
    1bb6:	62 07       	cpc	r22, r18
    1bb8:	73 07       	cpc	r23, r19
    1bba:	84 07       	cpc	r24, r20
    1bbc:	95 07       	cpc	r25, r21
    1bbe:	18 f0       	brcs	.+6      	; 0x1bc6 <__addsf3x+0x18>
    1bc0:	71 f4       	brne	.+28     	; 0x1bde <__addsf3x+0x30>
    1bc2:	9e f5       	brtc	.+102    	; 0x1c2a <__addsf3x+0x7c>
    1bc4:	67 c1       	rjmp	.+718    	; 0x1e94 <__fp_zero>
    1bc6:	0e f4       	brtc	.+2      	; 0x1bca <__addsf3x+0x1c>
    1bc8:	e0 95       	com	r30
    1bca:	0b 2e       	mov	r0, r27
    1bcc:	ba 2f       	mov	r27, r26
    1bce:	a0 2d       	mov	r26, r0
    1bd0:	0b 01       	movw	r0, r22
    1bd2:	b9 01       	movw	r22, r18
    1bd4:	90 01       	movw	r18, r0
    1bd6:	0c 01       	movw	r0, r24
    1bd8:	ca 01       	movw	r24, r20
    1bda:	a0 01       	movw	r20, r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	ff 27       	eor	r31, r31
    1be0:	59 1b       	sub	r21, r25
    1be2:	99 f0       	breq	.+38     	; 0x1c0a <__addsf3x+0x5c>
    1be4:	59 3f       	cpi	r21, 0xF9	; 249
    1be6:	50 f4       	brcc	.+20     	; 0x1bfc <__addsf3x+0x4e>
    1be8:	50 3e       	cpi	r21, 0xE0	; 224
    1bea:	68 f1       	brcs	.+90     	; 0x1c46 <__addsf3x+0x98>
    1bec:	1a 16       	cp	r1, r26
    1bee:	f0 40       	sbci	r31, 0x00	; 0
    1bf0:	a2 2f       	mov	r26, r18
    1bf2:	23 2f       	mov	r18, r19
    1bf4:	34 2f       	mov	r19, r20
    1bf6:	44 27       	eor	r20, r20
    1bf8:	58 5f       	subi	r21, 0xF8	; 248
    1bfa:	f3 cf       	rjmp	.-26     	; 0x1be2 <__addsf3x+0x34>
    1bfc:	46 95       	lsr	r20
    1bfe:	37 95       	ror	r19
    1c00:	27 95       	ror	r18
    1c02:	a7 95       	ror	r26
    1c04:	f0 40       	sbci	r31, 0x00	; 0
    1c06:	53 95       	inc	r21
    1c08:	c9 f7       	brne	.-14     	; 0x1bfc <__addsf3x+0x4e>
    1c0a:	7e f4       	brtc	.+30     	; 0x1c2a <__addsf3x+0x7c>
    1c0c:	1f 16       	cp	r1, r31
    1c0e:	ba 0b       	sbc	r27, r26
    1c10:	62 0b       	sbc	r22, r18
    1c12:	73 0b       	sbc	r23, r19
    1c14:	84 0b       	sbc	r24, r20
    1c16:	ba f0       	brmi	.+46     	; 0x1c46 <__addsf3x+0x98>
    1c18:	91 50       	subi	r25, 0x01	; 1
    1c1a:	a1 f0       	breq	.+40     	; 0x1c44 <__addsf3x+0x96>
    1c1c:	ff 0f       	add	r31, r31
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	66 1f       	adc	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	c2 f7       	brpl	.-16     	; 0x1c18 <__addsf3x+0x6a>
    1c28:	0e c0       	rjmp	.+28     	; 0x1c46 <__addsf3x+0x98>
    1c2a:	ba 0f       	add	r27, r26
    1c2c:	62 1f       	adc	r22, r18
    1c2e:	73 1f       	adc	r23, r19
    1c30:	84 1f       	adc	r24, r20
    1c32:	48 f4       	brcc	.+18     	; 0x1c46 <__addsf3x+0x98>
    1c34:	87 95       	ror	r24
    1c36:	77 95       	ror	r23
    1c38:	67 95       	ror	r22
    1c3a:	b7 95       	ror	r27
    1c3c:	f7 95       	ror	r31
    1c3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <__addsf3x+0x96>
    1c42:	b3 cf       	rjmp	.-154    	; 0x1baa <__addsf3+0x1e>
    1c44:	93 95       	inc	r25
    1c46:	88 0f       	add	r24, r24
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <__addsf3x+0x9e>
    1c4a:	99 27       	eor	r25, r25
    1c4c:	ee 0f       	add	r30, r30
    1c4e:	97 95       	ror	r25
    1c50:	87 95       	ror	r24
    1c52:	08 95       	ret

00001c54 <__divsf3>:
    1c54:	0c d0       	rcall	.+24     	; 0x1c6e <__divsf3x>
    1c56:	eb c0       	rjmp	.+470    	; 0x1e2e <__fp_round>
    1c58:	e3 d0       	rcall	.+454    	; 0x1e20 <__fp_pscB>
    1c5a:	40 f0       	brcs	.+16     	; 0x1c6c <__divsf3+0x18>
    1c5c:	da d0       	rcall	.+436    	; 0x1e12 <__fp_pscA>
    1c5e:	30 f0       	brcs	.+12     	; 0x1c6c <__divsf3+0x18>
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <__divsf3+0x16>
    1c62:	5f 3f       	cpi	r21, 0xFF	; 255
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <__divsf3+0x18>
    1c66:	cc c0       	rjmp	.+408    	; 0x1e00 <__fp_inf>
    1c68:	51 11       	cpse	r21, r1
    1c6a:	15 c1       	rjmp	.+554    	; 0x1e96 <__fp_szero>
    1c6c:	cf c0       	rjmp	.+414    	; 0x1e0c <__fp_nan>

00001c6e <__divsf3x>:
    1c6e:	f0 d0       	rcall	.+480    	; 0x1e50 <__fp_split3>
    1c70:	98 f3       	brcs	.-26     	; 0x1c58 <__divsf3+0x4>

00001c72 <__divsf3_pse>:
    1c72:	99 23       	and	r25, r25
    1c74:	c9 f3       	breq	.-14     	; 0x1c68 <__divsf3+0x14>
    1c76:	55 23       	and	r21, r21
    1c78:	b1 f3       	breq	.-20     	; 0x1c66 <__divsf3+0x12>
    1c7a:	95 1b       	sub	r25, r21
    1c7c:	55 0b       	sbc	r21, r21
    1c7e:	bb 27       	eor	r27, r27
    1c80:	aa 27       	eor	r26, r26
    1c82:	62 17       	cp	r22, r18
    1c84:	73 07       	cpc	r23, r19
    1c86:	84 07       	cpc	r24, r20
    1c88:	38 f0       	brcs	.+14     	; 0x1c98 <__divsf3_pse+0x26>
    1c8a:	9f 5f       	subi	r25, 0xFF	; 255
    1c8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c8e:	22 0f       	add	r18, r18
    1c90:	33 1f       	adc	r19, r19
    1c92:	44 1f       	adc	r20, r20
    1c94:	aa 1f       	adc	r26, r26
    1c96:	a9 f3       	breq	.-22     	; 0x1c82 <__divsf3_pse+0x10>
    1c98:	33 d0       	rcall	.+102    	; 0x1d00 <__divsf3_pse+0x8e>
    1c9a:	0e 2e       	mov	r0, r30
    1c9c:	3a f0       	brmi	.+14     	; 0x1cac <__divsf3_pse+0x3a>
    1c9e:	e0 e8       	ldi	r30, 0x80	; 128
    1ca0:	30 d0       	rcall	.+96     	; 0x1d02 <__divsf3_pse+0x90>
    1ca2:	91 50       	subi	r25, 0x01	; 1
    1ca4:	50 40       	sbci	r21, 0x00	; 0
    1ca6:	e6 95       	lsr	r30
    1ca8:	00 1c       	adc	r0, r0
    1caa:	ca f7       	brpl	.-14     	; 0x1c9e <__divsf3_pse+0x2c>
    1cac:	29 d0       	rcall	.+82     	; 0x1d00 <__divsf3_pse+0x8e>
    1cae:	fe 2f       	mov	r31, r30
    1cb0:	27 d0       	rcall	.+78     	; 0x1d00 <__divsf3_pse+0x8e>
    1cb2:	66 0f       	add	r22, r22
    1cb4:	77 1f       	adc	r23, r23
    1cb6:	88 1f       	adc	r24, r24
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	26 17       	cp	r18, r22
    1cbc:	37 07       	cpc	r19, r23
    1cbe:	48 07       	cpc	r20, r24
    1cc0:	ab 07       	cpc	r26, r27
    1cc2:	b0 e8       	ldi	r27, 0x80	; 128
    1cc4:	09 f0       	breq	.+2      	; 0x1cc8 <__divsf3_pse+0x56>
    1cc6:	bb 0b       	sbc	r27, r27
    1cc8:	80 2d       	mov	r24, r0
    1cca:	bf 01       	movw	r22, r30
    1ccc:	ff 27       	eor	r31, r31
    1cce:	93 58       	subi	r25, 0x83	; 131
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	2a f0       	brmi	.+10     	; 0x1cde <__divsf3_pse+0x6c>
    1cd4:	9e 3f       	cpi	r25, 0xFE	; 254
    1cd6:	51 05       	cpc	r21, r1
    1cd8:	68 f0       	brcs	.+26     	; 0x1cf4 <__divsf3_pse+0x82>
    1cda:	92 c0       	rjmp	.+292    	; 0x1e00 <__fp_inf>
    1cdc:	dc c0       	rjmp	.+440    	; 0x1e96 <__fp_szero>
    1cde:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce0:	ec f3       	brlt	.-6      	; 0x1cdc <__divsf3_pse+0x6a>
    1ce2:	98 3e       	cpi	r25, 0xE8	; 232
    1ce4:	dc f3       	brlt	.-10     	; 0x1cdc <__divsf3_pse+0x6a>
    1ce6:	86 95       	lsr	r24
    1ce8:	77 95       	ror	r23
    1cea:	67 95       	ror	r22
    1cec:	b7 95       	ror	r27
    1cee:	f7 95       	ror	r31
    1cf0:	9f 5f       	subi	r25, 0xFF	; 255
    1cf2:	c9 f7       	brne	.-14     	; 0x1ce6 <__divsf3_pse+0x74>
    1cf4:	88 0f       	add	r24, r24
    1cf6:	91 1d       	adc	r25, r1
    1cf8:	96 95       	lsr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	97 f9       	bld	r25, 7
    1cfe:	08 95       	ret
    1d00:	e1 e0       	ldi	r30, 0x01	; 1
    1d02:	66 0f       	add	r22, r22
    1d04:	77 1f       	adc	r23, r23
    1d06:	88 1f       	adc	r24, r24
    1d08:	bb 1f       	adc	r27, r27
    1d0a:	62 17       	cp	r22, r18
    1d0c:	73 07       	cpc	r23, r19
    1d0e:	84 07       	cpc	r24, r20
    1d10:	ba 07       	cpc	r27, r26
    1d12:	20 f0       	brcs	.+8      	; 0x1d1c <__divsf3_pse+0xaa>
    1d14:	62 1b       	sub	r22, r18
    1d16:	73 0b       	sbc	r23, r19
    1d18:	84 0b       	sbc	r24, r20
    1d1a:	ba 0b       	sbc	r27, r26
    1d1c:	ee 1f       	adc	r30, r30
    1d1e:	88 f7       	brcc	.-30     	; 0x1d02 <__divsf3_pse+0x90>
    1d20:	e0 95       	com	r30
    1d22:	08 95       	ret

00001d24 <__fixsfsi>:
    1d24:	04 d0       	rcall	.+8      	; 0x1d2e <__fixunssfsi>
    1d26:	68 94       	set
    1d28:	b1 11       	cpse	r27, r1
    1d2a:	b5 c0       	rjmp	.+362    	; 0x1e96 <__fp_szero>
    1d2c:	08 95       	ret

00001d2e <__fixunssfsi>:
    1d2e:	98 d0       	rcall	.+304    	; 0x1e60 <__fp_splitA>
    1d30:	88 f0       	brcs	.+34     	; 0x1d54 <__fixunssfsi+0x26>
    1d32:	9f 57       	subi	r25, 0x7F	; 127
    1d34:	90 f0       	brcs	.+36     	; 0x1d5a <__fixunssfsi+0x2c>
    1d36:	b9 2f       	mov	r27, r25
    1d38:	99 27       	eor	r25, r25
    1d3a:	b7 51       	subi	r27, 0x17	; 23
    1d3c:	a0 f0       	brcs	.+40     	; 0x1d66 <__fixunssfsi+0x38>
    1d3e:	d1 f0       	breq	.+52     	; 0x1d74 <__fixunssfsi+0x46>
    1d40:	66 0f       	add	r22, r22
    1d42:	77 1f       	adc	r23, r23
    1d44:	88 1f       	adc	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	1a f0       	brmi	.+6      	; 0x1d50 <__fixunssfsi+0x22>
    1d4a:	ba 95       	dec	r27
    1d4c:	c9 f7       	brne	.-14     	; 0x1d40 <__fixunssfsi+0x12>
    1d4e:	12 c0       	rjmp	.+36     	; 0x1d74 <__fixunssfsi+0x46>
    1d50:	b1 30       	cpi	r27, 0x01	; 1
    1d52:	81 f0       	breq	.+32     	; 0x1d74 <__fixunssfsi+0x46>
    1d54:	9f d0       	rcall	.+318    	; 0x1e94 <__fp_zero>
    1d56:	b1 e0       	ldi	r27, 0x01	; 1
    1d58:	08 95       	ret
    1d5a:	9c c0       	rjmp	.+312    	; 0x1e94 <__fp_zero>
    1d5c:	67 2f       	mov	r22, r23
    1d5e:	78 2f       	mov	r23, r24
    1d60:	88 27       	eor	r24, r24
    1d62:	b8 5f       	subi	r27, 0xF8	; 248
    1d64:	39 f0       	breq	.+14     	; 0x1d74 <__fixunssfsi+0x46>
    1d66:	b9 3f       	cpi	r27, 0xF9	; 249
    1d68:	cc f3       	brlt	.-14     	; 0x1d5c <__fixunssfsi+0x2e>
    1d6a:	86 95       	lsr	r24
    1d6c:	77 95       	ror	r23
    1d6e:	67 95       	ror	r22
    1d70:	b3 95       	inc	r27
    1d72:	d9 f7       	brne	.-10     	; 0x1d6a <__fixunssfsi+0x3c>
    1d74:	3e f4       	brtc	.+14     	; 0x1d84 <__fixunssfsi+0x56>
    1d76:	90 95       	com	r25
    1d78:	80 95       	com	r24
    1d7a:	70 95       	com	r23
    1d7c:	61 95       	neg	r22
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	08 95       	ret

00001d86 <__floatunsisf>:
    1d86:	e8 94       	clt
    1d88:	09 c0       	rjmp	.+18     	; 0x1d9c <__floatsisf+0x12>

00001d8a <__floatsisf>:
    1d8a:	97 fb       	bst	r25, 7
    1d8c:	3e f4       	brtc	.+14     	; 0x1d9c <__floatsisf+0x12>
    1d8e:	90 95       	com	r25
    1d90:	80 95       	com	r24
    1d92:	70 95       	com	r23
    1d94:	61 95       	neg	r22
    1d96:	7f 4f       	sbci	r23, 0xFF	; 255
    1d98:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d9c:	99 23       	and	r25, r25
    1d9e:	a9 f0       	breq	.+42     	; 0x1dca <__floatsisf+0x40>
    1da0:	f9 2f       	mov	r31, r25
    1da2:	96 e9       	ldi	r25, 0x96	; 150
    1da4:	bb 27       	eor	r27, r27
    1da6:	93 95       	inc	r25
    1da8:	f6 95       	lsr	r31
    1daa:	87 95       	ror	r24
    1dac:	77 95       	ror	r23
    1dae:	67 95       	ror	r22
    1db0:	b7 95       	ror	r27
    1db2:	f1 11       	cpse	r31, r1
    1db4:	f8 cf       	rjmp	.-16     	; 0x1da6 <__floatsisf+0x1c>
    1db6:	fa f4       	brpl	.+62     	; 0x1df6 <__floatsisf+0x6c>
    1db8:	bb 0f       	add	r27, r27
    1dba:	11 f4       	brne	.+4      	; 0x1dc0 <__floatsisf+0x36>
    1dbc:	60 ff       	sbrs	r22, 0
    1dbe:	1b c0       	rjmp	.+54     	; 0x1df6 <__floatsisf+0x6c>
    1dc0:	6f 5f       	subi	r22, 0xFF	; 255
    1dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1dc8:	16 c0       	rjmp	.+44     	; 0x1df6 <__floatsisf+0x6c>
    1dca:	88 23       	and	r24, r24
    1dcc:	11 f0       	breq	.+4      	; 0x1dd2 <__floatsisf+0x48>
    1dce:	96 e9       	ldi	r25, 0x96	; 150
    1dd0:	11 c0       	rjmp	.+34     	; 0x1df4 <__floatsisf+0x6a>
    1dd2:	77 23       	and	r23, r23
    1dd4:	21 f0       	breq	.+8      	; 0x1dde <__floatsisf+0x54>
    1dd6:	9e e8       	ldi	r25, 0x8E	; 142
    1dd8:	87 2f       	mov	r24, r23
    1dda:	76 2f       	mov	r23, r22
    1ddc:	05 c0       	rjmp	.+10     	; 0x1de8 <__floatsisf+0x5e>
    1dde:	66 23       	and	r22, r22
    1de0:	71 f0       	breq	.+28     	; 0x1dfe <__floatsisf+0x74>
    1de2:	96 e8       	ldi	r25, 0x86	; 134
    1de4:	86 2f       	mov	r24, r22
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	60 e0       	ldi	r22, 0x00	; 0
    1dea:	2a f0       	brmi	.+10     	; 0x1df6 <__floatsisf+0x6c>
    1dec:	9a 95       	dec	r25
    1dee:	66 0f       	add	r22, r22
    1df0:	77 1f       	adc	r23, r23
    1df2:	88 1f       	adc	r24, r24
    1df4:	da f7       	brpl	.-10     	; 0x1dec <__floatsisf+0x62>
    1df6:	88 0f       	add	r24, r24
    1df8:	96 95       	lsr	r25
    1dfa:	87 95       	ror	r24
    1dfc:	97 f9       	bld	r25, 7
    1dfe:	08 95       	ret

00001e00 <__fp_inf>:
    1e00:	97 f9       	bld	r25, 7
    1e02:	9f 67       	ori	r25, 0x7F	; 127
    1e04:	80 e8       	ldi	r24, 0x80	; 128
    1e06:	70 e0       	ldi	r23, 0x00	; 0
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	08 95       	ret

00001e0c <__fp_nan>:
    1e0c:	9f ef       	ldi	r25, 0xFF	; 255
    1e0e:	80 ec       	ldi	r24, 0xC0	; 192
    1e10:	08 95       	ret

00001e12 <__fp_pscA>:
    1e12:	00 24       	eor	r0, r0
    1e14:	0a 94       	dec	r0
    1e16:	16 16       	cp	r1, r22
    1e18:	17 06       	cpc	r1, r23
    1e1a:	18 06       	cpc	r1, r24
    1e1c:	09 06       	cpc	r0, r25
    1e1e:	08 95       	ret

00001e20 <__fp_pscB>:
    1e20:	00 24       	eor	r0, r0
    1e22:	0a 94       	dec	r0
    1e24:	12 16       	cp	r1, r18
    1e26:	13 06       	cpc	r1, r19
    1e28:	14 06       	cpc	r1, r20
    1e2a:	05 06       	cpc	r0, r21
    1e2c:	08 95       	ret

00001e2e <__fp_round>:
    1e2e:	09 2e       	mov	r0, r25
    1e30:	03 94       	inc	r0
    1e32:	00 0c       	add	r0, r0
    1e34:	11 f4       	brne	.+4      	; 0x1e3a <__fp_round+0xc>
    1e36:	88 23       	and	r24, r24
    1e38:	52 f0       	brmi	.+20     	; 0x1e4e <__fp_round+0x20>
    1e3a:	bb 0f       	add	r27, r27
    1e3c:	40 f4       	brcc	.+16     	; 0x1e4e <__fp_round+0x20>
    1e3e:	bf 2b       	or	r27, r31
    1e40:	11 f4       	brne	.+4      	; 0x1e46 <__fp_round+0x18>
    1e42:	60 ff       	sbrs	r22, 0
    1e44:	04 c0       	rjmp	.+8      	; 0x1e4e <__fp_round+0x20>
    1e46:	6f 5f       	subi	r22, 0xFF	; 255
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	08 95       	ret

00001e50 <__fp_split3>:
    1e50:	57 fd       	sbrc	r21, 7
    1e52:	90 58       	subi	r25, 0x80	; 128
    1e54:	44 0f       	add	r20, r20
    1e56:	55 1f       	adc	r21, r21
    1e58:	59 f0       	breq	.+22     	; 0x1e70 <__fp_splitA+0x10>
    1e5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1e5c:	71 f0       	breq	.+28     	; 0x1e7a <__fp_splitA+0x1a>
    1e5e:	47 95       	ror	r20

00001e60 <__fp_splitA>:
    1e60:	88 0f       	add	r24, r24
    1e62:	97 fb       	bst	r25, 7
    1e64:	99 1f       	adc	r25, r25
    1e66:	61 f0       	breq	.+24     	; 0x1e80 <__fp_splitA+0x20>
    1e68:	9f 3f       	cpi	r25, 0xFF	; 255
    1e6a:	79 f0       	breq	.+30     	; 0x1e8a <__fp_splitA+0x2a>
    1e6c:	87 95       	ror	r24
    1e6e:	08 95       	ret
    1e70:	12 16       	cp	r1, r18
    1e72:	13 06       	cpc	r1, r19
    1e74:	14 06       	cpc	r1, r20
    1e76:	55 1f       	adc	r21, r21
    1e78:	f2 cf       	rjmp	.-28     	; 0x1e5e <__fp_split3+0xe>
    1e7a:	46 95       	lsr	r20
    1e7c:	f1 df       	rcall	.-30     	; 0x1e60 <__fp_splitA>
    1e7e:	08 c0       	rjmp	.+16     	; 0x1e90 <__fp_splitA+0x30>
    1e80:	16 16       	cp	r1, r22
    1e82:	17 06       	cpc	r1, r23
    1e84:	18 06       	cpc	r1, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	f1 cf       	rjmp	.-30     	; 0x1e6c <__fp_splitA+0xc>
    1e8a:	86 95       	lsr	r24
    1e8c:	71 05       	cpc	r23, r1
    1e8e:	61 05       	cpc	r22, r1
    1e90:	08 94       	sec
    1e92:	08 95       	ret

00001e94 <__fp_zero>:
    1e94:	e8 94       	clt

00001e96 <__fp_szero>:
    1e96:	bb 27       	eor	r27, r27
    1e98:	66 27       	eor	r22, r22
    1e9a:	77 27       	eor	r23, r23
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	97 f9       	bld	r25, 7
    1ea0:	08 95       	ret

00001ea2 <__mulsf3>:
    1ea2:	0b d0       	rcall	.+22     	; 0x1eba <__mulsf3x>
    1ea4:	c4 cf       	rjmp	.-120    	; 0x1e2e <__fp_round>
    1ea6:	b5 df       	rcall	.-150    	; 0x1e12 <__fp_pscA>
    1ea8:	28 f0       	brcs	.+10     	; 0x1eb4 <__mulsf3+0x12>
    1eaa:	ba df       	rcall	.-140    	; 0x1e20 <__fp_pscB>
    1eac:	18 f0       	brcs	.+6      	; 0x1eb4 <__mulsf3+0x12>
    1eae:	95 23       	and	r25, r21
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <__mulsf3+0x12>
    1eb2:	a6 cf       	rjmp	.-180    	; 0x1e00 <__fp_inf>
    1eb4:	ab cf       	rjmp	.-170    	; 0x1e0c <__fp_nan>
    1eb6:	11 24       	eor	r1, r1
    1eb8:	ee cf       	rjmp	.-36     	; 0x1e96 <__fp_szero>

00001eba <__mulsf3x>:
    1eba:	ca df       	rcall	.-108    	; 0x1e50 <__fp_split3>
    1ebc:	a0 f3       	brcs	.-24     	; 0x1ea6 <__mulsf3+0x4>

00001ebe <__mulsf3_pse>:
    1ebe:	95 9f       	mul	r25, r21
    1ec0:	d1 f3       	breq	.-12     	; 0x1eb6 <__mulsf3+0x14>
    1ec2:	95 0f       	add	r25, r21
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	55 1f       	adc	r21, r21
    1ec8:	62 9f       	mul	r22, r18
    1eca:	f0 01       	movw	r30, r0
    1ecc:	72 9f       	mul	r23, r18
    1ece:	bb 27       	eor	r27, r27
    1ed0:	f0 0d       	add	r31, r0
    1ed2:	b1 1d       	adc	r27, r1
    1ed4:	63 9f       	mul	r22, r19
    1ed6:	aa 27       	eor	r26, r26
    1ed8:	f0 0d       	add	r31, r0
    1eda:	b1 1d       	adc	r27, r1
    1edc:	aa 1f       	adc	r26, r26
    1ede:	64 9f       	mul	r22, r20
    1ee0:	66 27       	eor	r22, r22
    1ee2:	b0 0d       	add	r27, r0
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	66 1f       	adc	r22, r22
    1ee8:	82 9f       	mul	r24, r18
    1eea:	22 27       	eor	r18, r18
    1eec:	b0 0d       	add	r27, r0
    1eee:	a1 1d       	adc	r26, r1
    1ef0:	62 1f       	adc	r22, r18
    1ef2:	73 9f       	mul	r23, r19
    1ef4:	b0 0d       	add	r27, r0
    1ef6:	a1 1d       	adc	r26, r1
    1ef8:	62 1f       	adc	r22, r18
    1efa:	83 9f       	mul	r24, r19
    1efc:	a0 0d       	add	r26, r0
    1efe:	61 1d       	adc	r22, r1
    1f00:	22 1f       	adc	r18, r18
    1f02:	74 9f       	mul	r23, r20
    1f04:	33 27       	eor	r19, r19
    1f06:	a0 0d       	add	r26, r0
    1f08:	61 1d       	adc	r22, r1
    1f0a:	23 1f       	adc	r18, r19
    1f0c:	84 9f       	mul	r24, r20
    1f0e:	60 0d       	add	r22, r0
    1f10:	21 1d       	adc	r18, r1
    1f12:	82 2f       	mov	r24, r18
    1f14:	76 2f       	mov	r23, r22
    1f16:	6a 2f       	mov	r22, r26
    1f18:	11 24       	eor	r1, r1
    1f1a:	9f 57       	subi	r25, 0x7F	; 127
    1f1c:	50 40       	sbci	r21, 0x00	; 0
    1f1e:	8a f0       	brmi	.+34     	; 0x1f42 <__mulsf3_pse+0x84>
    1f20:	e1 f0       	breq	.+56     	; 0x1f5a <__mulsf3_pse+0x9c>
    1f22:	88 23       	and	r24, r24
    1f24:	4a f0       	brmi	.+18     	; 0x1f38 <__mulsf3_pse+0x7a>
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	bb 1f       	adc	r27, r27
    1f2c:	66 1f       	adc	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	91 50       	subi	r25, 0x01	; 1
    1f34:	50 40       	sbci	r21, 0x00	; 0
    1f36:	a9 f7       	brne	.-22     	; 0x1f22 <__mulsf3_pse+0x64>
    1f38:	9e 3f       	cpi	r25, 0xFE	; 254
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	70 f0       	brcs	.+28     	; 0x1f5a <__mulsf3_pse+0x9c>
    1f3e:	60 cf       	rjmp	.-320    	; 0x1e00 <__fp_inf>
    1f40:	aa cf       	rjmp	.-172    	; 0x1e96 <__fp_szero>
    1f42:	5f 3f       	cpi	r21, 0xFF	; 255
    1f44:	ec f3       	brlt	.-6      	; 0x1f40 <__mulsf3_pse+0x82>
    1f46:	98 3e       	cpi	r25, 0xE8	; 232
    1f48:	dc f3       	brlt	.-10     	; 0x1f40 <__mulsf3_pse+0x82>
    1f4a:	86 95       	lsr	r24
    1f4c:	77 95       	ror	r23
    1f4e:	67 95       	ror	r22
    1f50:	b7 95       	ror	r27
    1f52:	f7 95       	ror	r31
    1f54:	e7 95       	ror	r30
    1f56:	9f 5f       	subi	r25, 0xFF	; 255
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <__mulsf3_pse+0x8c>
    1f5a:	fe 2b       	or	r31, r30
    1f5c:	88 0f       	add	r24, r24
    1f5e:	91 1d       	adc	r25, r1
    1f60:	96 95       	lsr	r25
    1f62:	87 95       	ror	r24
    1f64:	97 f9       	bld	r25, 7
    1f66:	08 95       	ret

00001f68 <__divmodhi4>:
    1f68:	97 fb       	bst	r25, 7
    1f6a:	07 2e       	mov	r0, r23
    1f6c:	16 f4       	brtc	.+4      	; 0x1f72 <__divmodhi4+0xa>
    1f6e:	00 94       	com	r0
    1f70:	06 d0       	rcall	.+12     	; 0x1f7e <__divmodhi4_neg1>
    1f72:	77 fd       	sbrc	r23, 7
    1f74:	08 d0       	rcall	.+16     	; 0x1f86 <__divmodhi4_neg2>
    1f76:	14 d0       	rcall	.+40     	; 0x1fa0 <__udivmodhi4>
    1f78:	07 fc       	sbrc	r0, 7
    1f7a:	05 d0       	rcall	.+10     	; 0x1f86 <__divmodhi4_neg2>
    1f7c:	3e f4       	brtc	.+14     	; 0x1f8c <__divmodhi4_exit>

00001f7e <__divmodhi4_neg1>:
    1f7e:	90 95       	com	r25
    1f80:	81 95       	neg	r24
    1f82:	9f 4f       	sbci	r25, 0xFF	; 255
    1f84:	08 95       	ret

00001f86 <__divmodhi4_neg2>:
    1f86:	70 95       	com	r23
    1f88:	61 95       	neg	r22
    1f8a:	7f 4f       	sbci	r23, 0xFF	; 255

00001f8c <__divmodhi4_exit>:
    1f8c:	08 95       	ret

00001f8e <__tablejump2__>:
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	00 24       	eor	r0, r0
    1f94:	00 1c       	adc	r0, r0
    1f96:	0b be       	out	0x3b, r0	; 59
    1f98:	07 90       	elpm	r0, Z+
    1f9a:	f6 91       	elpm	r31, Z
    1f9c:	e0 2d       	mov	r30, r0
    1f9e:	09 94       	ijmp

00001fa0 <__udivmodhi4>:
    1fa0:	aa 1b       	sub	r26, r26
    1fa2:	bb 1b       	sub	r27, r27
    1fa4:	51 e1       	ldi	r21, 0x11	; 17
    1fa6:	07 c0       	rjmp	.+14     	; 0x1fb6 <__udivmodhi4_ep>

00001fa8 <__udivmodhi4_loop>:
    1fa8:	aa 1f       	adc	r26, r26
    1faa:	bb 1f       	adc	r27, r27
    1fac:	a6 17       	cp	r26, r22
    1fae:	b7 07       	cpc	r27, r23
    1fb0:	10 f0       	brcs	.+4      	; 0x1fb6 <__udivmodhi4_ep>
    1fb2:	a6 1b       	sub	r26, r22
    1fb4:	b7 0b       	sbc	r27, r23

00001fb6 <__udivmodhi4_ep>:
    1fb6:	88 1f       	adc	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	5a 95       	dec	r21
    1fbc:	a9 f7       	brne	.-22     	; 0x1fa8 <__udivmodhi4_loop>
    1fbe:	80 95       	com	r24
    1fc0:	90 95       	com	r25
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	08 95       	ret

00001fc8 <_exit>:
    1fc8:	f8 94       	cli

00001fca <__stop_program>:
    1fca:	ff cf       	rjmp	.-2      	; 0x1fca <__stop_program>
