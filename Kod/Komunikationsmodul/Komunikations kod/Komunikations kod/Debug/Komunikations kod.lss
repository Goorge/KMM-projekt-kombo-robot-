
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000020a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003d1  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001d7  00000000  00000000  000006dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000716  00000000  00000000  000008b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00000fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000116cc  00000000  00000000  00001160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000229  00000000  00000000  0001282c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00012a55  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000024f  00000000  00000000  00012ad5  2**0
=======
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000025d  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000166  00000000  00000000  00000569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005ef  00000000  00000000  000006cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011668  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  00012414  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0001252d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000252  00000000  00000000  0001257d  2**0
>>>>>>> 185953bdb6adb98e3fc4f4be5fb7c5a4b0bdddb9
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	79 c0       	rjmp	.+242    	; 0xfc <__vector_2>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	75 c0       	rjmp	.+234    	; 0x154 <__vector_26>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a7 30       	cpi	r26, 0x07	; 7
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
<<<<<<< HEAD
  a8:	72 d0       	rcall	.+228    	; 0x18e <main>
  aa:	73 c0       	rjmp	.+230    	; 0x192 <_exit>
=======
  a8:	8a d0       	rcall	.+276    	; 0x1be <main>
  aa:	8b c0       	rjmp	.+278    	; 0x1c2 <_exit>
>>>>>>> 185953bdb6adb98e3fc4f4be5fb7c5a4b0bdddb9

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

<<<<<<< HEAD
000000ae <USART_Transmit>:

ISR(TWI){
	a=incomingData();
	DDRD = 1<<PD6;
	PORTD= 1<<PD6;
}
  ae:	9b b1       	in	r25, 0x0b	; 11
  b0:	1b b8       	out	0x0b, r1	; 11
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <USART_Transmit+0x8>
  bc:	80 93 c6 00 	sts	0x00C6, r24
  c0:	08 95       	ret

000000c2 <bluetooth_send>:
  c2:	f5 df       	rcall	.-22     	; 0xae <USART_Transmit>
  c4:	10 92 01 01 	sts	0x0101, r1
  c8:	08 95       	ret

000000ca <usart_setup>:
  ca:	90 93 c5 00 	sts	0x00C5, r25
  ce:	80 93 c4 00 	sts	0x00C4, r24
  d2:	88 e1       	ldi	r24, 0x18	; 24
  d4:	80 93 c1 00 	sts	0x00C1, r24
  d8:	86 e0       	ldi	r24, 0x06	; 6
  da:	80 93 c2 00 	sts	0x00C2, r24
  de:	08 95       	ret

000000e0 <bluetooth_setup>:
  e0:	2a b1       	in	r18, 0x0a	; 10
  e2:	20 7f       	andi	r18, 0xF0	; 240
  e4:	25 60       	ori	r18, 0x05	; 5
  e6:	2a b9       	out	0x0a, r18	; 10
  e8:	f0 cf       	rjmp	.-32     	; 0xca <usart_setup>
  ea:	08 95       	ret

000000ec <USART_Receive>:
  ec:	e0 ec       	ldi	r30, 0xC0	; 192
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	88 23       	and	r24, r24
  f4:	ec f7       	brge	.-6      	; 0xf0 <USART_Receive+0x4>
  f6:	80 91 c6 00 	lds	r24, 0x00C6
  fa:	08 95       	ret

000000fc <__vector_2>:
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	0b b6       	in	r0, 0x3b	; 59
 108:	0f 92       	push	r0
 10a:	2f 93       	push	r18
 10c:	3f 93       	push	r19
 10e:	4f 93       	push	r20
 110:	5f 93       	push	r21
 112:	6f 93       	push	r22
 114:	7f 93       	push	r23
 116:	8f 93       	push	r24
 118:	9f 93       	push	r25
 11a:	af 93       	push	r26
 11c:	bf 93       	push	r27
 11e:	ef 93       	push	r30
 120:	ff 93       	push	r31
 122:	e4 df       	rcall	.-56     	; 0xec <USART_Receive>
 124:	80 93 00 01 	sts	0x0100, r24
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 01 01 	sts	0x0101, r24
 12e:	ff 91       	pop	r31
 130:	ef 91       	pop	r30
 132:	bf 91       	pop	r27
 134:	af 91       	pop	r26
 136:	9f 91       	pop	r25
 138:	8f 91       	pop	r24
 13a:	7f 91       	pop	r23
 13c:	6f 91       	pop	r22
 13e:	5f 91       	pop	r21
 140:	4f 91       	pop	r20
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0b be       	out	0x3b, r0	; 59
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <initialize>:
=======
000000ae <i2c_setup>:
};

void requestToSend(byte adress, byte* data){
	dataToSend = data;
	reciverAdress = adress;
	bytesSent = 0;
  ae:	80 93 04 01 	sts	0x0104, r24
  b2:	80 93 ba 00 	sts	0x00BA, r24
  b6:	85 ec       	ldi	r24, 0xC5	; 197
  b8:	80 93 bc 00 	sts	0x00BC, r24
  bc:	08 95       	ret

000000be <i2c_send>:

	return NULL;
}

void i2c_send(byte prossesor,byte data){
	TWDR = data;
  be:	60 93 bb 00 	sts	0x00BB, r22
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
  c2:	ec eb       	ldi	r30, 0xBC	; 188
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <i2c_send+0x8>
};
  cc:	08 95       	ret

000000ce <i2c_recive>:

byte i2c_recive(){
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
  ce:	ec eb       	ldi	r30, 0xBC	; 188
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	ec f7       	brge	.-6      	; 0xd2 <i2c_recive+0x4>
	if((TWSR & 0xF8) != TW_MT_SLA_ACK)
  d8:	80 91 b9 00 	lds	r24, 0x00B9
  dc:	88 7f       	andi	r24, 0xF8	; 248
  de:	88 31       	cpi	r24, 0x18	; 24
  e0:	19 f4       	brne	.+6      	; 0xe8 <i2c_recive+0x1a>
		return false;
	return TWDR;
  e2:	80 91 bb 00 	lds	r24, 0x00BB
  e6:	08 95       	ret
};

byte i2c_recive(){
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
	if((TWSR & 0xF8) != TW_MT_SLA_ACK)
		return false;
  e8:	80 e0       	ldi	r24, 0x00	; 0
	return TWDR;
  ea:	08 95       	ret

000000ec <incomingData>:
	bytesSent = 0;
}

byte incomingData(){
	int counter=0;
	TWAR = adress & 0xfe;
  ec:	80 91 04 01 	lds	r24, 0x0104
  f0:	8e 7f       	andi	r24, 0xFE	; 254
  f2:	80 93 ba 00 	sts	0x00BA, r24
	TWCR = (1<<TWEA)|(1<<TWEN)&(0<<TWSTA)&(0<<TWSTO);//START
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent	
  fc:	ec eb       	ldi	r30, 0xBC	; 188
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 23       	and	r24, r24
 104:	ec f7       	brge	.-6      	; 0x100 <incomingData+0x14>
	if(TWSR==0x60)
 106:	80 91 b9 00 	lds	r24, 0x00B9
 10a:	80 36       	cpi	r24, 0x60	; 96
 10c:	c1 f4       	brne	.+48     	; 0x13e <incomingData+0x52>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 10e:	20 91 02 01 	lds	r18, 0x0102
 112:	30 91 03 01 	lds	r19, 0x0103
 116:	80 91 00 01 	lds	r24, 0x0100
 11a:	90 91 01 01 	lds	r25, 0x0101
 11e:	ac 01       	movw	r20, r24
 120:	4f 5f       	subi	r20, 0xFF	; 255
 122:	5f 4f       	sbci	r21, 0xFF	; 255
 124:	50 93 01 01 	sts	0x0101, r21
 128:	40 93 00 01 	sts	0x0100, r20
 12c:	f9 01       	movw	r30, r18
 12e:	e8 0f       	add	r30, r24
 130:	f9 1f       	adc	r31, r25
 132:	60 81       	ld	r22, Z
 134:	80 91 06 01 	lds	r24, 0x0106
 138:	c2 df       	rcall	.-124    	; 0xbe <i2c_send>
			DDRD = 1<<PD6;
			PORTD= 1<<PD6;
			return i2c_recive();
			}

	return NULL;
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	08 95       	ret
	TWAR = adress & 0xfe;
	TWCR = (1<<TWEA)|(1<<TWEN)&(0<<TWSTA)&(0<<TWSTO);//START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent	
	if(TWSR==0x60)
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
	else if(TWSR==0xA8)
 13e:	80 91 b9 00 	lds	r24, 0x00B9
 142:	88 3a       	cpi	r24, 0xA8	; 168
 144:	29 f4       	brne	.+10     	; 0x150 <incomingData+0x64>
		{
			DDRD = 1<<PD6;
 146:	80 e4       	ldi	r24, 0x40	; 64
 148:	8a b9       	out	0x0a, r24	; 10
			PORTD= 1<<PD6;
 14a:	8b b9       	out	0x0b, r24	; 11
			return i2c_recive();
 14c:	c0 cf       	rjmp	.-128    	; 0xce <i2c_recive>
 14e:	08 95       	ret
			}

	return NULL;
 150:	80 e0       	ldi	r24, 0x00	; 0
}
 152:	08 95       	ret

00000154 <__vector_26>:
void run();
void initialize();

byte a;

ISR(TWI_vect){
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	0b b6       	in	r0, 0x3b	; 59
 160:	0f 92       	push	r0
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	a=incomingData();
 17a:	b8 df       	rcall	.-144    	; 0xec <incomingData>
 17c:	80 93 05 01 	sts	0x0105, r24
	
}
 180:	ff 91       	pop	r31
 182:	ef 91       	pop	r30
 184:	bf 91       	pop	r27
 186:	af 91       	pop	r26
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	7f 91       	pop	r23
 18e:	6f 91       	pop	r22
 190:	5f 91       	pop	r21
 192:	4f 91       	pop	r20
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0b be       	out	0x3b, r0	; 59
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <initialize>:
>>>>>>> 185953bdb6adb98e3fc4f4be5fb7c5a4b0bdddb9
	run();
	/* Insert application code here, after the board has been initialized. */
}

void initialize(){
<<<<<<< HEAD
	EIMSK = 1<<INT1;					// Enable INT0
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	8d bb       	out	0x1d, r24	; 29
byte* dataToSend;
byte reciverAdress;
int bytesSent = 0;

void i2c_setup(byte adress_) {
	adress = adress_;
 158:	80 93 04 01 	sts	0x0104, r24
	TWAR = adress;
 15c:	80 93 ba 00 	sts	0x00BA, r24
	//MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
	i2c_setup(0x02);
	bluetooth_setup(115200);
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	92 ec       	ldi	r25, 0xC2	; 194
 164:	bd df       	rcall	.-134    	; 0xe0 <bluetooth_setup>
	DDRB = 0xff;
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	84 b9       	out	0x04, r24	; 4
	sei();
 16a:	78 94       	sei
 16c:	08 95       	ret

0000016e <run>:

void run(){
	while(true)	{bluetooth_send(0x02);
		if(newData){
			
			PORTB = 0xff;
 16e:	cf ef       	ldi	r28, 0xFF	; 255
		}
		if(a == 0xf0){
			DDRD = 1<<PD7;
 170:	d0 e8       	ldi	r29, 0x80	; 128
	DDRB = 0xff;
	sei();
}

void run(){
	while(true)	{bluetooth_send(0x02);
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	a5 df       	rcall	.-182    	; 0xc2 <bluetooth_send>
		if(newData){
 178:	80 91 01 01 	lds	r24, 0x0101
 17c:	81 11       	cpse	r24, r1
			
			PORTB = 0xff;
 17e:	c5 b9       	out	0x05, r28	; 5
		}
		if(a == 0xf0){
 180:	80 91 05 01 	lds	r24, 0x0105
 184:	80 3f       	cpi	r24, 0xF0	; 240
 186:	a9 f7       	brne	.-22     	; 0x172 <run+0x4>
			DDRD = 1<<PD7;
 188:	da b9       	out	0x0a, r29	; 10
			PORTD= 1<<PD7;
 18a:	db b9       	out	0x0b, r29	; 11
 18c:	f2 cf       	rjmp	.-28     	; 0x172 <run+0x4>

0000018e <main>:
=======
	i2c_setup(0x02);
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	82 df       	rcall	.-252    	; 0xae <i2c_setup>
	sei();
 1aa:	78 94       	sei
 1ac:	08 95       	ret

000001ae <run>:

void run(){
	
	while(true)	{
		if(a == 0xff){
			DDRD = 1<<PD7;
 1ae:	90 e8       	ldi	r25, 0x80	; 128
}

void run(){
	
	while(true)	{
		if(a == 0xff){
 1b0:	80 91 05 01 	lds	r24, 0x0105
 1b4:	8f 3f       	cpi	r24, 0xFF	; 255
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <run+0x6>
			DDRD = 1<<PD7;
 1b8:	9a b9       	out	0x0a, r25	; 10
			PORTD= 1<<PD7;
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	f9 cf       	rjmp	.-14     	; 0x1b0 <run+0x2>

000001be <main>:
>>>>>>> 185953bdb6adb98e3fc4f4be5fb7c5a4b0bdddb9
int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	//board_init();
	initialize();
<<<<<<< HEAD
 18e:	e2 df       	rcall	.-60     	; 0x154 <initialize>
	run();
 190:	ee df       	rcall	.-36     	; 0x16e <run>

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
=======
 1be:	f3 df       	rcall	.-26     	; 0x1a6 <initialize>
	run();
 1c0:	f6 df       	rcall	.-20     	; 0x1ae <run>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
>>>>>>> 185953bdb6adb98e3fc4f4be5fb7c5a4b0bdddb9
