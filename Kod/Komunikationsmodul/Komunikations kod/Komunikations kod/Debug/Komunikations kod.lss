
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  0000030c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800120  00800120  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b9e  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052e  00000000  00000000  000010ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a9  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011cd4  00000000  00000000  00002b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000026f  00000000  00000000  000147f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00014a67  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004684  00000000  00000000  00014b4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	78 c0       	rjmp	.+240    	; 0x14a <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e0       	ldi	r30, 0x0C	; 12
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	1f d1       	rcall	.+574    	; 0x302 <main>
  c4:	21 c1       	rjmp	.+578    	; 0x308 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
//PortD1 TXD (OUT)
//PortD2 CTS (IN)
//PortD3 RTS (OUT)

void usart_setup(unsigned int baudrate){
	UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);/* Enable receiver and transmitter */
  ca:	88 ed       	ldi	r24, 0xD8	; 216
  cc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);/* Set frame format: 8data, 1stop bit */
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Set baud rate */
	unsigned long baudPreScale = 7; //((((14.7456 * 1000000) / (baudrate * 16UL))) - 1); // == 7
	
	UBRR0H = (unsigned char)(baudPreScale>>8);
  d6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)baudPreScale;
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
	
	_delay_ms(200);
}

void bluetooth_setup(unsigned long baudrate){
	DDRD = (1 << TXD) | (1 << RTS);// Sätter blåtandsdelen av D porten, Sedan behöver LCD köra sin init för att ändra RS/E. Men blåtand init måste ske först. 
  f4:	2a e0       	ldi	r18, 0x0A	; 10
  f6:	2a b9       	out	0x0a, r18	; 10
	
	//EIMSK = 1<<INT0;	// Enable INT0
	//MCUCR = 1<<ISC11;	// Falling edge | 1<<ISC10; Behövs nog inte
	
	usart_setup(baudrate);
  f8:	cb 01       	movw	r24, r22
  fa:	e7 cf       	rjmp	.-50     	; 0xca <usart_setup>
  fc:	08 95       	ret

000000fe <bluetooth_send_byte>:
}

// Skicka en byte över BT
void bluetooth_send_byte(byte data){
	while ( !( UCSR0A & (1<<UDRE0)) );/* Wait for empty transmit buffer */
  fe:	e0 ec       	ldi	r30, 0xC0	; 192
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	95 ff       	sbrs	r25, 5
 106:	fd cf       	rjmp	.-6      	; 0x102 <bluetooth_send_byte+0x4>
	UDR0 = data; // Put the data in to the buffer and send it
 108:	80 93 c6 00 	sts	0x00C6, r24
 10c:	08 95       	ret

0000010e <bluetooth_clear_to_send>:
}

// Säg till blåtandsenheten att du är redo att ta emot mer data. 
void bluetooth_clear_to_send(void){	PORTD &= ~(1 << RTS); }// Clear To Send;
 10e:	5b 98       	cbi	0x0b, 3	; 11
 110:	08 95       	ret

00000112 <bluetooth_fetch_new_data>:

//Hämta ut datan från BT
byte bluetooth_fetch_new_data(void){
	newData = false;
 112:	10 92 21 01 	sts	0x0121, r1
	return dataFromBT;
}
 116:	80 91 20 01 	lds	r24, 0x0120
 11a:	08 95       	ret

0000011c <bluetooth_get_new_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return newData; }
 11c:	80 91 21 01 	lds	r24, 0x0121
 120:	08 95       	ret

00000122 <__vector_20>:


//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	8f 93       	push	r24
	//while(!(UCSR0A & (1<<RXC0)));
	//_delay_ms(1);
	dataFromBT = UDR0;		
 12e:	80 91 c6 00 	lds	r24, 0x00C6
 132:	80 93 20 01 	sts	0x0120, r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 136:	5b 9a       	sbi	0x0b, 3	; 11
	newData = true;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 21 01 	sts	0x0121, r24
	//cli(); Slå av avbrott!
}	
 13e:	8f 91       	pop	r24
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__vector_22>:

 14a:	1f 92       	push	r1
 14c:	0f 92       	push	r0
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	0f 92       	push	r0
 152:	11 24       	eor	r1, r1
 154:	0f 90       	pop	r0
 156:	0f be       	out	0x3f, r0	; 63
 158:	0f 90       	pop	r0
 15a:	1f 90       	pop	r1
 15c:	18 95       	reti

0000015e <lcd_write_char>:
	PORTA |= (letter & (1 << 3));
	PORTA |= (letter & (1 << 2));
	PORTA |= (letter & (1 << 1));
	PORTA |= (letter & (1 << 0));
*/
	PORTA = letter;	// Lägg ín data på pinnarna in data
 15e:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~(1 << E);	// Försäkring om att E är låg innan vi försöker skriva
 160:	5f 98       	cbi	0x0b, 7	; 11
	
	PORTD |= (1 << RS); // sätt RS
 162:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << E); // Sätt Enable
 164:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	8a 95       	dec	r24
 16a:	f1 f7       	brne	.-4      	; 0x168 <lcd_write_char+0xa>
	
	_delay_us(1); //TSU2	// Vänta på att data ska stabiliseras
	PORTD &= ~(1 << E);
 16c:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 16e:	5e 98       	cbi	0x0b, 6	; 11
 170:	85 e0       	ldi	r24, 0x05	; 5
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <lcd_write_char+0x14>
 176:	08 95       	ret

00000178 <lcd_write_instruction>:
	_delay_us(1);
}

void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);
 178:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 17a:	5e 98       	cbi	0x0b, 6	; 11
	PORTA |= (instruction & (1 << 2));
	PORTA |= (instruction & (1 << 1));
	PORTA |= (instruction & (1 << 0));
	*/
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 17c:	82 b9       	out	0x02, r24	; 2
 17e:	08 95       	ret

00000180 <lcd_setup>:

bool directionLeft = true;

//LCD Setup, inits all the variables
void lcd_setup(void)	{
	DDRA = 0xFF;
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	81 b9       	out	0x01, r24	; 1
	DDRD = (1 << E) | (1 << RS);
 184:	80 ec       	ldi	r24, 0xC0	; 192
 186:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	8f e7       	ldi	r24, 0x7F	; 127
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <lcd_setup+0xe>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_setup+0x18>
 198:	00 00       	nop
			
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	//Function reset
	lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  
 19a:	80 e3       	ldi	r24, 0x30	; 48
 19c:	ed df       	rcall	.-38     	; 0x178 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	86 e2       	ldi	r24, 0x26	; 38
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_setup+0x22>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_setup+0x28>
 1a8:	00 00       	nop
	_delay_us(80);
	//Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 1aa:	88 e3       	ldi	r24, 0x38	; 56
 1ac:	e5 df       	rcall	.-54     	; 0x178 <lcd_write_instruction>
 1ae:	86 e2       	ldi	r24, 0x26	; 38
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_setup+0x32>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_setup+0x38>
 1b8:	00 00       	nop
	_delay_us(80);
	//Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 1ba:	8c e0       	ldi	r24, 0x0C	; 12
 1bc:	dd df       	rcall	.-70     	; 0x178 <lcd_write_instruction>
 1be:	86 e2       	ldi	r24, 0x26	; 38
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_setup+0x42>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_setup+0x48>
 1c8:	00 00       	nop
	_delay_us(80);
	//Display clear
	lcd_write_instruction(lcd_Clear);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	d5 df       	rcall	.-86     	; 0x178 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ce:	89 e9       	ldi	r24, 0x99	; 153
 1d0:	99 e3       	ldi	r25, 0x39	; 57
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_setup+0x52>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_setup+0x58>
	_delay_ms(4);
	//Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	ce df       	rcall	.-100    	; 0x178 <lcd_write_instruction>
 1dc:	86 e6       	ldi	r24, 0x66	; 102
 1de:	9e e0       	ldi	r25, 0x0E	; 14
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_setup+0x60>
 1e4:	00 00       	nop
	_delay_ms(1);
	
	lcd_write_instruction(lcd_SetCursor);
 1e6:	80 e8       	ldi	r24, 0x80	; 128
 1e8:	c7 df       	rcall	.-114    	; 0x178 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	86 e2       	ldi	r24, 0x26	; 38
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_setup+0x6e>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_setup+0x74>
 1f4:	00 00       	nop
 1f6:	08 95       	ret

000001f8 <lcd_write_string>:
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
}

//Erases data on LCD and write new one.
void lcd_write_string(char string[2][16]){
 1f8:	ef 92       	push	r14
 1fa:	ff 92       	push	r15
 1fc:	0f 93       	push	r16
 1fe:	1f 93       	push	r17
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	7c 01       	movw	r14, r24
	lcd_write_instruction(lcd_Clear);
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	b7 df       	rcall	.-146    	; 0x178 <lcd_write_instruction>
 20a:	86 e2       	ldi	r24, 0x26	; 38
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_write_string+0x16>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_write_string+0x1c>
 214:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	af df       	rcall	.-162    	; 0x178 <lcd_write_instruction>
 21a:	e6 e2       	ldi	r30, 0x26	; 38
 21c:	f1 e0       	ldi	r31, 0x01	; 1
 21e:	31 97       	sbiw	r30, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <lcd_write_string+0x26>
 222:	00 c0       	rjmp	.+0      	; 0x224 <lcd_write_string+0x2c>
 224:	00 00       	nop
 226:	87 01       	movw	r16, r14
 228:	e7 01       	movw	r28, r14
 22a:	60 96       	adiw	r28, 0x10	; 16
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 22c:	f8 01       	movw	r30, r16
 22e:	81 91       	ld	r24, Z+
 230:	8f 01       	movw	r16, r30
 232:	95 df       	rcall	.-214    	; 0x15e <lcd_write_char>
 234:	86 e2       	ldi	r24, 0x26	; 38
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	f1 f7       	brne	.-4      	; 0x238 <lcd_write_string+0x40>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <lcd_write_string+0x46>
 23e:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 240:	0c 17       	cp	r16, r28
 242:	1d 07       	cpc	r17, r29
 244:	99 f7       	brne	.-26     	; 0x22c <lcd_write_string+0x34>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 246:	80 ec       	ldi	r24, 0xC0	; 192
 248:	97 df       	rcall	.-210    	; 0x178 <lcd_write_instruction>
 24a:	e6 e2       	ldi	r30, 0x26	; 38
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	31 97       	sbiw	r30, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_write_string+0x56>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_write_string+0x5c>
 254:	00 00       	nop
 256:	87 01       	movw	r16, r14
 258:	00 5e       	subi	r16, 0xE0	; 224
 25a:	1f 4f       	sbci	r17, 0xFF	; 255
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 25c:	89 91       	ld	r24, Y+
 25e:	7f df       	rcall	.-258    	; 0x15e <lcd_write_char>
 260:	86 e2       	ldi	r24, 0x26	; 38
 262:	91 e0       	ldi	r25, 0x01	; 1
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_write_string+0x6c>
 268:	00 c0       	rjmp	.+0      	; 0x26a <lcd_write_string+0x72>
 26a:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 26c:	c0 17       	cp	r28, r16
 26e:	d1 07       	cpc	r29, r17
 270:	a9 f7       	brne	.-22     	; 0x25c <lcd_write_string+0x64>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 272:	80 ec       	ldi	r24, 0xC0	; 192
 274:	81 df       	rcall	.-254    	; 0x178 <lcd_write_instruction>
 276:	e6 e2       	ldi	r30, 0x26	; 38
 278:	f1 e0       	ldi	r31, 0x01	; 1
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <lcd_write_string+0x82>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <lcd_write_string+0x88>
 280:	00 00       	nop
		_delay_us(80); 
	}
}
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	08 95       	ret

00000290 <initialize>:
	run();
}

void initialize(void){
	//i2c_setup(0x02);
	DDRB = 0xff;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	84 b9       	out	0x04, r24	; 4
	bluetooth_setup((long)115200);
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	72 ec       	ldi	r23, 0xC2	; 194
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	2b df       	rcall	.-426    	; 0xf4 <bluetooth_setup>
	
	lcd_setup();
 29e:	70 df       	rcall	.-288    	; 0x180 <lcd_setup>
	
	sei();
 2a0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	2f ef       	ldi	r18, 0xFF	; 255
 2a4:	8f e7       	ldi	r24, 0x7F	; 127
 2a6:	94 e0       	ldi	r25, 0x04	; 4
 2a8:	21 50       	subi	r18, 0x01	; 1
 2aa:	80 40       	sbci	r24, 0x00	; 0
 2ac:	90 40       	sbci	r25, 0x00	; 0
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <initialize+0x18>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <initialize+0x22>
 2b2:	00 00       	nop
 2b4:	08 95       	ret

000002b6 <run>:
	_delay_ms(100);
}

void run(void){
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	a0 97       	sbiw	r28, 0x20	; 32
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
	char test[2][16] = {"test", "Mer Test"};
 2ca:	80 e2       	ldi	r24, 0x20	; 32
 2cc:	e0 e0       	ldi	r30, 0x00	; 0
 2ce:	f1 e0       	ldi	r31, 0x01	; 1
 2d0:	de 01       	movw	r26, r28
 2d2:	11 96       	adiw	r26, 0x01	; 1
 2d4:	01 90       	ld	r0, Z+
 2d6:	0d 92       	st	X+, r0
 2d8:	8a 95       	dec	r24
 2da:	e1 f7       	brne	.-8      	; 0x2d4 <run+0x1e>
	lcd_write_string(test);
 2dc:	ce 01       	movw	r24, r28
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	8b df       	rcall	.-234    	; 0x1f8 <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	86 e2       	ldi	r24, 0x26	; 38
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <run+0x30>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <run+0x36>
 2ec:	00 00       	nop
	//lcd_write_instruction(lcd_Clear);
	_delay_us(80);
	//lcd_write_char('A');

	while(true)	{		
		if(bluetooth_get_new_data() == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 2ee:	16 df       	rcall	.-468    	; 0x11c <bluetooth_get_new_data>
 2f0:	88 23       	and	r24, r24
 2f2:	11 f0       	breq	.+4      	; 0x2f8 <run+0x42>
			byte data = bluetooth_fetch_new_data(); // Hämta ut data å sätt newData false
 2f4:	0e df       	rcall	.-484    	; 0x112 <bluetooth_fetch_new_data>
			bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
 2f6:	0b df       	rcall	.-490    	; 0x10e <bluetooth_clear_to_send>
		} 
		
		if((PIND & (1<<CTS)) == 0){ // Vi har tillåtelse att skicka data
 2f8:	4a 99       	sbic	0x09, 2	; 9
 2fa:	f9 cf       	rjmp	.-14     	; 0x2ee <run+0x38>
				bluetooth_send_byte(0x04);//0b00000100
 2fc:	84 e0       	ldi	r24, 0x04	; 4
 2fe:	ff de       	rcall	.-514    	; 0xfe <bluetooth_send_byte>
 300:	f6 cf       	rjmp	.-20     	; 0x2ee <run+0x38>

00000302 <main>:

byte a;

int main (void)
{
	board_init();
 302:	e2 de       	rcall	.-572    	; 0xc8 <board_init>
	initialize();
 304:	c5 df       	rcall	.-118    	; 0x290 <initialize>
	run();
 306:	d7 df       	rcall	.-82     	; 0x2b6 <run>

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
