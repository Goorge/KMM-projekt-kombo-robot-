
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000006d4  00000768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800124  00800124  0000078c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001412  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00001d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bcb  00000000  00000000  00002674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000126b2  00000000  00000000  000045b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000967  00000000  00000000  00016c66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000175cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004e96  00000000  00000000  00017725  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	39 c1       	rjmp	.+626    	; 0x2c4 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	ee c1       	rjmp	.+988    	; 0x446 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	dc d2       	rcall	.+1464   	; 0x67c <main>
  c4:	05 c3       	rjmp	.+1546   	; 0x6d0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
	//	data[i] = data_from_bt[i];
	return data_from_bt;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_add_to_send_queue>:
}

// Lägg in data i kö för att skicka över BT
bool bluetooth_add_to_send_queue(byte* data){
	//int nr_of_bytes = NELEMS(data);
	int nr_of_bytes = ((data[0] >> 4) & 0x0f);
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	42 95       	swap	r20
 11a:	4f 70       	andi	r20, 0x0F	; 15
 11c:	50 e0       	ldi	r21, 0x00	; 0
	//if(number_of_bytes_to_bt + nr_of_bytes > 15)
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
 11e:	50 93 25 01 	sts	0x0125, r21
 122:	40 93 24 01 	sts	0x0124, r20
	bytes_left_to_bt = nr_of_bytes;
 126:	50 93 01 01 	sts	0x0101, r21
 12a:	40 93 00 01 	sts	0x0100, r20
 12e:	a2 e3       	ldi	r26, 0x32	; 50
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i <= nr_of_bytes; i++)
		data_to_bt[i] = data[i];
 136:	81 91       	ld	r24, Z+
 138:	8d 93       	st	X+, r24
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
	bytes_left_to_bt = nr_of_bytes;
	for(int i = 0; i <= nr_of_bytes; i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	42 17       	cp	r20, r18
 140:	53 07       	cpc	r21, r19
 142:	cc f7       	brge	.-14     	; 0x136 <bluetooth_add_to_send_queue+0x22>
		data_to_bt[i] = data[i];
	
	return true;
}
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <bluetooth_handle_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }

// Behandla bluetooth
void bluetooth_handle_data( void ){		
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	a0 97       	sbiw	r28, 0x20	; 32
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
	// Hantera eventuell ny data ifrån BT
	if(newData == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 164:	80 91 2a 01 	lds	r24, 0x012A
 168:	88 23       	and	r24, r24
 16a:	81 f1       	breq	.+96     	; 0x1cc <bluetooth_handle_data+0x84>
		byte data = dataFromBT; // Hämta ut data å sätt newData false
 16c:	20 91 28 01 	lds	r18, 0x0128
		newData = false;
 170:	10 92 2a 01 	sts	0x012A, r1
		
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 174:	80 91 02 01 	lds	r24, 0x0102
 178:	90 91 03 01 	lds	r25, 0x0103
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	61 f4       	brne	.+24     	; 0x198 <bluetooth_handle_data+0x50>
			number_of_bytes_from_bt = (data >> 4) & 0x0f; 
 180:	82 2f       	mov	r24, r18
 182:	82 95       	swap	r24
 184:	8f 70       	andi	r24, 0x0F	; 15
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 27 01 	sts	0x0127, r25
 18c:	80 93 26 01 	sts	0x0126, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 190:	90 93 03 01 	sts	0x0103, r25
 194:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
 198:	80 91 02 01 	lds	r24, 0x0102
 19c:	90 91 03 01 	lds	r25, 0x0103
 1a0:	e0 91 26 01 	lds	r30, 0x0126
 1a4:	f0 91 27 01 	lds	r31, 0x0127
 1a8:	e8 1b       	sub	r30, r24
 1aa:	f9 0b       	sbc	r31, r25
 1ac:	ee 5b       	subi	r30, 0xBE	; 190
 1ae:	fe 4f       	sbci	r31, 0xFE	; 254
 1b0:	20 83       	st	Z, r18
		bytes_left_from_bt--;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	90 93 03 01 	sts	0x0103, r25
 1b8:	80 93 02 01 	sts	0x0102, r24
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	11 f0       	breq	.+4      	; 0x1c4 <bluetooth_handle_data+0x7c>
			bluetooth_clear_to_send();
 1c0:	a7 df       	rcall	.-178    	; 0x110 <bluetooth_clear_to_send>
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <bluetooth_handle_data+0x84>
		else 
			new_data_bt = true; // Denna sändningen är klar och vi vill inte ha mer data förens den är behandlad
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 29 01 	sts	0x0129, r24
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <bluetooth_handle_data+0x8e>
	} 

	// Om ny data, skicka vidare
	if(new_data_bt){ //Här är lite fel data_from_bt funkar inte...
 1cc:	80 91 29 01 	lds	r24, 0x0129
 1d0:	88 23       	and	r24, r24
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <bluetooth_handle_data+0x8e>
 1d4:	4d c0       	rjmp	.+154    	; 0x270 <bluetooth_handle_data+0x128>
		//int nr_of_bytes = ((data_from_bt[0] >> 4) & 0x0f) + 1;
		//byte data[nr_of_bytes];
		//for(int i = 0; i < nr_of_bytes; i++)
		//	data[i] = data_from_bt[i];
		if(data_from_bt[0] == 0x3f){
 1d6:	80 91 42 01 	lds	r24, 0x0142
 1da:	8f 33       	cpi	r24, 0x3F	; 63
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <bluetooth_handle_data+0x98>
 1de:	3e c0       	rjmp	.+124    	; 0x25c <bluetooth_handle_data+0x114>
			if(data_from_bt[1] == 0x01){
 1e0:	80 91 43 01 	lds	r24, 0x0143
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	09 f0       	breq	.+2      	; 0x1ea <bluetooth_handle_data+0xa2>
 1e8:	39 c0       	rjmp	.+114    	; 0x25c <bluetooth_handle_data+0x114>
				int a1 = data_from_bt[2];// + '0';
 1ea:	e2 e4       	ldi	r30, 0x42	; 66
 1ec:	f1 e0       	ldi	r31, 0x01	; 1
 1ee:	02 81       	ldd	r16, Z+2	; 0x02
 1f0:	10 e0       	ldi	r17, 0x00	; 0
				int a2 = data_from_bt[3];// + '0';
 1f2:	e3 81       	ldd	r30, Z+3	; 0x03
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
				char s1[16];
				s1[0] = (a1 / 100) % 10 +'0';
 1f6:	0f 2e       	mov	r0, r31
 1f8:	f4 e6       	ldi	r31, 0x64	; 100
 1fa:	ef 2e       	mov	r14, r31
 1fc:	f1 2c       	mov	r15, r1
 1fe:	f0 2d       	mov	r31, r0
 200:	c8 01       	movw	r24, r16
 202:	b7 01       	movw	r22, r14
 204:	3e d2       	rcall	.+1148   	; 0x682 <__divmodhi4>
 206:	cb 01       	movw	r24, r22
 208:	2a e0       	ldi	r18, 0x0A	; 10
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	b9 01       	movw	r22, r18
 20e:	39 d2       	rcall	.+1138   	; 0x682 <__divmodhi4>
 210:	80 5d       	subi	r24, 0xD0	; 208
 212:	89 8b       	std	Y+17, r24	; 0x11
				s1[1] = (a1 / 10) % 10 +'0';
 214:	c8 01       	movw	r24, r16
 216:	b9 01       	movw	r22, r18
 218:	34 d2       	rcall	.+1128   	; 0x682 <__divmodhi4>
 21a:	48 2f       	mov	r20, r24
 21c:	cb 01       	movw	r24, r22
 21e:	b9 01       	movw	r22, r18
 220:	30 d2       	rcall	.+1120   	; 0x682 <__divmodhi4>
 222:	80 5d       	subi	r24, 0xD0	; 208
 224:	8a 8b       	std	Y+18, r24	; 0x12
				s1[2] = (a1 / 1) % 10 +'0';
 226:	40 5d       	subi	r20, 0xD0	; 208
 228:	4b 8b       	std	Y+19, r20	; 0x13
				char s2[16];
				s2[0] = (a2 / 100) % 10 +'0';
 22a:	cf 01       	movw	r24, r30
 22c:	b7 01       	movw	r22, r14
 22e:	29 d2       	rcall	.+1106   	; 0x682 <__divmodhi4>
 230:	cb 01       	movw	r24, r22
 232:	b9 01       	movw	r22, r18
 234:	26 d2       	rcall	.+1100   	; 0x682 <__divmodhi4>
 236:	80 5d       	subi	r24, 0xD0	; 208
 238:	89 83       	std	Y+1, r24	; 0x01
				s2[1] = (a2 / 10) % 10 +'0';
 23a:	cf 01       	movw	r24, r30
 23c:	b9 01       	movw	r22, r18
 23e:	21 d2       	rcall	.+1090   	; 0x682 <__divmodhi4>
 240:	48 2f       	mov	r20, r24
 242:	cb 01       	movw	r24, r22
 244:	b9 01       	movw	r22, r18
 246:	1d d2       	rcall	.+1082   	; 0x682 <__divmodhi4>
 248:	80 5d       	subi	r24, 0xD0	; 208
 24a:	8a 83       	std	Y+2, r24	; 0x02
				s2[2] = (a2 / 1) % 10 +'0';
 24c:	40 5d       	subi	r20, 0xD0	; 208
 24e:	4b 83       	std	Y+3, r20	; 0x03
				doLCD(s1, s2);	
 250:	be 01       	movw	r22, r28
 252:	6f 5f       	subi	r22, 0xFF	; 255
 254:	7f 4f       	sbci	r23, 0xFF	; 255
 256:	ce 01       	movw	r24, r28
 258:	41 96       	adiw	r24, 0x11	; 17
 25a:	f2 d1       	rcall	.+996    	; 0x640 <doLCD>
			}
		}
		i2c_requestToSend(0x04, data_from_bt);
 25c:	62 e4       	ldi	r22, 0x42	; 66
 25e:	71 e0       	ldi	r23, 0x01	; 1
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	4b d0       	rcall	.+150    	; 0x2fa <i2c_requestToSend>
		bluetooth_add_to_send_queue(data_from_bt); // Ta bort när den skickar över i2c. 
 264:	82 e4       	ldi	r24, 0x42	; 66
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	55 df       	rcall	.-342    	; 0x114 <bluetooth_add_to_send_queue>
		new_data_bt = false;
 26a:	10 92 29 01 	sts	0x0129, r1
		bluetooth_clear_to_send();
 26e:	50 df       	rcall	.-352    	; 0x110 <bluetooth_clear_to_send>
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 270:	4a 99       	sbic	0x09, 2	; 9
 272:	1b c0       	rjmp	.+54     	; 0x2aa <bluetooth_handle_data+0x162>
 274:	80 91 00 01 	lds	r24, 0x0100
 278:	90 91 01 01 	lds	r25, 0x0101
 27c:	8f 3f       	cpi	r24, 0xFF	; 255
 27e:	3f ef       	ldi	r19, 0xFF	; 255
 280:	93 07       	cpc	r25, r19
 282:	99 f0       	breq	.+38     	; 0x2aa <bluetooth_handle_data+0x162>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt]);
 284:	e0 91 24 01 	lds	r30, 0x0124
 288:	f0 91 25 01 	lds	r31, 0x0125
 28c:	e8 1b       	sub	r30, r24
 28e:	f9 0b       	sbc	r31, r25
 290:	ee 5c       	subi	r30, 0xCE	; 206
 292:	fe 4f       	sbci	r31, 0xFE	; 254
 294:	80 81       	ld	r24, Z
 296:	34 df       	rcall	.-408    	; 0x100 <bluetooth_send_byte>
		bytes_left_to_bt--;
 298:	80 91 00 01 	lds	r24, 0x0100
 29c:	90 91 01 01 	lds	r25, 0x0101
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	90 93 01 01 	sts	0x0101, r25
 2a6:	80 93 00 01 	sts	0x0100, r24
	}
}
 2aa:	a0 96       	adiw	r28, 0x20	; 32
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	1f 91       	pop	r17
 2bc:	0f 91       	pop	r16
 2be:	ff 90       	pop	r15
 2c0:	ef 90       	pop	r14
 2c2:	08 95       	ret

000002c4 <__vector_20>:
	
	return true;
}

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 2c4:	1f 92       	push	r1
 2c6:	0f 92       	push	r0
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	0f 92       	push	r0
 2cc:	11 24       	eor	r1, r1
 2ce:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 2d0:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 2d2:	80 91 c6 00 	lds	r24, 0x00C6
 2d6:	80 93 28 01 	sts	0x0128, r24
	newData = true; // Tala om för main att vi har fått data
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	80 93 2a 01 	sts	0x012A, r24
 2e0:	8f 91       	pop	r24
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti

000002ec <i2c_setup>:
	incomingData();	
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
}

void i2c_setup(byte adress_) {
	TWAR = adress_;
 2ec:	80 93 ba 00 	sts	0x00BA, r24
	//TWSR = 0x00; // Ska nog inte vara med
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 2f0:	85 ec       	ldi	r24, 0xC5	; 197
 2f2:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 2f6:	3e 9a       	sbi	0x07, 6	; 7
 2f8:	08 95       	ret

000002fa <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 2fa:	fb 01       	movw	r30, r22
 2fc:	20 81       	ld	r18, Z
 2fe:	22 95       	swap	r18
 300:	2f 70       	andi	r18, 0x0F	; 15
 302:	42 2f       	mov	r20, r18
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	50 93 31 01 	sts	0x0131, r21
 30a:	40 93 30 01 	sts	0x0130, r20
 30e:	a1 e6       	ldi	r26, 0x61	; 97
 310:	b1 e0       	ldi	r27, 0x01	; 1
 312:	9a 01       	movw	r18, r20
 314:	2f 5f       	subi	r18, 0xFF	; 255
 316:	3f 4f       	sbci	r19, 0xFF	; 255
 318:	62 0f       	add	r22, r18
 31a:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 31c:	91 91       	ld	r25, Z+
 31e:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 320:	e6 17       	cp	r30, r22
 322:	f7 07       	cpc	r31, r23
 324:	d9 f7       	brne	.-10     	; 0x31c <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 326:	80 93 70 01 	sts	0x0170, r24
	bytesSent = 0;
 32a:	10 92 2f 01 	sts	0x012F, r1
 32e:	10 92 2e 01 	sts	0x012E, r1
	PORTC |= (1 << PC6);
 332:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 334:	f6 e3       	ldi	r31, 0x36	; 54
 336:	fa 95       	dec	r31
 338:	f1 f7       	brne	.-4      	; 0x336 <i2c_requestToSend+0x3c>
 33a:	00 00       	nop
	_delay_us(11);
	PORTC &= ~(1 << PC6);
 33c:	46 98       	cbi	0x08, 6	; 8
 33e:	08 95       	ret

00000340 <i2c_send>:
}



void i2c_send(byte prossesor,byte data){
	TWDR = data;
 340:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 344:	ec eb       	ldi	r30, 0xBC	; 188
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	80 6c       	ori	r24, 0xC0	; 192
 34c:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 34e:	80 81       	ld	r24, Z
 350:	88 23       	and	r24, r24
 352:	ec f7       	brge	.-6      	; 0x34e <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 354:	80 91 b9 00 	lds	r24, 0x00B9
 358:	88 7f       	andi	r24, 0xF8	; 248
 35a:	88 3b       	cpi	r24, 0xB8	; 184
 35c:	c1 f0       	breq	.+48     	; 0x38e <i2c_send+0x4e>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 35e:	84 e9       	ldi	r24, 0x94	; 148
 360:	80 93 bc 00 	sts	0x00BC, r24
		if(bytes_to_send_i2c >= bytesSent){
 364:	20 91 30 01 	lds	r18, 0x0130
 368:	30 91 31 01 	lds	r19, 0x0131
 36c:	80 91 2e 01 	lds	r24, 0x012E
 370:	90 91 2f 01 	lds	r25, 0x012F
 374:	28 17       	cp	r18, r24
 376:	39 07       	cpc	r19, r25
 378:	54 f0       	brlt	.+20     	; 0x38e <i2c_send+0x4e>
 37a:	82 e6       	ldi	r24, 0x62	; 98
 37c:	8a 95       	dec	r24
 37e:	f1 f7       	brne	.-4      	; 0x37c <i2c_send+0x3c>
 380:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 382:	46 9a       	sbi	0x08, 6	; 8
 384:	86 e3       	ldi	r24, 0x36	; 54
 386:	8a 95       	dec	r24
 388:	f1 f7       	brne	.-4      	; 0x386 <i2c_send+0x46>
 38a:	00 00       	nop
			_delay_us(11);
			PORTC &= ~(1 << PC6);
 38c:	46 98       	cbi	0x08, 6	; 8
 38e:	08 95       	ret

00000390 <i2c_recive>:
}

byte i2c_recive(void){
	//  if((TWSR & 0xF8)!=0x80)
	//	return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
 390:	ec eb       	ldi	r30, 0xBC	; 188
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	80 6c       	ori	r24, 0xC0	; 192
 398:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	ec f7       	brge	.-6      	; 0x39a <i2c_recive+0xa>
	byte test = TWDR;
 3a0:	80 91 bb 00 	lds	r24, 0x00BB
	return test;	
}
 3a4:	08 95       	ret

000003a6 <incomingData>:
	_delay_us(11);
	PORTC &= ~(1 << PC6);
}


byte incomingData(void){	
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // rec data, ack sent	
 3aa:	80 91 b9 00 	lds	r24, 0x00B9
 3ae:	88 7f       	andi	r24, 0xF8	; 248
 3b0:	80 36       	cpi	r24, 0x60	; 96
 3b2:	39 f5       	brne	.+78     	; 0x402 <incomingData+0x5c>
		i2c_data[bytefrom_i2c] = i2c_recive();
 3b4:	c0 91 2c 01 	lds	r28, 0x012C
 3b8:	d0 91 2d 01 	lds	r29, 0x012D
 3bc:	e9 df       	rcall	.-46     	; 0x390 <i2c_recive>
 3be:	ce 5a       	subi	r28, 0xAE	; 174
 3c0:	de 4f       	sbci	r29, 0xFE	; 254
 3c2:	88 83       	st	Y, r24
		if(bytefrom_i2c < ((i2c_data[0]>>4) &0x0f)){
 3c4:	80 91 52 01 	lds	r24, 0x0152
 3c8:	82 95       	swap	r24
 3ca:	8f 70       	andi	r24, 0x0F	; 15
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	20 91 2c 01 	lds	r18, 0x012C
 3d2:	30 91 2d 01 	lds	r19, 0x012D
 3d6:	28 17       	cp	r18, r24
 3d8:	39 07       	cpc	r19, r25
 3da:	34 f4       	brge	.+12     	; 0x3e8 <incomingData+0x42>
			TWCR &= ~(1 << TWINT);
 3dc:	ec eb       	ldi	r30, 0xBC	; 188
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	8f 77       	andi	r24, 0x7F	; 127
 3e4:	80 83       	st	Z, r24
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <incomingData+0x48>
		}
		else if((bytefrom_i2c) >= ((i2c_data[0]>>4)&0x0f))
			i2c_new_data = true;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 2b 01 	sts	0x012B, r24
		bytefrom_i2c++;
 3ee:	80 91 2c 01 	lds	r24, 0x012C
 3f2:	90 91 2d 01 	lds	r25, 0x012D
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 2d 01 	sts	0x012D, r25
 3fc:	80 93 2c 01 	sts	0x012C, r24
 400:	1e c0       	rjmp	.+60     	; 0x43e <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
 402:	80 91 b9 00 	lds	r24, 0x00B9
 406:	88 7f       	andi	r24, 0xF8	; 248
 408:	88 3a       	cpi	r24, 0xA8	; 168
 40a:	99 f4       	brne	.+38     	; 0x432 <incomingData+0x8c>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 40c:	80 91 2e 01 	lds	r24, 0x012E
 410:	90 91 2f 01 	lds	r25, 0x012F
 414:	9c 01       	movw	r18, r24
 416:	2f 5f       	subi	r18, 0xFF	; 255
 418:	3f 4f       	sbci	r19, 0xFF	; 255
 41a:	30 93 2f 01 	sts	0x012F, r19
 41e:	20 93 2e 01 	sts	0x012E, r18
 422:	fc 01       	movw	r30, r24
 424:	ef 59       	subi	r30, 0x9F	; 159
 426:	fe 4f       	sbci	r31, 0xFE	; 254
 428:	60 81       	ld	r22, Z
 42a:	80 91 70 01 	lds	r24, 0x0170
 42e:	88 df       	rcall	.-240    	; 0x340 <i2c_send>
 430:	06 c0       	rjmp	.+12     	; 0x43e <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
 432:	80 91 b9 00 	lds	r24, 0x00B9
 436:	88 7f       	andi	r24, 0xF8	; 248
 438:	80 38       	cpi	r24, 0x80	; 128
 43a:	09 f4       	brne	.+2      	; 0x43e <incomingData+0x98>
		i2c_recive();
 43c:	a9 df       	rcall	.-174    	; 0x390 <i2c_recive>
	}
	
	return 0x00;
}
 43e:	80 e0       	ldi	r24, 0x00	; 0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <__vector_26>:
int bytefrom_i2c=0;
byte i2c_data[15];
bool i2c_new_data = false;


ISR(TWI_vect){
 446:	1f 92       	push	r1
 448:	0f 92       	push	r0
 44a:	0f b6       	in	r0, 0x3f	; 63
 44c:	0f 92       	push	r0
 44e:	11 24       	eor	r1, r1
 450:	0b b6       	in	r0, 0x3b	; 59
 452:	0f 92       	push	r0
 454:	2f 93       	push	r18
 456:	3f 93       	push	r19
 458:	4f 93       	push	r20
 45a:	5f 93       	push	r21
 45c:	6f 93       	push	r22
 45e:	7f 93       	push	r23
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	af 93       	push	r26
 466:	bf 93       	push	r27
 468:	ef 93       	push	r30
 46a:	ff 93       	push	r31
	incomingData();	
 46c:	9c df       	rcall	.-200    	; 0x3a6 <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
 46e:	85 ec       	ldi	r24, 0xC5	; 197
 470:	80 93 bc 00 	sts	0x00BC, r24
}
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	bf 91       	pop	r27
 47a:	af 91       	pop	r26
 47c:	9f 91       	pop	r25
 47e:	8f 91       	pop	r24
 480:	7f 91       	pop	r23
 482:	6f 91       	pop	r22
 484:	5f 91       	pop	r21
 486:	4f 91       	pop	r20
 488:	3f 91       	pop	r19
 48a:	2f 91       	pop	r18
 48c:	0f 90       	pop	r0
 48e:	0b be       	out	0x3b, r0	; 59
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <i2c_handle_data>:
	byte test = TWDR;
	return test;	
}

void i2c_handle_data(void){
	if(i2c_new_data == true){
 49a:	80 91 2b 01 	lds	r24, 0x012B
 49e:	88 23       	and	r24, r24
 4a0:	71 f0       	breq	.+28     	; 0x4be <i2c_handle_data+0x24>
		//if(((i2c_data[0] >> 4) & 0x0f) == 3) 
		bluetooth_add_to_send_queue(i2c_data);
 4a2:	82 e5       	ldi	r24, 0x52	; 82
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	36 de       	rcall	.-916    	; 0x114 <bluetooth_add_to_send_queue>
		i2c_new_data = false;
 4a8:	10 92 2b 01 	sts	0x012B, r1
		bytefrom_i2c = 0;
 4ac:	10 92 2d 01 	sts	0x012D, r1
 4b0:	10 92 2c 01 	sts	0x012C, r1
		TWCR &= ~(1 << TWINT);
 4b4:	ec eb       	ldi	r30, 0xBC	; 188
 4b6:	f0 e0       	ldi	r31, 0x00	; 0
 4b8:	80 81       	ld	r24, Z
 4ba:	8f 77       	andi	r24, 0x7F	; 127
 4bc:	80 83       	st	Z, r24
 4be:	08 95       	ret

000004c0 <toggle_e>:
 4c0:	16 9a       	sbi	0x02, 6	; 2
 4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <toggle_e+0x4>
 4c4:	16 98       	cbi	0x02, 6	; 2
 4c6:	08 95       	ret

000004c8 <lcd_write>:
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	d8 2f       	mov	r29, r24
 4ce:	66 23       	and	r22, r22
 4d0:	11 f0       	breq	.+4      	; 0x4d6 <lcd_write+0xe>
 4d2:	14 9a       	sbi	0x02, 4	; 2
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <lcd_write+0x10>
 4d6:	14 98       	cbi	0x02, 4	; 2
 4d8:	15 98       	cbi	0x02, 5	; 2
 4da:	81 b1       	in	r24, 0x01	; 1
 4dc:	8f 60       	ori	r24, 0x0F	; 15
 4de:	81 b9       	out	0x01, r24	; 1
 4e0:	c2 b1       	in	r28, 0x02	; 2
 4e2:	c0 7f       	andi	r28, 0xF0	; 240
 4e4:	8d 2f       	mov	r24, r29
 4e6:	82 95       	swap	r24
 4e8:	8f 70       	andi	r24, 0x0F	; 15
 4ea:	8c 2b       	or	r24, r28
 4ec:	82 b9       	out	0x02, r24	; 2
 4ee:	e8 df       	rcall	.-48     	; 0x4c0 <toggle_e>
 4f0:	df 70       	andi	r29, 0x0F	; 15
 4f2:	dc 2b       	or	r29, r28
 4f4:	d2 b9       	out	0x02, r29	; 2
 4f6:	e4 df       	rcall	.-56     	; 0x4c0 <toggle_e>
 4f8:	cf 60       	ori	r28, 0x0F	; 15
 4fa:	c2 b9       	out	0x02, r28	; 2
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <lcd_read>:
 502:	88 23       	and	r24, r24
 504:	11 f0       	breq	.+4      	; 0x50a <lcd_read+0x8>
 506:	14 9a       	sbi	0x02, 4	; 2
 508:	01 c0       	rjmp	.+2      	; 0x50c <lcd_read+0xa>
 50a:	14 98       	cbi	0x02, 4	; 2
 50c:	15 9a       	sbi	0x02, 5	; 2
 50e:	81 b1       	in	r24, 0x01	; 1
 510:	80 7f       	andi	r24, 0xF0	; 240
 512:	81 b9       	out	0x01, r24	; 1
 514:	16 9a       	sbi	0x02, 6	; 2
 516:	00 c0       	rjmp	.+0      	; 0x518 <lcd_read+0x16>
 518:	20 b1       	in	r18, 0x00	; 0
 51a:	16 98       	cbi	0x02, 6	; 2
 51c:	00 c0       	rjmp	.+0      	; 0x51e <lcd_read+0x1c>
 51e:	16 9a       	sbi	0x02, 6	; 2
 520:	00 c0       	rjmp	.+0      	; 0x522 <lcd_read+0x20>
 522:	90 b1       	in	r25, 0x00	; 0
 524:	22 95       	swap	r18
 526:	20 7f       	andi	r18, 0xF0	; 240
 528:	89 2f       	mov	r24, r25
 52a:	8f 70       	andi	r24, 0x0F	; 15
 52c:	16 98       	cbi	0x02, 6	; 2
 52e:	82 2b       	or	r24, r18
 530:	08 95       	ret

00000532 <lcd_waitbusy>:
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	e6 df       	rcall	.-52     	; 0x502 <lcd_read>
 536:	88 23       	and	r24, r24
 538:	e4 f3       	brlt	.-8      	; 0x532 <lcd_waitbusy>
 53a:	82 e0       	ldi	r24, 0x02	; 2
 53c:	8a 95       	dec	r24
 53e:	f1 f7       	brne	.-4      	; 0x53c <lcd_waitbusy+0xa>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	df cf       	rjmp	.-66     	; 0x502 <lcd_read>
 544:	08 95       	ret

00000546 <lcd_command>:
 546:	cf 93       	push	r28
 548:	c8 2f       	mov	r28, r24
 54a:	f3 df       	rcall	.-26     	; 0x532 <lcd_waitbusy>
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	8c 2f       	mov	r24, r28
 550:	bb df       	rcall	.-138    	; 0x4c8 <lcd_write>
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <lcd_gotoxy>:
 556:	61 11       	cpse	r22, r1
 558:	03 c0       	rjmp	.+6      	; 0x560 <lcd_gotoxy+0xa>
 55a:	80 58       	subi	r24, 0x80	; 128
 55c:	f4 cf       	rjmp	.-24     	; 0x546 <lcd_command>
 55e:	08 95       	ret
 560:	80 54       	subi	r24, 0x40	; 64
 562:	f1 cf       	rjmp	.-30     	; 0x546 <lcd_command>
 564:	08 95       	ret

00000566 <lcd_clrscr>:
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	ee df       	rcall	.-36     	; 0x546 <lcd_command>
 56a:	89 ef       	ldi	r24, 0xF9	; 249
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <lcd_clrscr+0x8>
 572:	00 c0       	rjmp	.+0      	; 0x574 <lcd_clrscr+0xe>
 574:	00 00       	nop
 576:	08 95       	ret

00000578 <lcd_putc>:
 578:	cf 93       	push	r28
 57a:	c8 2f       	mov	r28, r24
 57c:	da df       	rcall	.-76     	; 0x532 <lcd_waitbusy>
 57e:	ca 30       	cpi	r28, 0x0A	; 10
 580:	41 f4       	brne	.+16     	; 0x592 <lcd_putc+0x1a>
 582:	80 34       	cpi	r24, 0x40	; 64
 584:	10 f0       	brcs	.+4      	; 0x58a <lcd_putc+0x12>
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	01 c0       	rjmp	.+2      	; 0x58c <lcd_putc+0x14>
 58a:	80 e4       	ldi	r24, 0x40	; 64
 58c:	80 58       	subi	r24, 0x80	; 128
 58e:	db df       	rcall	.-74     	; 0x546 <lcd_command>
 590:	03 c0       	rjmp	.+6      	; 0x598 <lcd_putc+0x20>
 592:	61 e0       	ldi	r22, 0x01	; 1
 594:	8c 2f       	mov	r24, r28
 596:	98 df       	rcall	.-208    	; 0x4c8 <lcd_write>
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <lcd_puts>:
 59c:	cf 93       	push	r28
 59e:	df 93       	push	r29
 5a0:	ec 01       	movw	r28, r24
 5a2:	21 96       	adiw	r28, 0x01	; 1
 5a4:	fc 01       	movw	r30, r24
 5a6:	80 81       	ld	r24, Z
 5a8:	88 23       	and	r24, r24
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <lcd_puts+0x18>
 5ac:	e5 df       	rcall	.-54     	; 0x578 <lcd_putc>
 5ae:	89 91       	ld	r24, Y+
 5b0:	81 11       	cpse	r24, r1
 5b2:	fc cf       	rjmp	.-8      	; 0x5ac <lcd_puts+0x10>
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	08 95       	ret

000005ba <lcd_init>:
 5ba:	cf 93       	push	r28
 5bc:	c8 2f       	mov	r28, r24
 5be:	91 b1       	in	r25, 0x01	; 1
 5c0:	9f 67       	ori	r25, 0x7F	; 127
 5c2:	91 b9       	out	0x01, r25	; 1
 5c4:	87 e8       	ldi	r24, 0x87	; 135
 5c6:	93 e1       	ldi	r25, 0x13	; 19
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <lcd_init+0xe>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <lcd_init+0x14>
 5ce:	00 00       	nop
 5d0:	11 9a       	sbi	0x02, 1	; 2
 5d2:	10 9a       	sbi	0x02, 0	; 2
 5d4:	75 df       	rcall	.-278    	; 0x4c0 <toggle_e>
 5d6:	8b ed       	ldi	r24, 0xDB	; 219
 5d8:	95 e0       	ldi	r25, 0x05	; 5
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <lcd_init+0x20>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <lcd_init+0x26>
 5e0:	00 00       	nop
 5e2:	6e df       	rcall	.-292    	; 0x4c0 <toggle_e>
 5e4:	97 e1       	ldi	r25, 0x17	; 23
 5e6:	9a 95       	dec	r25
 5e8:	f1 f7       	brne	.-4      	; 0x5e6 <lcd_init+0x2c>
 5ea:	00 00       	nop
 5ec:	69 df       	rcall	.-302    	; 0x4c0 <toggle_e>
 5ee:	87 e1       	ldi	r24, 0x17	; 23
 5f0:	8a 95       	dec	r24
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <lcd_init+0x36>
 5f4:	00 00       	nop
 5f6:	10 98       	cbi	0x02, 0	; 2
 5f8:	63 df       	rcall	.-314    	; 0x4c0 <toggle_e>
 5fa:	97 e1       	ldi	r25, 0x17	; 23
 5fc:	9a 95       	dec	r25
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <lcd_init+0x42>
 600:	00 00       	nop
 602:	88 e2       	ldi	r24, 0x28	; 40
 604:	a0 df       	rcall	.-192    	; 0x546 <lcd_command>
 606:	88 e0       	ldi	r24, 0x08	; 8
 608:	9e df       	rcall	.-196    	; 0x546 <lcd_command>
 60a:	ad df       	rcall	.-166    	; 0x566 <lcd_clrscr>
 60c:	86 e0       	ldi	r24, 0x06	; 6
 60e:	9b df       	rcall	.-202    	; 0x546 <lcd_command>
 610:	8c 2f       	mov	r24, r28
 612:	99 df       	rcall	.-206    	; 0x546 <lcd_command>
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	72 ec       	ldi	r23, 0xC2	; 194
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	69 dd       	rcall	.-1326   	; 0xf4 <bluetooth_setup>
	//lcd_setup();
	lcd_init(LCD_DISP_ON); /* initialize lcd, display on, cursor on */
 622:	8c e0       	ldi	r24, 0x0C	; 12
 624:	ca df       	rcall	.-108    	; 0x5ba <lcd_init>
	i2c_setup(0x02);
 626:	82 e0       	ldi	r24, 0x02	; 2
 628:	61 de       	rcall	.-830    	; 0x2ec <i2c_setup>
	sei(); // Enable interrupt
 62a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 62c:	2f ef       	ldi	r18, 0xFF	; 255
 62e:	8f ef       	ldi	r24, 0xFF	; 255
 630:	99 e5       	ldi	r25, 0x59	; 89
 632:	21 50       	subi	r18, 0x01	; 1
 634:	80 40       	sbci	r24, 0x00	; 0
 636:	90 40       	sbci	r25, 0x00	; 0
 638:	e1 f7       	brne	.-8      	; 0x632 <initialize+0x1a>
 63a:	00 c0       	rjmp	.+0      	; 0x63c <initialize+0x24>
 63c:	00 00       	nop
 63e:	08 95       	ret

00000640 <doLCD>:
		bluetooth_handle_data();
		i2c_handle_data();
	}
}

void doLCD(char* s1, char* s2){
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	8c 01       	movw	r16, r24
 64a:	eb 01       	movw	r28, r22
	lcd_clrscr();             /* clear screen of lcd */
 64c:	8c df       	rcall	.-232    	; 0x566 <lcd_clrscr>
	lcd_gotoxy(0,0);              /* bring cursor to 0,0 */
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	81 df       	rcall	.-254    	; 0x556 <lcd_gotoxy>
	lcd_puts(s1);        /* type something random */
 654:	c8 01       	movw	r24, r16
 656:	a2 df       	rcall	.-188    	; 0x59c <lcd_puts>
	lcd_gotoxy(0,1);          /* go to 2nd col, 2nd row*/
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	7c df       	rcall	.-264    	; 0x556 <lcd_gotoxy>
	lcd_puts(s2);  /* type something random */
 65e:	ce 01       	movw	r24, r28
 660:	9d df       	rcall	.-198    	; 0x59c <lcd_puts>
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	08 95       	ret

0000066c <run>:
	_delay_ms(2000);
}
char data[15];

void run(void){	
	doLCD("ProcessorKlubben" , "Kombo-Monstret");
 66c:	64 e0       	ldi	r22, 0x04	; 4
 66e:	71 e0       	ldi	r23, 0x01	; 1
 670:	83 e1       	ldi	r24, 0x13	; 19
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	e5 df       	rcall	.-54     	; 0x640 <doLCD>
	while(true)	{
		//i2c_requestToSend(0x04,data);
		bluetooth_handle_data();
 676:	68 dd       	rcall	.-1328   	; 0x148 <bluetooth_handle_data>
		i2c_handle_data();
 678:	10 df       	rcall	.-480    	; 0x49a <i2c_handle_data>
	}
 67a:	fd cf       	rjmp	.-6      	; 0x676 <run+0xa>

0000067c <main>:
void initialize(void);
//void doLCD(void);
void doLCD(char* s1, char* s2);

int main (void){
	board_init();
 67c:	25 dd       	rcall	.-1462   	; 0xc8 <board_init>
	initialize();
 67e:	cc df       	rcall	.-104    	; 0x618 <initialize>
	run();
 680:	f5 df       	rcall	.-22     	; 0x66c <run>

00000682 <__divmodhi4>:
 682:	97 fb       	bst	r25, 7
 684:	07 2e       	mov	r0, r23
 686:	16 f4       	brtc	.+4      	; 0x68c <__divmodhi4+0xa>
 688:	00 94       	com	r0
 68a:	06 d0       	rcall	.+12     	; 0x698 <__divmodhi4_neg1>
 68c:	77 fd       	sbrc	r23, 7
 68e:	08 d0       	rcall	.+16     	; 0x6a0 <__divmodhi4_neg2>
 690:	0b d0       	rcall	.+22     	; 0x6a8 <__udivmodhi4>
 692:	07 fc       	sbrc	r0, 7
 694:	05 d0       	rcall	.+10     	; 0x6a0 <__divmodhi4_neg2>
 696:	3e f4       	brtc	.+14     	; 0x6a6 <__divmodhi4_exit>

00000698 <__divmodhi4_neg1>:
 698:	90 95       	com	r25
 69a:	81 95       	neg	r24
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	08 95       	ret

000006a0 <__divmodhi4_neg2>:
 6a0:	70 95       	com	r23
 6a2:	61 95       	neg	r22
 6a4:	7f 4f       	sbci	r23, 0xFF	; 255

000006a6 <__divmodhi4_exit>:
 6a6:	08 95       	ret

000006a8 <__udivmodhi4>:
 6a8:	aa 1b       	sub	r26, r26
 6aa:	bb 1b       	sub	r27, r27
 6ac:	51 e1       	ldi	r21, 0x11	; 17
 6ae:	07 c0       	rjmp	.+14     	; 0x6be <__udivmodhi4_ep>

000006b0 <__udivmodhi4_loop>:
 6b0:	aa 1f       	adc	r26, r26
 6b2:	bb 1f       	adc	r27, r27
 6b4:	a6 17       	cp	r26, r22
 6b6:	b7 07       	cpc	r27, r23
 6b8:	10 f0       	brcs	.+4      	; 0x6be <__udivmodhi4_ep>
 6ba:	a6 1b       	sub	r26, r22
 6bc:	b7 0b       	sbc	r27, r23

000006be <__udivmodhi4_ep>:
 6be:	88 1f       	adc	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	5a 95       	dec	r21
 6c4:	a9 f7       	brne	.-22     	; 0x6b0 <__udivmodhi4_loop>
 6c6:	80 95       	com	r24
 6c8:	90 95       	com	r25
 6ca:	bc 01       	movw	r22, r24
 6cc:	cd 01       	movw	r24, r26
 6ce:	08 95       	ret

000006d0 <_exit>:
 6d0:	f8 94       	cli

000006d2 <__stop_program>:
 6d2:	ff cf       	rjmp	.-2      	; 0x6d2 <__stop_program>
