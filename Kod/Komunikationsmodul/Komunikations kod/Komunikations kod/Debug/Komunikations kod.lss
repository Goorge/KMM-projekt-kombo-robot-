
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800104  00800104  00000340  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000370  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098b  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000451  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013a8  00000000  00000000  0000126c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002614  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011d47  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000212  00000000  00000000  000144c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000146d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000468c  00000000  00000000  00014779  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d0 c0       	rjmp	.+416    	; 0x1f2 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 32       	cpi	r26, 0x2B	; 43
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ec d0       	rcall	.+472    	; 0x29c <main>
  c4:	ef c0       	rjmp	.+478    	; 0x2a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
	newData = false;
	return dataFromBT;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return newData; }
  ca:	88 ed       	ldi	r24, 0xD8	; 216
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_handle_data>:

// Behandla bluetooth
void bluetooth_handle_data( void ){		
	// Hantera eventuell ny data ifrån BT
	if(bluetooth_get_new_data() == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 114:	80 91 0a 01 	lds	r24, 0x010A
 118:	88 23       	and	r24, r24
 11a:	09 f4       	brne	.+2      	; 0x11e <bluetooth_handle_data+0xa>
 11c:	64 c0       	rjmp	.+200    	; 0x1e6 <bluetooth_handle_data+0xd2>
// Säg till blåtandsenheten att du är redo att ta emot mer data. 
void bluetooth_clear_to_send(void){	PORTD &= ~(1 << RTS); }// Clear To Send;

//Hämta ut datan från BT
byte bluetooth_fetch_new_data(void){
	newData = false;
 11e:	10 92 0a 01 	sts	0x010A, r1
	return dataFromBT;
 122:	20 91 09 01 	lds	r18, 0x0109
	// Hantera eventuell ny data ifrån BT
	if(bluetooth_get_new_data() == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
		byte data = bluetooth_fetch_new_data(); // Hämta ut data å sätt newData false
			
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 126:	80 91 02 01 	lds	r24, 0x0102
 12a:	90 91 03 01 	lds	r25, 0x0103
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	61 f4       	brne	.+24     	; 0x14a <bluetooth_handle_data+0x36>
			number_of_bytes_from_bt = (data >> 4); 
 132:	82 2f       	mov	r24, r18
 134:	82 95       	swap	r24
 136:	8f 70       	andi	r24, 0x0F	; 15
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	90 93 08 01 	sts	0x0108, r25
 13e:	80 93 07 01 	sts	0x0107, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 142:	90 93 03 01 	sts	0x0103, r25
 146:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
 14a:	80 91 02 01 	lds	r24, 0x0102
 14e:	90 91 03 01 	lds	r25, 0x0103
 152:	e0 91 07 01 	lds	r30, 0x0107
 156:	f0 91 08 01 	lds	r31, 0x0108
 15a:	e8 1b       	sub	r30, r24
 15c:	f9 0b       	sbc	r31, r25
 15e:	e5 5e       	subi	r30, 0xE5	; 229
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	20 83       	st	Z, r18
		--bytes_left_from_bt;
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	90 93 03 01 	sts	0x0103, r25
 16a:	80 93 02 01 	sts	0x0102, r24
			
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	11 f0       	breq	.+4      	; 0x176 <bluetooth_handle_data+0x62>
			bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
 172:	ce df       	rcall	.-100    	; 0x110 <bluetooth_clear_to_send>
 174:	38 c0       	rjmp	.+112    	; 0x1e6 <bluetooth_handle_data+0xd2>
 176:	eb e1       	ldi	r30, 0x1B	; 27
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	ab e0       	ldi	r26, 0x0B	; 11
 17c:	b1 e0       	ldi	r27, 0x01	; 1
 17e:	2b e2       	ldi	r18, 0x2B	; 43
 180:	31 e0       	ldi	r19, 0x01	; 1
		else dataSend = true;	
	} 

	if( dataSend ){ //bytes_left_from_bt == -1 && bytes_left_to_bt == -1){
		for(int i = 0; i < NELEMS(data_from_bt); i++)
			data_to_bt[i] = data_from_bt[i];
 182:	81 91       	ld	r24, Z+
 184:	8d 93       	st	X+, r24
			bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
		else dataSend = true;	
	} 

	if( dataSend ){ //bytes_left_from_bt == -1 && bytes_left_to_bt == -1){
		for(int i = 0; i < NELEMS(data_from_bt); i++)
 186:	e2 17       	cp	r30, r18
 188:	f3 07       	cpc	r31, r19
 18a:	d9 f7       	brne	.-10     	; 0x182 <bluetooth_handle_data+0x6e>
			data_to_bt[i] = data_from_bt[i];
		dataSend = false;
 18c:	10 92 04 01 	sts	0x0104, r1
		number_of_bytes_to_bt = number_of_bytes_from_bt;
 190:	80 91 07 01 	lds	r24, 0x0107
 194:	90 91 08 01 	lds	r25, 0x0108
 198:	90 93 06 01 	sts	0x0106, r25
 19c:	80 93 05 01 	sts	0x0105, r24
		bytes_left_to_bt = number_of_bytes_from_bt;
 1a0:	90 93 01 01 	sts	0x0101, r25
 1a4:	80 93 00 01 	sts	0x0100, r24
		bluetooth_clear_to_send();
 1a8:	b3 df       	rcall	.-154    	; 0x110 <bluetooth_clear_to_send>
		// Då det bara kommer skickas styrdata via bt är det dags att skicka data till styrmodulen
		// i2csendstuff.
	}
	
	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 1aa:	4a 99       	sbic	0x09, 2	; 9
 1ac:	21 c0       	rjmp	.+66     	; 0x1f0 <bluetooth_handle_data+0xdc>
 1ae:	80 91 00 01 	lds	r24, 0x0100
 1b2:	90 91 01 01 	lds	r25, 0x0101
 1b6:	8f 3f       	cpi	r24, 0xFF	; 255
 1b8:	3f ef       	ldi	r19, 0xFF	; 255
 1ba:	93 07       	cpc	r25, r19
 1bc:	c9 f0       	breq	.+50     	; 0x1f0 <bluetooth_handle_data+0xdc>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt]);
 1be:	e0 91 05 01 	lds	r30, 0x0105
 1c2:	f0 91 06 01 	lds	r31, 0x0106
 1c6:	e8 1b       	sub	r30, r24
 1c8:	f9 0b       	sbc	r31, r25
 1ca:	e5 5f       	subi	r30, 0xF5	; 245
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	80 81       	ld	r24, Z
 1d0:	97 df       	rcall	.-210    	; 0x100 <bluetooth_send_byte>
		--bytes_left_to_bt;
 1d2:	80 91 00 01 	lds	r24, 0x0100
 1d6:	90 91 01 01 	lds	r25, 0x0101
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	90 93 01 01 	sts	0x0101, r25
 1e0:	80 93 00 01 	sts	0x0100, r24
 1e4:	08 95       	ret
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
			bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
		else dataSend = true;	
	} 

	if( dataSend ){ //bytes_left_from_bt == -1 && bytes_left_to_bt == -1){
 1e6:	80 91 04 01 	lds	r24, 0x0104
 1ea:	88 23       	and	r24, r24
 1ec:	f1 f2       	breq	.-68     	; 0x1aa <bluetooth_handle_data+0x96>
 1ee:	c3 cf       	rjmp	.-122    	; 0x176 <bluetooth_handle_data+0x62>
 1f0:	08 95       	ret

000001f2 <__vector_20>:
		--bytes_left_to_bt;
	}
}

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 1fe:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 200:	80 91 c6 00 	lds	r24, 0x00C6
 204:	80 93 09 01 	sts	0x0109, r24
	newData = true; // Tala om för main att vi har fått data
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 0a 01 	sts	0x010A, r24
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <lcd_write_instruction>:
	_delay_us(100); //TSU2	// Vänta på att data ska stabiliseras
}

// Writes instruction 
void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);// Se till att E är låg från början
 21a:	5f 98       	cbi	0x0b, 7	; 11
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 21c:	82 b9       	out	0x02, r24	; 2
	
	
	PORTD &= ~(1 << RS); // sätt RS
 21e:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 220:	95 e0       	ldi	r25, 0x05	; 5
 222:	9a 95       	dec	r25
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_write_instruction+0x8>
	_delay_us(1); //TSU1
	PORTD |= (1 << E); // Sätt Enable
 226:	5f 9a       	sbi	0x0b, 7	; 11
 228:	95 e0       	ldi	r25, 0x05	; 5
 22a:	9a 95       	dec	r25
 22c:	f1 f7       	brne	.-4      	; 0x22a <lcd_write_instruction+0x10>
	_delay_us(1); // TW
	PORTD &= ~(1 << E);
 22e:	5f 98       	cbi	0x0b, 7	; 11
 230:	95 e0       	ldi	r25, 0x05	; 5
 232:	9a 95       	dec	r25
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_write_instruction+0x18>
	_delay_us(1); // TH1
	PORTD &= ~(1 << RS); // Nolställ E och RS så att dom är noll vid nästa instruktion/charläsning	
 236:	5e 98       	cbi	0x0b, 6	; 11

	// Lägg in behövd delay ( 1.53 ms för clear och home & 39 us för de andra )
	if(instruction == lcd_Home || instruction == lcd_Clear)
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	28 f4       	brcc	.+10     	; 0x248 <lcd_write_instruction+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	83 e3       	ldi	r24, 0x33	; 51
 240:	9b e2       	ldi	r25, 0x2B	; 43
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_write_instruction+0x28>
 246:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 248:	80 e7       	ldi	r24, 0x70	; 112
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <lcd_write_instruction+0x32>
 250:	00 c0       	rjmp	.+0      	; 0x252 <lcd_write_instruction+0x38>
 252:	08 95       	ret

00000254 <lcd_setup>:
#include "LCD.h"
#include  "bluetooth.h"

//LCD Setup, inits all the variables
void lcd_setup(void){
	DDRA = 0xFF;
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1 << E) | (1 << RS);
 258:	8a b1       	in	r24, 0x0a	; 10
 25a:	80 6c       	ori	r24, 0xC0	; 192
 25c:	8a b9       	out	0x0a, r24	; 10
		
	PORTD &= ~((1 << E) | (1 << RS));		
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	8f 73       	andi	r24, 0x3F	; 63
 262:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	8f e7       	ldi	r24, 0x7F	; 127
 268:	94 e0       	ldi	r25, 0x04	; 4
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <lcd_setup+0x16>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_setup+0x20>
 274:	00 00       	nop
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	// Function reset Behövs nog inte
	//lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  // Kanske inte behövs
	// Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 276:	88 e3       	ldi	r24, 0x38	; 56
 278:	d0 df       	rcall	.-96     	; 0x21a <lcd_write_instruction>
	// Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 27a:	8c e0       	ldi	r24, 0x0C	; 12
 27c:	ce df       	rcall	.-100    	; 0x21a <lcd_write_instruction>
	// Display clear
	lcd_write_instruction(lcd_Clear);
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	cc df       	rcall	.-104    	; 0x21a <lcd_write_instruction>
	// Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	ca df       	rcall	.-108    	; 0x21a <lcd_write_instruction>
	// Set cursor home and on ddrd 
	lcd_write_instruction(lcd_SetCursor);
 286:	80 e8       	ldi	r24, 0x80	; 128
 288:	c8 cf       	rjmp	.-112    	; 0x21a <lcd_write_instruction>
 28a:	08 95       	ret

0000028c <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	72 ec       	ldi	r23, 0xC2	; 194
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	2f df       	rcall	.-418    	; 0xf4 <bluetooth_setup>
	lcd_setup();
 296:	de df       	rcall	.-68     	; 0x254 <lcd_setup>
	
	sei(); // Enable interrupt
 298:	78 94       	sei
 29a:	08 95       	ret

0000029c <main>:

void run(void);
void initialize(void);

int main (void){
	board_init();
 29c:	15 df       	rcall	.-470    	; 0xc8 <board_init>
	initialize();
 29e:	f6 df       	rcall	.-20     	; 0x28c <initialize>
	//_delay_ms(100);
}

void run(void){
	while(true)	{
		bluetooth_handle_data();
 2a0:	39 df       	rcall	.-398    	; 0x114 <bluetooth_handle_data>
 2a2:	fe cf       	rjmp	.-4      	; 0x2a0 <main+0x4>

000002a4 <_exit>:
 2a4:	f8 94       	cli

000002a6 <__stop_program>:
 2a6:	ff cf       	rjmp	.-2      	; 0x2a6 <__stop_program>
