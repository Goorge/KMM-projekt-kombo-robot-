
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004ec  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005d  00800104  00800104  00000584  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ee4  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000717  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b6b  00000000  00000000  00001d27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00003894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011ede  00000000  00000000  00003ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000480  00000000  00000000  000159c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00015e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004960  00000000  00000000  00015f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	db c0       	rjmp	.+438    	; 0x208 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	a6 c1       	rjmp	.+844    	; 0x3b6 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 36       	cpi	r26, 0x61	; 97
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0f d2       	rcall	.+1054   	; 0x4e2 <main>
  c4:	11 c2       	rjmp	.+1058   	; 0x4e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_add_to_send_queue>:
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	42 95       	swap	r20
 11a:	4f 70       	andi	r20, 0x0F	; 15
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	50 93 05 01 	sts	0x0105, r21
 122:	40 93 04 01 	sts	0x0104, r20
 126:	50 93 01 01 	sts	0x0101, r21
 12a:	40 93 00 01 	sts	0x0100, r20
 12e:	a3 e1       	ldi	r26, 0x13	; 19
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	81 91       	ld	r24, Z+
 138:	8d 93       	st	X+, r24
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	42 17       	cp	r20, r18
 140:	53 07       	cpc	r21, r19
 142:	cc f7       	brge	.-14     	; 0x136 <bluetooth_add_to_send_queue+0x22>
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <bluetooth_handle_data>:
 148:	80 91 0a 01 	lds	r24, 0x010A
 14c:	88 23       	and	r24, r24
 14e:	81 f1       	breq	.+96     	; 0x1b0 <bluetooth_handle_data+0x68>
 150:	20 91 08 01 	lds	r18, 0x0108
 154:	10 92 0a 01 	sts	0x010A, r1
 158:	80 91 02 01 	lds	r24, 0x0102
 15c:	90 91 03 01 	lds	r25, 0x0103
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	61 f4       	brne	.+24     	; 0x17c <bluetooth_handle_data+0x34>
 164:	82 2f       	mov	r24, r18
 166:	82 95       	swap	r24
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 07 01 	sts	0x0107, r25
 170:	80 93 06 01 	sts	0x0106, r24
 174:	90 93 03 01 	sts	0x0103, r25
 178:	80 93 02 01 	sts	0x0102, r24
 17c:	80 91 02 01 	lds	r24, 0x0102
 180:	90 91 03 01 	lds	r25, 0x0103
 184:	e0 91 06 01 	lds	r30, 0x0106
 188:	f0 91 07 01 	lds	r31, 0x0107
 18c:	e8 1b       	sub	r30, r24
 18e:	f9 0b       	sbc	r31, r25
 190:	ed 5d       	subi	r30, 0xDD	; 221
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	20 83       	st	Z, r18
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	90 93 03 01 	sts	0x0103, r25
 19c:	80 93 02 01 	sts	0x0102, r24
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <bluetooth_handle_data+0x60>
 1a4:	b5 df       	rcall	.-150    	; 0x110 <bluetooth_clear_to_send>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <bluetooth_handle_data+0x68>
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 09 01 	sts	0x0109, r24
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <bluetooth_handle_data+0x70>
 1b0:	80 91 09 01 	lds	r24, 0x0109
 1b4:	88 23       	and	r24, r24
 1b6:	51 f0       	breq	.+20     	; 0x1cc <bluetooth_handle_data+0x84>
 1b8:	63 e2       	ldi	r22, 0x23	; 35
 1ba:	71 e0       	ldi	r23, 0x01	; 1
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	3f d0       	rcall	.+126    	; 0x23e <i2c_requestToSend>
 1c0:	83 e2       	ldi	r24, 0x23	; 35
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	a7 df       	rcall	.-178    	; 0x114 <bluetooth_add_to_send_queue>
 1c6:	10 92 09 01 	sts	0x0109, r1
 1ca:	a2 df       	rcall	.-188    	; 0x110 <bluetooth_clear_to_send>
 1cc:	4a 99       	sbic	0x09, 2	; 9
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <bluetooth_handle_data+0xbe>
 1d0:	80 91 00 01 	lds	r24, 0x0100
 1d4:	90 91 01 01 	lds	r25, 0x0101
 1d8:	8f 3f       	cpi	r24, 0xFF	; 255
 1da:	3f ef       	ldi	r19, 0xFF	; 255
 1dc:	93 07       	cpc	r25, r19
 1de:	99 f0       	breq	.+38     	; 0x206 <bluetooth_handle_data+0xbe>
 1e0:	e0 91 04 01 	lds	r30, 0x0104
 1e4:	f0 91 05 01 	lds	r31, 0x0105
 1e8:	e8 1b       	sub	r30, r24
 1ea:	f9 0b       	sbc	r31, r25
 1ec:	ed 5e       	subi	r30, 0xED	; 237
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	80 81       	ld	r24, Z
 1f2:	86 df       	rcall	.-244    	; 0x100 <bluetooth_send_byte>
 1f4:	80 91 00 01 	lds	r24, 0x0100
 1f8:	90 91 01 01 	lds	r25, 0x0101
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	90 93 01 01 	sts	0x0101, r25
 202:	80 93 00 01 	sts	0x0100, r24
 206:	08 95       	ret

00000208 <__vector_20>:
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
 214:	5b 9a       	sbi	0x0b, 3	; 11
 216:	80 91 c6 00 	lds	r24, 0x00C6
 21a:	80 93 08 01 	sts	0x0108, r24
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 0a 01 	sts	0x010A, r24
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <i2c_setup>:
	incomingData();	
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
}

void i2c_setup(byte adress_) {
	TWAR = adress_;
 230:	80 93 ba 00 	sts	0x00BA, r24
	//TWSR = 0x00; // Ska nog inte vara med
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 234:	85 ec       	ldi	r24, 0xC5	; 197
 236:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 23a:	3e 9a       	sbi	0x07, 6	; 7
 23c:	08 95       	ret

0000023e <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 23e:	fb 01       	movw	r30, r22
 240:	20 81       	ld	r18, Z
 242:	22 95       	swap	r18
 244:	2f 70       	andi	r18, 0x0F	; 15
 246:	42 2f       	mov	r20, r18
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	50 93 12 01 	sts	0x0112, r21
 24e:	40 93 11 01 	sts	0x0111, r20
 252:	a2 e4       	ldi	r26, 0x42	; 66
 254:	b1 e0       	ldi	r27, 0x01	; 1
 256:	9a 01       	movw	r18, r20
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	62 0f       	add	r22, r18
 25e:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 260:	91 91       	ld	r25, Z+
 262:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 264:	e6 17       	cp	r30, r22
 266:	f7 07       	cpc	r31, r23
 268:	d9 f7       	brne	.-10     	; 0x260 <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 26a:	80 93 51 01 	sts	0x0151, r24
	bytesSent = 0;
 26e:	10 92 10 01 	sts	0x0110, r1
 272:	10 92 0f 01 	sts	0x010F, r1
	PORTC |= (1 << PC6);
 276:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	f6 e3       	ldi	r31, 0x36	; 54
 27a:	fa 95       	dec	r31
 27c:	f1 f7       	brne	.-4      	; 0x27a <i2c_requestToSend+0x3c>
 27e:	00 00       	nop
	_delay_us(11);
	PORTC &= ~(1 << PC6);
 280:	46 98       	cbi	0x08, 6	; 8
 282:	08 95       	ret

00000284 <i2c_send>:
}



void i2c_send(byte prossesor,byte data){
	TWDR = data;
 284:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 288:	ec eb       	ldi	r30, 0xBC	; 188
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 6c       	ori	r24, 0xC0	; 192
 290:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	ec f7       	brge	.-6      	; 0x292 <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 298:	80 91 b9 00 	lds	r24, 0x00B9
 29c:	88 7f       	andi	r24, 0xF8	; 248
 29e:	88 3b       	cpi	r24, 0xB8	; 184
 2a0:	c1 f0       	breq	.+48     	; 0x2d2 <i2c_send+0x4e>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 2a2:	84 e9       	ldi	r24, 0x94	; 148
 2a4:	80 93 bc 00 	sts	0x00BC, r24

		if(bytes_to_send_i2c >= bytesSent){
 2a8:	20 91 11 01 	lds	r18, 0x0111
 2ac:	30 91 12 01 	lds	r19, 0x0112
 2b0:	80 91 0f 01 	lds	r24, 0x010F
 2b4:	90 91 10 01 	lds	r25, 0x0110
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	54 f0       	brlt	.+20     	; 0x2d2 <i2c_send+0x4e>
 2be:	82 e6       	ldi	r24, 0x62	; 98
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <i2c_send+0x3c>
 2c4:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 2c6:	46 9a       	sbi	0x08, 6	; 8
 2c8:	86 e3       	ldi	r24, 0x36	; 54
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <i2c_send+0x46>
 2ce:	00 00       	nop
			_delay_us(11);
			PORTC &= ~(1 << PC6);
 2d0:	46 98       	cbi	0x08, 6	; 8
 2d2:	08 95       	ret

000002d4 <i2c_recive>:
		return ;
	}
}

byte i2c_recive(void){
	if((TWSR & 0xF8)!=0x80)
 2d4:	80 91 b9 00 	lds	r24, 0x00B9
 2d8:	88 7f       	andi	r24, 0xF8	; 248
 2da:	80 38       	cpi	r24, 0x80	; 128
 2dc:	41 f4       	brne	.+16     	; 0x2ee <i2c_recive+0x1a>
		return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
 2de:	ec eb       	ldi	r30, 0xBC	; 188
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	80 6c       	ori	r24, 0xC0	; 192
 2e6:	80 83       	st	Z, r24
	return TWDR;	
 2e8:	80 91 bb 00 	lds	r24, 0x00BB
 2ec:	08 95       	ret
	}
}

byte i2c_recive(void){
	if((TWSR & 0xF8)!=0x80)
		return false;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
	TWCR |= (1<<TWEA) | (1<<TWINT);
	return TWDR;	
}
 2f0:	08 95       	ret

000002f2 <incomingData>:
	_delay_us(11);
	PORTC &= ~(1 << PC6);
}


byte incomingData(void){	
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // rec data, ack sent	
 2f6:	80 91 b9 00 	lds	r24, 0x00B9
 2fa:	88 7f       	andi	r24, 0xF8	; 248
 2fc:	80 36       	cpi	r24, 0x60	; 96
 2fe:	b9 f5       	brne	.+110    	; 0x36e <incomingData+0x7c>
		i2c_data[bytefrom_i2c] = i2c_recive();
 300:	c0 91 0d 01 	lds	r28, 0x010D
 304:	d0 91 0e 01 	lds	r29, 0x010E
 308:	e5 df       	rcall	.-54     	; 0x2d4 <i2c_recive>
 30a:	cd 5c       	subi	r28, 0xCD	; 205
 30c:	de 4f       	sbci	r29, 0xFE	; 254
 30e:	88 83       	st	Y, r24
		if(bytefrom_i2c == ((i2c_data[0]>>4) &0x0f)){
 310:	80 91 33 01 	lds	r24, 0x0133
 314:	82 95       	swap	r24
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	20 91 0d 01 	lds	r18, 0x010D
 31e:	30 91 0e 01 	lds	r19, 0x010E
 322:	82 17       	cp	r24, r18
 324:	93 07       	cpc	r25, r19
 326:	41 f4       	brne	.+16     	; 0x338 <incomingData+0x46>
			newdata = true;
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	80 93 0c 01 	sts	0x010C, r24
			TWCR &= ~(1 << TWINT);
 32e:	ec eb       	ldi	r30, 0xBC	; 188
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	8f 77       	andi	r24, 0x7F	; 127
 336:	80 83       	st	Z, r24
		}
		if((bytefrom_i2c+1) == ((i2c_data[0]>>4)&0x0f))
 338:	20 91 0d 01 	lds	r18, 0x010D
 33c:	30 91 0e 01 	lds	r19, 0x010E
 340:	a9 01       	movw	r20, r18
 342:	4f 5f       	subi	r20, 0xFF	; 255
 344:	5f 4f       	sbci	r21, 0xFF	; 255
 346:	80 91 33 01 	lds	r24, 0x0133
 34a:	82 95       	swap	r24
 34c:	8f 70       	andi	r24, 0x0F	; 15
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	48 17       	cp	r20, r24
 352:	59 07       	cpc	r21, r25
 354:	19 f4       	brne	.+6      	; 0x35c <incomingData+0x6a>
			i2c_new_data=true;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 0b 01 	sts	0x010B, r24
		return i2c_data[bytefrom_i2c++];
 35c:	50 93 0e 01 	sts	0x010E, r21
 360:	40 93 0d 01 	sts	0x010D, r20
 364:	f9 01       	movw	r30, r18
 366:	ed 5c       	subi	r30, 0xCD	; 205
 368:	fe 4f       	sbci	r31, 0xFE	; 254
 36a:	80 81       	ld	r24, Z
 36c:	21 c0       	rjmp	.+66     	; 0x3b0 <incomingData+0xbe>
		
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
 36e:	80 91 b9 00 	lds	r24, 0x00B9
 372:	88 7f       	andi	r24, 0xF8	; 248
 374:	88 3a       	cpi	r24, 0xA8	; 168
 376:	a1 f4       	brne	.+40     	; 0x3a0 <incomingData+0xae>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 378:	80 91 0f 01 	lds	r24, 0x010F
 37c:	90 91 10 01 	lds	r25, 0x0110
 380:	9c 01       	movw	r18, r24
 382:	2f 5f       	subi	r18, 0xFF	; 255
 384:	3f 4f       	sbci	r19, 0xFF	; 255
 386:	30 93 10 01 	sts	0x0110, r19
 38a:	20 93 0f 01 	sts	0x010F, r18
 38e:	fc 01       	movw	r30, r24
 390:	ee 5b       	subi	r30, 0xBE	; 190
 392:	fe 4f       	sbci	r31, 0xFE	; 254
 394:	60 81       	ld	r22, Z
 396:	80 91 51 01 	lds	r24, 0x0151
 39a:	74 df       	rcall	.-280    	; 0x284 <i2c_send>
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
		return i2c_recive();
	}
	return 0x00;
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	08 c0       	rjmp	.+16     	; 0x3b0 <incomingData+0xbe>
		
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
 3a0:	80 91 b9 00 	lds	r24, 0x00B9
 3a4:	88 7f       	andi	r24, 0xF8	; 248
 3a6:	80 38       	cpi	r24, 0x80	; 128
 3a8:	11 f4       	brne	.+4      	; 0x3ae <incomingData+0xbc>
		return i2c_recive();
 3aa:	94 df       	rcall	.-216    	; 0x2d4 <i2c_recive>
 3ac:	01 c0       	rjmp	.+2      	; 0x3b0 <incomingData+0xbe>
	}
	return 0x00;
 3ae:	80 e0       	ldi	r24, 0x00	; 0
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <__vector_26>:
byte i2c_data[15];
bool newdata = false;
bool i2c_new_data = false;


ISR(TWI_vect){
 3b6:	1f 92       	push	r1
 3b8:	0f 92       	push	r0
 3ba:	0f b6       	in	r0, 0x3f	; 63
 3bc:	0f 92       	push	r0
 3be:	11 24       	eor	r1, r1
 3c0:	0b b6       	in	r0, 0x3b	; 59
 3c2:	0f 92       	push	r0
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
	incomingData();	
 3dc:	8a df       	rcall	.-236    	; 0x2f2 <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
 3de:	85 ec       	ldi	r24, 0xC5	; 197
 3e0:	80 93 bc 00 	sts	0x00BC, r24
}
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	0f 90       	pop	r0
 3fe:	0b be       	out	0x3b, r0	; 59
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <i2c_handle_data>:
	TWCR |= (1<<TWEA) | (1<<TWINT);
	return TWDR;	
}

void i2c_handle_data(void){
	if(i2c_new_data==true)
 40a:	80 91 0b 01 	lds	r24, 0x010B
 40e:	88 23       	and	r24, r24
 410:	29 f0       	breq	.+10     	; 0x41c <i2c_handle_data+0x12>
	{
		bluetooth_add_to_send_queue(i2c_data);
 412:	83 e3       	ldi	r24, 0x33	; 51
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	7e de       	rcall	.-772    	; 0x114 <bluetooth_add_to_send_queue>
		i2c_new_data=false;
 418:	10 92 0b 01 	sts	0x010B, r1
 41c:	08 95       	ret

0000041e <lcd_write_instruction>:
 41e:	5f 98       	cbi	0x0b, 7	; 11
 420:	82 b9       	out	0x02, r24	; 2
 422:	5e 98       	cbi	0x0b, 6	; 11
 424:	95 e0       	ldi	r25, 0x05	; 5
 426:	9a 95       	dec	r25
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_write_instruction+0x8>
 42a:	5f 9a       	sbi	0x0b, 7	; 11
 42c:	95 e0       	ldi	r25, 0x05	; 5
 42e:	9a 95       	dec	r25
 430:	f1 f7       	brne	.-4      	; 0x42e <lcd_write_instruction+0x10>
 432:	5f 98       	cbi	0x0b, 7	; 11
 434:	95 e0       	ldi	r25, 0x05	; 5
 436:	9a 95       	dec	r25
 438:	f1 f7       	brne	.-4      	; 0x436 <lcd_write_instruction+0x18>
 43a:	5e 98       	cbi	0x0b, 6	; 11
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	82 30       	cpi	r24, 0x02	; 2
 440:	28 f4       	brcc	.+10     	; 0x44c <lcd_write_instruction+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 442:	83 e3       	ldi	r24, 0x33	; 51
 444:	9b e2       	ldi	r25, 0x2B	; 43
 446:	01 97       	sbiw	r24, 0x01	; 1
 448:	f1 f7       	brne	.-4      	; 0x446 <lcd_write_instruction+0x28>
 44a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 44c:	80 e7       	ldi	r24, 0x70	; 112
 44e:	91 e0       	ldi	r25, 0x01	; 1
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <lcd_write_instruction+0x32>
 454:	00 c0       	rjmp	.+0      	; 0x456 <lcd_write_instruction+0x38>
 456:	08 95       	ret

00000458 <lcd_setup>:
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	81 b9       	out	0x01, r24	; 1
 45c:	8a b1       	in	r24, 0x0a	; 10
 45e:	80 6c       	ori	r24, 0xC0	; 192
 460:	8a b9       	out	0x0a, r24	; 10
 462:	8b b1       	in	r24, 0x0b	; 11
 464:	8f 73       	andi	r24, 0x3F	; 63
 466:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	8f e7       	ldi	r24, 0x7F	; 127
 46c:	94 e0       	ldi	r25, 0x04	; 4
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	80 40       	sbci	r24, 0x00	; 0
 472:	90 40       	sbci	r25, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <lcd_setup+0x16>
 476:	00 c0       	rjmp	.+0      	; 0x478 <lcd_setup+0x20>
 478:	00 00       	nop
 47a:	88 e3       	ldi	r24, 0x38	; 56
 47c:	d0 df       	rcall	.-96     	; 0x41e <lcd_write_instruction>
 47e:	8c e0       	ldi	r24, 0x0C	; 12
 480:	ce df       	rcall	.-100    	; 0x41e <lcd_write_instruction>
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	cc df       	rcall	.-104    	; 0x41e <lcd_write_instruction>
 486:	86 e0       	ldi	r24, 0x06	; 6
 488:	ca df       	rcall	.-108    	; 0x41e <lcd_write_instruction>
 48a:	80 e8       	ldi	r24, 0x80	; 128
 48c:	c8 cf       	rjmp	.-112    	; 0x41e <lcd_write_instruction>
 48e:	08 95       	ret

00000490 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	72 ec       	ldi	r23, 0xC2	; 194
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2d de       	rcall	.-934    	; 0xf4 <bluetooth_setup>
	lcd_setup();
 49a:	de df       	rcall	.-68     	; 0x458 <lcd_setup>
	i2c_setup(0x02);
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	c8 de       	rcall	.-624    	; 0x230 <i2c_setup>
	sei(); // Enable interrupt
 4a0:	78 94       	sei
 4a2:	2f ef       	ldi	r18, 0xFF	; 255
 4a4:	8f ef       	ldi	r24, 0xFF	; 255
 4a6:	99 e5       	ldi	r25, 0x59	; 89
 4a8:	21 50       	subi	r18, 0x01	; 1
 4aa:	80 40       	sbci	r24, 0x00	; 0
 4ac:	90 40       	sbci	r25, 0x00	; 0
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <initialize+0x18>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <initialize+0x22>
 4b2:	00 00       	nop
 4b4:	08 95       	ret

000004b6 <run>:
	_delay_ms(2000);
}
char data[15];

void run(void){	
	data[0]=0x2a;
 4b6:	e2 e5       	ldi	r30, 0x52	; 82
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	8a e2       	ldi	r24, 0x2A	; 42
 4bc:	80 83       	st	Z, r24
	data[1]=0xa0;
 4be:	80 ea       	ldi	r24, 0xA0	; 160
 4c0:	81 83       	std	Z+1, r24	; 0x01
	data[2]=0x8f;
 4c2:	8f e8       	ldi	r24, 0x8F	; 143
 4c4:	82 83       	std	Z+2, r24	; 0x02
	bluetooth_send_byte(0x0f);
 4c6:	8f e0       	ldi	r24, 0x0F	; 15
 4c8:	1b de       	rcall	.-970    	; 0x100 <bluetooth_send_byte>
	while(true)	{
		//i2c_requestToSend(0x04,data);
		bluetooth_handle_data();
 4ca:	3e de       	rcall	.-900    	; 0x148 <bluetooth_handle_data>
		i2c_handle_data();
 4cc:	9e df       	rcall	.-196    	; 0x40a <i2c_handle_data>
 4ce:	2f ef       	ldi	r18, 0xFF	; 255
 4d0:	8f e7       	ldi	r24, 0x7F	; 127
 4d2:	9d e0       	ldi	r25, 0x0D	; 13
 4d4:	21 50       	subi	r18, 0x01	; 1
 4d6:	80 40       	sbci	r24, 0x00	; 0
 4d8:	90 40       	sbci	r25, 0x00	; 0
 4da:	e1 f7       	brne	.-8      	; 0x4d4 <run+0x1e>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <run+0x28>
 4de:	00 00       	nop
 4e0:	f4 cf       	rjmp	.-24     	; 0x4ca <run+0x14>

000004e2 <main>:

void run(void);
void initialize(void);

int main (void){
	board_init();
 4e2:	f2 dd       	rcall	.-1052   	; 0xc8 <board_init>
	initialize();
 4e4:	d5 df       	rcall	.-86     	; 0x490 <initialize>
	run();
 4e6:	e7 df       	rcall	.-50     	; 0x4b6 <run>

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>
