
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000027c  00000310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800118  00800118  00000328  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000358  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a0  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004f7  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012fe  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002610  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011dd7  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000296  00000000  00000000  0001456f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00014805  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004684  00000000  00000000  000148a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	61 c0       	rjmp	.+194    	; 0x114 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	71 c0       	rjmp	.+226    	; 0x13c <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e7       	ldi	r30, 0x7C	; 124
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 31       	cpi	r26, 0x18	; 24
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e1       	ldi	r26, 0x18	; 24
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 31       	cpi	r26, 0x1A	; 26
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d7 d0       	rcall	.+430    	; 0x272 <main>
  c4:	d9 c0       	rjmp	.+434    	; 0x278 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <usart_setup>:
}

// Skicka en byte över BT
void bluetooth_send_byte(byte data){
	while ( !( UCSR0A & (1<<UDRE0)) );/* Wait for empty transmit buffer */
	UDR0 = data; // Put the data in to the buffer and send it
  ca:	88 ed       	ldi	r24, 0xD8	; 216
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_clear_to_send>:
}

// Säg till blåtandsenheten att du är redo att ta emot mer data. 
void bluetooth_clear_to_send(void){	PORTD &= ~(1 << RTS); }// Clear To Send;
 100:	5b 98       	cbi	0x0b, 3	; 11
 102:	08 95       	ret

00000104 <bluetooth_fetch_new_data>:

//Hämta ut datan från BT
byte bluetooth_fetch_new_data(void){
	newData = false;
 104:	10 92 19 01 	sts	0x0119, r1
	return dataFromBT;
}
 108:	80 91 18 01 	lds	r24, 0x0118
 10c:	08 95       	ret

0000010e <bluetooth_get_new_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return newData; }
 10e:	80 91 19 01 	lds	r24, 0x0119
 112:	08 95       	ret

00000114 <__vector_20>:


//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 120:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 122:	80 91 c6 00 	lds	r24, 0x00C6
 126:	80 93 18 01 	sts	0x0118, r24
	newData = true; // Tala om för main att vi har fått data
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 19 01 	sts	0x0119, r24
}	
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <__vector_22>:

 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <lcd_write_char>:
	PORTA |= (letter & (1 << 3));
	PORTA |= (letter & (1 << 2));
	PORTA |= (letter & (1 << 1));
	PORTA |= (letter & (1 << 0));
*/
	PORTA = letter;	// Lägg ín data på pinnarna in data
 150:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~(1 << E);	// Försäkring om att E är låg innan vi försöker skriva
 152:	5f 98       	cbi	0x0b, 7	; 11
	
	PORTD |= (1 << RS); // sätt RS
 154:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << E); // Sätt Enable
 156:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	80 e7       	ldi	r24, 0x70	; 112
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_write_char+0xc>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_write_char+0x12>
	
	_delay_us(100); //TSU2	// Vänta på att data ska stabiliseras
	PORTD &= ~(1 << E); // Nolställ E och RS så att dom är noll vid nästa instruktion/charläsning
 162:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS); //
 164:	5e 98       	cbi	0x0b, 6	; 11
 166:	08 95       	ret

00000168 <lcd_write_instruction>:
}

void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);
 168:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 16a:	5e 98       	cbi	0x0b, 6	; 11
	PORTA |= (instruction & (1 << 2));
	PORTA |= (instruction & (1 << 1));
	PORTA |= (instruction & (1 << 0));
	*/
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 16c:	82 b9       	out	0x02, r24	; 2

	if(instruction == lcd_Home || instruction == lcd_Clear)
 16e:	81 50       	subi	r24, 0x01	; 1
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	28 f4       	brcc	.+10     	; 0x17e <lcd_write_instruction+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	83 e3       	ldi	r24, 0x33	; 51
 176:	9b e2       	ldi	r25, 0x2B	; 43
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <lcd_write_instruction+0x10>
 17c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	80 e7       	ldi	r24, 0x70	; 112
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_write_instruction+0x1a>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_write_instruction+0x20>
 188:	08 95       	ret

0000018a <lcd_setup>:

bool directionLeft = true;

//LCD Setup, inits all the variables
void lcd_setup(void)	{
	DDRA = 0xFF;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1 << E) | (1 << RS);
 18e:	8a b1       	in	r24, 0x0a	; 10
 190:	80 6c       	ori	r24, 0xC0	; 192
 192:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	94 e0       	ldi	r25, 0x04	; 4
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <lcd_setup+0x10>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_setup+0x1a>
 1a4:	00 00       	nop
			
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	//Function reset
	lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  // Kanske inte behövs
 1a6:	80 e3       	ldi	r24, 0x30	; 48
 1a8:	df df       	rcall	.-66     	; 0x168 <lcd_write_instruction>
	//Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 1aa:	88 e3       	ldi	r24, 0x38	; 56
 1ac:	dd df       	rcall	.-70     	; 0x168 <lcd_write_instruction>
	//Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	db df       	rcall	.-74     	; 0x168 <lcd_write_instruction>
	//Display clear
	lcd_write_instruction(lcd_Clear);
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	d9 df       	rcall	.-78     	; 0x168 <lcd_write_instruction>
	//Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	d7 cf       	rjmp	.-82     	; 0x168 <lcd_write_instruction>
 1ba:	08 95       	ret

000001bc <lcd_write_string>:
	else
		_delay_us(100);
}

//Erases data on LCD and write new one.
void lcd_write_string(char text[], uint8_t row_instrucion){
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	ec 01       	movw	r28, r24
 1c2:	86 2f       	mov	r24, r22
	lcd_write_instruction(row_instrucion);
 1c4:	d1 df       	rcall	.-94     	; 0x168 <lcd_write_instruction>
	
	for(int i = 0; i < NELEMS(text); i++){
		lcd_write_char(text[i]); 
 1c6:	88 81       	ld	r24, Y
 1c8:	c3 df       	rcall	.-122    	; 0x150 <lcd_write_char>
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	c1 df       	rcall	.-126    	; 0x150 <lcd_write_char>
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	08 95       	ret

000001d4 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	72 ec       	ldi	r23, 0xC2	; 194
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	8b df       	rcall	.-234    	; 0xf4 <bluetooth_setup>
	lcd_setup();
 1de:	d5 df       	rcall	.-86     	; 0x18a <lcd_setup>
	//i2c_setup(0x02);
	
	sei(); // Enable setup
 1e0:	78 94       	sei
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	8f e7       	ldi	r24, 0x7F	; 127
 1e6:	94 e0       	ldi	r25, 0x04	; 4
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <initialize+0x14>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <initialize+0x1e>
 1f2:	00 00       	nop
 1f4:	08 95       	ret

000001f6 <run>:
	_delay_ms(100);
}

void run(void){
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
 1fe:	67 97       	sbiw	r28, 0x17	; 23
 200:	0f b6       	in	r0, 0x3f	; 63
 202:	f8 94       	cli
 204:	de bf       	out	0x3e, r29	; 62
 206:	0f be       	out	0x3f, r0	; 63
 208:	cd bf       	out	0x3d, r28	; 61
	char rad1[] = "detta ar text";
 20a:	8e e0       	ldi	r24, 0x0E	; 14
 20c:	e0 e0       	ldi	r30, 0x00	; 0
 20e:	f1 e0       	ldi	r31, 0x01	; 1
 210:	de 01       	movw	r26, r28
 212:	11 96       	adiw	r26, 0x01	; 1
 214:	01 90       	ld	r0, Z+
 216:	0d 92       	st	X+, r0
 218:	8a 95       	dec	r24
 21a:	e1 f7       	brne	.-8      	; 0x214 <run+0x1e>
	char rad2[] = "mer text";
 21c:	89 e0       	ldi	r24, 0x09	; 9
 21e:	ee e0       	ldi	r30, 0x0E	; 14
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	de 01       	movw	r26, r28
 224:	1f 96       	adiw	r26, 0x0f	; 15
 226:	01 90       	ld	r0, Z+
 228:	0d 92       	st	X+, r0
 22a:	8a 95       	dec	r24
 22c:	e1 f7       	brne	.-8      	; 0x226 <run+0x30>
	lcd_write_string(rad1, lcd_SetCursor |lcd_LineOne);
 22e:	60 e8       	ldi	r22, 0x80	; 128
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	c3 df       	rcall	.-122    	; 0x1bc <lcd_write_string>
	lcd_write_string(rad2, lcd_SetCursor |lcd_LineTwo);
 236:	60 ec       	ldi	r22, 0xC0	; 192
 238:	ce 01       	movw	r24, r28
 23a:	0f 96       	adiw	r24, 0x0f	; 15
 23c:	bf df       	rcall	.-130    	; 0x1bc <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23e:	86 e2       	ldi	r24, 0x26	; 38
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <run+0x4c>
 246:	00 c0       	rjmp	.+0      	; 0x248 <run+0x52>
 248:	00 00       	nop
	//How many bytes is there during current read
	short number_of_bytes_from_bt = 0;
	//short number_of_bytes_from_i2c = 0;
	
	// how many bytes is left to read=
	short bytes_left_from_bt = -1;
 24a:	0f ef       	ldi	r16, 0xFF	; 255
 24c:	1f ef       	ldi	r17, 0xFF	; 255
	byte data_to_bt[16];
	//byte data_to_i2c[16];
	
	while(true)	{		
		// Hantera eventuell ny data ifrån BT
		if(bluetooth_get_new_data() == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 24e:	5f df       	rcall	.-322    	; 0x10e <bluetooth_get_new_data>
 250:	88 23       	and	r24, r24
 252:	69 f0       	breq	.+26     	; 0x26e <run+0x78>
			byte data = bluetooth_fetch_new_data(); // Hämta ut data å sätt newData false
 254:	57 df       	rcall	.-338    	; 0x104 <bluetooth_fetch_new_data>
			
			// Om vi inte har någon kö för stunden så kör
			if (bytes_left_from_bt == -1){ 
 256:	0f 3f       	cpi	r16, 0xFF	; 255
 258:	9f ef       	ldi	r25, 0xFF	; 255
 25a:	19 07       	cpc	r17, r25
 25c:	21 f4       	brne	.+8      	; 0x266 <run+0x70>
				number_of_bytes_from_bt = (data >> 4); 
 25e:	82 95       	swap	r24
 260:	8f 70       	andi	r24, 0x0F	; 15
 262:	08 2f       	mov	r16, r24
 264:	10 e0       	ldi	r17, 0x00	; 0
				bytes_left_from_bt = number_of_bytes_from_bt;
			}
			
			// Lägg in datan i vektorn
			data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
			--bytes_left_from_bt;
 266:	01 50       	subi	r16, 0x01	; 1
 268:	11 09       	sbc	r17, r1
 26a:	08 f0       	brcs	.+2      	; 0x26e <run+0x78>
			
			// Vill vi ha mer data från samma sändning? 				
			if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
				bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
 26c:	49 df       	rcall	.-366    	; 0x100 <bluetooth_clear_to_send>
			// Då det bara kommer skickas styrdata via bt är det dags att skicka data till styrmodulen
			// i2csendstuff.
		} 
		
		// Skicka data via BT
		if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 26e:	89 b1       	in	r24, 0x09	; 9
 270:	ee cf       	rjmp	.-36     	; 0x24e <run+0x58>

00000272 <main>:
void run(void);
void initialize(void);
void update_lcd(void);

int main (void){
	board_init();
 272:	2a df       	rcall	.-428    	; 0xc8 <board_init>
	initialize();
 274:	af df       	rcall	.-162    	; 0x1d4 <initialize>
	run();
 276:	bf df       	rcall	.-130    	; 0x1f6 <run>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
