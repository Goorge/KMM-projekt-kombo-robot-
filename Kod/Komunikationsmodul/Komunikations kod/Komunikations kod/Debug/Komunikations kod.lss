
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000072c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000072c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d33  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b1  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001564  00000000  00000000  00001b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000288  00000000  00000000  000030f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011d47  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000478  00000000  00000000  000150c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0001553b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004431  00000000  00000000  00015653  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	c6 c0       	rjmp	.+396    	; 0x192 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c1       	rjmp	.+680    	; 0x312 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 eb       	ldi	r30, 0xB8	; 184
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 30       	cpi	r26, 0x07	; 7
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	6e d1       	rcall	.+732    	; 0x3a0 <main>
  c4:	f7 c2       	rjmp	.+1518   	; 0x6b4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:

}


void ClearToSend(void){
	PORTD &= (0 << CTS); // Clear To Send;
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	bc 01       	movw	r22, r24
  d0:	88 e1       	ldi	r24, 0x18	; 24
  d2:	80 93 c1 00 	sts	0x00C1, r24
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	80 93 c2 00 	sts	0x00C2, r24
  dc:	cb 01       	movw	r24, r22
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	aa 1f       	adc	r26, r26
  e8:	bb 1f       	adc	r27, r27
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	aa 1f       	adc	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	bc 01       	movw	r22, r24
  f4:	cd 01       	movw	r24, r26
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	88 1f       	adc	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	88 1f       	adc	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	48 d2       	rcall	.+1168   	; 0x598 <__floatunsisf>
 108:	9b 01       	movw	r18, r22
 10a:	ac 01       	movw	r20, r24
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	81 e6       	ldi	r24, 0x61	; 97
 112:	9b e4       	ldi	r25, 0x4B	; 75
 114:	ad d1       	rcall	.+858    	; 0x470 <__divsf3>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 e8       	ldi	r20, 0x80	; 128
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	43 d1       	rcall	.+646    	; 0x3a6 <__subsf3>
 120:	0f d2       	rcall	.+1054   	; 0x540 <__fixunssfsi>
 122:	07 2f       	mov	r16, r23
 124:	18 2f       	mov	r17, r24
 126:	29 2f       	mov	r18, r25
 128:	33 27       	eor	r19, r19
 12a:	00 93 c5 00 	sts	0x00C5, r16
 12e:	60 93 c4 00 	sts	0x00C4, r22
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	98 e0       	ldi	r25, 0x08	; 8
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <usart_setup+0x6e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <usart_setup+0x78>
 142:	00 00       	nop
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <bluetooth_setup>:
 14a:	2a e0       	ldi	r18, 0x0A	; 10
 14c:	2a b9       	out	0x0a, r18	; 10
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	2d bb       	out	0x1d, r18	; 29
 152:	cb 01       	movw	r24, r22
 154:	ba cf       	rjmp	.-140    	; 0xca <usart_setup>
 156:	08 95       	ret

00000158 <bluetooth_send_char>:
 158:	e0 ec       	ldi	r30, 0xC0	; 192
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	90 81       	ld	r25, Z
 15e:	95 ff       	sbrs	r25, 5
 160:	fd cf       	rjmp	.-6      	; 0x15c <bluetooth_send_char+0x4>
 162:	80 93 c6 00 	sts	0x00C6, r24
 166:	2f ef       	ldi	r18, 0xFF	; 255
 168:	8f e7       	ldi	r24, 0x7F	; 127
 16a:	96 e1       	ldi	r25, 0x16	; 22
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	90 40       	sbci	r25, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <bluetooth_send_char+0x14>
 174:	00 c0       	rjmp	.+0      	; 0x176 <bluetooth_send_char+0x1e>
 176:	00 00       	nop
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	85 b9       	out	0x05, r24	; 5
 17c:	2f ef       	ldi	r18, 0xFF	; 255
 17e:	8f e7       	ldi	r24, 0x7F	; 127
 180:	96 e1       	ldi	r25, 0x16	; 22
 182:	21 50       	subi	r18, 0x01	; 1
 184:	80 40       	sbci	r24, 0x00	; 0
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	e1 f7       	brne	.-8      	; 0x182 <bluetooth_send_char+0x2a>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <bluetooth_send_char+0x34>
 18c:	00 00       	nop
 18e:	15 b8       	out	0x05, r1	; 5
 190:	08 95       	ret

00000192 <__vector_1>:
}

// BEHÖVS NOG INTE 
ISR ( INT0_vect ){//interrupt saying usart is clear to send
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	0b b6       	in	r0, 0x3b	; 59
 19e:	0f 92       	push	r0
 1a0:	2f 93       	push	r18
 1a2:	3f 93       	push	r19
 1a4:	4f 93       	push	r20
 1a6:	5f 93       	push	r21
 1a8:	6f 93       	push	r22
 1aa:	7f 93       	push	r23
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
 1b0:	af 93       	push	r26
 1b2:	bf 93       	push	r27
 1b4:	ef 93       	push	r30
 1b6:	ff 93       	push	r31
	//	bluetooth_send();
	//}
	//else{ // else we they are asking to send us data, thus we need to be prepared to recieve
	//	ClearToSend();
	//}
	bluetooth_send_char('B');
 1b8:	82 e4       	ldi	r24, 0x42	; 66
 1ba:	ce df       	rcall	.-100    	; 0x158 <bluetooth_send_char>
}
 1bc:	ff 91       	pop	r31
 1be:	ef 91       	pop	r30
 1c0:	bf 91       	pop	r27
 1c2:	af 91       	pop	r26
 1c4:	9f 91       	pop	r25
 1c6:	8f 91       	pop	r24
 1c8:	7f 91       	pop	r23
 1ca:	6f 91       	pop	r22
 1cc:	5f 91       	pop	r21
 1ce:	4f 91       	pop	r20
 1d0:	3f 91       	pop	r19
 1d2:	2f 91       	pop	r18
 1d4:	0f 90       	pop	r0
 1d6:	0b be       	out	0x3b, r0	; 59
 1d8:	0f 90       	pop	r0
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	0f 90       	pop	r0
 1de:	1f 90       	pop	r1
 1e0:	18 95       	reti

000001e2 <lcd_write_char>:
	PORTA |= (letter & (1 << 3));
	PORTA |= (letter & (1 << 2));
	PORTA |= (letter & (1 << 1));
	PORTA |= (letter & (1 << 0));
*/
	PORTA = letter;	// Lägg ín data på pinnarna in data
 1e2:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~(1 << E);	// Försäkring om att E är låg innan vi försöker skriva
 1e4:	5f 98       	cbi	0x0b, 7	; 11
	
	PORTD |= (1 << RS); // sätt RS
 1e6:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << E); // Sätt Enable
 1e8:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	85 e0       	ldi	r24, 0x05	; 5
 1ec:	8a 95       	dec	r24
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_write_char+0xa>
	
	_delay_us(1); //TSU2	// Vänta på att data ska stabiliseras
	PORTD &= ~(1 << E);
 1f0:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 1f2:	5e 98       	cbi	0x0b, 6	; 11
 1f4:	85 e0       	ldi	r24, 0x05	; 5
 1f6:	8a 95       	dec	r24
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_write_char+0x14>
 1fa:	08 95       	ret

000001fc <lcd_write_instruction>:
	_delay_us(1);
}

void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);
 1fc:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 1fe:	5e 98       	cbi	0x0b, 6	; 11
	PORTA |= (instruction & (1 << 2));
	PORTA |= (instruction & (1 << 1));
	PORTA |= (instruction & (1 << 0));
	*/
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 200:	82 b9       	out	0x02, r24	; 2
 202:	08 95       	ret

00000204 <lcd_setup>:

bool directionLeft = true;

//LCD Setup, inits all the variables
void lcd_setup(void)	{
	DDRA = 0xFF;
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	81 b9       	out	0x01, r24	; 1
	DDRD = (1 << E) | (1 << RS);
 208:	80 ec       	ldi	r24, 0xC0	; 192
 20a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	2f ef       	ldi	r18, 0xFF	; 255
 20e:	8f e7       	ldi	r24, 0x7F	; 127
 210:	94 e0       	ldi	r25, 0x04	; 4
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <lcd_setup+0xe>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <lcd_setup+0x18>
 21c:	00 00       	nop
			
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	//Function reset
	lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	ed df       	rcall	.-38     	; 0x1fc <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	86 e2       	ldi	r24, 0x26	; 38
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <lcd_setup+0x22>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_setup+0x28>
 22c:	00 00       	nop
	_delay_us(80);
	//Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 22e:	88 e3       	ldi	r24, 0x38	; 56
 230:	e5 df       	rcall	.-54     	; 0x1fc <lcd_write_instruction>
 232:	86 e2       	ldi	r24, 0x26	; 38
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <lcd_setup+0x32>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <lcd_setup+0x38>
 23c:	00 00       	nop
	_delay_us(80);
	//Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 23e:	8c e0       	ldi	r24, 0x0C	; 12
 240:	dd df       	rcall	.-70     	; 0x1fc <lcd_write_instruction>
 242:	86 e2       	ldi	r24, 0x26	; 38
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_setup+0x42>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_setup+0x48>
 24c:	00 00       	nop
	_delay_us(80);
	//Display clear
	lcd_write_instruction(lcd_Clear);
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	d5 df       	rcall	.-86     	; 0x1fc <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	89 e9       	ldi	r24, 0x99	; 153
 254:	99 e3       	ldi	r25, 0x39	; 57
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_setup+0x52>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_setup+0x58>
	_delay_ms(4);
	//Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	ce df       	rcall	.-100    	; 0x1fc <lcd_write_instruction>
 260:	86 e6       	ldi	r24, 0x66	; 102
 262:	9e e0       	ldi	r25, 0x0E	; 14
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_setup+0x60>
 268:	00 00       	nop
	_delay_ms(1);
	
	lcd_write_instruction(lcd_SetCursor);
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	c7 df       	rcall	.-114    	; 0x1fc <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	86 e2       	ldi	r24, 0x26	; 38
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_setup+0x6e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_setup+0x74>
 278:	00 00       	nop
 27a:	08 95       	ret

0000027c <i2c_send>:

	return (byte)NULL;
}

void i2c_send(byte prossesor,byte data){
	TWDR = data;
 27c:	60 93 bb 00 	sts	0x00BB, r22
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 280:	ec eb       	ldi	r30, 0xBC	; 188
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	88 23       	and	r24, r24
 288:	ec f7       	brge	.-6      	; 0x284 <i2c_send+0x8>
};
 28a:	08 95       	ret

0000028c <i2c_recive>:

byte i2c_recive(void){
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 28c:	ec eb       	ldi	r30, 0xBC	; 188
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	88 23       	and	r24, r24
 294:	ec f7       	brge	.-6      	; 0x290 <i2c_recive+0x4>
	if((TWSR & 0xF8) != TW_MT_SLA_ACK)
 296:	80 91 b9 00 	lds	r24, 0x00B9
 29a:	88 7f       	andi	r24, 0xF8	; 248
 29c:	88 31       	cpi	r24, 0x18	; 24
 29e:	19 f4       	brne	.+6      	; 0x2a6 <i2c_recive+0x1a>
		return false;
	return TWDR;
 2a0:	80 91 bb 00 	lds	r24, 0x00BB
 2a4:	08 95       	ret
};

byte i2c_recive(void){
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
	if((TWSR & 0xF8) != TW_MT_SLA_ACK)
		return false;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
	return TWDR;
 2a8:	08 95       	ret

000002aa <incomingData>:
	reciverAdress = adress;
	bytesSent = 0;
}

byte incomingData(void){
	TWAR = adress & 0xfe;
 2aa:	80 91 04 01 	lds	r24, 0x0104
 2ae:	8e 7f       	andi	r24, 0xFE	; 254
 2b0:	80 93 ba 00 	sts	0x00BA, r24
	TWCR = (1<<TWEA)|(1<<TWEN)&(0<<TWSTA)&(0<<TWSTO);//START
 2b4:	80 e4       	ldi	r24, 0x40	; 64
 2b6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent	
 2ba:	ec eb       	ldi	r30, 0xBC	; 188
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	88 23       	and	r24, r24
 2c2:	ec f7       	brge	.-6      	; 0x2be <incomingData+0x14>
	if(TWSR==0x60)
 2c4:	80 91 b9 00 	lds	r24, 0x00B9
 2c8:	80 36       	cpi	r24, 0x60	; 96
 2ca:	c1 f4       	brne	.+48     	; 0x2fc <incomingData+0x52>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 2cc:	20 91 02 01 	lds	r18, 0x0102
 2d0:	30 91 03 01 	lds	r19, 0x0103
 2d4:	80 91 00 01 	lds	r24, 0x0100
 2d8:	90 91 01 01 	lds	r25, 0x0101
 2dc:	ac 01       	movw	r20, r24
 2de:	4f 5f       	subi	r20, 0xFF	; 255
 2e0:	5f 4f       	sbci	r21, 0xFF	; 255
 2e2:	50 93 01 01 	sts	0x0101, r21
 2e6:	40 93 00 01 	sts	0x0100, r20
 2ea:	f9 01       	movw	r30, r18
 2ec:	e8 0f       	add	r30, r24
 2ee:	f9 1f       	adc	r31, r25
 2f0:	60 81       	ld	r22, Z
 2f2:	80 91 06 01 	lds	r24, 0x0106
 2f6:	c2 df       	rcall	.-124    	; 0x27c <i2c_send>
			DDRD = 1<<PD6;
			PORTD= 1<<PD6;
			return i2c_recive();
			}

	return (byte)NULL;
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	08 95       	ret
	TWAR = adress & 0xfe;
	TWCR = (1<<TWEA)|(1<<TWEN)&(0<<TWSTA)&(0<<TWSTO);//START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent	
	if(TWSR==0x60)
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
	else if(TWSR==0xA8)
 2fc:	80 91 b9 00 	lds	r24, 0x00B9
 300:	88 3a       	cpi	r24, 0xA8	; 168
 302:	29 f4       	brne	.+10     	; 0x30e <incomingData+0x64>
		{
			DDRD = 1<<PD6;
 304:	80 e4       	ldi	r24, 0x40	; 64
 306:	8a b9       	out	0x0a, r24	; 10
			PORTD= 1<<PD6;
 308:	8b b9       	out	0x0b, r24	; 11
			return i2c_recive();
 30a:	c0 cf       	rjmp	.-128    	; 0x28c <i2c_recive>
 30c:	08 95       	ret
			}

	return (byte)NULL;
 30e:	80 e0       	ldi	r24, 0x00	; 0
}
 310:	08 95       	ret

00000312 <__vector_26>:
void run(void);
void initialize(void);

byte a;

ISR(TWI_vect){
 312:	1f 92       	push	r1
 314:	0f 92       	push	r0
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	0f 92       	push	r0
 31a:	11 24       	eor	r1, r1
 31c:	0b b6       	in	r0, 0x3b	; 59
 31e:	0f 92       	push	r0
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
	a=incomingData();
 338:	b8 df       	rcall	.-144    	; 0x2aa <incomingData>
 33a:	80 93 05 01 	sts	0x0105, r24
}
 33e:	ff 91       	pop	r31
 340:	ef 91       	pop	r30
 342:	bf 91       	pop	r27
 344:	af 91       	pop	r26
 346:	9f 91       	pop	r25
 348:	8f 91       	pop	r24
 34a:	7f 91       	pop	r23
 34c:	6f 91       	pop	r22
 34e:	5f 91       	pop	r21
 350:	4f 91       	pop	r20
 352:	3f 91       	pop	r19
 354:	2f 91       	pop	r18
 356:	0f 90       	pop	r0
 358:	0b be       	out	0x3b, r0	; 59
 35a:	0f 90       	pop	r0
 35c:	0f be       	out	0x3f, r0	; 63
 35e:	0f 90       	pop	r0
 360:	1f 90       	pop	r1
 362:	18 95       	reti

00000364 <initialize>:
	run();
}

void initialize(void){
	//i2c_setup(0x02);
	DDRB = 0xff;
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	84 b9       	out	0x04, r24	; 4
	bluetooth_setup((long)115200);
 368:	60 e0       	ldi	r22, 0x00	; 0
 36a:	72 ec       	ldi	r23, 0xC2	; 194
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	ec de       	rcall	.-552    	; 0x14a <bluetooth_setup>
	
	lcd_setup();
 372:	48 df       	rcall	.-368    	; 0x204 <lcd_setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 374:	2f ef       	ldi	r18, 0xFF	; 255
 376:	8f e7       	ldi	r24, 0x7F	; 127
 378:	94 e0       	ldi	r25, 0x04	; 4
 37a:	21 50       	subi	r18, 0x01	; 1
 37c:	80 40       	sbci	r24, 0x00	; 0
 37e:	90 40       	sbci	r25, 0x00	; 0
 380:	e1 f7       	brne	.-8      	; 0x37a <initialize+0x16>
 382:	00 c0       	rjmp	.+0      	; 0x384 <initialize+0x20>
 384:	00 00       	nop
 386:	08 95       	ret

00000388 <run>:
}

void run(void){
	char test[2][16] = {"test", "Mer Test"};
	//lcd_write_string(test);
	lcd_write_instruction(lcd_Clear);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	38 df       	rcall	.-400    	; 0x1fc <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38c:	86 e2       	ldi	r24, 0x26	; 38
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <run+0x8>
 394:	00 c0       	rjmp	.+0      	; 0x396 <run+0xe>
 396:	00 00       	nop
	_delay_us(80);
	lcd_write_char('A');
 398:	81 e4       	ldi	r24, 0x41	; 65
 39a:	23 df       	rcall	.-442    	; 0x1e2 <lcd_write_char>
	
	
	while(true)	{		
		if(PORTD & (1<<CTS) == 0){ // Vi har tillåtelse att skicka data
 39c:	8b b1       	in	r24, 0x0b	; 11
			bluetooth_send_char(0x04);
		}
	}
 39e:	fe cf       	rjmp	.-4      	; 0x39c <run+0x14>

000003a0 <main>:
	a=incomingData();
}

int main (void)
{
	board_init();
 3a0:	93 de       	rcall	.-730    	; 0xc8 <board_init>
	initialize();
 3a2:	e0 df       	rcall	.-64     	; 0x364 <initialize>
	run();
 3a4:	f1 df       	rcall	.-30     	; 0x388 <run>

000003a6 <__subsf3>:
 3a6:	50 58       	subi	r21, 0x80	; 128

000003a8 <__addsf3>:
 3a8:	bb 27       	eor	r27, r27
 3aa:	aa 27       	eor	r26, r26
 3ac:	0e d0       	rcall	.+28     	; 0x3ca <__addsf3x>
 3ae:	48 c1       	rjmp	.+656    	; 0x640 <__fp_round>
 3b0:	39 d1       	rcall	.+626    	; 0x624 <__fp_pscA>
 3b2:	30 f0       	brcs	.+12     	; 0x3c0 <__addsf3+0x18>
 3b4:	3e d1       	rcall	.+636    	; 0x632 <__fp_pscB>
 3b6:	20 f0       	brcs	.+8      	; 0x3c0 <__addsf3+0x18>
 3b8:	31 f4       	brne	.+12     	; 0x3c6 <__addsf3+0x1e>
 3ba:	9f 3f       	cpi	r25, 0xFF	; 255
 3bc:	11 f4       	brne	.+4      	; 0x3c2 <__addsf3+0x1a>
 3be:	1e f4       	brtc	.+6      	; 0x3c6 <__addsf3+0x1e>
 3c0:	2e c1       	rjmp	.+604    	; 0x61e <__fp_nan>
 3c2:	0e f4       	brtc	.+2      	; 0x3c6 <__addsf3+0x1e>
 3c4:	e0 95       	com	r30
 3c6:	e7 fb       	bst	r30, 7
 3c8:	24 c1       	rjmp	.+584    	; 0x612 <__fp_inf>

000003ca <__addsf3x>:
 3ca:	e9 2f       	mov	r30, r25
 3cc:	4a d1       	rcall	.+660    	; 0x662 <__fp_split3>
 3ce:	80 f3       	brcs	.-32     	; 0x3b0 <__addsf3+0x8>
 3d0:	ba 17       	cp	r27, r26
 3d2:	62 07       	cpc	r22, r18
 3d4:	73 07       	cpc	r23, r19
 3d6:	84 07       	cpc	r24, r20
 3d8:	95 07       	cpc	r25, r21
 3da:	18 f0       	brcs	.+6      	; 0x3e2 <__addsf3x+0x18>
 3dc:	71 f4       	brne	.+28     	; 0x3fa <__addsf3x+0x30>
 3de:	9e f5       	brtc	.+102    	; 0x446 <__addsf3x+0x7c>
 3e0:	62 c1       	rjmp	.+708    	; 0x6a6 <__fp_zero>
 3e2:	0e f4       	brtc	.+2      	; 0x3e6 <__addsf3x+0x1c>
 3e4:	e0 95       	com	r30
 3e6:	0b 2e       	mov	r0, r27
 3e8:	ba 2f       	mov	r27, r26
 3ea:	a0 2d       	mov	r26, r0
 3ec:	0b 01       	movw	r0, r22
 3ee:	b9 01       	movw	r22, r18
 3f0:	90 01       	movw	r18, r0
 3f2:	0c 01       	movw	r0, r24
 3f4:	ca 01       	movw	r24, r20
 3f6:	a0 01       	movw	r20, r0
 3f8:	11 24       	eor	r1, r1
 3fa:	ff 27       	eor	r31, r31
 3fc:	59 1b       	sub	r21, r25
 3fe:	99 f0       	breq	.+38     	; 0x426 <__addsf3x+0x5c>
 400:	59 3f       	cpi	r21, 0xF9	; 249
 402:	50 f4       	brcc	.+20     	; 0x418 <__addsf3x+0x4e>
 404:	50 3e       	cpi	r21, 0xE0	; 224
 406:	68 f1       	brcs	.+90     	; 0x462 <__addsf3x+0x98>
 408:	1a 16       	cp	r1, r26
 40a:	f0 40       	sbci	r31, 0x00	; 0
 40c:	a2 2f       	mov	r26, r18
 40e:	23 2f       	mov	r18, r19
 410:	34 2f       	mov	r19, r20
 412:	44 27       	eor	r20, r20
 414:	58 5f       	subi	r21, 0xF8	; 248
 416:	f3 cf       	rjmp	.-26     	; 0x3fe <__addsf3x+0x34>
 418:	46 95       	lsr	r20
 41a:	37 95       	ror	r19
 41c:	27 95       	ror	r18
 41e:	a7 95       	ror	r26
 420:	f0 40       	sbci	r31, 0x00	; 0
 422:	53 95       	inc	r21
 424:	c9 f7       	brne	.-14     	; 0x418 <__addsf3x+0x4e>
 426:	7e f4       	brtc	.+30     	; 0x446 <__addsf3x+0x7c>
 428:	1f 16       	cp	r1, r31
 42a:	ba 0b       	sbc	r27, r26
 42c:	62 0b       	sbc	r22, r18
 42e:	73 0b       	sbc	r23, r19
 430:	84 0b       	sbc	r24, r20
 432:	ba f0       	brmi	.+46     	; 0x462 <__addsf3x+0x98>
 434:	91 50       	subi	r25, 0x01	; 1
 436:	a1 f0       	breq	.+40     	; 0x460 <__addsf3x+0x96>
 438:	ff 0f       	add	r31, r31
 43a:	bb 1f       	adc	r27, r27
 43c:	66 1f       	adc	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	c2 f7       	brpl	.-16     	; 0x434 <__addsf3x+0x6a>
 444:	0e c0       	rjmp	.+28     	; 0x462 <__addsf3x+0x98>
 446:	ba 0f       	add	r27, r26
 448:	62 1f       	adc	r22, r18
 44a:	73 1f       	adc	r23, r19
 44c:	84 1f       	adc	r24, r20
 44e:	48 f4       	brcc	.+18     	; 0x462 <__addsf3x+0x98>
 450:	87 95       	ror	r24
 452:	77 95       	ror	r23
 454:	67 95       	ror	r22
 456:	b7 95       	ror	r27
 458:	f7 95       	ror	r31
 45a:	9e 3f       	cpi	r25, 0xFE	; 254
 45c:	08 f0       	brcs	.+2      	; 0x460 <__addsf3x+0x96>
 45e:	b3 cf       	rjmp	.-154    	; 0x3c6 <__addsf3+0x1e>
 460:	93 95       	inc	r25
 462:	88 0f       	add	r24, r24
 464:	08 f0       	brcs	.+2      	; 0x468 <__addsf3x+0x9e>
 466:	99 27       	eor	r25, r25
 468:	ee 0f       	add	r30, r30
 46a:	97 95       	ror	r25
 46c:	87 95       	ror	r24
 46e:	08 95       	ret

00000470 <__divsf3>:
 470:	0c d0       	rcall	.+24     	; 0x48a <__divsf3x>
 472:	e6 c0       	rjmp	.+460    	; 0x640 <__fp_round>
 474:	de d0       	rcall	.+444    	; 0x632 <__fp_pscB>
 476:	40 f0       	brcs	.+16     	; 0x488 <__divsf3+0x18>
 478:	d5 d0       	rcall	.+426    	; 0x624 <__fp_pscA>
 47a:	30 f0       	brcs	.+12     	; 0x488 <__divsf3+0x18>
 47c:	21 f4       	brne	.+8      	; 0x486 <__divsf3+0x16>
 47e:	5f 3f       	cpi	r21, 0xFF	; 255
 480:	19 f0       	breq	.+6      	; 0x488 <__divsf3+0x18>
 482:	c7 c0       	rjmp	.+398    	; 0x612 <__fp_inf>
 484:	51 11       	cpse	r21, r1
 486:	10 c1       	rjmp	.+544    	; 0x6a8 <__fp_szero>
 488:	ca c0       	rjmp	.+404    	; 0x61e <__fp_nan>

0000048a <__divsf3x>:
 48a:	eb d0       	rcall	.+470    	; 0x662 <__fp_split3>
 48c:	98 f3       	brcs	.-26     	; 0x474 <__divsf3+0x4>

0000048e <__divsf3_pse>:
 48e:	99 23       	and	r25, r25
 490:	c9 f3       	breq	.-14     	; 0x484 <__divsf3+0x14>
 492:	55 23       	and	r21, r21
 494:	b1 f3       	breq	.-20     	; 0x482 <__divsf3+0x12>
 496:	95 1b       	sub	r25, r21
 498:	55 0b       	sbc	r21, r21
 49a:	bb 27       	eor	r27, r27
 49c:	aa 27       	eor	r26, r26
 49e:	62 17       	cp	r22, r18
 4a0:	73 07       	cpc	r23, r19
 4a2:	84 07       	cpc	r24, r20
 4a4:	38 f0       	brcs	.+14     	; 0x4b4 <__divsf3_pse+0x26>
 4a6:	9f 5f       	subi	r25, 0xFF	; 255
 4a8:	5f 4f       	sbci	r21, 0xFF	; 255
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
 4ae:	44 1f       	adc	r20, r20
 4b0:	aa 1f       	adc	r26, r26
 4b2:	a9 f3       	breq	.-22     	; 0x49e <__divsf3_pse+0x10>
 4b4:	33 d0       	rcall	.+102    	; 0x51c <__divsf3_pse+0x8e>
 4b6:	0e 2e       	mov	r0, r30
 4b8:	3a f0       	brmi	.+14     	; 0x4c8 <__divsf3_pse+0x3a>
 4ba:	e0 e8       	ldi	r30, 0x80	; 128
 4bc:	30 d0       	rcall	.+96     	; 0x51e <__divsf3_pse+0x90>
 4be:	91 50       	subi	r25, 0x01	; 1
 4c0:	50 40       	sbci	r21, 0x00	; 0
 4c2:	e6 95       	lsr	r30
 4c4:	00 1c       	adc	r0, r0
 4c6:	ca f7       	brpl	.-14     	; 0x4ba <__divsf3_pse+0x2c>
 4c8:	29 d0       	rcall	.+82     	; 0x51c <__divsf3_pse+0x8e>
 4ca:	fe 2f       	mov	r31, r30
 4cc:	27 d0       	rcall	.+78     	; 0x51c <__divsf3_pse+0x8e>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	bb 1f       	adc	r27, r27
 4d6:	26 17       	cp	r18, r22
 4d8:	37 07       	cpc	r19, r23
 4da:	48 07       	cpc	r20, r24
 4dc:	ab 07       	cpc	r26, r27
 4de:	b0 e8       	ldi	r27, 0x80	; 128
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <__divsf3_pse+0x56>
 4e2:	bb 0b       	sbc	r27, r27
 4e4:	80 2d       	mov	r24, r0
 4e6:	bf 01       	movw	r22, r30
 4e8:	ff 27       	eor	r31, r31
 4ea:	93 58       	subi	r25, 0x83	; 131
 4ec:	5f 4f       	sbci	r21, 0xFF	; 255
 4ee:	2a f0       	brmi	.+10     	; 0x4fa <__divsf3_pse+0x6c>
 4f0:	9e 3f       	cpi	r25, 0xFE	; 254
 4f2:	51 05       	cpc	r21, r1
 4f4:	68 f0       	brcs	.+26     	; 0x510 <__divsf3_pse+0x82>
 4f6:	8d c0       	rjmp	.+282    	; 0x612 <__fp_inf>
 4f8:	d7 c0       	rjmp	.+430    	; 0x6a8 <__fp_szero>
 4fa:	5f 3f       	cpi	r21, 0xFF	; 255
 4fc:	ec f3       	brlt	.-6      	; 0x4f8 <__divsf3_pse+0x6a>
 4fe:	98 3e       	cpi	r25, 0xE8	; 232
 500:	dc f3       	brlt	.-10     	; 0x4f8 <__divsf3_pse+0x6a>
 502:	86 95       	lsr	r24
 504:	77 95       	ror	r23
 506:	67 95       	ror	r22
 508:	b7 95       	ror	r27
 50a:	f7 95       	ror	r31
 50c:	9f 5f       	subi	r25, 0xFF	; 255
 50e:	c9 f7       	brne	.-14     	; 0x502 <__divsf3_pse+0x74>
 510:	88 0f       	add	r24, r24
 512:	91 1d       	adc	r25, r1
 514:	96 95       	lsr	r25
 516:	87 95       	ror	r24
 518:	97 f9       	bld	r25, 7
 51a:	08 95       	ret
 51c:	e1 e0       	ldi	r30, 0x01	; 1
 51e:	66 0f       	add	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	bb 1f       	adc	r27, r27
 526:	62 17       	cp	r22, r18
 528:	73 07       	cpc	r23, r19
 52a:	84 07       	cpc	r24, r20
 52c:	ba 07       	cpc	r27, r26
 52e:	20 f0       	brcs	.+8      	; 0x538 <__divsf3_pse+0xaa>
 530:	62 1b       	sub	r22, r18
 532:	73 0b       	sbc	r23, r19
 534:	84 0b       	sbc	r24, r20
 536:	ba 0b       	sbc	r27, r26
 538:	ee 1f       	adc	r30, r30
 53a:	88 f7       	brcc	.-30     	; 0x51e <__divsf3_pse+0x90>
 53c:	e0 95       	com	r30
 53e:	08 95       	ret

00000540 <__fixunssfsi>:
 540:	98 d0       	rcall	.+304    	; 0x672 <__fp_splitA>
 542:	88 f0       	brcs	.+34     	; 0x566 <__fixunssfsi+0x26>
 544:	9f 57       	subi	r25, 0x7F	; 127
 546:	90 f0       	brcs	.+36     	; 0x56c <__fixunssfsi+0x2c>
 548:	b9 2f       	mov	r27, r25
 54a:	99 27       	eor	r25, r25
 54c:	b7 51       	subi	r27, 0x17	; 23
 54e:	a0 f0       	brcs	.+40     	; 0x578 <__fixunssfsi+0x38>
 550:	d1 f0       	breq	.+52     	; 0x586 <__fixunssfsi+0x46>
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	1a f0       	brmi	.+6      	; 0x562 <__fixunssfsi+0x22>
 55c:	ba 95       	dec	r27
 55e:	c9 f7       	brne	.-14     	; 0x552 <__fixunssfsi+0x12>
 560:	12 c0       	rjmp	.+36     	; 0x586 <__fixunssfsi+0x46>
 562:	b1 30       	cpi	r27, 0x01	; 1
 564:	81 f0       	breq	.+32     	; 0x586 <__fixunssfsi+0x46>
 566:	9f d0       	rcall	.+318    	; 0x6a6 <__fp_zero>
 568:	b1 e0       	ldi	r27, 0x01	; 1
 56a:	08 95       	ret
 56c:	9c c0       	rjmp	.+312    	; 0x6a6 <__fp_zero>
 56e:	67 2f       	mov	r22, r23
 570:	78 2f       	mov	r23, r24
 572:	88 27       	eor	r24, r24
 574:	b8 5f       	subi	r27, 0xF8	; 248
 576:	39 f0       	breq	.+14     	; 0x586 <__fixunssfsi+0x46>
 578:	b9 3f       	cpi	r27, 0xF9	; 249
 57a:	cc f3       	brlt	.-14     	; 0x56e <__fixunssfsi+0x2e>
 57c:	86 95       	lsr	r24
 57e:	77 95       	ror	r23
 580:	67 95       	ror	r22
 582:	b3 95       	inc	r27
 584:	d9 f7       	brne	.-10     	; 0x57c <__fixunssfsi+0x3c>
 586:	3e f4       	brtc	.+14     	; 0x596 <__fixunssfsi+0x56>
 588:	90 95       	com	r25
 58a:	80 95       	com	r24
 58c:	70 95       	com	r23
 58e:	61 95       	neg	r22
 590:	7f 4f       	sbci	r23, 0xFF	; 255
 592:	8f 4f       	sbci	r24, 0xFF	; 255
 594:	9f 4f       	sbci	r25, 0xFF	; 255
 596:	08 95       	ret

00000598 <__floatunsisf>:
 598:	e8 94       	clt
 59a:	09 c0       	rjmp	.+18     	; 0x5ae <__floatsisf+0x12>

0000059c <__floatsisf>:
 59c:	97 fb       	bst	r25, 7
 59e:	3e f4       	brtc	.+14     	; 0x5ae <__floatsisf+0x12>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	99 23       	and	r25, r25
 5b0:	a9 f0       	breq	.+42     	; 0x5dc <__floatsisf+0x40>
 5b2:	f9 2f       	mov	r31, r25
 5b4:	96 e9       	ldi	r25, 0x96	; 150
 5b6:	bb 27       	eor	r27, r27
 5b8:	93 95       	inc	r25
 5ba:	f6 95       	lsr	r31
 5bc:	87 95       	ror	r24
 5be:	77 95       	ror	r23
 5c0:	67 95       	ror	r22
 5c2:	b7 95       	ror	r27
 5c4:	f1 11       	cpse	r31, r1
 5c6:	f8 cf       	rjmp	.-16     	; 0x5b8 <__floatsisf+0x1c>
 5c8:	fa f4       	brpl	.+62     	; 0x608 <__floatsisf+0x6c>
 5ca:	bb 0f       	add	r27, r27
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__floatsisf+0x36>
 5ce:	60 ff       	sbrs	r22, 0
 5d0:	1b c0       	rjmp	.+54     	; 0x608 <__floatsisf+0x6c>
 5d2:	6f 5f       	subi	r22, 0xFF	; 255
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	8f 4f       	sbci	r24, 0xFF	; 255
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	16 c0       	rjmp	.+44     	; 0x608 <__floatsisf+0x6c>
 5dc:	88 23       	and	r24, r24
 5de:	11 f0       	breq	.+4      	; 0x5e4 <__floatsisf+0x48>
 5e0:	96 e9       	ldi	r25, 0x96	; 150
 5e2:	11 c0       	rjmp	.+34     	; 0x606 <__floatsisf+0x6a>
 5e4:	77 23       	and	r23, r23
 5e6:	21 f0       	breq	.+8      	; 0x5f0 <__floatsisf+0x54>
 5e8:	9e e8       	ldi	r25, 0x8E	; 142
 5ea:	87 2f       	mov	r24, r23
 5ec:	76 2f       	mov	r23, r22
 5ee:	05 c0       	rjmp	.+10     	; 0x5fa <__floatsisf+0x5e>
 5f0:	66 23       	and	r22, r22
 5f2:	71 f0       	breq	.+28     	; 0x610 <__floatsisf+0x74>
 5f4:	96 e8       	ldi	r25, 0x86	; 134
 5f6:	86 2f       	mov	r24, r22
 5f8:	70 e0       	ldi	r23, 0x00	; 0
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	2a f0       	brmi	.+10     	; 0x608 <__floatsisf+0x6c>
 5fe:	9a 95       	dec	r25
 600:	66 0f       	add	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	da f7       	brpl	.-10     	; 0x5fe <__floatsisf+0x62>
 608:	88 0f       	add	r24, r24
 60a:	96 95       	lsr	r25
 60c:	87 95       	ror	r24
 60e:	97 f9       	bld	r25, 7
 610:	08 95       	ret

00000612 <__fp_inf>:
 612:	97 f9       	bld	r25, 7
 614:	9f 67       	ori	r25, 0x7F	; 127
 616:	80 e8       	ldi	r24, 0x80	; 128
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	08 95       	ret

0000061e <__fp_nan>:
 61e:	9f ef       	ldi	r25, 0xFF	; 255
 620:	80 ec       	ldi	r24, 0xC0	; 192
 622:	08 95       	ret

00000624 <__fp_pscA>:
 624:	00 24       	eor	r0, r0
 626:	0a 94       	dec	r0
 628:	16 16       	cp	r1, r22
 62a:	17 06       	cpc	r1, r23
 62c:	18 06       	cpc	r1, r24
 62e:	09 06       	cpc	r0, r25
 630:	08 95       	ret

00000632 <__fp_pscB>:
 632:	00 24       	eor	r0, r0
 634:	0a 94       	dec	r0
 636:	12 16       	cp	r1, r18
 638:	13 06       	cpc	r1, r19
 63a:	14 06       	cpc	r1, r20
 63c:	05 06       	cpc	r0, r21
 63e:	08 95       	ret

00000640 <__fp_round>:
 640:	09 2e       	mov	r0, r25
 642:	03 94       	inc	r0
 644:	00 0c       	add	r0, r0
 646:	11 f4       	brne	.+4      	; 0x64c <__fp_round+0xc>
 648:	88 23       	and	r24, r24
 64a:	52 f0       	brmi	.+20     	; 0x660 <__fp_round+0x20>
 64c:	bb 0f       	add	r27, r27
 64e:	40 f4       	brcc	.+16     	; 0x660 <__fp_round+0x20>
 650:	bf 2b       	or	r27, r31
 652:	11 f4       	brne	.+4      	; 0x658 <__fp_round+0x18>
 654:	60 ff       	sbrs	r22, 0
 656:	04 c0       	rjmp	.+8      	; 0x660 <__fp_round+0x20>
 658:	6f 5f       	subi	r22, 0xFF	; 255
 65a:	7f 4f       	sbci	r23, 0xFF	; 255
 65c:	8f 4f       	sbci	r24, 0xFF	; 255
 65e:	9f 4f       	sbci	r25, 0xFF	; 255
 660:	08 95       	ret

00000662 <__fp_split3>:
 662:	57 fd       	sbrc	r21, 7
 664:	90 58       	subi	r25, 0x80	; 128
 666:	44 0f       	add	r20, r20
 668:	55 1f       	adc	r21, r21
 66a:	59 f0       	breq	.+22     	; 0x682 <__fp_splitA+0x10>
 66c:	5f 3f       	cpi	r21, 0xFF	; 255
 66e:	71 f0       	breq	.+28     	; 0x68c <__fp_splitA+0x1a>
 670:	47 95       	ror	r20

00000672 <__fp_splitA>:
 672:	88 0f       	add	r24, r24
 674:	97 fb       	bst	r25, 7
 676:	99 1f       	adc	r25, r25
 678:	61 f0       	breq	.+24     	; 0x692 <__fp_splitA+0x20>
 67a:	9f 3f       	cpi	r25, 0xFF	; 255
 67c:	79 f0       	breq	.+30     	; 0x69c <__fp_splitA+0x2a>
 67e:	87 95       	ror	r24
 680:	08 95       	ret
 682:	12 16       	cp	r1, r18
 684:	13 06       	cpc	r1, r19
 686:	14 06       	cpc	r1, r20
 688:	55 1f       	adc	r21, r21
 68a:	f2 cf       	rjmp	.-28     	; 0x670 <__fp_split3+0xe>
 68c:	46 95       	lsr	r20
 68e:	f1 df       	rcall	.-30     	; 0x672 <__fp_splitA>
 690:	08 c0       	rjmp	.+16     	; 0x6a2 <__fp_splitA+0x30>
 692:	16 16       	cp	r1, r22
 694:	17 06       	cpc	r1, r23
 696:	18 06       	cpc	r1, r24
 698:	99 1f       	adc	r25, r25
 69a:	f1 cf       	rjmp	.-30     	; 0x67e <__fp_splitA+0xc>
 69c:	86 95       	lsr	r24
 69e:	71 05       	cpc	r23, r1
 6a0:	61 05       	cpc	r22, r1
 6a2:	08 94       	sec
 6a4:	08 95       	ret

000006a6 <__fp_zero>:
 6a6:	e8 94       	clt

000006a8 <__fp_szero>:
 6a8:	bb 27       	eor	r27, r27
 6aa:	66 27       	eor	r22, r22
 6ac:	77 27       	eor	r23, r23
 6ae:	cb 01       	movw	r24, r22
 6b0:	97 f9       	bld	r25, 7
 6b2:	08 95       	ret

000006b4 <_exit>:
 6b4:	f8 94       	cli

000006b6 <__stop_program>:
 6b6:	ff cf       	rjmp	.-2      	; 0x6b6 <__stop_program>
