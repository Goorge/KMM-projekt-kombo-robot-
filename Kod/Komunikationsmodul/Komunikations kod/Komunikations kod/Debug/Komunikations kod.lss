
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800120  00800120  000007a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000095e  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000315  00000000  00000000  00001256  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cc8  00000000  00000000  0000156b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  00002234  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011cf7  00000000  00000000  000024b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e5  00000000  00000000  000141ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00014690  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000040f6  00000000  00000000  000147a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	fe c0       	rjmp	.+508    	; 0x206 <__vector_2>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	6c c1       	rjmp	.+728    	; 0x342 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ee       	ldi	r30, 0xEC	; 236
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a7 32       	cpi	r26, 0x27	; 39
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	88 d1       	rcall	.+784    	; 0x3d4 <main>
  c4:	11 c3       	rjmp	.+1570   	; 0x6e8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <i2c_setup>:
	 
//Hämtar datan
ISR ( USART0_RX ){ //recieve complete
	dataFromBT = UDR0;
	newData = true;
  ca:	80 93 24 01 	sts	0x0124, r24
  ce:	80 93 ba 00 	sts	0x00BA, r24
  d2:	85 ec       	ldi	r24, 0xC5	; 197
  d4:	80 93 bc 00 	sts	0x00BC, r24
  d8:	08 95       	ret

000000da <i2c_send>:
  da:	60 93 bb 00 	sts	0x00BB, r22
  de:	ec eb       	ldi	r30, 0xBC	; 188
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	88 23       	and	r24, r24
  e6:	ec f7       	brge	.-6      	; 0xe2 <i2c_send+0x8>
  e8:	08 95       	ret

000000ea <i2c_recive>:
  ea:	ec eb       	ldi	r30, 0xBC	; 188
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 23       	and	r24, r24
  f2:	ec f7       	brge	.-6      	; 0xee <i2c_recive+0x4>
  f4:	80 91 b9 00 	lds	r24, 0x00B9
  f8:	88 7f       	andi	r24, 0xF8	; 248
  fa:	88 31       	cpi	r24, 0x18	; 24
  fc:	19 f4       	brne	.+6      	; 0x104 <i2c_recive+0x1a>
  fe:	80 91 bb 00 	lds	r24, 0x00BB
 102:	08 95       	ret
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	08 95       	ret

00000108 <incomingData>:
 108:	80 91 24 01 	lds	r24, 0x0124
 10c:	8e 7f       	andi	r24, 0xFE	; 254
 10e:	80 93 ba 00 	sts	0x00BA, r24
 112:	80 e4       	ldi	r24, 0x40	; 64
 114:	80 93 bc 00 	sts	0x00BC, r24
 118:	ec eb       	ldi	r30, 0xBC	; 188
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <incomingData+0x14>
 122:	80 91 b9 00 	lds	r24, 0x00B9
 126:	80 36       	cpi	r24, 0x60	; 96
 128:	c1 f4       	brne	.+48     	; 0x15a <incomingData+0x52>
 12a:	20 91 22 01 	lds	r18, 0x0122
 12e:	30 91 23 01 	lds	r19, 0x0123
 132:	80 91 20 01 	lds	r24, 0x0120
 136:	90 91 21 01 	lds	r25, 0x0121
 13a:	ac 01       	movw	r20, r24
 13c:	4f 5f       	subi	r20, 0xFF	; 255
 13e:	5f 4f       	sbci	r21, 0xFF	; 255
 140:	50 93 21 01 	sts	0x0121, r21
 144:	40 93 20 01 	sts	0x0120, r20
 148:	f9 01       	movw	r30, r18
 14a:	e8 0f       	add	r30, r24
 14c:	f9 1f       	adc	r31, r25
 14e:	60 81       	ld	r22, Z
 150:	80 91 26 01 	lds	r24, 0x0126
 154:	c2 df       	rcall	.-124    	; 0xda <i2c_send>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	08 95       	ret
 15a:	80 91 b9 00 	lds	r24, 0x00B9
 15e:	88 3a       	cpi	r24, 0xA8	; 168
 160:	29 f4       	brne	.+10     	; 0x16c <incomingData+0x64>
 162:	80 e4       	ldi	r24, 0x40	; 64
 164:	8a b9       	out	0x0a, r24	; 10
 166:	8b b9       	out	0x0b, r24	; 11
 168:	c0 cf       	rjmp	.-128    	; 0xea <i2c_recive>
 16a:	08 95       	ret
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret

00000170 <usart_setup>:
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	bc 01       	movw	r22, r24
 176:	88 ed       	ldi	r24, 0xD8	; 216
 178:	80 93 c1 00 	sts	0x00C1, r24
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	80 93 c2 00 	sts	0x00C2, r24
 182:	cb 01       	movw	r24, r22
 184:	a0 e0       	ldi	r26, 0x00	; 0
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	bc 01       	movw	r22, r24
 19a:	cd 01       	movw	r24, r26
 19c:	66 0f       	add	r22, r22
 19e:	77 1f       	adc	r23, r23
 1a0:	88 1f       	adc	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	66 0f       	add	r22, r22
 1a6:	77 1f       	adc	r23, r23
 1a8:	88 1f       	adc	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	0f d2       	rcall	.+1054   	; 0x5cc <__floatunsisf>
 1ae:	9b 01       	movw	r18, r22
 1b0:	ac 01       	movw	r20, r24
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	81 e6       	ldi	r24, 0x61	; 97
 1b8:	9b e4       	ldi	r25, 0x4B	; 75
 1ba:	74 d1       	rcall	.+744    	; 0x4a4 <__divsf3>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	40 e8       	ldi	r20, 0x80	; 128
 1c2:	5f e3       	ldi	r21, 0x3F	; 63
 1c4:	0a d1       	rcall	.+532    	; 0x3da <__subsf3>
 1c6:	d6 d1       	rcall	.+940    	; 0x574 <__fixunssfsi>
 1c8:	07 2f       	mov	r16, r23
 1ca:	18 2f       	mov	r17, r24
 1cc:	29 2f       	mov	r18, r25
 1ce:	33 27       	eor	r19, r19
 1d0:	00 93 c5 00 	sts	0x00C5, r16
 1d4:	60 93 c4 00 	sts	0x00C4, r22
 1d8:	8f e4       	ldi	r24, 0x4F	; 79
 1da:	93 ec       	ldi	r25, 0xC3	; 195
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <usart_setup+0x6c>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <usart_setup+0x72>
 1e2:	00 00       	nop
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <bluetooth_setup>:
 1ea:	26 e0       	ldi	r18, 0x06	; 6
 1ec:	2a b9       	out	0x0a, r18	; 10
 1ee:	22 e0       	ldi	r18, 0x02	; 2
 1f0:	2d bb       	out	0x1d, r18	; 29
 1f2:	be cf       	rjmp	.-132    	; 0x170 <usart_setup>
 1f4:	08 95       	ret

000001f6 <bluetooth_send_char>:
 1f6:	e0 ec       	ldi	r30, 0xC0	; 192
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	90 81       	ld	r25, Z
 1fc:	95 ff       	sbrs	r25, 5
 1fe:	fd cf       	rjmp	.-6      	; 0x1fa <bluetooth_send_char+0x4>
 200:	80 93 c6 00 	sts	0x00C6, r24
 204:	08 95       	ret

00000206 <__vector_2>:
 206:	1f 92       	push	r1
 208:	0f 92       	push	r0
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	0f 92       	push	r0
 20e:	11 24       	eor	r1, r1
 210:	0b b6       	in	r0, 0x3b	; 59
 212:	0f 92       	push	r0
 214:	2f 93       	push	r18
 216:	3f 93       	push	r19
 218:	4f 93       	push	r20
 21a:	5f 93       	push	r21
 21c:	6f 93       	push	r22
 21e:	7f 93       	push	r23
 220:	8f 93       	push	r24
 222:	9f 93       	push	r25
 224:	af 93       	push	r26
 226:	bf 93       	push	r27
 228:	ef 93       	push	r30
 22a:	ff 93       	push	r31
 22c:	82 e4       	ldi	r24, 0x42	; 66
 22e:	e3 df       	rcall	.-58     	; 0x1f6 <bluetooth_send_char>
 230:	ff 91       	pop	r31
 232:	ef 91       	pop	r30
 234:	bf 91       	pop	r27
 236:	af 91       	pop	r26
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	7f 91       	pop	r23
 23e:	6f 91       	pop	r22
 240:	5f 91       	pop	r21
 242:	4f 91       	pop	r20
 244:	3f 91       	pop	r19
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0b be       	out	0x3b, r0	; 59
 24c:	0f 90       	pop	r0
 24e:	0f be       	out	0x3f, r0	; 63
 250:	0f 90       	pop	r0
 252:	1f 90       	pop	r1
 254:	18 95       	reti

00000256 <lcd_setup>:

bool directionLeft = true;

//LCD Setup, inits all the variables
void lcd_setup(){
	DDRD |= (1<<RS)|(1<<E);
 256:	8a b1       	in	r24, 0x0a	; 10
 258:	80 6c       	ori	r24, 0xC0	; 192
 25a:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	8f e1       	ldi	r24, 0x1F	; 31
 25e:	9e e4       	ldi	r25, 0x4E	; 78
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_setup+0xa>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_setup+0x10>
 266:	00 00       	nop
	_delay_ms(80); // wait for vdd to rise to 4.5V 
	//Function Set
	PORTD = (0<<RS)|(0<<E);
 268:	1b b8       	out	0x0b, r1	; 11
	PORTA = lcd_FunctionReset; //b3 antal rader, b2 antal punkter, 8 eller 11  
 26a:	88 e3       	ldi	r24, 0x38	; 56
 26c:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26e:	9a e1       	ldi	r25, 0x1A	; 26
 270:	9a 95       	dec	r25
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_setup+0x1a>
 274:	00 c0       	rjmp	.+0      	; 0x276 <lcd_setup+0x20>
	_delay_us(80);
	//Display on
	PORTD = (0<<RS)|(0<<E);
 276:	1b b8       	out	0x0b, r1	; 11
	PORTA = lcd_DisplayOn; //b2 display, b1 cursor, b0 blink
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	82 b9       	out	0x02, r24	; 2
 27c:	8a e1       	ldi	r24, 0x1A	; 26
 27e:	8a 95       	dec	r24
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_setup+0x28>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_setup+0x2e>
	_delay_us(80);
	//Display clear
	PORTD = (0<<RS)|(0<<E);
 284:	1b b8       	out	0x0b, r1	; 11
	PORTA = lcd_Clear;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	87 ee       	ldi	r24, 0xE7	; 231
 28c:	93 e0       	ldi	r25, 0x03	; 3
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_setup+0x38>
 292:	00 c0       	rjmp	.+0      	; 0x294 <lcd_setup+0x3e>
 294:	00 00       	nop
	_delay_ms(4);
	//Entry Mode Set
	PORTD = (0<<RS)|(0<<E);
 296:	1b b8       	out	0x0b, r1	; 11
	PORTA = lcd_EntryMode;//b1 inc/dec, b0, Entire shift
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	82 b9       	out	0x02, r24	; 2
 29c:	89 ef       	ldi	r24, 0xF9	; 249
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_setup+0x4a>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <lcd_setup+0x50>
 2a6:	00 00       	nop
 2a8:	08 95       	ret

000002aa <lcd_write_char>:
	_delay_ms(1);
}

// writes a char on current possition
void lcd_write_char(char letter){
	PORTA = letter;  // Lägg ín data på pinnarna in data
 2aa:	82 b9       	out	0x02, r24	; 2
	
	PORTD &= 0<<E; // Försäkring om att E är låg innan vi försöker skriva
 2ac:	8b b1       	in	r24, 0x0b	; 11
 2ae:	1b b8       	out	0x0b, r1	; 11
	
	PORTD |= 1 << RS; // sätt RS
 2b0:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= 1 << E; // Sätt Enable
 2b2:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	00 00       	nop
	
	_delay_us(1); //TSU2	// Vänta på att data ska stabiliseras
	PORTD &= 0 << E;
 2b6:	8b b1       	in	r24, 0x0b	; 11
 2b8:	1b b8       	out	0x0b, r1	; 11
	PORTD &= 0 << RS;
 2ba:	8b b1       	in	r24, 0x0b	; 11
 2bc:	1b b8       	out	0x0b, r1	; 11
 2be:	00 00       	nop
 2c0:	08 95       	ret

000002c2 <lcd_write_instruction>:
	_delay_us(1);
}

lcd_write_instruction(uint8_t instruction){
	PORTD &= 0 << E;
 2c2:	9b b1       	in	r25, 0x0b	; 11
 2c4:	1b b8       	out	0x0b, r1	; 11
	PORTD &= 0 << RS;
 2c6:	9b b1       	in	r25, 0x0b	; 11
 2c8:	1b b8       	out	0x0b, r1	; 11
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 2ca:	82 b9       	out	0x02, r24	; 2
}
 2cc:	08 95       	ret

000002ce <lcd_write_string>:

//Erases data on LCD and write new one.
void lcd_write_string(char string[2][16]){
 2ce:	ef 92       	push	r14
 2d0:	ff 92       	push	r15
 2d2:	0f 93       	push	r16
 2d4:	1f 93       	push	r17
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	7c 01       	movw	r14, r24
	lcd_write_instruction(lcd_Clear);
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	f1 df       	rcall	.-30     	; 0x2c2 <lcd_write_instruction>
 2e0:	8a e1       	ldi	r24, 0x1A	; 26
 2e2:	8a 95       	dec	r24
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_write_string+0x14>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_write_string+0x1a>
 2e8:	87 01       	movw	r16, r14
 2ea:	e7 01       	movw	r28, r14
 2ec:	60 96       	adiw	r28, 0x10	; 16
	//lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	//_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 2ee:	f8 01       	movw	r30, r16
 2f0:	81 91       	ld	r24, Z+
 2f2:	8f 01       	movw	r16, r30
 2f4:	da df       	rcall	.-76     	; 0x2aa <lcd_write_char>
 2f6:	fa e1       	ldi	r31, 0x1A	; 26
 2f8:	fa 95       	dec	r31
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <lcd_write_string+0x2a>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <lcd_write_string+0x30>
	
	//lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	//_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 2fe:	0c 17       	cp	r16, r28
 300:	1d 07       	cpc	r17, r29
 302:	a9 f7       	brne	.-22     	; 0x2ee <lcd_write_string+0x20>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 304:	80 ec       	ldi	r24, 0xC0	; 192
 306:	dd df       	rcall	.-70     	; 0x2c2 <lcd_write_instruction>
 308:	8a e1       	ldi	r24, 0x1A	; 26
 30a:	8a 95       	dec	r24
 30c:	f1 f7       	brne	.-4      	; 0x30a <lcd_write_string+0x3c>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <lcd_write_string+0x42>
 310:	87 01       	movw	r16, r14
 312:	00 5e       	subi	r16, 0xE0	; 224
 314:	1f 4f       	sbci	r17, 0xFF	; 255
	//lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	//_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 316:	89 91       	ld	r24, Y+
 318:	c8 df       	rcall	.-112    	; 0x2aa <lcd_write_char>
 31a:	ea e1       	ldi	r30, 0x1A	; 26
 31c:	ea 95       	dec	r30
 31e:	f1 f7       	brne	.-4      	; 0x31c <lcd_write_string+0x4e>
 320:	00 c0       	rjmp	.+0      	; 0x322 <lcd_write_string+0x54>
	
	//lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	//_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 322:	c0 17       	cp	r28, r16
 324:	d1 07       	cpc	r29, r17
 326:	b9 f7       	brne	.-18     	; 0x316 <lcd_write_string+0x48>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	cb df       	rcall	.-106    	; 0x2c2 <lcd_write_instruction>
 32c:	fa e1       	ldi	r31, 0x1A	; 26
 32e:	fa 95       	dec	r31
 330:	f1 f7       	brne	.-4      	; 0x32e <lcd_write_string+0x60>
 332:	00 c0       	rjmp	.+0      	; 0x334 <lcd_write_string+0x66>
		_delay_us(80); 
	}
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	08 95       	ret

00000342 <__vector_26>:
void run();
void initialize();

byte a;

ISR(TWI_vect){
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	0b b6       	in	r0, 0x3b	; 59
 34e:	0f 92       	push	r0
 350:	2f 93       	push	r18
 352:	3f 93       	push	r19
 354:	4f 93       	push	r20
 356:	5f 93       	push	r21
 358:	6f 93       	push	r22
 35a:	7f 93       	push	r23
 35c:	8f 93       	push	r24
 35e:	9f 93       	push	r25
 360:	af 93       	push	r26
 362:	bf 93       	push	r27
 364:	ef 93       	push	r30
 366:	ff 93       	push	r31
	a=incomingData();
 368:	cf de       	rcall	.-610    	; 0x108 <incomingData>
 36a:	80 93 25 01 	sts	0x0125, r24
}
 36e:	ff 91       	pop	r31
 370:	ef 91       	pop	r30
 372:	bf 91       	pop	r27
 374:	af 91       	pop	r26
 376:	9f 91       	pop	r25
 378:	8f 91       	pop	r24
 37a:	7f 91       	pop	r23
 37c:	6f 91       	pop	r22
 37e:	5f 91       	pop	r21
 380:	4f 91       	pop	r20
 382:	3f 91       	pop	r19
 384:	2f 91       	pop	r18
 386:	0f 90       	pop	r0
 388:	0b be       	out	0x3b, r0	; 59
 38a:	0f 90       	pop	r0
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	0f 90       	pop	r0
 390:	1f 90       	pop	r1
 392:	18 95       	reti

00000394 <initialize>:
	initialize();
	run();
}

void initialize(){
	i2c_setup(0x02);
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	99 de       	rcall	.-718    	; 0xca <i2c_setup>
	bluetooth_setup(115200);
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	92 ec       	ldi	r25, 0xC2	; 194
 39c:	26 df       	rcall	.-436    	; 0x1ea <bluetooth_setup>
	lcd_setup();
 39e:	5b df       	rcall	.-330    	; 0x256 <lcd_setup>
	DDRB = 0xff;
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	84 b9       	out	0x04, r24	; 4
 3a4:	08 95       	ret

000003a6 <run>:
	//sei();
}

void run(){
 3a6:	cf 93       	push	r28
 3a8:	df 93       	push	r29
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	a0 97       	sbiw	r28, 0x20	; 32
 3b0:	0f b6       	in	r0, 0x3f	; 63
 3b2:	f8 94       	cli
 3b4:	de bf       	out	0x3e, r29	; 62
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	cd bf       	out	0x3d, r28	; 61
	char test[2][16] = {"test", "Mer Test"};
 3ba:	80 e2       	ldi	r24, 0x20	; 32
 3bc:	e0 e0       	ldi	r30, 0x00	; 0
 3be:	f1 e0       	ldi	r31, 0x01	; 1
 3c0:	de 01       	movw	r26, r28
 3c2:	11 96       	adiw	r26, 0x01	; 1
 3c4:	01 90       	ld	r0, Z+
 3c6:	0d 92       	st	X+, r0
 3c8:	8a 95       	dec	r24
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <run+0x1e>
	lcd_write_string(test);
 3cc:	ce 01       	movw	r24, r28
 3ce:	01 96       	adiw	r24, 0x01	; 1
 3d0:	7e df       	rcall	.-260    	; 0x2ce <lcd_write_string>
		
		//if(a == 0xf0){
		//	DDRD = 1<<PD7;
		//	PORTD= 1<<PD7;
		//}
	}
 3d2:	ff cf       	rjmp	.-2      	; 0x3d2 <run+0x2c>

000003d4 <main>:
	a=incomingData();
}

int main (void)
{
	board_init();
 3d4:	79 de       	rcall	.-782    	; 0xc8 <board_init>
	initialize();
 3d6:	de df       	rcall	.-68     	; 0x394 <initialize>
	run();
 3d8:	e6 df       	rcall	.-52     	; 0x3a6 <run>

000003da <__subsf3>:
 3da:	50 58       	subi	r21, 0x80	; 128

000003dc <__addsf3>:
 3dc:	bb 27       	eor	r27, r27
 3de:	aa 27       	eor	r26, r26
 3e0:	0e d0       	rcall	.+28     	; 0x3fe <__addsf3x>
 3e2:	48 c1       	rjmp	.+656    	; 0x674 <__fp_round>
 3e4:	39 d1       	rcall	.+626    	; 0x658 <__fp_pscA>
 3e6:	30 f0       	brcs	.+12     	; 0x3f4 <__addsf3+0x18>
 3e8:	3e d1       	rcall	.+636    	; 0x666 <__fp_pscB>
 3ea:	20 f0       	brcs	.+8      	; 0x3f4 <__addsf3+0x18>
 3ec:	31 f4       	brne	.+12     	; 0x3fa <__addsf3+0x1e>
 3ee:	9f 3f       	cpi	r25, 0xFF	; 255
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <__addsf3+0x1a>
 3f2:	1e f4       	brtc	.+6      	; 0x3fa <__addsf3+0x1e>
 3f4:	2e c1       	rjmp	.+604    	; 0x652 <__fp_nan>
 3f6:	0e f4       	brtc	.+2      	; 0x3fa <__addsf3+0x1e>
 3f8:	e0 95       	com	r30
 3fa:	e7 fb       	bst	r30, 7
 3fc:	24 c1       	rjmp	.+584    	; 0x646 <__fp_inf>

000003fe <__addsf3x>:
 3fe:	e9 2f       	mov	r30, r25
 400:	4a d1       	rcall	.+660    	; 0x696 <__fp_split3>
 402:	80 f3       	brcs	.-32     	; 0x3e4 <__addsf3+0x8>
 404:	ba 17       	cp	r27, r26
 406:	62 07       	cpc	r22, r18
 408:	73 07       	cpc	r23, r19
 40a:	84 07       	cpc	r24, r20
 40c:	95 07       	cpc	r25, r21
 40e:	18 f0       	brcs	.+6      	; 0x416 <__addsf3x+0x18>
 410:	71 f4       	brne	.+28     	; 0x42e <__addsf3x+0x30>
 412:	9e f5       	brtc	.+102    	; 0x47a <__addsf3x+0x7c>
 414:	62 c1       	rjmp	.+708    	; 0x6da <__fp_zero>
 416:	0e f4       	brtc	.+2      	; 0x41a <__addsf3x+0x1c>
 418:	e0 95       	com	r30
 41a:	0b 2e       	mov	r0, r27
 41c:	ba 2f       	mov	r27, r26
 41e:	a0 2d       	mov	r26, r0
 420:	0b 01       	movw	r0, r22
 422:	b9 01       	movw	r22, r18
 424:	90 01       	movw	r18, r0
 426:	0c 01       	movw	r0, r24
 428:	ca 01       	movw	r24, r20
 42a:	a0 01       	movw	r20, r0
 42c:	11 24       	eor	r1, r1
 42e:	ff 27       	eor	r31, r31
 430:	59 1b       	sub	r21, r25
 432:	99 f0       	breq	.+38     	; 0x45a <__addsf3x+0x5c>
 434:	59 3f       	cpi	r21, 0xF9	; 249
 436:	50 f4       	brcc	.+20     	; 0x44c <__addsf3x+0x4e>
 438:	50 3e       	cpi	r21, 0xE0	; 224
 43a:	68 f1       	brcs	.+90     	; 0x496 <__addsf3x+0x98>
 43c:	1a 16       	cp	r1, r26
 43e:	f0 40       	sbci	r31, 0x00	; 0
 440:	a2 2f       	mov	r26, r18
 442:	23 2f       	mov	r18, r19
 444:	34 2f       	mov	r19, r20
 446:	44 27       	eor	r20, r20
 448:	58 5f       	subi	r21, 0xF8	; 248
 44a:	f3 cf       	rjmp	.-26     	; 0x432 <__addsf3x+0x34>
 44c:	46 95       	lsr	r20
 44e:	37 95       	ror	r19
 450:	27 95       	ror	r18
 452:	a7 95       	ror	r26
 454:	f0 40       	sbci	r31, 0x00	; 0
 456:	53 95       	inc	r21
 458:	c9 f7       	brne	.-14     	; 0x44c <__addsf3x+0x4e>
 45a:	7e f4       	brtc	.+30     	; 0x47a <__addsf3x+0x7c>
 45c:	1f 16       	cp	r1, r31
 45e:	ba 0b       	sbc	r27, r26
 460:	62 0b       	sbc	r22, r18
 462:	73 0b       	sbc	r23, r19
 464:	84 0b       	sbc	r24, r20
 466:	ba f0       	brmi	.+46     	; 0x496 <__addsf3x+0x98>
 468:	91 50       	subi	r25, 0x01	; 1
 46a:	a1 f0       	breq	.+40     	; 0x494 <__addsf3x+0x96>
 46c:	ff 0f       	add	r31, r31
 46e:	bb 1f       	adc	r27, r27
 470:	66 1f       	adc	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	88 1f       	adc	r24, r24
 476:	c2 f7       	brpl	.-16     	; 0x468 <__addsf3x+0x6a>
 478:	0e c0       	rjmp	.+28     	; 0x496 <__addsf3x+0x98>
 47a:	ba 0f       	add	r27, r26
 47c:	62 1f       	adc	r22, r18
 47e:	73 1f       	adc	r23, r19
 480:	84 1f       	adc	r24, r20
 482:	48 f4       	brcc	.+18     	; 0x496 <__addsf3x+0x98>
 484:	87 95       	ror	r24
 486:	77 95       	ror	r23
 488:	67 95       	ror	r22
 48a:	b7 95       	ror	r27
 48c:	f7 95       	ror	r31
 48e:	9e 3f       	cpi	r25, 0xFE	; 254
 490:	08 f0       	brcs	.+2      	; 0x494 <__addsf3x+0x96>
 492:	b3 cf       	rjmp	.-154    	; 0x3fa <__addsf3+0x1e>
 494:	93 95       	inc	r25
 496:	88 0f       	add	r24, r24
 498:	08 f0       	brcs	.+2      	; 0x49c <__addsf3x+0x9e>
 49a:	99 27       	eor	r25, r25
 49c:	ee 0f       	add	r30, r30
 49e:	97 95       	ror	r25
 4a0:	87 95       	ror	r24
 4a2:	08 95       	ret

000004a4 <__divsf3>:
 4a4:	0c d0       	rcall	.+24     	; 0x4be <__divsf3x>
 4a6:	e6 c0       	rjmp	.+460    	; 0x674 <__fp_round>
 4a8:	de d0       	rcall	.+444    	; 0x666 <__fp_pscB>
 4aa:	40 f0       	brcs	.+16     	; 0x4bc <__divsf3+0x18>
 4ac:	d5 d0       	rcall	.+426    	; 0x658 <__fp_pscA>
 4ae:	30 f0       	brcs	.+12     	; 0x4bc <__divsf3+0x18>
 4b0:	21 f4       	brne	.+8      	; 0x4ba <__divsf3+0x16>
 4b2:	5f 3f       	cpi	r21, 0xFF	; 255
 4b4:	19 f0       	breq	.+6      	; 0x4bc <__divsf3+0x18>
 4b6:	c7 c0       	rjmp	.+398    	; 0x646 <__fp_inf>
 4b8:	51 11       	cpse	r21, r1
 4ba:	10 c1       	rjmp	.+544    	; 0x6dc <__fp_szero>
 4bc:	ca c0       	rjmp	.+404    	; 0x652 <__fp_nan>

000004be <__divsf3x>:
 4be:	eb d0       	rcall	.+470    	; 0x696 <__fp_split3>
 4c0:	98 f3       	brcs	.-26     	; 0x4a8 <__divsf3+0x4>

000004c2 <__divsf3_pse>:
 4c2:	99 23       	and	r25, r25
 4c4:	c9 f3       	breq	.-14     	; 0x4b8 <__divsf3+0x14>
 4c6:	55 23       	and	r21, r21
 4c8:	b1 f3       	breq	.-20     	; 0x4b6 <__divsf3+0x12>
 4ca:	95 1b       	sub	r25, r21
 4cc:	55 0b       	sbc	r21, r21
 4ce:	bb 27       	eor	r27, r27
 4d0:	aa 27       	eor	r26, r26
 4d2:	62 17       	cp	r22, r18
 4d4:	73 07       	cpc	r23, r19
 4d6:	84 07       	cpc	r24, r20
 4d8:	38 f0       	brcs	.+14     	; 0x4e8 <__divsf3_pse+0x26>
 4da:	9f 5f       	subi	r25, 0xFF	; 255
 4dc:	5f 4f       	sbci	r21, 0xFF	; 255
 4de:	22 0f       	add	r18, r18
 4e0:	33 1f       	adc	r19, r19
 4e2:	44 1f       	adc	r20, r20
 4e4:	aa 1f       	adc	r26, r26
 4e6:	a9 f3       	breq	.-22     	; 0x4d2 <__divsf3_pse+0x10>
 4e8:	33 d0       	rcall	.+102    	; 0x550 <__divsf3_pse+0x8e>
 4ea:	0e 2e       	mov	r0, r30
 4ec:	3a f0       	brmi	.+14     	; 0x4fc <__divsf3_pse+0x3a>
 4ee:	e0 e8       	ldi	r30, 0x80	; 128
 4f0:	30 d0       	rcall	.+96     	; 0x552 <__divsf3_pse+0x90>
 4f2:	91 50       	subi	r25, 0x01	; 1
 4f4:	50 40       	sbci	r21, 0x00	; 0
 4f6:	e6 95       	lsr	r30
 4f8:	00 1c       	adc	r0, r0
 4fa:	ca f7       	brpl	.-14     	; 0x4ee <__divsf3_pse+0x2c>
 4fc:	29 d0       	rcall	.+82     	; 0x550 <__divsf3_pse+0x8e>
 4fe:	fe 2f       	mov	r31, r30
 500:	27 d0       	rcall	.+78     	; 0x550 <__divsf3_pse+0x8e>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	bb 1f       	adc	r27, r27
 50a:	26 17       	cp	r18, r22
 50c:	37 07       	cpc	r19, r23
 50e:	48 07       	cpc	r20, r24
 510:	ab 07       	cpc	r26, r27
 512:	b0 e8       	ldi	r27, 0x80	; 128
 514:	09 f0       	breq	.+2      	; 0x518 <__divsf3_pse+0x56>
 516:	bb 0b       	sbc	r27, r27
 518:	80 2d       	mov	r24, r0
 51a:	bf 01       	movw	r22, r30
 51c:	ff 27       	eor	r31, r31
 51e:	93 58       	subi	r25, 0x83	; 131
 520:	5f 4f       	sbci	r21, 0xFF	; 255
 522:	2a f0       	brmi	.+10     	; 0x52e <__divsf3_pse+0x6c>
 524:	9e 3f       	cpi	r25, 0xFE	; 254
 526:	51 05       	cpc	r21, r1
 528:	68 f0       	brcs	.+26     	; 0x544 <__divsf3_pse+0x82>
 52a:	8d c0       	rjmp	.+282    	; 0x646 <__fp_inf>
 52c:	d7 c0       	rjmp	.+430    	; 0x6dc <__fp_szero>
 52e:	5f 3f       	cpi	r21, 0xFF	; 255
 530:	ec f3       	brlt	.-6      	; 0x52c <__divsf3_pse+0x6a>
 532:	98 3e       	cpi	r25, 0xE8	; 232
 534:	dc f3       	brlt	.-10     	; 0x52c <__divsf3_pse+0x6a>
 536:	86 95       	lsr	r24
 538:	77 95       	ror	r23
 53a:	67 95       	ror	r22
 53c:	b7 95       	ror	r27
 53e:	f7 95       	ror	r31
 540:	9f 5f       	subi	r25, 0xFF	; 255
 542:	c9 f7       	brne	.-14     	; 0x536 <__divsf3_pse+0x74>
 544:	88 0f       	add	r24, r24
 546:	91 1d       	adc	r25, r1
 548:	96 95       	lsr	r25
 54a:	87 95       	ror	r24
 54c:	97 f9       	bld	r25, 7
 54e:	08 95       	ret
 550:	e1 e0       	ldi	r30, 0x01	; 1
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 1f       	adc	r24, r24
 558:	bb 1f       	adc	r27, r27
 55a:	62 17       	cp	r22, r18
 55c:	73 07       	cpc	r23, r19
 55e:	84 07       	cpc	r24, r20
 560:	ba 07       	cpc	r27, r26
 562:	20 f0       	brcs	.+8      	; 0x56c <__divsf3_pse+0xaa>
 564:	62 1b       	sub	r22, r18
 566:	73 0b       	sbc	r23, r19
 568:	84 0b       	sbc	r24, r20
 56a:	ba 0b       	sbc	r27, r26
 56c:	ee 1f       	adc	r30, r30
 56e:	88 f7       	brcc	.-30     	; 0x552 <__divsf3_pse+0x90>
 570:	e0 95       	com	r30
 572:	08 95       	ret

00000574 <__fixunssfsi>:
 574:	98 d0       	rcall	.+304    	; 0x6a6 <__fp_splitA>
 576:	88 f0       	brcs	.+34     	; 0x59a <__fixunssfsi+0x26>
 578:	9f 57       	subi	r25, 0x7F	; 127
 57a:	90 f0       	brcs	.+36     	; 0x5a0 <__fixunssfsi+0x2c>
 57c:	b9 2f       	mov	r27, r25
 57e:	99 27       	eor	r25, r25
 580:	b7 51       	subi	r27, 0x17	; 23
 582:	a0 f0       	brcs	.+40     	; 0x5ac <__fixunssfsi+0x38>
 584:	d1 f0       	breq	.+52     	; 0x5ba <__fixunssfsi+0x46>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	99 1f       	adc	r25, r25
 58e:	1a f0       	brmi	.+6      	; 0x596 <__fixunssfsi+0x22>
 590:	ba 95       	dec	r27
 592:	c9 f7       	brne	.-14     	; 0x586 <__fixunssfsi+0x12>
 594:	12 c0       	rjmp	.+36     	; 0x5ba <__fixunssfsi+0x46>
 596:	b1 30       	cpi	r27, 0x01	; 1
 598:	81 f0       	breq	.+32     	; 0x5ba <__fixunssfsi+0x46>
 59a:	9f d0       	rcall	.+318    	; 0x6da <__fp_zero>
 59c:	b1 e0       	ldi	r27, 0x01	; 1
 59e:	08 95       	ret
 5a0:	9c c0       	rjmp	.+312    	; 0x6da <__fp_zero>
 5a2:	67 2f       	mov	r22, r23
 5a4:	78 2f       	mov	r23, r24
 5a6:	88 27       	eor	r24, r24
 5a8:	b8 5f       	subi	r27, 0xF8	; 248
 5aa:	39 f0       	breq	.+14     	; 0x5ba <__fixunssfsi+0x46>
 5ac:	b9 3f       	cpi	r27, 0xF9	; 249
 5ae:	cc f3       	brlt	.-14     	; 0x5a2 <__fixunssfsi+0x2e>
 5b0:	86 95       	lsr	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b3 95       	inc	r27
 5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__fixunssfsi+0x3c>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__fixunssfsi+0x56>
 5bc:	90 95       	com	r25
 5be:	80 95       	com	r24
 5c0:	70 95       	com	r23
 5c2:	61 95       	neg	r22
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	08 95       	ret

000005cc <__floatunsisf>:
 5cc:	e8 94       	clt
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <__floatsisf+0x12>

000005d0 <__floatsisf>:
 5d0:	97 fb       	bst	r25, 7
 5d2:	3e f4       	brtc	.+14     	; 0x5e2 <__floatsisf+0x12>
 5d4:	90 95       	com	r25
 5d6:	80 95       	com	r24
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	99 23       	and	r25, r25
 5e4:	a9 f0       	breq	.+42     	; 0x610 <__floatsisf+0x40>
 5e6:	f9 2f       	mov	r31, r25
 5e8:	96 e9       	ldi	r25, 0x96	; 150
 5ea:	bb 27       	eor	r27, r27
 5ec:	93 95       	inc	r25
 5ee:	f6 95       	lsr	r31
 5f0:	87 95       	ror	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b7 95       	ror	r27
 5f8:	f1 11       	cpse	r31, r1
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <__floatsisf+0x1c>
 5fc:	fa f4       	brpl	.+62     	; 0x63c <__floatsisf+0x6c>
 5fe:	bb 0f       	add	r27, r27
 600:	11 f4       	brne	.+4      	; 0x606 <__floatsisf+0x36>
 602:	60 ff       	sbrs	r22, 0
 604:	1b c0       	rjmp	.+54     	; 0x63c <__floatsisf+0x6c>
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	16 c0       	rjmp	.+44     	; 0x63c <__floatsisf+0x6c>
 610:	88 23       	and	r24, r24
 612:	11 f0       	breq	.+4      	; 0x618 <__floatsisf+0x48>
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	11 c0       	rjmp	.+34     	; 0x63a <__floatsisf+0x6a>
 618:	77 23       	and	r23, r23
 61a:	21 f0       	breq	.+8      	; 0x624 <__floatsisf+0x54>
 61c:	9e e8       	ldi	r25, 0x8E	; 142
 61e:	87 2f       	mov	r24, r23
 620:	76 2f       	mov	r23, r22
 622:	05 c0       	rjmp	.+10     	; 0x62e <__floatsisf+0x5e>
 624:	66 23       	and	r22, r22
 626:	71 f0       	breq	.+28     	; 0x644 <__floatsisf+0x74>
 628:	96 e8       	ldi	r25, 0x86	; 134
 62a:	86 2f       	mov	r24, r22
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	2a f0       	brmi	.+10     	; 0x63c <__floatsisf+0x6c>
 632:	9a 95       	dec	r25
 634:	66 0f       	add	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	da f7       	brpl	.-10     	; 0x632 <__floatsisf+0x62>
 63c:	88 0f       	add	r24, r24
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <__fp_inf>:
 646:	97 f9       	bld	r25, 7
 648:	9f 67       	ori	r25, 0x7F	; 127
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	08 95       	ret

00000652 <__fp_nan>:
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	80 ec       	ldi	r24, 0xC0	; 192
 656:	08 95       	ret

00000658 <__fp_pscA>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	09 06       	cpc	r0, r25
 664:	08 95       	ret

00000666 <__fp_pscB>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	05 06       	cpc	r0, r21
 672:	08 95       	ret

00000674 <__fp_round>:
 674:	09 2e       	mov	r0, r25
 676:	03 94       	inc	r0
 678:	00 0c       	add	r0, r0
 67a:	11 f4       	brne	.+4      	; 0x680 <__fp_round+0xc>
 67c:	88 23       	and	r24, r24
 67e:	52 f0       	brmi	.+20     	; 0x694 <__fp_round+0x20>
 680:	bb 0f       	add	r27, r27
 682:	40 f4       	brcc	.+16     	; 0x694 <__fp_round+0x20>
 684:	bf 2b       	or	r27, r31
 686:	11 f4       	brne	.+4      	; 0x68c <__fp_round+0x18>
 688:	60 ff       	sbrs	r22, 0
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__fp_round+0x20>
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__fp_split3>:
 696:	57 fd       	sbrc	r21, 7
 698:	90 58       	subi	r25, 0x80	; 128
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	59 f0       	breq	.+22     	; 0x6b6 <__fp_splitA+0x10>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <__fp_splitA+0x1a>
 6a4:	47 95       	ror	r20

000006a6 <__fp_splitA>:
 6a6:	88 0f       	add	r24, r24
 6a8:	97 fb       	bst	r25, 7
 6aa:	99 1f       	adc	r25, r25
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <__fp_splitA+0x20>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <__fp_splitA+0x2a>
 6b2:	87 95       	ror	r24
 6b4:	08 95       	ret
 6b6:	12 16       	cp	r1, r18
 6b8:	13 06       	cpc	r1, r19
 6ba:	14 06       	cpc	r1, r20
 6bc:	55 1f       	adc	r21, r21
 6be:	f2 cf       	rjmp	.-28     	; 0x6a4 <__fp_split3+0xe>
 6c0:	46 95       	lsr	r20
 6c2:	f1 df       	rcall	.-30     	; 0x6a6 <__fp_splitA>
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <__fp_splitA+0x30>
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	f1 cf       	rjmp	.-30     	; 0x6b2 <__fp_splitA+0xc>
 6d0:	86 95       	lsr	r24
 6d2:	71 05       	cpc	r23, r1
 6d4:	61 05       	cpc	r22, r1
 6d6:	08 94       	sec
 6d8:	08 95       	ret

000006da <__fp_zero>:
 6da:	e8 94       	clt

000006dc <__fp_szero>:
 6dc:	bb 27       	eor	r27, r27
 6de:	66 27       	eor	r22, r22
 6e0:	77 27       	eor	r23, r23
 6e2:	cb 01       	movw	r24, r22
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
