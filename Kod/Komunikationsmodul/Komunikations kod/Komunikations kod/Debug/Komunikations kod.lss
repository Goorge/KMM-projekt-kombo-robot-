
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800122  00800122  000003d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a67  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ef  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001383  00000000  00000000  0000147e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011dc2  00000000  00000000  0000298c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d6  00000000  00000000  0001474e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00014b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000468c  00000000  00000000  00014bc4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	69 c0       	rjmp	.+210    	; 0x124 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	79 c0       	rjmp	.+242    	; 0x14c <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e2       	ldi	r30, 0x22	; 34
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 32       	cpi	r26, 0x24	; 36
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2a d1       	rcall	.+596    	; 0x318 <main>
  c4:	2c c1       	rjmp	.+600    	; 0x31e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <usart_setup>:
//PortD1 TXD (OUT)
//PortD2 CTS (IN)
//PortD3 RTS (OUT)

void usart_setup(unsigned int baudrate){
	UCSR0B = (1<<RXCIE0)|(1<<TXCIE0)|(1<<RXEN0)|(1<<TXEN0);/* Enable receiver and transmitter */
  ca:	88 ed       	ldi	r24, 0xD8	; 216
  cc:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);/* Set frame format: 8data, 1stop bit */
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Set baud rate */
	unsigned long baudPreScale = 7; //((((14.7456 * 1000000) / (baudrate * 16UL))) - 1); // == 7
	
	UBRR0H = (unsigned char)(baudPreScale>>8);
  d6:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)baudPreScale;
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
	
	_delay_ms(200);
}

void bluetooth_setup(unsigned long baudrate){
	DDRD |= (1 << TXD) | (1 << RTS);// Sätter blåtandsdelen av D porten, Sedan behöver LCD köra sin init för att ändra RS/E. Men blåtand init måste ske först. 
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
	
	//EIMSK = 1<<INT0;	// Enable INT0
	//MCUCR = 1<<ISC11;	// Falling edge | 1<<ISC10; Behövs nog inte
	
	usart_setup(baudrate);
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
}

// Skicka en byte över BT
void bluetooth_send_byte(byte data){
	while ( !( UCSR0A & (1<<UDRE0)) );/* Wait for empty transmit buffer */
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
	UDR0 = data; // Put the data in to the buffer and send it
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
}

// Säg till blåtandsenheten att du är redo att ta emot mer data. 
void bluetooth_clear_to_send(void){	PORTD &= ~(1 << RTS); }// Clear To Send;
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_fetch_new_data>:

//Hämta ut datan från BT
byte bluetooth_fetch_new_data(void){
	newData = false;
 114:	10 92 23 01 	sts	0x0123, r1
	return dataFromBT;
}
 118:	80 91 22 01 	lds	r24, 0x0122
 11c:	08 95       	ret

0000011e <bluetooth_get_new_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return newData; }
 11e:	80 91 23 01 	lds	r24, 0x0123
 122:	08 95       	ret

00000124 <__vector_20>:


//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 130:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 132:	80 91 c6 00 	lds	r24, 0x00C6
 136:	80 93 22 01 	sts	0x0122, r24
	newData = true; // Tala om för main att vi har fått data
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 23 01 	sts	0x0123, r24
}	
 140:	8f 91       	pop	r24
 142:	0f 90       	pop	r0
 144:	0f be       	out	0x3f, r0	; 63
 146:	0f 90       	pop	r0
 148:	1f 90       	pop	r1
 14a:	18 95       	reti

0000014c <__vector_22>:

 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <lcd_write_char>:
	//lcd_write_instruction(lcd_SetCursor);
}

// writes a char on current possition
void lcd_write_char(uint8_t letter){
	PORTA = letter;	// Lägg ín data på pinnarna in data
 160:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~(1 << E);	// Försäkring om att E är låg innan vi försöker skriva
 162:	5f 98       	cbi	0x0b, 7	; 11
	
	PORTD |= (1 << RS); // sätt RS
 164:	5e 9a       	sbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	00 00       	nop
	_delay_us(0.05);
	PORTD |= (1 << E); // Sätt Enable
 168:	5f 9a       	sbi	0x0b, 7	; 11
 16a:	80 e7       	ldi	r24, 0x70	; 112
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_write_char+0xe>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_write_char+0x14>
	
	_delay_us(100); //TSU2	// Vänta på att data ska stabiliseras
	PORTD &= ~((1 << E) | (1 << RS)); // Nolställ E och RS så att dom är noll vid nästa instruktion/charläsning
 174:	8b b1       	in	r24, 0x0b	; 11
 176:	8f 73       	andi	r24, 0x3F	; 63
 178:	8b b9       	out	0x0b, r24	; 11
 17a:	08 95       	ret

0000017c <lcd_write_instruction>:
}

// Writes instruction 
void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~((1 << E) | (1 << RS));// Se till att E är låg från början
 17c:	9b b1       	in	r25, 0x0b	; 11
 17e:	9f 73       	andi	r25, 0x3F	; 63
 180:	9b b9       	out	0x0b, r25	; 11
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 182:	82 b9       	out	0x02, r24	; 2
	
	// Ettsätt E för att skriva in instruktionen, och nolla den sedan så att den är låg för framtida användare.
	PORTD |= (1 << E);
 184:	5f 9a       	sbi	0x0b, 7	; 11
 186:	9f e0       	ldi	r25, 0x0F	; 15
 188:	9a 95       	dec	r25
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_write_instruction+0xc>
	_delay_us(3);
	PORTD &= ~(1 << E);
 18c:	5f 98       	cbi	0x0b, 7	; 11
	
	// Lägg in behövd delay ( 1.53 ms för clear och home & 39 us för de andra )
	if(instruction == lcd_Home || instruction == lcd_Clear)
 18e:	81 50       	subi	r24, 0x01	; 1
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	28 f4       	brcc	.+10     	; 0x19e <lcd_write_instruction+0x22>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	83 e3       	ldi	r24, 0x33	; 51
 196:	9b e2       	ldi	r25, 0x2B	; 43
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <lcd_write_instruction+0x1c>
 19c:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19e:	80 e7       	ldi	r24, 0x70	; 112
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_write_instruction+0x26>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_write_instruction+0x2c>
 1a8:	08 95       	ret

000001aa <lcd_setup>:
#include "LCD.h"
#include  "bluetooth.h"

//LCD Setup, inits all the variables
void lcd_setup(void){
	DDRA = 0xFF;
 1aa:	8f ef       	ldi	r24, 0xFF	; 255
 1ac:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1 << E) | (1 << RS);
 1ae:	8a b1       	in	r24, 0x0a	; 10
 1b0:	80 6c       	ori	r24, 0xC0	; 192
 1b2:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	8f e7       	ldi	r24, 0x7F	; 127
 1b8:	94 e0       	ldi	r25, 0x04	; 4
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <lcd_setup+0x10>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <lcd_setup+0x1a>
 1c4:	00 00       	nop
			
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	// Function reset Behövs nog inte
	lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  // Kanske inte behövs
 1c6:	80 e3       	ldi	r24, 0x30	; 48
 1c8:	d9 df       	rcall	.-78     	; 0x17c <lcd_write_instruction>
	// Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 1ca:	88 e3       	ldi	r24, 0x38	; 56
 1cc:	d7 df       	rcall	.-82     	; 0x17c <lcd_write_instruction>
	// Display on
	lcd_write_instruction(lcd_DisplayOff); //b2 display, b1 cursor, b0 blink
 1ce:	88 e0       	ldi	r24, 0x08	; 8
 1d0:	d5 df       	rcall	.-86     	; 0x17c <lcd_write_instruction>
	// Display clear
	lcd_write_instruction(lcd_Clear);
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	d3 df       	rcall	.-90     	; 0x17c <lcd_write_instruction>
	// Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	d1 cf       	rjmp	.-94     	; 0x17c <lcd_write_instruction>
 1da:	08 95       	ret

000001dc <lcd_write_string>:
		_delay_us(100);
}


//Erases data on LCD and write new one.
void lcd_write_string(uint8_t text[], uint8_t row_instrucion){
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	ec 01       	movw	r28, r24
 1e2:	86 2f       	mov	r24, r22
	lcd_write_instruction(row_instrucion);
 1e4:	cb df       	rcall	.-106    	; 0x17c <lcd_write_instruction>
	bluetooth_send_byte(0xFD);
 1e6:	8d ef       	ldi	r24, 0xFD	; 253
 1e8:	8b df       	rcall	.-234    	; 0x100 <bluetooth_send_byte>
	for(int i = 0; i < NELEMS(text); i++)
		lcd_write_char(text[i]);
 1ea:	88 81       	ld	r24, Y
 1ec:	b9 df       	rcall	.-142    	; 0x160 <lcd_write_char>
 1ee:	89 81       	ldd	r24, Y+1	; 0x01
 1f0:	b7 df       	rcall	.-146    	; 0x160 <lcd_write_char>
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	72 ec       	ldi	r23, 0xC2	; 194
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	79 df       	rcall	.-270    	; 0xf4 <bluetooth_setup>
	lcd_setup();
 202:	d3 df       	rcall	.-90     	; 0x1aa <lcd_setup>
	//i2c_setup(0x02);
	
	sei(); // Enable interrupt
 204:	78 94       	sei
 206:	2f ef       	ldi	r18, 0xFF	; 255
 208:	8f e7       	ldi	r24, 0x7F	; 127
 20a:	94 e0       	ldi	r25, 0x04	; 4
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <initialize+0x14>
 214:	00 c0       	rjmp	.+0      	; 0x216 <initialize+0x1e>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <run>:
	_delay_ms(100);
}

void run(void){
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	c2 54       	subi	r28, 0x42	; 66
 224:	d1 09       	sbc	r29, r1
 226:	0f b6       	in	r0, 0x3f	; 63
 228:	f8 94       	cli
 22a:	de bf       	out	0x3e, r29	; 62
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	cd bf       	out	0x3d, r28	; 61
	uint8_t rad1[] = "detta ar text   ";
 230:	81 e1       	ldi	r24, 0x11	; 17
 232:	e0 e0       	ldi	r30, 0x00	; 0
 234:	f1 e0       	ldi	r31, 0x01	; 1
 236:	de 01       	movw	r26, r28
 238:	11 96       	adiw	r26, 0x01	; 1
 23a:	01 90       	ld	r0, Z+
 23c:	0d 92       	st	X+, r0
 23e:	8a 95       	dec	r24
 240:	e1 f7       	brne	.-8      	; 0x23a <run+0x20>
	uint8_t rad2[] = "mer text        ";
 242:	81 e1       	ldi	r24, 0x11	; 17
 244:	e1 e1       	ldi	r30, 0x11	; 17
 246:	f1 e0       	ldi	r31, 0x01	; 1
 248:	de 01       	movw	r26, r28
 24a:	52 96       	adiw	r26, 0x12	; 18
 24c:	01 90       	ld	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	8a 95       	dec	r24
 252:	e1 f7       	brne	.-8      	; 0x24c <run+0x32>
	lcd_write_instruction(lcd_DisplayOff);
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	92 df       	rcall	.-220    	; 0x17c <lcd_write_instruction>
	//How many bytes is there during current read
	short number_of_bytes_to_bt = 0;
	//short number_of_bytes_to_i2c = 0;
	
	// how many bytes is left to read=
	short bytes_left_to_bt = -1;
 258:	aa 24       	eor	r10, r10
 25a:	aa 94       	dec	r10
 25c:	ba 2c       	mov	r11, r10
	// the byte we are currently reading
	byte data_from_bt[16];
	//byte data_from_i2c[16];
	
	//How many bytes is there during current read
	short number_of_bytes_to_bt = 0;
 25e:	81 2c       	mov	r8, r1
 260:	91 2c       	mov	r9, r1
	//How many bytes is there during current read
	short number_of_bytes_from_bt = 0;
	//short number_of_bytes_from_i2c = 0;
	
	// how many bytes is left to read=
	short bytes_left_from_bt = -1;
 262:	ee 24       	eor	r14, r14
 264:	ea 94       	dec	r14
 266:	fe 2c       	mov	r15, r14
	lcd_write_instruction(lcd_DisplayOff);
	//lcd_write_char('A');
	//_delay_us(80);
	
	//How many bytes is there during current read
	short number_of_bytes_from_bt = 0;
 268:	00 e0       	ldi	r16, 0x00	; 0
 26a:	10 e0       	ldi	r17, 0x00	; 0
 26c:	6e 01       	movw	r12, r28
 26e:	22 e3       	ldi	r18, 0x32	; 50
 270:	c2 0e       	add	r12, r18
 272:	d1 1c       	adc	r13, r1
	byte data_to_bt[16];
	//byte data_to_i2c[16];
	bool dataSend = false;
	while(true)	{		
		// Hantera eventuell ny data ifrån BT
		if(bluetooth_get_new_data() == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 274:	54 df       	rcall	.-344    	; 0x11e <bluetooth_get_new_data>
 276:	88 23       	and	r24, r24
 278:	31 f1       	breq	.+76     	; 0x2c6 <run+0xac>
			byte data = bluetooth_fetch_new_data(); // Hämta ut data å sätt newData false
 27a:	4c df       	rcall	.-360    	; 0x114 <bluetooth_fetch_new_data>
			
			// Om vi inte har någon kö för stunden så kör
			if (bytes_left_from_bt == -1){ 
 27c:	3f ef       	ldi	r19, 0xFF	; 255
 27e:	e3 16       	cp	r14, r19
 280:	f3 06       	cpc	r15, r19
 282:	29 f4       	brne	.+10     	; 0x28e <run+0x74>
				number_of_bytes_from_bt = (data >> 4); 
 284:	08 2f       	mov	r16, r24
 286:	02 95       	swap	r16
 288:	0f 70       	andi	r16, 0x0F	; 15
 28a:	10 e0       	ldi	r17, 0x00	; 0
				bytes_left_from_bt = number_of_bytes_from_bt;
 28c:	78 01       	movw	r14, r16
			}
			
			// Lägg in datan i vektorn
			data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
 28e:	f8 01       	movw	r30, r16
 290:	ee 19       	sub	r30, r14
 292:	ff 09       	sbc	r31, r15
 294:	23 e2       	ldi	r18, 0x23	; 35
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	2c 0f       	add	r18, r28
 29a:	3d 1f       	adc	r19, r29
 29c:	e2 0f       	add	r30, r18
 29e:	f3 1f       	adc	r31, r19
 2a0:	80 83       	st	Z, r24
			--bytes_left_from_bt;
 2a2:	31 e0       	ldi	r19, 0x01	; 1
 2a4:	e3 1a       	sub	r14, r19
 2a6:	f1 08       	sbc	r15, r1
 2a8:	10 f0       	brcs	.+4      	; 0x2ae <run+0x94>
			
			// Vill vi ha mer data från samma sändning? 				
			if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
				bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
 2aa:	32 df       	rcall	.-412    	; 0x110 <bluetooth_clear_to_send>
 2ac:	0c c0       	rjmp	.+24     	; 0x2c6 <run+0xac>
 2ae:	fe 01       	movw	r30, r28
 2b0:	b3 96       	adiw	r30, 0x23	; 35
 2b2:	de 01       	movw	r26, r28
 2b4:	d3 96       	adiw	r26, 0x33	; 51
			else dataSend = true;	
		} 
		
		if( dataSend ) { //bytes_left_from_bt == -1 && bytes_left_to_bt == -1){
			for(int i = 0; i < 15; i++)
				data_to_bt[i] = data_from_bt[i];
 2b6:	81 91       	ld	r24, Z+
 2b8:	8d 93       	st	X+, r24
				bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
			else dataSend = true;	
		} 
		
		if( dataSend ) { //bytes_left_from_bt == -1 && bytes_left_to_bt == -1){
			for(int i = 0; i < 15; i++)
 2ba:	ec 15       	cp	r30, r12
 2bc:	fd 05       	cpc	r31, r13
 2be:	d9 f7       	brne	.-10     	; 0x2b6 <run+0x9c>
				data_to_bt[i] = data_from_bt[i];
			dataSend = false;
			number_of_bytes_to_bt = number_of_bytes_from_bt;
			bytes_left_to_bt = number_of_bytes_from_bt;
			bluetooth_clear_to_send();
 2c0:	27 df       	rcall	.-434    	; 0x110 <bluetooth_clear_to_send>
 2c2:	58 01       	movw	r10, r16
 2c4:	48 01       	movw	r8, r16
			// Då det bara kommer skickas styrdata via bt är det dags att skicka data till styrmodulen
			// i2csendstuff.
		}
		
		//Skriv skräp till lcd
		lcd_write_instruction(lcd_Clear);
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	59 df       	rcall	.-334    	; 0x17c <lcd_write_instruction>
		lcd_write_string(rad1, lcd_SetCursor | lcd_LineOne);
 2ca:	60 e8       	ldi	r22, 0x80	; 128
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	85 df       	rcall	.-246    	; 0x1dc <lcd_write_string>
		lcd_write_string(rad2, lcd_SetCursor | lcd_LineTwo);
 2d2:	60 ec       	ldi	r22, 0xC0	; 192
 2d4:	ce 01       	movw	r24, r28
 2d6:	42 96       	adiw	r24, 0x12	; 18
 2d8:	81 df       	rcall	.-254    	; 0x1dc <lcd_write_string>
 2da:	9f ef       	ldi	r25, 0xFF	; 255
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	3c e2       	ldi	r19, 0x2C	; 44
 2e0:	91 50       	subi	r25, 0x01	; 1
 2e2:	20 40       	sbci	r18, 0x00	; 0
 2e4:	30 40       	sbci	r19, 0x00	; 0
 2e6:	e1 f7       	brne	.-8      	; 0x2e0 <run+0xc6>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <run+0xd0>
 2ea:	00 00       	nop
		_delay_ms(1000);
		
		// Skicka data via BT
		if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 2ec:	4a 99       	sbic	0x09, 2	; 9
 2ee:	c2 cf       	rjmp	.-124    	; 0x274 <run+0x5a>
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	a8 16       	cp	r10, r24
 2f4:	b8 06       	cpc	r11, r24
 2f6:	09 f4       	brne	.+2      	; 0x2fa <run+0xe0>
 2f8:	bd cf       	rjmp	.-134    	; 0x274 <run+0x5a>
			bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt]);
 2fa:	f4 01       	movw	r30, r8
 2fc:	ea 19       	sub	r30, r10
 2fe:	fb 09       	sbc	r31, r11
 300:	23 e3       	ldi	r18, 0x33	; 51
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	2c 0f       	add	r18, r28
 306:	3d 1f       	adc	r19, r29
 308:	e2 0f       	add	r30, r18
 30a:	f3 1f       	adc	r31, r19
 30c:	80 81       	ld	r24, Z
 30e:	f8 de       	rcall	.-528    	; 0x100 <bluetooth_send_byte>
			--bytes_left_to_bt;
 310:	31 e0       	ldi	r19, 0x01	; 1
 312:	a3 1a       	sub	r10, r19
 314:	b1 08       	sbc	r11, r1
 316:	ae cf       	rjmp	.-164    	; 0x274 <run+0x5a>

00000318 <main>:
void run(void);
void initialize(void);
void update_lcd(void);

int main (void){
	board_init();
 318:	d7 de       	rcall	.-594    	; 0xc8 <board_init>
	initialize();
 31a:	6e df       	rcall	.-292    	; 0x1f8 <initialize>
	run();
 31c:	7e df       	rcall	.-260    	; 0x21a <run>

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>
