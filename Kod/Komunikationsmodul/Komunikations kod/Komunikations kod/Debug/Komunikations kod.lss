
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000680  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800124  00800124  00000738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e9  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bc  00000000  00000000  00001d21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bb3  00000000  00000000  000025dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00004190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001263b  00000000  00000000  000044f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000097c  00000000  00000000  00016b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000174ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004e96  00000000  00000000  00017603  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	08 c1       	rjmp	.+528    	; 0x262 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	bd c1       	rjmp	.+890    	; 0x3e4 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	b2 d2       	rcall	.+1380   	; 0x628 <main>
  c4:	db c2       	rjmp	.+1462   	; 0x67c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
	//	data[i] = data_from_bt[i];
	return data_from_bt;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_add_to_send_queue>:
}

// Lägg in data i kö för att skicka över BT
bool bluetooth_add_to_send_queue(byte* data){
	//int nr_of_bytes = NELEMS(data);
	int nr_of_bytes = ((data[0] >> 4) & 0x0f);
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	42 95       	swap	r20
 11a:	4f 70       	andi	r20, 0x0F	; 15
 11c:	50 e0       	ldi	r21, 0x00	; 0
	//if(number_of_bytes_to_bt + nr_of_bytes > 15)
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
 11e:	50 93 25 01 	sts	0x0125, r21
 122:	40 93 24 01 	sts	0x0124, r20
	bytes_left_to_bt = nr_of_bytes;
 126:	50 93 01 01 	sts	0x0101, r21
 12a:	40 93 00 01 	sts	0x0100, r20
 12e:	a2 e3       	ldi	r26, 0x32	; 50
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i <= nr_of_bytes; i++)
		data_to_bt[i] = data[i];
 136:	81 91       	ld	r24, Z+
 138:	8d 93       	st	X+, r24
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
	bytes_left_to_bt = nr_of_bytes;
	for(int i = 0; i <= nr_of_bytes; i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	42 17       	cp	r20, r18
 140:	53 07       	cpc	r21, r19
 142:	cc f7       	brge	.-14     	; 0x136 <bluetooth_add_to_send_queue+0x22>
		data_to_bt[i] = data[i];
	
	return true;
}
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <bluetooth_handle_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }

// Behandla bluetooth
void bluetooth_handle_data( void ){		
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
	// Hantera eventuell ny data ifrån BT
	if(newData == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 150:	80 91 2a 01 	lds	r24, 0x012A
 154:	88 23       	and	r24, r24
 156:	81 f1       	breq	.+96     	; 0x1b8 <bluetooth_handle_data+0x70>
		byte data = dataFromBT; // Hämta ut data å sätt newData false
 158:	20 91 28 01 	lds	r18, 0x0128
		newData = false;
 15c:	10 92 2a 01 	sts	0x012A, r1
		
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 160:	80 91 02 01 	lds	r24, 0x0102
 164:	90 91 03 01 	lds	r25, 0x0103
 168:	01 96       	adiw	r24, 0x01	; 1
 16a:	61 f4       	brne	.+24     	; 0x184 <bluetooth_handle_data+0x3c>
			number_of_bytes_from_bt = (data >> 4) & 0x0f; 
 16c:	82 2f       	mov	r24, r18
 16e:	82 95       	swap	r24
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 27 01 	sts	0x0127, r25
 178:	80 93 26 01 	sts	0x0126, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 17c:	90 93 03 01 	sts	0x0103, r25
 180:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
 184:	80 91 02 01 	lds	r24, 0x0102
 188:	90 91 03 01 	lds	r25, 0x0103
 18c:	e0 91 26 01 	lds	r30, 0x0126
 190:	f0 91 27 01 	lds	r31, 0x0127
 194:	e8 1b       	sub	r30, r24
 196:	f9 0b       	sbc	r31, r25
 198:	ee 5b       	subi	r30, 0xBE	; 190
 19a:	fe 4f       	sbci	r31, 0xFE	; 254
 19c:	20 83       	st	Z, r18
		bytes_left_from_bt--;
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	90 93 03 01 	sts	0x0103, r25
 1a4:	80 93 02 01 	sts	0x0102, r24
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 1a8:	01 96       	adiw	r24, 0x01	; 1
 1aa:	11 f0       	breq	.+4      	; 0x1b0 <bluetooth_handle_data+0x68>
			bluetooth_clear_to_send();
 1ac:	b1 df       	rcall	.-158    	; 0x110 <bluetooth_clear_to_send>
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <bluetooth_handle_data+0x70>
		else 
			new_data_bt = true; // Denna sändningen är klar och vi vill inte ha mer data förens den är behandlad
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 29 01 	sts	0x0129, r24
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <bluetooth_handle_data+0x78>
	} 

	// Om ny data, skicka vidare
	if(new_data_bt){ //Här är lite fel data_from_bt funkar inte...
 1b8:	80 91 29 01 	lds	r24, 0x0129
 1bc:	88 23       	and	r24, r24
 1be:	79 f1       	breq	.+94     	; 0x21e <bluetooth_handle_data+0xd6>
		//int nr_of_bytes = ((data_from_bt[0] >> 4) & 0x0f) + 1;
		//byte data[nr_of_bytes];
		//for(int i = 0; i < nr_of_bytes; i++)
		//	data[i] = data_from_bt[i];
		if(data_from_bt[0] == 0x3f){
 1c0:	80 91 42 01 	lds	r24, 0x0142
 1c4:	8f 33       	cpi	r24, 0x3F	; 63
 1c6:	09 f5       	brne	.+66     	; 0x20a <bluetooth_handle_data+0xc2>
			if(data_from_bt[1] == 0x01){
 1c8:	80 91 43 01 	lds	r24, 0x0143
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	e9 f4       	brne	.+58     	; 0x20a <bluetooth_handle_data+0xc2>
				int a1 =  data_from_bt[2];// + '0';
				int a2 =  data_from_bt[3];// + '0';
 1d0:	02 e4       	ldi	r16, 0x42	; 66
 1d2:	11 e0       	ldi	r17, 0x01	; 1
 1d4:	f8 01       	movw	r30, r16
 1d6:	83 81       	ldd	r24, Z+3	; 0x03
 1d8:	90 e0       	ldi	r25, 0x00	; 0
				char* s1 = { (a1 / 100) % 10 +'0', (a1 / 10) % 10 +'0', (a1 / 1) % 10 +'0'};
				char* s2 = { (a2 / 100) % 10 +'0', (a2 / 10) % 10 +'0', (a2 / 1) % 10 +'0'};
 1da:	c4 e6       	ldi	r28, 0x64	; 100
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	be 01       	movw	r22, r28
 1e0:	26 d2       	rcall	.+1100   	; 0x62e <__divmodhi4>
 1e2:	cb 01       	movw	r24, r22
 1e4:	ea e0       	ldi	r30, 0x0A	; 10
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	bf 01       	movw	r22, r30
 1ea:	21 d2       	rcall	.+1090   	; 0x62e <__divmodhi4>
 1ec:	9c 01       	movw	r18, r24
 1ee:	20 5d       	subi	r18, 0xD0	; 208
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
		//byte data[nr_of_bytes];
		//for(int i = 0; i < nr_of_bytes; i++)
		//	data[i] = data_from_bt[i];
		if(data_from_bt[0] == 0x3f){
			if(data_from_bt[1] == 0x01){
				int a1 =  data_from_bt[2];// + '0';
 1f2:	d8 01       	movw	r26, r16
 1f4:	12 96       	adiw	r26, 0x02	; 2
 1f6:	8c 91       	ld	r24, X
 1f8:	90 e0       	ldi	r25, 0x00	; 0
				int a2 =  data_from_bt[3];// + '0';
				char* s1 = { (a1 / 100) % 10 +'0', (a1 / 10) % 10 +'0', (a1 / 1) % 10 +'0'};
 1fa:	be 01       	movw	r22, r28
 1fc:	18 d2       	rcall	.+1072   	; 0x62e <__divmodhi4>
 1fe:	cb 01       	movw	r24, r22
 200:	bf 01       	movw	r22, r30
 202:	15 d2       	rcall	.+1066   	; 0x62e <__divmodhi4>
				char* s2 = { (a2 / 100) % 10 +'0', (a2 / 10) % 10 +'0', (a2 / 1) % 10 +'0'};
				doLCD(s1, s2);	
 204:	b9 01       	movw	r22, r18
 206:	c0 96       	adiw	r24, 0x30	; 48
 208:	f3 d1       	rcall	.+998    	; 0x5f0 <doLCD>
			}
		}
		i2c_requestToSend(0x04, data_from_bt);
 20a:	62 e4       	ldi	r22, 0x42	; 66
 20c:	71 e0       	ldi	r23, 0x01	; 1
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	43 d0       	rcall	.+134    	; 0x298 <i2c_requestToSend>
		bluetooth_add_to_send_queue(data_from_bt); // Ta bort när den skickar över i2c. 
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	7e df       	rcall	.-260    	; 0x114 <bluetooth_add_to_send_queue>
		new_data_bt = false;
 218:	10 92 29 01 	sts	0x0129, r1
		bluetooth_clear_to_send();
 21c:	79 df       	rcall	.-270    	; 0x110 <bluetooth_clear_to_send>
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 21e:	4a 99       	sbic	0x09, 2	; 9
 220:	1b c0       	rjmp	.+54     	; 0x258 <bluetooth_handle_data+0x110>
 222:	80 91 00 01 	lds	r24, 0x0100
 226:	90 91 01 01 	lds	r25, 0x0101
 22a:	8f 3f       	cpi	r24, 0xFF	; 255
 22c:	bf ef       	ldi	r27, 0xFF	; 255
 22e:	9b 07       	cpc	r25, r27
 230:	99 f0       	breq	.+38     	; 0x258 <bluetooth_handle_data+0x110>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt]);
 232:	e0 91 24 01 	lds	r30, 0x0124
 236:	f0 91 25 01 	lds	r31, 0x0125
 23a:	e8 1b       	sub	r30, r24
 23c:	f9 0b       	sbc	r31, r25
 23e:	ee 5c       	subi	r30, 0xCE	; 206
 240:	fe 4f       	sbci	r31, 0xFE	; 254
 242:	80 81       	ld	r24, Z
 244:	5d df       	rcall	.-326    	; 0x100 <bluetooth_send_byte>
		bytes_left_to_bt--;
 246:	80 91 00 01 	lds	r24, 0x0100
 24a:	90 91 01 01 	lds	r25, 0x0101
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	90 93 01 01 	sts	0x0101, r25
 254:	80 93 00 01 	sts	0x0100, r24
	}
}
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	1f 91       	pop	r17
 25e:	0f 91       	pop	r16
 260:	08 95       	ret

00000262 <__vector_20>:
	
	return true;
}

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 26e:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 270:	80 91 c6 00 	lds	r24, 0x00C6
 274:	80 93 28 01 	sts	0x0128, r24
	newData = true; // Tala om för main att vi har fått data
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 2a 01 	sts	0x012A, r24
 27e:	8f 91       	pop	r24
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <i2c_setup>:
	incomingData();	
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
}

void i2c_setup(byte adress_) {
	TWAR = adress_;
 28a:	80 93 ba 00 	sts	0x00BA, r24
	//TWSR = 0x00; // Ska nog inte vara med
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 28e:	85 ec       	ldi	r24, 0xC5	; 197
 290:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 294:	3e 9a       	sbi	0x07, 6	; 7
 296:	08 95       	ret

00000298 <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 298:	fb 01       	movw	r30, r22
 29a:	20 81       	ld	r18, Z
 29c:	22 95       	swap	r18
 29e:	2f 70       	andi	r18, 0x0F	; 15
 2a0:	42 2f       	mov	r20, r18
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	50 93 31 01 	sts	0x0131, r21
 2a8:	40 93 30 01 	sts	0x0130, r20
 2ac:	a1 e6       	ldi	r26, 0x61	; 97
 2ae:	b1 e0       	ldi	r27, 0x01	; 1
 2b0:	9a 01       	movw	r18, r20
 2b2:	2f 5f       	subi	r18, 0xFF	; 255
 2b4:	3f 4f       	sbci	r19, 0xFF	; 255
 2b6:	62 0f       	add	r22, r18
 2b8:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 2ba:	91 91       	ld	r25, Z+
 2bc:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 2be:	e6 17       	cp	r30, r22
 2c0:	f7 07       	cpc	r31, r23
 2c2:	d9 f7       	brne	.-10     	; 0x2ba <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 2c4:	80 93 70 01 	sts	0x0170, r24
	bytesSent = 0;
 2c8:	10 92 2f 01 	sts	0x012F, r1
 2cc:	10 92 2e 01 	sts	0x012E, r1
	PORTC |= (1 << PC6);
 2d0:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2d2:	f6 e3       	ldi	r31, 0x36	; 54
 2d4:	fa 95       	dec	r31
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <i2c_requestToSend+0x3c>
 2d8:	00 00       	nop
	_delay_us(11);
	PORTC &= ~(1 << PC6);
 2da:	46 98       	cbi	0x08, 6	; 8
 2dc:	08 95       	ret

000002de <i2c_send>:
}



void i2c_send(byte prossesor,byte data){
	TWDR = data;
 2de:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 2e2:	ec eb       	ldi	r30, 0xBC	; 188
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 6c       	ori	r24, 0xC0	; 192
 2ea:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 2ec:	80 81       	ld	r24, Z
 2ee:	88 23       	and	r24, r24
 2f0:	ec f7       	brge	.-6      	; 0x2ec <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 2f2:	80 91 b9 00 	lds	r24, 0x00B9
 2f6:	88 7f       	andi	r24, 0xF8	; 248
 2f8:	88 3b       	cpi	r24, 0xB8	; 184
 2fa:	c1 f0       	breq	.+48     	; 0x32c <i2c_send+0x4e>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 2fc:	84 e9       	ldi	r24, 0x94	; 148
 2fe:	80 93 bc 00 	sts	0x00BC, r24
		if(bytes_to_send_i2c >= bytesSent){
 302:	20 91 30 01 	lds	r18, 0x0130
 306:	30 91 31 01 	lds	r19, 0x0131
 30a:	80 91 2e 01 	lds	r24, 0x012E
 30e:	90 91 2f 01 	lds	r25, 0x012F
 312:	28 17       	cp	r18, r24
 314:	39 07       	cpc	r19, r25
 316:	54 f0       	brlt	.+20     	; 0x32c <i2c_send+0x4e>
 318:	82 e6       	ldi	r24, 0x62	; 98
 31a:	8a 95       	dec	r24
 31c:	f1 f7       	brne	.-4      	; 0x31a <i2c_send+0x3c>
 31e:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 320:	46 9a       	sbi	0x08, 6	; 8
 322:	86 e3       	ldi	r24, 0x36	; 54
 324:	8a 95       	dec	r24
 326:	f1 f7       	brne	.-4      	; 0x324 <i2c_send+0x46>
 328:	00 00       	nop
			_delay_us(11);
			PORTC &= ~(1 << PC6);
 32a:	46 98       	cbi	0x08, 6	; 8
 32c:	08 95       	ret

0000032e <i2c_recive>:
}

byte i2c_recive(void){
	//  if((TWSR & 0xF8)!=0x80)
	//	return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
 32e:	ec eb       	ldi	r30, 0xBC	; 188
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	80 81       	ld	r24, Z
 334:	80 6c       	ori	r24, 0xC0	; 192
 336:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 338:	80 81       	ld	r24, Z
 33a:	88 23       	and	r24, r24
 33c:	ec f7       	brge	.-6      	; 0x338 <i2c_recive+0xa>
	byte test = TWDR;
 33e:	80 91 bb 00 	lds	r24, 0x00BB
	return test;	
}
 342:	08 95       	ret

00000344 <incomingData>:
	_delay_us(11);
	PORTC &= ~(1 << PC6);
}


byte incomingData(void){	
 344:	cf 93       	push	r28
 346:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // rec data, ack sent	
 348:	80 91 b9 00 	lds	r24, 0x00B9
 34c:	88 7f       	andi	r24, 0xF8	; 248
 34e:	80 36       	cpi	r24, 0x60	; 96
 350:	39 f5       	brne	.+78     	; 0x3a0 <incomingData+0x5c>
		i2c_data[bytefrom_i2c] = i2c_recive();
 352:	c0 91 2c 01 	lds	r28, 0x012C
 356:	d0 91 2d 01 	lds	r29, 0x012D
 35a:	e9 df       	rcall	.-46     	; 0x32e <i2c_recive>
 35c:	ce 5a       	subi	r28, 0xAE	; 174
 35e:	de 4f       	sbci	r29, 0xFE	; 254
 360:	88 83       	st	Y, r24
		if(bytefrom_i2c < ((i2c_data[0]>>4) &0x0f)){
 362:	80 91 52 01 	lds	r24, 0x0152
 366:	82 95       	swap	r24
 368:	8f 70       	andi	r24, 0x0F	; 15
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	20 91 2c 01 	lds	r18, 0x012C
 370:	30 91 2d 01 	lds	r19, 0x012D
 374:	28 17       	cp	r18, r24
 376:	39 07       	cpc	r19, r25
 378:	34 f4       	brge	.+12     	; 0x386 <incomingData+0x42>
			TWCR &= ~(1 << TWINT);
 37a:	ec eb       	ldi	r30, 0xBC	; 188
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	8f 77       	andi	r24, 0x7F	; 127
 382:	80 83       	st	Z, r24
 384:	03 c0       	rjmp	.+6      	; 0x38c <incomingData+0x48>
		}
		else if((bytefrom_i2c) >= ((i2c_data[0]>>4)&0x0f))
			i2c_new_data = true;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	80 93 2b 01 	sts	0x012B, r24
		bytefrom_i2c++;
 38c:	80 91 2c 01 	lds	r24, 0x012C
 390:	90 91 2d 01 	lds	r25, 0x012D
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	90 93 2d 01 	sts	0x012D, r25
 39a:	80 93 2c 01 	sts	0x012C, r24
 39e:	1e c0       	rjmp	.+60     	; 0x3dc <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
 3a0:	80 91 b9 00 	lds	r24, 0x00B9
 3a4:	88 7f       	andi	r24, 0xF8	; 248
 3a6:	88 3a       	cpi	r24, 0xA8	; 168
 3a8:	99 f4       	brne	.+38     	; 0x3d0 <incomingData+0x8c>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 3aa:	80 91 2e 01 	lds	r24, 0x012E
 3ae:	90 91 2f 01 	lds	r25, 0x012F
 3b2:	9c 01       	movw	r18, r24
 3b4:	2f 5f       	subi	r18, 0xFF	; 255
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	30 93 2f 01 	sts	0x012F, r19
 3bc:	20 93 2e 01 	sts	0x012E, r18
 3c0:	fc 01       	movw	r30, r24
 3c2:	ef 59       	subi	r30, 0x9F	; 159
 3c4:	fe 4f       	sbci	r31, 0xFE	; 254
 3c6:	60 81       	ld	r22, Z
 3c8:	80 91 70 01 	lds	r24, 0x0170
 3cc:	88 df       	rcall	.-240    	; 0x2de <i2c_send>
 3ce:	06 c0       	rjmp	.+12     	; 0x3dc <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
 3d0:	80 91 b9 00 	lds	r24, 0x00B9
 3d4:	88 7f       	andi	r24, 0xF8	; 248
 3d6:	80 38       	cpi	r24, 0x80	; 128
 3d8:	09 f4       	brne	.+2      	; 0x3dc <incomingData+0x98>
		i2c_recive();
 3da:	a9 df       	rcall	.-174    	; 0x32e <i2c_recive>
	}
	
	return 0x00;
}
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	08 95       	ret

000003e4 <__vector_26>:
int bytefrom_i2c=0;
byte i2c_data[15];
bool i2c_new_data = false;


ISR(TWI_vect){
 3e4:	1f 92       	push	r1
 3e6:	0f 92       	push	r0
 3e8:	0f b6       	in	r0, 0x3f	; 63
 3ea:	0f 92       	push	r0
 3ec:	11 24       	eor	r1, r1
 3ee:	0b b6       	in	r0, 0x3b	; 59
 3f0:	0f 92       	push	r0
 3f2:	2f 93       	push	r18
 3f4:	3f 93       	push	r19
 3f6:	4f 93       	push	r20
 3f8:	5f 93       	push	r21
 3fa:	6f 93       	push	r22
 3fc:	7f 93       	push	r23
 3fe:	8f 93       	push	r24
 400:	9f 93       	push	r25
 402:	af 93       	push	r26
 404:	bf 93       	push	r27
 406:	ef 93       	push	r30
 408:	ff 93       	push	r31
	incomingData();	
 40a:	9c df       	rcall	.-200    	; 0x344 <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
 40c:	85 ec       	ldi	r24, 0xC5	; 197
 40e:	80 93 bc 00 	sts	0x00BC, r24
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	bf 91       	pop	r27
 418:	af 91       	pop	r26
 41a:	9f 91       	pop	r25
 41c:	8f 91       	pop	r24
 41e:	7f 91       	pop	r23
 420:	6f 91       	pop	r22
 422:	5f 91       	pop	r21
 424:	4f 91       	pop	r20
 426:	3f 91       	pop	r19
 428:	2f 91       	pop	r18
 42a:	0f 90       	pop	r0
 42c:	0b be       	out	0x3b, r0	; 59
 42e:	0f 90       	pop	r0
 430:	0f be       	out	0x3f, r0	; 63
 432:	0f 90       	pop	r0
 434:	1f 90       	pop	r1
 436:	18 95       	reti

00000438 <i2c_handle_data>:
	byte test = TWDR;
	return test;	
}

void i2c_handle_data(void){
	if(i2c_new_data == true){
 438:	80 91 2b 01 	lds	r24, 0x012B
 43c:	88 23       	and	r24, r24
 43e:	71 f0       	breq	.+28     	; 0x45c <i2c_handle_data+0x24>
		//if(((i2c_data[0] >> 4) & 0x0f) == 3) 
		bluetooth_add_to_send_queue(i2c_data);
 440:	82 e5       	ldi	r24, 0x52	; 82
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	67 de       	rcall	.-818    	; 0x114 <bluetooth_add_to_send_queue>
		i2c_new_data = false;
 446:	10 92 2b 01 	sts	0x012B, r1
		bytefrom_i2c = 0;
 44a:	10 92 2d 01 	sts	0x012D, r1
 44e:	10 92 2c 01 	sts	0x012C, r1
		TWCR &= ~(1 << TWINT);
 452:	ec eb       	ldi	r30, 0xBC	; 188
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	8f 77       	andi	r24, 0x7F	; 127
 45a:	80 83       	st	Z, r24
 45c:	08 95       	ret

0000045e <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 45e:	16 9a       	sbi	0x02, 6	; 2
 460:	00 c0       	rjmp	.+0      	; 0x462 <toggle_e+0x4>
 462:	16 98       	cbi	0x02, 6	; 2
 464:	08 95       	ret

00000466 <lcd_write>:
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	d8 2f       	mov	r29, r24
 46c:	66 23       	and	r22, r22
 46e:	11 f0       	breq	.+4      	; 0x474 <lcd_write+0xe>
 470:	14 9a       	sbi	0x02, 4	; 2
 472:	01 c0       	rjmp	.+2      	; 0x476 <lcd_write+0x10>
 474:	14 98       	cbi	0x02, 4	; 2
 476:	15 98       	cbi	0x02, 5	; 2
 478:	81 b1       	in	r24, 0x01	; 1
 47a:	8f 60       	ori	r24, 0x0F	; 15
 47c:	81 b9       	out	0x01, r24	; 1
 47e:	c2 b1       	in	r28, 0x02	; 2
 480:	c0 7f       	andi	r28, 0xF0	; 240
 482:	8d 2f       	mov	r24, r29
 484:	82 95       	swap	r24
 486:	8f 70       	andi	r24, 0x0F	; 15
 488:	8c 2b       	or	r24, r28
 48a:	82 b9       	out	0x02, r24	; 2
 48c:	e8 df       	rcall	.-48     	; 0x45e <toggle_e>
 48e:	df 70       	andi	r29, 0x0F	; 15
 490:	dc 2b       	or	r29, r28
 492:	d2 b9       	out	0x02, r29	; 2
 494:	e4 df       	rcall	.-56     	; 0x45e <toggle_e>
 496:	cf 60       	ori	r28, 0x0F	; 15
 498:	c2 b9       	out	0x02, r28	; 2
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <lcd_read>:
 4a0:	88 23       	and	r24, r24
 4a2:	11 f0       	breq	.+4      	; 0x4a8 <lcd_read+0x8>
 4a4:	14 9a       	sbi	0x02, 4	; 2
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <lcd_read+0xa>
 4a8:	14 98       	cbi	0x02, 4	; 2
 4aa:	15 9a       	sbi	0x02, 5	; 2
 4ac:	81 b1       	in	r24, 0x01	; 1
 4ae:	80 7f       	andi	r24, 0xF0	; 240
 4b0:	81 b9       	out	0x01, r24	; 1
 4b2:	16 9a       	sbi	0x02, 6	; 2
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <lcd_read+0x16>
 4b6:	20 b1       	in	r18, 0x00	; 0
 4b8:	16 98       	cbi	0x02, 6	; 2
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <lcd_read+0x1c>
 4bc:	16 9a       	sbi	0x02, 6	; 2
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <lcd_read+0x20>
 4c0:	90 b1       	in	r25, 0x00	; 0
 4c2:	22 95       	swap	r18
 4c4:	20 7f       	andi	r18, 0xF0	; 240
 4c6:	89 2f       	mov	r24, r25
 4c8:	8f 70       	andi	r24, 0x0F	; 15
 4ca:	16 98       	cbi	0x02, 6	; 2
 4cc:	82 2b       	or	r24, r18
 4ce:	08 95       	ret

000004d0 <lcd_waitbusy>:
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	e6 df       	rcall	.-52     	; 0x4a0 <lcd_read>
 4d4:	88 23       	and	r24, r24
 4d6:	e4 f3       	brlt	.-8      	; 0x4d0 <lcd_waitbusy>
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	8a 95       	dec	r24
 4dc:	f1 f7       	brne	.-4      	; 0x4da <lcd_waitbusy+0xa>
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	df cf       	rjmp	.-66     	; 0x4a0 <lcd_read>
 4e2:	08 95       	ret

000004e4 <lcd_command>:
 4e4:	cf 93       	push	r28
 4e6:	c8 2f       	mov	r28, r24
 4e8:	f3 df       	rcall	.-26     	; 0x4d0 <lcd_waitbusy>
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	8c 2f       	mov	r24, r28
 4ee:	bb df       	rcall	.-138    	; 0x466 <lcd_write>
 4f0:	cf 91       	pop	r28
 4f2:	08 95       	ret

000004f4 <lcd_gotoxy>:
 4f4:	61 11       	cpse	r22, r1
 4f6:	03 c0       	rjmp	.+6      	; 0x4fe <lcd_gotoxy+0xa>
 4f8:	80 58       	subi	r24, 0x80	; 128
 4fa:	f4 cf       	rjmp	.-24     	; 0x4e4 <lcd_command>
 4fc:	08 95       	ret
 4fe:	80 54       	subi	r24, 0x40	; 64
 500:	f1 cf       	rjmp	.-30     	; 0x4e4 <lcd_command>
 502:	08 95       	ret

00000504 <lcd_clrscr>:
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	ee df       	rcall	.-36     	; 0x4e4 <lcd_command>
 508:	89 ef       	ldi	r24, 0xF9	; 249
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	01 97       	sbiw	r24, 0x01	; 1
 50e:	f1 f7       	brne	.-4      	; 0x50c <lcd_clrscr+0x8>
 510:	00 c0       	rjmp	.+0      	; 0x512 <lcd_clrscr+0xe>
 512:	00 00       	nop
 514:	08 95       	ret

00000516 <lcd_home>:
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	e5 df       	rcall	.-54     	; 0x4e4 <lcd_command>
 51a:	89 ef       	ldi	r24, 0xF9	; 249
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <lcd_home+0x8>
 522:	00 c0       	rjmp	.+0      	; 0x524 <lcd_home+0xe>
 524:	00 00       	nop
 526:	08 95       	ret

00000528 <lcd_putc>:
 528:	cf 93       	push	r28
 52a:	c8 2f       	mov	r28, r24
 52c:	d1 df       	rcall	.-94     	; 0x4d0 <lcd_waitbusy>
 52e:	ca 30       	cpi	r28, 0x0A	; 10
 530:	41 f4       	brne	.+16     	; 0x542 <lcd_putc+0x1a>
 532:	80 34       	cpi	r24, 0x40	; 64
 534:	10 f0       	brcs	.+4      	; 0x53a <lcd_putc+0x12>
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	01 c0       	rjmp	.+2      	; 0x53c <lcd_putc+0x14>
 53a:	80 e4       	ldi	r24, 0x40	; 64
 53c:	80 58       	subi	r24, 0x80	; 128
 53e:	d2 df       	rcall	.-92     	; 0x4e4 <lcd_command>
 540:	03 c0       	rjmp	.+6      	; 0x548 <lcd_putc+0x20>
 542:	61 e0       	ldi	r22, 0x01	; 1
 544:	8c 2f       	mov	r24, r28
 546:	8f df       	rcall	.-226    	; 0x466 <lcd_write>
 548:	cf 91       	pop	r28
 54a:	08 95       	ret

0000054c <lcd_puts>:
 54c:	cf 93       	push	r28
 54e:	df 93       	push	r29
 550:	ec 01       	movw	r28, r24
 552:	21 96       	adiw	r28, 0x01	; 1
 554:	fc 01       	movw	r30, r24
 556:	80 81       	ld	r24, Z
 558:	88 23       	and	r24, r24
 55a:	21 f0       	breq	.+8      	; 0x564 <lcd_puts+0x18>
 55c:	e5 df       	rcall	.-54     	; 0x528 <lcd_putc>
 55e:	89 91       	ld	r24, Y+
 560:	81 11       	cpse	r24, r1
 562:	fc cf       	rjmp	.-8      	; 0x55c <lcd_puts+0x10>
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 56a:	cf 93       	push	r28
 56c:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 56e:	91 b1       	in	r25, 0x01	; 1
 570:	9f 67       	ori	r25, 0x7F	; 127
 572:	91 b9       	out	0x01, r25	; 1
 574:	87 e8       	ldi	r24, 0x87	; 135
 576:	93 e1       	ldi	r25, 0x13	; 19
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	f1 f7       	brne	.-4      	; 0x578 <lcd_init+0xe>
 57c:	00 c0       	rjmp	.+0      	; 0x57e <lcd_init+0x14>
 57e:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 580:	11 9a       	sbi	0x02, 1	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 582:	10 9a       	sbi	0x02, 0	; 2
    lcd_e_toggle();
 584:	6c df       	rcall	.-296    	; 0x45e <toggle_e>
 586:	8b ed       	ldi	r24, 0xDB	; 219
 588:	95 e0       	ldi	r25, 0x05	; 5
 58a:	01 97       	sbiw	r24, 0x01	; 1
 58c:	f1 f7       	brne	.-4      	; 0x58a <lcd_init+0x20>
 58e:	00 c0       	rjmp	.+0      	; 0x590 <lcd_init+0x26>
 590:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 592:	65 df       	rcall	.-310    	; 0x45e <toggle_e>
 594:	97 e1       	ldi	r25, 0x17	; 23
 596:	9a 95       	dec	r25
 598:	f1 f7       	brne	.-4      	; 0x596 <lcd_init+0x2c>
 59a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 59c:	60 df       	rcall	.-320    	; 0x45e <toggle_e>
 59e:	87 e1       	ldi	r24, 0x17	; 23
 5a0:	8a 95       	dec	r24
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <lcd_init+0x36>
 5a4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 5a6:	10 98       	cbi	0x02, 0	; 2
    lcd_e_toggle();
 5a8:	5a df       	rcall	.-332    	; 0x45e <toggle_e>
 5aa:	97 e1       	ldi	r25, 0x17	; 23
 5ac:	9a 95       	dec	r25
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <lcd_init+0x42>
 5b0:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 5b2:	88 e2       	ldi	r24, 0x28	; 40
 5b4:	97 df       	rcall	.-210    	; 0x4e4 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 5b6:	88 e0       	ldi	r24, 0x08	; 8
 5b8:	95 df       	rcall	.-214    	; 0x4e4 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 5ba:	a4 df       	rcall	.-184    	; 0x504 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 5bc:	86 e0       	ldi	r24, 0x06	; 6
 5be:	92 df       	rcall	.-220    	; 0x4e4 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 5c0:	8c 2f       	mov	r24, r28
 5c2:	90 df       	rcall	.-224    	; 0x4e4 <lcd_command>

}/* lcd_init */
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 5c8:	60 e0       	ldi	r22, 0x00	; 0
 5ca:	72 ec       	ldi	r23, 0xC2	; 194
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	91 dd       	rcall	.-1246   	; 0xf4 <bluetooth_setup>
	//lcd_setup();
	lcd_init(LCD_DISP_ON); /* initialize lcd, display on, cursor on */
 5d2:	8c e0       	ldi	r24, 0x0C	; 12
 5d4:	ca df       	rcall	.-108    	; 0x56a <lcd_init>
	i2c_setup(0x02);
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	58 de       	rcall	.-848    	; 0x28a <i2c_setup>
	sei(); // Enable interrupt
 5da:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	2f ef       	ldi	r18, 0xFF	; 255
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	99 e5       	ldi	r25, 0x59	; 89
 5e2:	21 50       	subi	r18, 0x01	; 1
 5e4:	80 40       	sbci	r24, 0x00	; 0
 5e6:	90 40       	sbci	r25, 0x00	; 0
 5e8:	e1 f7       	brne	.-8      	; 0x5e2 <initialize+0x1a>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <initialize+0x24>
 5ec:	00 00       	nop
 5ee:	08 95       	ret

000005f0 <doLCD>:
		bluetooth_handle_data();
		i2c_handle_data();
	}
}

void doLCD(char* s1, char* s2){
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	8c 01       	movw	r16, r24
 5fa:	eb 01       	movw	r28, r22
	lcd_clrscr();             /* clear screen of lcd */
 5fc:	83 df       	rcall	.-250    	; 0x504 <lcd_clrscr>
	lcd_home();               /* bring cursor to 0,0 */
 5fe:	8b df       	rcall	.-234    	; 0x516 <lcd_home>
	lcd_puts(s1);        /* type something random */
 600:	c8 01       	movw	r24, r16
 602:	a4 df       	rcall	.-184    	; 0x54c <lcd_puts>
	lcd_gotoxy(1,1);          /* go to 2nd col, 2nd row*/
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	75 df       	rcall	.-278    	; 0x4f4 <lcd_gotoxy>
	lcd_puts(s2);  /* type something random */
 60a:	ce 01       	movw	r24, r28
 60c:	9f df       	rcall	.-194    	; 0x54c <lcd_puts>
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <run>:
	_delay_ms(2000);
}
char data[15];

void run(void){	
	doLCD("ProcessorKlubben" , "Kombo-Monstret");
 618:	64 e0       	ldi	r22, 0x04	; 4
 61a:	71 e0       	ldi	r23, 0x01	; 1
 61c:	83 e1       	ldi	r24, 0x13	; 19
 61e:	91 e0       	ldi	r25, 0x01	; 1
 620:	e7 df       	rcall	.-50     	; 0x5f0 <doLCD>
	while(true)	{
		//i2c_requestToSend(0x04,data);
		bluetooth_handle_data();
 622:	92 dd       	rcall	.-1244   	; 0x148 <bluetooth_handle_data>
		i2c_handle_data();
 624:	09 df       	rcall	.-494    	; 0x438 <i2c_handle_data>
	}
 626:	fd cf       	rjmp	.-6      	; 0x622 <run+0xa>

00000628 <main>:
void initialize(void);
//void doLCD(void);
void doLCD(char* s1, char* s2);

int main (void){
	board_init();
 628:	4f dd       	rcall	.-1378   	; 0xc8 <board_init>
	initialize();
 62a:	ce df       	rcall	.-100    	; 0x5c8 <initialize>
	run();
 62c:	f5 df       	rcall	.-22     	; 0x618 <run>

0000062e <__divmodhi4>:
 62e:	97 fb       	bst	r25, 7
 630:	07 2e       	mov	r0, r23
 632:	16 f4       	brtc	.+4      	; 0x638 <__divmodhi4+0xa>
 634:	00 94       	com	r0
 636:	06 d0       	rcall	.+12     	; 0x644 <__divmodhi4_neg1>
 638:	77 fd       	sbrc	r23, 7
 63a:	08 d0       	rcall	.+16     	; 0x64c <__divmodhi4_neg2>
 63c:	0b d0       	rcall	.+22     	; 0x654 <__udivmodhi4>
 63e:	07 fc       	sbrc	r0, 7
 640:	05 d0       	rcall	.+10     	; 0x64c <__divmodhi4_neg2>
 642:	3e f4       	brtc	.+14     	; 0x652 <__divmodhi4_exit>

00000644 <__divmodhi4_neg1>:
 644:	90 95       	com	r25
 646:	81 95       	neg	r24
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	08 95       	ret

0000064c <__divmodhi4_neg2>:
 64c:	70 95       	com	r23
 64e:	61 95       	neg	r22
 650:	7f 4f       	sbci	r23, 0xFF	; 255

00000652 <__divmodhi4_exit>:
 652:	08 95       	ret

00000654 <__udivmodhi4>:
 654:	aa 1b       	sub	r26, r26
 656:	bb 1b       	sub	r27, r27
 658:	51 e1       	ldi	r21, 0x11	; 17
 65a:	07 c0       	rjmp	.+14     	; 0x66a <__udivmodhi4_ep>

0000065c <__udivmodhi4_loop>:
 65c:	aa 1f       	adc	r26, r26
 65e:	bb 1f       	adc	r27, r27
 660:	a6 17       	cp	r26, r22
 662:	b7 07       	cpc	r27, r23
 664:	10 f0       	brcs	.+4      	; 0x66a <__udivmodhi4_ep>
 666:	a6 1b       	sub	r26, r22
 668:	b7 0b       	sbc	r27, r23

0000066a <__udivmodhi4_ep>:
 66a:	88 1f       	adc	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	5a 95       	dec	r21
 670:	a9 f7       	brne	.-22     	; 0x65c <__udivmodhi4_loop>
 672:	80 95       	com	r24
 674:	90 95       	com	r25
 676:	bc 01       	movw	r22, r24
 678:	cd 01       	movw	r24, r26
 67a:	08 95       	ret

0000067c <_exit>:
 67c:	f8 94       	cli

0000067e <__stop_program>:
 67e:	ff cf       	rjmp	.-2      	; 0x67e <__stop_program>
