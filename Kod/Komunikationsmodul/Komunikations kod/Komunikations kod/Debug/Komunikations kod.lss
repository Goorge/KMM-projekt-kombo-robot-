
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000056e  00000602  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000056e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800102  00800102  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa5  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000050a  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001389  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011ce0  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000238  00000000  00000000  000148e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00014b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004684  00000000  00000000  00014bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	91 c0       	rjmp	.+290    	; 0x174 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee e6       	ldi	r30, 0x6E	; 110
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c9 d0       	rcall	.+402    	; 0x256 <main>
  c4:	52 c2       	rjmp	.+1188   	; 0x56a <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <bluetooth_get_new_data>:
	UDR0 = data; // Put the data in to the buffer and send it
}

// Säg till blåtandsenheten att du är redo att ta emot mer data. 
void bluetooth_clear_to_send(void){
	PORTD &= (0 << RTS); // Clear To Send;
  ca:	80 91 02 01 	lds	r24, 0x0102
  ce:	08 95       	ret

000000d0 <usart_setup>:
  d0:	0f 93       	push	r16
  d2:	1f 93       	push	r17
  d4:	bc 01       	movw	r22, r24
  d6:	88 ed       	ldi	r24, 0xD8	; 216
  d8:	80 93 c1 00 	sts	0x00C1, r24
  dc:	86 e0       	ldi	r24, 0x06	; 6
  de:	80 93 c2 00 	sts	0x00C2, r24
  e2:	cb 01       	movw	r24, r22
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	aa 1f       	adc	r26, r26
  ee:	bb 1f       	adc	r27, r27
  f0:	88 0f       	add	r24, r24
  f2:	99 1f       	adc	r25, r25
  f4:	aa 1f       	adc	r26, r26
  f6:	bb 1f       	adc	r27, r27
  f8:	bc 01       	movw	r22, r24
  fa:	cd 01       	movw	r24, r26
  fc:	66 0f       	add	r22, r22
  fe:	77 1f       	adc	r23, r23
 100:	88 1f       	adc	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	66 0f       	add	r22, r22
 106:	77 1f       	adc	r23, r23
 108:	88 1f       	adc	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	a0 d1       	rcall	.+832    	; 0x44e <__floatunsisf>
 10e:	9b 01       	movw	r18, r22
 110:	ac 01       	movw	r20, r24
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	70 e0       	ldi	r23, 0x00	; 0
 116:	81 e6       	ldi	r24, 0x61	; 97
 118:	9b e4       	ldi	r25, 0x4B	; 75
 11a:	05 d1       	rcall	.+522    	; 0x326 <__divsf3>
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	40 e8       	ldi	r20, 0x80	; 128
 122:	5f e3       	ldi	r21, 0x3F	; 63
 124:	9b d0       	rcall	.+310    	; 0x25c <__subsf3>
 126:	67 d1       	rcall	.+718    	; 0x3f6 <__fixunssfsi>
 128:	07 2f       	mov	r16, r23
 12a:	18 2f       	mov	r17, r24
 12c:	29 2f       	mov	r18, r25
 12e:	33 27       	eor	r19, r19
 130:	00 93 c5 00 	sts	0x00C5, r16
 134:	60 93 c4 00 	sts	0x00C4, r22
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	8f ef       	ldi	r24, 0xFF	; 255
 13c:	98 e0       	ldi	r25, 0x08	; 8
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <usart_setup+0x6e>
 146:	00 c0       	rjmp	.+0      	; 0x148 <usart_setup+0x78>
 148:	00 00       	nop
 14a:	1f 91       	pop	r17
 14c:	0f 91       	pop	r16
 14e:	08 95       	ret

00000150 <bluetooth_setup>:
 150:	2a e0       	ldi	r18, 0x0A	; 10
 152:	2a b9       	out	0x0a, r18	; 10
 154:	cb 01       	movw	r24, r22
 156:	bc cf       	rjmp	.-136    	; 0xd0 <usart_setup>
 158:	08 95       	ret

0000015a <bluetooth_send_byte>:
 15a:	e0 ec       	ldi	r30, 0xC0	; 192
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	90 81       	ld	r25, Z
 160:	95 ff       	sbrs	r25, 5
 162:	fd cf       	rjmp	.-6      	; 0x15e <bluetooth_send_byte+0x4>
 164:	80 93 c6 00 	sts	0x00C6, r24
 168:	08 95       	ret

0000016a <bluetooth_fetch_new_data>:
}

//Hämta ut datan från BT
byte bluetooth_fetch_new_data(void){
	newData = false;
 16a:	10 92 02 01 	sts	0x0102, r1
	return dataFromBT;
}
 16e:	80 91 00 01 	lds	r24, 0x0100
 172:	08 95       	ret

00000174 <__vector_20>:

//Hämtar datan
ISR ( USART0_RX_vect){ //recieve complete // USART0_RX_vect
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
	newData = true;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 02 01 	sts	0x0102, r24
	dataFromBT = UDR0;		
 186:	80 91 c6 00 	lds	r24, 0x00C6
 18a:	80 93 00 01 	sts	0x0100, r24
 18e:	8f 91       	pop	r24
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <lcd_write_instruction>:
	PORTD &= ~(1 << RS);
	_delay_us(1);
}

void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);
 19a:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 19c:	5e 98       	cbi	0x0b, 6	; 11
	PORTA |= (instruction & (1 << 2));
	PORTA |= (instruction & (1 << 1));
	PORTA |= (instruction & (1 << 0));
	*/
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 19e:	82 b9       	out	0x02, r24	; 2
 1a0:	08 95       	ret

000001a2 <lcd_setup>:

bool directionLeft = true;

//LCD Setup, inits all the variables
void lcd_setup(void)	{
	DDRA = 0xFF;
 1a2:	8f ef       	ldi	r24, 0xFF	; 255
 1a4:	81 b9       	out	0x01, r24	; 1
	DDRD = (1 << E) | (1 << RS);
 1a6:	80 ec       	ldi	r24, 0xC0	; 192
 1a8:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	8f e7       	ldi	r24, 0x7F	; 127
 1ae:	94 e0       	ldi	r25, 0x04	; 4
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <lcd_setup+0xe>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_setup+0x18>
 1ba:	00 00       	nop
			
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	//Function reset
	lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	ed df       	rcall	.-38     	; 0x19a <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	86 e2       	ldi	r24, 0x26	; 38
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_setup+0x22>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_setup+0x28>
 1ca:	00 00       	nop
	_delay_us(80);
	//Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 1cc:	88 e3       	ldi	r24, 0x38	; 56
 1ce:	e5 df       	rcall	.-54     	; 0x19a <lcd_write_instruction>
 1d0:	86 e2       	ldi	r24, 0x26	; 38
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	01 97       	sbiw	r24, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_setup+0x32>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <lcd_setup+0x38>
 1da:	00 00       	nop
	_delay_us(80);
	//Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 1dc:	8c e0       	ldi	r24, 0x0C	; 12
 1de:	dd df       	rcall	.-70     	; 0x19a <lcd_write_instruction>
 1e0:	86 e2       	ldi	r24, 0x26	; 38
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <lcd_setup+0x42>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <lcd_setup+0x48>
 1ea:	00 00       	nop
	_delay_us(80);
	//Display clear
	lcd_write_instruction(lcd_Clear);
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	d5 df       	rcall	.-86     	; 0x19a <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	89 e9       	ldi	r24, 0x99	; 153
 1f2:	99 e3       	ldi	r25, 0x39	; 57
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <lcd_setup+0x52>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <lcd_setup+0x58>
	_delay_ms(4);
	//Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	ce df       	rcall	.-100    	; 0x19a <lcd_write_instruction>
 1fe:	86 e6       	ldi	r24, 0x66	; 102
 200:	9e e0       	ldi	r25, 0x0E	; 14
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_setup+0x60>
 206:	00 00       	nop
	_delay_ms(1);
	
	lcd_write_instruction(lcd_SetCursor);
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	c7 df       	rcall	.-114    	; 0x19a <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	86 e2       	ldi	r24, 0x26	; 38
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_setup+0x6e>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_setup+0x74>
 216:	00 00       	nop
 218:	08 95       	ret

0000021a <initialize>:
	run();
}

void initialize(void){
	//i2c_setup(0x02);
	DDRB = 0xff;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	84 b9       	out	0x04, r24	; 4
	bluetooth_setup((long)115200);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	72 ec       	ldi	r23, 0xC2	; 194
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	94 df       	rcall	.-216    	; 0x150 <bluetooth_setup>
	
	lcd_setup();
 228:	bc df       	rcall	.-136    	; 0x1a2 <lcd_setup>
	
	sei();
 22a:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 22c:	2f ef       	ldi	r18, 0xFF	; 255
 22e:	8f e7       	ldi	r24, 0x7F	; 127
 230:	94 e0       	ldi	r25, 0x04	; 4
 232:	21 50       	subi	r18, 0x01	; 1
 234:	80 40       	sbci	r24, 0x00	; 0
 236:	90 40       	sbci	r25, 0x00	; 0
 238:	e1 f7       	brne	.-8      	; 0x232 <initialize+0x18>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <initialize+0x22>
 23c:	00 00       	nop
 23e:	08 95       	ret

00000240 <run>:
	
	while(true)	{		
		if(bluetooth_get_new_data() == true){	
			if((PIND & (1<<CTS)) == 0){ // Vi har tillåtelse att skicka data
				if(bluetooth_fetch_new_data() == 0x04);
					PORTB = 0xff;
 240:	cf ef       	ldi	r28, 0xFF	; 255
	//_delay_us(80);
	//lcd_write_char('A');
	
	
	while(true)	{		
		if(bluetooth_get_new_data() == true){	
 242:	43 df       	rcall	.-378    	; 0xca <bluetooth_get_new_data>
 244:	88 23       	and	r24, r24
 246:	e9 f3       	breq	.-6      	; 0x242 <run+0x2>
			if((PIND & (1<<CTS)) == 0){ // Vi har tillåtelse att skicka data
 248:	4a 99       	sbic	0x09, 2	; 9
 24a:	fb cf       	rjmp	.-10     	; 0x242 <run+0x2>
				if(bluetooth_fetch_new_data() == 0x04);
 24c:	8e df       	rcall	.-228    	; 0x16a <bluetooth_fetch_new_data>
					PORTB = 0xff;
 24e:	c5 b9       	out	0x05, r28	; 5
				bluetooth_send_byte(0x04);//0b00000100
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	83 df       	rcall	.-250    	; 0x15a <bluetooth_send_byte>
 254:	f6 cf       	rjmp	.-20     	; 0x242 <run+0x2>

00000256 <main>:

byte a;

int main (void)
{
	board_init();
 256:	38 df       	rcall	.-400    	; 0xc8 <board_init>
	initialize();
 258:	e0 df       	rcall	.-64     	; 0x21a <initialize>
	run();
 25a:	f2 df       	rcall	.-28     	; 0x240 <run>

0000025c <__subsf3>:
 25c:	50 58       	subi	r21, 0x80	; 128

0000025e <__addsf3>:
 25e:	bb 27       	eor	r27, r27
 260:	aa 27       	eor	r26, r26
 262:	0e d0       	rcall	.+28     	; 0x280 <__addsf3x>
 264:	48 c1       	rjmp	.+656    	; 0x4f6 <__fp_round>
 266:	39 d1       	rcall	.+626    	; 0x4da <__fp_pscA>
 268:	30 f0       	brcs	.+12     	; 0x276 <__addsf3+0x18>
 26a:	3e d1       	rcall	.+636    	; 0x4e8 <__fp_pscB>
 26c:	20 f0       	brcs	.+8      	; 0x276 <__addsf3+0x18>
 26e:	31 f4       	brne	.+12     	; 0x27c <__addsf3+0x1e>
 270:	9f 3f       	cpi	r25, 0xFF	; 255
 272:	11 f4       	brne	.+4      	; 0x278 <__addsf3+0x1a>
 274:	1e f4       	brtc	.+6      	; 0x27c <__addsf3+0x1e>
 276:	2e c1       	rjmp	.+604    	; 0x4d4 <__fp_nan>
 278:	0e f4       	brtc	.+2      	; 0x27c <__addsf3+0x1e>
 27a:	e0 95       	com	r30
 27c:	e7 fb       	bst	r30, 7
 27e:	24 c1       	rjmp	.+584    	; 0x4c8 <__fp_inf>

00000280 <__addsf3x>:
 280:	e9 2f       	mov	r30, r25
 282:	4a d1       	rcall	.+660    	; 0x518 <__fp_split3>
 284:	80 f3       	brcs	.-32     	; 0x266 <__addsf3+0x8>
 286:	ba 17       	cp	r27, r26
 288:	62 07       	cpc	r22, r18
 28a:	73 07       	cpc	r23, r19
 28c:	84 07       	cpc	r24, r20
 28e:	95 07       	cpc	r25, r21
 290:	18 f0       	brcs	.+6      	; 0x298 <__addsf3x+0x18>
 292:	71 f4       	brne	.+28     	; 0x2b0 <__addsf3x+0x30>
 294:	9e f5       	brtc	.+102    	; 0x2fc <__addsf3x+0x7c>
 296:	62 c1       	rjmp	.+708    	; 0x55c <__fp_zero>
 298:	0e f4       	brtc	.+2      	; 0x29c <__addsf3x+0x1c>
 29a:	e0 95       	com	r30
 29c:	0b 2e       	mov	r0, r27
 29e:	ba 2f       	mov	r27, r26
 2a0:	a0 2d       	mov	r26, r0
 2a2:	0b 01       	movw	r0, r22
 2a4:	b9 01       	movw	r22, r18
 2a6:	90 01       	movw	r18, r0
 2a8:	0c 01       	movw	r0, r24
 2aa:	ca 01       	movw	r24, r20
 2ac:	a0 01       	movw	r20, r0
 2ae:	11 24       	eor	r1, r1
 2b0:	ff 27       	eor	r31, r31
 2b2:	59 1b       	sub	r21, r25
 2b4:	99 f0       	breq	.+38     	; 0x2dc <__addsf3x+0x5c>
 2b6:	59 3f       	cpi	r21, 0xF9	; 249
 2b8:	50 f4       	brcc	.+20     	; 0x2ce <__addsf3x+0x4e>
 2ba:	50 3e       	cpi	r21, 0xE0	; 224
 2bc:	68 f1       	brcs	.+90     	; 0x318 <__addsf3x+0x98>
 2be:	1a 16       	cp	r1, r26
 2c0:	f0 40       	sbci	r31, 0x00	; 0
 2c2:	a2 2f       	mov	r26, r18
 2c4:	23 2f       	mov	r18, r19
 2c6:	34 2f       	mov	r19, r20
 2c8:	44 27       	eor	r20, r20
 2ca:	58 5f       	subi	r21, 0xF8	; 248
 2cc:	f3 cf       	rjmp	.-26     	; 0x2b4 <__addsf3x+0x34>
 2ce:	46 95       	lsr	r20
 2d0:	37 95       	ror	r19
 2d2:	27 95       	ror	r18
 2d4:	a7 95       	ror	r26
 2d6:	f0 40       	sbci	r31, 0x00	; 0
 2d8:	53 95       	inc	r21
 2da:	c9 f7       	brne	.-14     	; 0x2ce <__addsf3x+0x4e>
 2dc:	7e f4       	brtc	.+30     	; 0x2fc <__addsf3x+0x7c>
 2de:	1f 16       	cp	r1, r31
 2e0:	ba 0b       	sbc	r27, r26
 2e2:	62 0b       	sbc	r22, r18
 2e4:	73 0b       	sbc	r23, r19
 2e6:	84 0b       	sbc	r24, r20
 2e8:	ba f0       	brmi	.+46     	; 0x318 <__addsf3x+0x98>
 2ea:	91 50       	subi	r25, 0x01	; 1
 2ec:	a1 f0       	breq	.+40     	; 0x316 <__addsf3x+0x96>
 2ee:	ff 0f       	add	r31, r31
 2f0:	bb 1f       	adc	r27, r27
 2f2:	66 1f       	adc	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	88 1f       	adc	r24, r24
 2f8:	c2 f7       	brpl	.-16     	; 0x2ea <__addsf3x+0x6a>
 2fa:	0e c0       	rjmp	.+28     	; 0x318 <__addsf3x+0x98>
 2fc:	ba 0f       	add	r27, r26
 2fe:	62 1f       	adc	r22, r18
 300:	73 1f       	adc	r23, r19
 302:	84 1f       	adc	r24, r20
 304:	48 f4       	brcc	.+18     	; 0x318 <__addsf3x+0x98>
 306:	87 95       	ror	r24
 308:	77 95       	ror	r23
 30a:	67 95       	ror	r22
 30c:	b7 95       	ror	r27
 30e:	f7 95       	ror	r31
 310:	9e 3f       	cpi	r25, 0xFE	; 254
 312:	08 f0       	brcs	.+2      	; 0x316 <__addsf3x+0x96>
 314:	b3 cf       	rjmp	.-154    	; 0x27c <__addsf3+0x1e>
 316:	93 95       	inc	r25
 318:	88 0f       	add	r24, r24
 31a:	08 f0       	brcs	.+2      	; 0x31e <__addsf3x+0x9e>
 31c:	99 27       	eor	r25, r25
 31e:	ee 0f       	add	r30, r30
 320:	97 95       	ror	r25
 322:	87 95       	ror	r24
 324:	08 95       	ret

00000326 <__divsf3>:
 326:	0c d0       	rcall	.+24     	; 0x340 <__divsf3x>
 328:	e6 c0       	rjmp	.+460    	; 0x4f6 <__fp_round>
 32a:	de d0       	rcall	.+444    	; 0x4e8 <__fp_pscB>
 32c:	40 f0       	brcs	.+16     	; 0x33e <__divsf3+0x18>
 32e:	d5 d0       	rcall	.+426    	; 0x4da <__fp_pscA>
 330:	30 f0       	brcs	.+12     	; 0x33e <__divsf3+0x18>
 332:	21 f4       	brne	.+8      	; 0x33c <__divsf3+0x16>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	19 f0       	breq	.+6      	; 0x33e <__divsf3+0x18>
 338:	c7 c0       	rjmp	.+398    	; 0x4c8 <__fp_inf>
 33a:	51 11       	cpse	r21, r1
 33c:	10 c1       	rjmp	.+544    	; 0x55e <__fp_szero>
 33e:	ca c0       	rjmp	.+404    	; 0x4d4 <__fp_nan>

00000340 <__divsf3x>:
 340:	eb d0       	rcall	.+470    	; 0x518 <__fp_split3>
 342:	98 f3       	brcs	.-26     	; 0x32a <__divsf3+0x4>

00000344 <__divsf3_pse>:
 344:	99 23       	and	r25, r25
 346:	c9 f3       	breq	.-14     	; 0x33a <__divsf3+0x14>
 348:	55 23       	and	r21, r21
 34a:	b1 f3       	breq	.-20     	; 0x338 <__divsf3+0x12>
 34c:	95 1b       	sub	r25, r21
 34e:	55 0b       	sbc	r21, r21
 350:	bb 27       	eor	r27, r27
 352:	aa 27       	eor	r26, r26
 354:	62 17       	cp	r22, r18
 356:	73 07       	cpc	r23, r19
 358:	84 07       	cpc	r24, r20
 35a:	38 f0       	brcs	.+14     	; 0x36a <__divsf3_pse+0x26>
 35c:	9f 5f       	subi	r25, 0xFF	; 255
 35e:	5f 4f       	sbci	r21, 0xFF	; 255
 360:	22 0f       	add	r18, r18
 362:	33 1f       	adc	r19, r19
 364:	44 1f       	adc	r20, r20
 366:	aa 1f       	adc	r26, r26
 368:	a9 f3       	breq	.-22     	; 0x354 <__divsf3_pse+0x10>
 36a:	33 d0       	rcall	.+102    	; 0x3d2 <__divsf3_pse+0x8e>
 36c:	0e 2e       	mov	r0, r30
 36e:	3a f0       	brmi	.+14     	; 0x37e <__divsf3_pse+0x3a>
 370:	e0 e8       	ldi	r30, 0x80	; 128
 372:	30 d0       	rcall	.+96     	; 0x3d4 <__divsf3_pse+0x90>
 374:	91 50       	subi	r25, 0x01	; 1
 376:	50 40       	sbci	r21, 0x00	; 0
 378:	e6 95       	lsr	r30
 37a:	00 1c       	adc	r0, r0
 37c:	ca f7       	brpl	.-14     	; 0x370 <__divsf3_pse+0x2c>
 37e:	29 d0       	rcall	.+82     	; 0x3d2 <__divsf3_pse+0x8e>
 380:	fe 2f       	mov	r31, r30
 382:	27 d0       	rcall	.+78     	; 0x3d2 <__divsf3_pse+0x8e>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	88 1f       	adc	r24, r24
 38a:	bb 1f       	adc	r27, r27
 38c:	26 17       	cp	r18, r22
 38e:	37 07       	cpc	r19, r23
 390:	48 07       	cpc	r20, r24
 392:	ab 07       	cpc	r26, r27
 394:	b0 e8       	ldi	r27, 0x80	; 128
 396:	09 f0       	breq	.+2      	; 0x39a <__divsf3_pse+0x56>
 398:	bb 0b       	sbc	r27, r27
 39a:	80 2d       	mov	r24, r0
 39c:	bf 01       	movw	r22, r30
 39e:	ff 27       	eor	r31, r31
 3a0:	93 58       	subi	r25, 0x83	; 131
 3a2:	5f 4f       	sbci	r21, 0xFF	; 255
 3a4:	2a f0       	brmi	.+10     	; 0x3b0 <__divsf3_pse+0x6c>
 3a6:	9e 3f       	cpi	r25, 0xFE	; 254
 3a8:	51 05       	cpc	r21, r1
 3aa:	68 f0       	brcs	.+26     	; 0x3c6 <__divsf3_pse+0x82>
 3ac:	8d c0       	rjmp	.+282    	; 0x4c8 <__fp_inf>
 3ae:	d7 c0       	rjmp	.+430    	; 0x55e <__fp_szero>
 3b0:	5f 3f       	cpi	r21, 0xFF	; 255
 3b2:	ec f3       	brlt	.-6      	; 0x3ae <__divsf3_pse+0x6a>
 3b4:	98 3e       	cpi	r25, 0xE8	; 232
 3b6:	dc f3       	brlt	.-10     	; 0x3ae <__divsf3_pse+0x6a>
 3b8:	86 95       	lsr	r24
 3ba:	77 95       	ror	r23
 3bc:	67 95       	ror	r22
 3be:	b7 95       	ror	r27
 3c0:	f7 95       	ror	r31
 3c2:	9f 5f       	subi	r25, 0xFF	; 255
 3c4:	c9 f7       	brne	.-14     	; 0x3b8 <__divsf3_pse+0x74>
 3c6:	88 0f       	add	r24, r24
 3c8:	91 1d       	adc	r25, r1
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret
 3d2:	e1 e0       	ldi	r30, 0x01	; 1
 3d4:	66 0f       	add	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	bb 1f       	adc	r27, r27
 3dc:	62 17       	cp	r22, r18
 3de:	73 07       	cpc	r23, r19
 3e0:	84 07       	cpc	r24, r20
 3e2:	ba 07       	cpc	r27, r26
 3e4:	20 f0       	brcs	.+8      	; 0x3ee <__divsf3_pse+0xaa>
 3e6:	62 1b       	sub	r22, r18
 3e8:	73 0b       	sbc	r23, r19
 3ea:	84 0b       	sbc	r24, r20
 3ec:	ba 0b       	sbc	r27, r26
 3ee:	ee 1f       	adc	r30, r30
 3f0:	88 f7       	brcc	.-30     	; 0x3d4 <__divsf3_pse+0x90>
 3f2:	e0 95       	com	r30
 3f4:	08 95       	ret

000003f6 <__fixunssfsi>:
 3f6:	98 d0       	rcall	.+304    	; 0x528 <__fp_splitA>
 3f8:	88 f0       	brcs	.+34     	; 0x41c <__fixunssfsi+0x26>
 3fa:	9f 57       	subi	r25, 0x7F	; 127
 3fc:	90 f0       	brcs	.+36     	; 0x422 <__fixunssfsi+0x2c>
 3fe:	b9 2f       	mov	r27, r25
 400:	99 27       	eor	r25, r25
 402:	b7 51       	subi	r27, 0x17	; 23
 404:	a0 f0       	brcs	.+40     	; 0x42e <__fixunssfsi+0x38>
 406:	d1 f0       	breq	.+52     	; 0x43c <__fixunssfsi+0x46>
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	1a f0       	brmi	.+6      	; 0x418 <__fixunssfsi+0x22>
 412:	ba 95       	dec	r27
 414:	c9 f7       	brne	.-14     	; 0x408 <__fixunssfsi+0x12>
 416:	12 c0       	rjmp	.+36     	; 0x43c <__fixunssfsi+0x46>
 418:	b1 30       	cpi	r27, 0x01	; 1
 41a:	81 f0       	breq	.+32     	; 0x43c <__fixunssfsi+0x46>
 41c:	9f d0       	rcall	.+318    	; 0x55c <__fp_zero>
 41e:	b1 e0       	ldi	r27, 0x01	; 1
 420:	08 95       	ret
 422:	9c c0       	rjmp	.+312    	; 0x55c <__fp_zero>
 424:	67 2f       	mov	r22, r23
 426:	78 2f       	mov	r23, r24
 428:	88 27       	eor	r24, r24
 42a:	b8 5f       	subi	r27, 0xF8	; 248
 42c:	39 f0       	breq	.+14     	; 0x43c <__fixunssfsi+0x46>
 42e:	b9 3f       	cpi	r27, 0xF9	; 249
 430:	cc f3       	brlt	.-14     	; 0x424 <__fixunssfsi+0x2e>
 432:	86 95       	lsr	r24
 434:	77 95       	ror	r23
 436:	67 95       	ror	r22
 438:	b3 95       	inc	r27
 43a:	d9 f7       	brne	.-10     	; 0x432 <__fixunssfsi+0x3c>
 43c:	3e f4       	brtc	.+14     	; 0x44c <__fixunssfsi+0x56>
 43e:	90 95       	com	r25
 440:	80 95       	com	r24
 442:	70 95       	com	r23
 444:	61 95       	neg	r22
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	8f 4f       	sbci	r24, 0xFF	; 255
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
 44c:	08 95       	ret

0000044e <__floatunsisf>:
 44e:	e8 94       	clt
 450:	09 c0       	rjmp	.+18     	; 0x464 <__floatsisf+0x12>

00000452 <__floatsisf>:
 452:	97 fb       	bst	r25, 7
 454:	3e f4       	brtc	.+14     	; 0x464 <__floatsisf+0x12>
 456:	90 95       	com	r25
 458:	80 95       	com	r24
 45a:	70 95       	com	r23
 45c:	61 95       	neg	r22
 45e:	7f 4f       	sbci	r23, 0xFF	; 255
 460:	8f 4f       	sbci	r24, 0xFF	; 255
 462:	9f 4f       	sbci	r25, 0xFF	; 255
 464:	99 23       	and	r25, r25
 466:	a9 f0       	breq	.+42     	; 0x492 <__floatsisf+0x40>
 468:	f9 2f       	mov	r31, r25
 46a:	96 e9       	ldi	r25, 0x96	; 150
 46c:	bb 27       	eor	r27, r27
 46e:	93 95       	inc	r25
 470:	f6 95       	lsr	r31
 472:	87 95       	ror	r24
 474:	77 95       	ror	r23
 476:	67 95       	ror	r22
 478:	b7 95       	ror	r27
 47a:	f1 11       	cpse	r31, r1
 47c:	f8 cf       	rjmp	.-16     	; 0x46e <__floatsisf+0x1c>
 47e:	fa f4       	brpl	.+62     	; 0x4be <__floatsisf+0x6c>
 480:	bb 0f       	add	r27, r27
 482:	11 f4       	brne	.+4      	; 0x488 <__floatsisf+0x36>
 484:	60 ff       	sbrs	r22, 0
 486:	1b c0       	rjmp	.+54     	; 0x4be <__floatsisf+0x6c>
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	16 c0       	rjmp	.+44     	; 0x4be <__floatsisf+0x6c>
 492:	88 23       	and	r24, r24
 494:	11 f0       	breq	.+4      	; 0x49a <__floatsisf+0x48>
 496:	96 e9       	ldi	r25, 0x96	; 150
 498:	11 c0       	rjmp	.+34     	; 0x4bc <__floatsisf+0x6a>
 49a:	77 23       	and	r23, r23
 49c:	21 f0       	breq	.+8      	; 0x4a6 <__floatsisf+0x54>
 49e:	9e e8       	ldi	r25, 0x8E	; 142
 4a0:	87 2f       	mov	r24, r23
 4a2:	76 2f       	mov	r23, r22
 4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__floatsisf+0x5e>
 4a6:	66 23       	and	r22, r22
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <__floatsisf+0x74>
 4aa:	96 e8       	ldi	r25, 0x86	; 134
 4ac:	86 2f       	mov	r24, r22
 4ae:	70 e0       	ldi	r23, 0x00	; 0
 4b0:	60 e0       	ldi	r22, 0x00	; 0
 4b2:	2a f0       	brmi	.+10     	; 0x4be <__floatsisf+0x6c>
 4b4:	9a 95       	dec	r25
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	da f7       	brpl	.-10     	; 0x4b4 <__floatsisf+0x62>
 4be:	88 0f       	add	r24, r24
 4c0:	96 95       	lsr	r25
 4c2:	87 95       	ror	r24
 4c4:	97 f9       	bld	r25, 7
 4c6:	08 95       	ret

000004c8 <__fp_inf>:
 4c8:	97 f9       	bld	r25, 7
 4ca:	9f 67       	ori	r25, 0x7F	; 127
 4cc:	80 e8       	ldi	r24, 0x80	; 128
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	08 95       	ret

000004d4 <__fp_nan>:
 4d4:	9f ef       	ldi	r25, 0xFF	; 255
 4d6:	80 ec       	ldi	r24, 0xC0	; 192
 4d8:	08 95       	ret

000004da <__fp_pscA>:
 4da:	00 24       	eor	r0, r0
 4dc:	0a 94       	dec	r0
 4de:	16 16       	cp	r1, r22
 4e0:	17 06       	cpc	r1, r23
 4e2:	18 06       	cpc	r1, r24
 4e4:	09 06       	cpc	r0, r25
 4e6:	08 95       	ret

000004e8 <__fp_pscB>:
 4e8:	00 24       	eor	r0, r0
 4ea:	0a 94       	dec	r0
 4ec:	12 16       	cp	r1, r18
 4ee:	13 06       	cpc	r1, r19
 4f0:	14 06       	cpc	r1, r20
 4f2:	05 06       	cpc	r0, r21
 4f4:	08 95       	ret

000004f6 <__fp_round>:
 4f6:	09 2e       	mov	r0, r25
 4f8:	03 94       	inc	r0
 4fa:	00 0c       	add	r0, r0
 4fc:	11 f4       	brne	.+4      	; 0x502 <__fp_round+0xc>
 4fe:	88 23       	and	r24, r24
 500:	52 f0       	brmi	.+20     	; 0x516 <__fp_round+0x20>
 502:	bb 0f       	add	r27, r27
 504:	40 f4       	brcc	.+16     	; 0x516 <__fp_round+0x20>
 506:	bf 2b       	or	r27, r31
 508:	11 f4       	brne	.+4      	; 0x50e <__fp_round+0x18>
 50a:	60 ff       	sbrs	r22, 0
 50c:	04 c0       	rjmp	.+8      	; 0x516 <__fp_round+0x20>
 50e:	6f 5f       	subi	r22, 0xFF	; 255
 510:	7f 4f       	sbci	r23, 0xFF	; 255
 512:	8f 4f       	sbci	r24, 0xFF	; 255
 514:	9f 4f       	sbci	r25, 0xFF	; 255
 516:	08 95       	ret

00000518 <__fp_split3>:
 518:	57 fd       	sbrc	r21, 7
 51a:	90 58       	subi	r25, 0x80	; 128
 51c:	44 0f       	add	r20, r20
 51e:	55 1f       	adc	r21, r21
 520:	59 f0       	breq	.+22     	; 0x538 <__fp_splitA+0x10>
 522:	5f 3f       	cpi	r21, 0xFF	; 255
 524:	71 f0       	breq	.+28     	; 0x542 <__fp_splitA+0x1a>
 526:	47 95       	ror	r20

00000528 <__fp_splitA>:
 528:	88 0f       	add	r24, r24
 52a:	97 fb       	bst	r25, 7
 52c:	99 1f       	adc	r25, r25
 52e:	61 f0       	breq	.+24     	; 0x548 <__fp_splitA+0x20>
 530:	9f 3f       	cpi	r25, 0xFF	; 255
 532:	79 f0       	breq	.+30     	; 0x552 <__fp_splitA+0x2a>
 534:	87 95       	ror	r24
 536:	08 95       	ret
 538:	12 16       	cp	r1, r18
 53a:	13 06       	cpc	r1, r19
 53c:	14 06       	cpc	r1, r20
 53e:	55 1f       	adc	r21, r21
 540:	f2 cf       	rjmp	.-28     	; 0x526 <__fp_split3+0xe>
 542:	46 95       	lsr	r20
 544:	f1 df       	rcall	.-30     	; 0x528 <__fp_splitA>
 546:	08 c0       	rjmp	.+16     	; 0x558 <__fp_splitA+0x30>
 548:	16 16       	cp	r1, r22
 54a:	17 06       	cpc	r1, r23
 54c:	18 06       	cpc	r1, r24
 54e:	99 1f       	adc	r25, r25
 550:	f1 cf       	rjmp	.-30     	; 0x534 <__fp_splitA+0xc>
 552:	86 95       	lsr	r24
 554:	71 05       	cpc	r23, r1
 556:	61 05       	cpc	r22, r1
 558:	08 94       	sec
 55a:	08 95       	ret

0000055c <__fp_zero>:
 55c:	e8 94       	clt

0000055e <__fp_szero>:
 55e:	bb 27       	eor	r27, r27
 560:	66 27       	eor	r22, r22
 562:	77 27       	eor	r23, r23
 564:	cb 01       	movw	r24, r22
 566:	97 f9       	bld	r25, 7
 568:	08 95       	ret

0000056a <_exit>:
 56a:	f8 94       	cli

0000056c <__stop_program>:
 56c:	ff cf       	rjmp	.-2      	; 0x56c <__stop_program>
