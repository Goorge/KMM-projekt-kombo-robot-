
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000005d8  0000066c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800124  00800124  00000690  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001374  00000000  00000000  00000890  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  00001c04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b83  00000000  00000000  00002493  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00004018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001263b  00000000  00000000  00004368  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bc  00000000  00000000  000169a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  0001725f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004e96  00000000  00000000  000173b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	db c0       	rjmp	.+438    	; 0x208 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	90 c1       	rjmp	.+800    	; 0x38a <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ed       	ldi	r30, 0xD8	; 216
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	85 d2       	rcall	.+1290   	; 0x5ce <main>
  c4:	87 c2       	rjmp	.+1294   	; 0x5d4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
	//	data[i] = data_from_bt[i];
	return data_from_bt;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_add_to_send_queue>:
}

// Lägg in data i kö för att skicka över BT
bool bluetooth_add_to_send_queue(byte* data){
	//int nr_of_bytes = NELEMS(data);
	int nr_of_bytes = ((data[0] >> 4) & 0x0f);
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	42 95       	swap	r20
 11a:	4f 70       	andi	r20, 0x0F	; 15
 11c:	50 e0       	ldi	r21, 0x00	; 0
	//if(number_of_bytes_to_bt + nr_of_bytes > 15)
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
 11e:	50 93 25 01 	sts	0x0125, r21
 122:	40 93 24 01 	sts	0x0124, r20
	bytes_left_to_bt = nr_of_bytes;
 126:	50 93 01 01 	sts	0x0101, r21
 12a:	40 93 00 01 	sts	0x0100, r20
 12e:	a2 e3       	ldi	r26, 0x32	; 50
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i <= nr_of_bytes; i++)
		data_to_bt[i] = data[i];
 136:	81 91       	ld	r24, Z+
 138:	8d 93       	st	X+, r24
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
	bytes_left_to_bt = nr_of_bytes;
	for(int i = 0; i <= nr_of_bytes; i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	42 17       	cp	r20, r18
 140:	53 07       	cpc	r21, r19
 142:	cc f7       	brge	.-14     	; 0x136 <bluetooth_add_to_send_queue+0x22>
		data_to_bt[i] = data[i];
	
	return true;
}
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <bluetooth_handle_data>:
bool bluetooth_get_new_data(void){ return new_data_bt; }

// Behandla bluetooth
void bluetooth_handle_data( void ){		
	// Hantera eventuell ny data ifrån BT
	if(newData == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 148:	80 91 2a 01 	lds	r24, 0x012A
 14c:	88 23       	and	r24, r24
 14e:	81 f1       	breq	.+96     	; 0x1b0 <bluetooth_handle_data+0x68>
		byte data = dataFromBT; // Hämta ut data å sätt newData false
 150:	20 91 28 01 	lds	r18, 0x0128
		newData = false;
 154:	10 92 2a 01 	sts	0x012A, r1
		
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 158:	80 91 02 01 	lds	r24, 0x0102
 15c:	90 91 03 01 	lds	r25, 0x0103
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	61 f4       	brne	.+24     	; 0x17c <bluetooth_handle_data+0x34>
			number_of_bytes_from_bt = (data >> 4) & 0x0f; 
 164:	82 2f       	mov	r24, r18
 166:	82 95       	swap	r24
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 27 01 	sts	0x0127, r25
 170:	80 93 26 01 	sts	0x0126, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 174:	90 93 03 01 	sts	0x0103, r25
 178:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
 17c:	80 91 02 01 	lds	r24, 0x0102
 180:	90 91 03 01 	lds	r25, 0x0103
 184:	e0 91 26 01 	lds	r30, 0x0126
 188:	f0 91 27 01 	lds	r31, 0x0127
 18c:	e8 1b       	sub	r30, r24
 18e:	f9 0b       	sbc	r31, r25
 190:	ee 5b       	subi	r30, 0xBE	; 190
 192:	fe 4f       	sbci	r31, 0xFE	; 254
 194:	20 83       	st	Z, r18
		bytes_left_from_bt--;
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	90 93 03 01 	sts	0x0103, r25
 19c:	80 93 02 01 	sts	0x0102, r24
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <bluetooth_handle_data+0x60>
			bluetooth_clear_to_send();
 1a4:	b5 df       	rcall	.-150    	; 0x110 <bluetooth_clear_to_send>
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <bluetooth_handle_data+0x68>
		else 
			new_data_bt = true; // Denna sändningen är klar och vi vill inte ha mer data förens den är behandlad
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 29 01 	sts	0x0129, r24
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <bluetooth_handle_data+0x70>
	} 

	// Om ny data, skicka vidare
	if(new_data_bt){ //Här är lite fel data_from_bt funkar inte...
 1b0:	80 91 29 01 	lds	r24, 0x0129
 1b4:	88 23       	and	r24, r24
 1b6:	51 f0       	breq	.+20     	; 0x1cc <bluetooth_handle_data+0x84>
				//char* s1 = { a1 };
				//char* s2 = { a2 };
				//doLCD(s1, s2);	
			}
		}
		i2c_requestToSend(0x04, data_from_bt);
 1b8:	62 e4       	ldi	r22, 0x42	; 66
 1ba:	71 e0       	ldi	r23, 0x01	; 1
 1bc:	84 e0       	ldi	r24, 0x04	; 4
 1be:	3f d0       	rcall	.+126    	; 0x23e <i2c_requestToSend>
		bluetooth_add_to_send_queue(data_from_bt); // Ta bort när den skickar över i2c. 
 1c0:	82 e4       	ldi	r24, 0x42	; 66
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	a7 df       	rcall	.-178    	; 0x114 <bluetooth_add_to_send_queue>
		new_data_bt = false;
 1c6:	10 92 29 01 	sts	0x0129, r1
		bluetooth_clear_to_send();
 1ca:	a2 df       	rcall	.-188    	; 0x110 <bluetooth_clear_to_send>
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 1cc:	4a 99       	sbic	0x09, 2	; 9
 1ce:	1b c0       	rjmp	.+54     	; 0x206 <bluetooth_handle_data+0xbe>
 1d0:	80 91 00 01 	lds	r24, 0x0100
 1d4:	90 91 01 01 	lds	r25, 0x0101
 1d8:	8f 3f       	cpi	r24, 0xFF	; 255
 1da:	3f ef       	ldi	r19, 0xFF	; 255
 1dc:	93 07       	cpc	r25, r19
 1de:	99 f0       	breq	.+38     	; 0x206 <bluetooth_handle_data+0xbe>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt]);
 1e0:	e0 91 24 01 	lds	r30, 0x0124
 1e4:	f0 91 25 01 	lds	r31, 0x0125
 1e8:	e8 1b       	sub	r30, r24
 1ea:	f9 0b       	sbc	r31, r25
 1ec:	ee 5c       	subi	r30, 0xCE	; 206
 1ee:	fe 4f       	sbci	r31, 0xFE	; 254
 1f0:	80 81       	ld	r24, Z
 1f2:	86 df       	rcall	.-244    	; 0x100 <bluetooth_send_byte>
		bytes_left_to_bt--;
 1f4:	80 91 00 01 	lds	r24, 0x0100
 1f8:	90 91 01 01 	lds	r25, 0x0101
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	90 93 01 01 	sts	0x0101, r25
 202:	80 93 00 01 	sts	0x0100, r24
 206:	08 95       	ret

00000208 <__vector_20>:
	
	return true;
}

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 208:	1f 92       	push	r1
 20a:	0f 92       	push	r0
 20c:	0f b6       	in	r0, 0x3f	; 63
 20e:	0f 92       	push	r0
 210:	11 24       	eor	r1, r1
 212:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 214:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 216:	80 91 c6 00 	lds	r24, 0x00C6
 21a:	80 93 28 01 	sts	0x0128, r24
	newData = true; // Tala om för main att vi har fått data
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	80 93 2a 01 	sts	0x012A, r24
 224:	8f 91       	pop	r24
 226:	0f 90       	pop	r0
 228:	0f be       	out	0x3f, r0	; 63
 22a:	0f 90       	pop	r0
 22c:	1f 90       	pop	r1
 22e:	18 95       	reti

00000230 <i2c_setup>:
	incomingData();	
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
}

void i2c_setup(byte adress_) {
	TWAR = adress_;
 230:	80 93 ba 00 	sts	0x00BA, r24
	//TWSR = 0x00; // Ska nog inte vara med
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 234:	85 ec       	ldi	r24, 0xC5	; 197
 236:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 23a:	3e 9a       	sbi	0x07, 6	; 7
 23c:	08 95       	ret

0000023e <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 23e:	fb 01       	movw	r30, r22
 240:	20 81       	ld	r18, Z
 242:	22 95       	swap	r18
 244:	2f 70       	andi	r18, 0x0F	; 15
 246:	42 2f       	mov	r20, r18
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	50 93 31 01 	sts	0x0131, r21
 24e:	40 93 30 01 	sts	0x0130, r20
 252:	a1 e6       	ldi	r26, 0x61	; 97
 254:	b1 e0       	ldi	r27, 0x01	; 1
 256:	9a 01       	movw	r18, r20
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	62 0f       	add	r22, r18
 25e:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 260:	91 91       	ld	r25, Z+
 262:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 264:	e6 17       	cp	r30, r22
 266:	f7 07       	cpc	r31, r23
 268:	d9 f7       	brne	.-10     	; 0x260 <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 26a:	80 93 70 01 	sts	0x0170, r24
	bytesSent = 0;
 26e:	10 92 2f 01 	sts	0x012F, r1
 272:	10 92 2e 01 	sts	0x012E, r1
	PORTC |= (1 << PC6);
 276:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 278:	f6 e3       	ldi	r31, 0x36	; 54
 27a:	fa 95       	dec	r31
 27c:	f1 f7       	brne	.-4      	; 0x27a <i2c_requestToSend+0x3c>
 27e:	00 00       	nop
	_delay_us(11);
	PORTC &= ~(1 << PC6);
 280:	46 98       	cbi	0x08, 6	; 8
 282:	08 95       	ret

00000284 <i2c_send>:
}



void i2c_send(byte prossesor,byte data){
	TWDR = data;
 284:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 288:	ec eb       	ldi	r30, 0xBC	; 188
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	80 6c       	ori	r24, 0xC0	; 192
 290:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 292:	80 81       	ld	r24, Z
 294:	88 23       	and	r24, r24
 296:	ec f7       	brge	.-6      	; 0x292 <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 298:	80 91 b9 00 	lds	r24, 0x00B9
 29c:	88 7f       	andi	r24, 0xF8	; 248
 29e:	88 3b       	cpi	r24, 0xB8	; 184
 2a0:	c1 f0       	breq	.+48     	; 0x2d2 <i2c_send+0x4e>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 2a2:	84 e9       	ldi	r24, 0x94	; 148
 2a4:	80 93 bc 00 	sts	0x00BC, r24
		if(bytes_to_send_i2c >= bytesSent){
 2a8:	20 91 30 01 	lds	r18, 0x0130
 2ac:	30 91 31 01 	lds	r19, 0x0131
 2b0:	80 91 2e 01 	lds	r24, 0x012E
 2b4:	90 91 2f 01 	lds	r25, 0x012F
 2b8:	28 17       	cp	r18, r24
 2ba:	39 07       	cpc	r19, r25
 2bc:	54 f0       	brlt	.+20     	; 0x2d2 <i2c_send+0x4e>
 2be:	82 e6       	ldi	r24, 0x62	; 98
 2c0:	8a 95       	dec	r24
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <i2c_send+0x3c>
 2c4:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 2c6:	46 9a       	sbi	0x08, 6	; 8
 2c8:	86 e3       	ldi	r24, 0x36	; 54
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <i2c_send+0x46>
 2ce:	00 00       	nop
			_delay_us(11);
			PORTC &= ~(1 << PC6);
 2d0:	46 98       	cbi	0x08, 6	; 8
 2d2:	08 95       	ret

000002d4 <i2c_recive>:
}

byte i2c_recive(void){
	//  if((TWSR & 0xF8)!=0x80)
	//	return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
 2d4:	ec eb       	ldi	r30, 0xBC	; 188
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	80 81       	ld	r24, Z
 2da:	80 6c       	ori	r24, 0xC0	; 192
 2dc:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 2de:	80 81       	ld	r24, Z
 2e0:	88 23       	and	r24, r24
 2e2:	ec f7       	brge	.-6      	; 0x2de <i2c_recive+0xa>
	byte test = TWDR;
 2e4:	80 91 bb 00 	lds	r24, 0x00BB
	return test;	
}
 2e8:	08 95       	ret

000002ea <incomingData>:
	_delay_us(11);
	PORTC &= ~(1 << PC6);
}


byte incomingData(void){	
 2ea:	cf 93       	push	r28
 2ec:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // rec data, ack sent	
 2ee:	80 91 b9 00 	lds	r24, 0x00B9
 2f2:	88 7f       	andi	r24, 0xF8	; 248
 2f4:	80 36       	cpi	r24, 0x60	; 96
 2f6:	39 f5       	brne	.+78     	; 0x346 <incomingData+0x5c>
		i2c_data[bytefrom_i2c] = i2c_recive();
 2f8:	c0 91 2c 01 	lds	r28, 0x012C
 2fc:	d0 91 2d 01 	lds	r29, 0x012D
 300:	e9 df       	rcall	.-46     	; 0x2d4 <i2c_recive>
 302:	ce 5a       	subi	r28, 0xAE	; 174
 304:	de 4f       	sbci	r29, 0xFE	; 254
 306:	88 83       	st	Y, r24
		if(bytefrom_i2c < ((i2c_data[0]>>4) &0x0f)){
 308:	80 91 52 01 	lds	r24, 0x0152
 30c:	82 95       	swap	r24
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	20 91 2c 01 	lds	r18, 0x012C
 316:	30 91 2d 01 	lds	r19, 0x012D
 31a:	28 17       	cp	r18, r24
 31c:	39 07       	cpc	r19, r25
 31e:	34 f4       	brge	.+12     	; 0x32c <incomingData+0x42>
			TWCR &= ~(1 << TWINT);
 320:	ec eb       	ldi	r30, 0xBC	; 188
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	8f 77       	andi	r24, 0x7F	; 127
 328:	80 83       	st	Z, r24
 32a:	03 c0       	rjmp	.+6      	; 0x332 <incomingData+0x48>
		}
		else if((bytefrom_i2c) >= ((i2c_data[0]>>4)&0x0f))
			i2c_new_data = true;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 2b 01 	sts	0x012B, r24
		bytefrom_i2c++;
 332:	80 91 2c 01 	lds	r24, 0x012C
 336:	90 91 2d 01 	lds	r25, 0x012D
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	90 93 2d 01 	sts	0x012D, r25
 340:	80 93 2c 01 	sts	0x012C, r24
 344:	1e c0       	rjmp	.+60     	; 0x382 <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
 346:	80 91 b9 00 	lds	r24, 0x00B9
 34a:	88 7f       	andi	r24, 0xF8	; 248
 34c:	88 3a       	cpi	r24, 0xA8	; 168
 34e:	99 f4       	brne	.+38     	; 0x376 <incomingData+0x8c>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 350:	80 91 2e 01 	lds	r24, 0x012E
 354:	90 91 2f 01 	lds	r25, 0x012F
 358:	9c 01       	movw	r18, r24
 35a:	2f 5f       	subi	r18, 0xFF	; 255
 35c:	3f 4f       	sbci	r19, 0xFF	; 255
 35e:	30 93 2f 01 	sts	0x012F, r19
 362:	20 93 2e 01 	sts	0x012E, r18
 366:	fc 01       	movw	r30, r24
 368:	ef 59       	subi	r30, 0x9F	; 159
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
 36c:	60 81       	ld	r22, Z
 36e:	80 91 70 01 	lds	r24, 0x0170
 372:	88 df       	rcall	.-240    	; 0x284 <i2c_send>
 374:	06 c0       	rjmp	.+12     	; 0x382 <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
 376:	80 91 b9 00 	lds	r24, 0x00B9
 37a:	88 7f       	andi	r24, 0xF8	; 248
 37c:	80 38       	cpi	r24, 0x80	; 128
 37e:	09 f4       	brne	.+2      	; 0x382 <incomingData+0x98>
		i2c_recive();
 380:	a9 df       	rcall	.-174    	; 0x2d4 <i2c_recive>
	}
	
	return 0x00;
}
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	df 91       	pop	r29
 386:	cf 91       	pop	r28
 388:	08 95       	ret

0000038a <__vector_26>:
int bytefrom_i2c=0;
byte i2c_data[15];
bool i2c_new_data = false;


ISR(TWI_vect){
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	0b b6       	in	r0, 0x3b	; 59
 396:	0f 92       	push	r0
 398:	2f 93       	push	r18
 39a:	3f 93       	push	r19
 39c:	4f 93       	push	r20
 39e:	5f 93       	push	r21
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
 3a8:	af 93       	push	r26
 3aa:	bf 93       	push	r27
 3ac:	ef 93       	push	r30
 3ae:	ff 93       	push	r31
	incomingData();	
 3b0:	9c df       	rcall	.-200    	; 0x2ea <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
 3b2:	85 ec       	ldi	r24, 0xC5	; 197
 3b4:	80 93 bc 00 	sts	0x00BC, r24
}
 3b8:	ff 91       	pop	r31
 3ba:	ef 91       	pop	r30
 3bc:	bf 91       	pop	r27
 3be:	af 91       	pop	r26
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	7f 91       	pop	r23
 3c6:	6f 91       	pop	r22
 3c8:	5f 91       	pop	r21
 3ca:	4f 91       	pop	r20
 3cc:	3f 91       	pop	r19
 3ce:	2f 91       	pop	r18
 3d0:	0f 90       	pop	r0
 3d2:	0b be       	out	0x3b, r0	; 59
 3d4:	0f 90       	pop	r0
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	0f 90       	pop	r0
 3da:	1f 90       	pop	r1
 3dc:	18 95       	reti

000003de <i2c_handle_data>:
	byte test = TWDR;
	return test;	
}

void i2c_handle_data(void){
	if(i2c_new_data == true){
 3de:	80 91 2b 01 	lds	r24, 0x012B
 3e2:	88 23       	and	r24, r24
 3e4:	71 f0       	breq	.+28     	; 0x402 <i2c_handle_data+0x24>
		//if(((i2c_data[0] >> 4) & 0x0f) == 3) 
		bluetooth_add_to_send_queue(i2c_data);
 3e6:	82 e5       	ldi	r24, 0x52	; 82
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	94 de       	rcall	.-728    	; 0x114 <bluetooth_add_to_send_queue>
		i2c_new_data = false;
 3ec:	10 92 2b 01 	sts	0x012B, r1
		bytefrom_i2c = 0;
 3f0:	10 92 2d 01 	sts	0x012D, r1
 3f4:	10 92 2c 01 	sts	0x012C, r1
		TWCR &= ~(1 << TWINT);
 3f8:	ec eb       	ldi	r30, 0xBC	; 188
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	8f 77       	andi	r24, 0x7F	; 127
 400:	80 83       	st	Z, r24
 402:	08 95       	ret

00000404 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 404:	16 9a       	sbi	0x02, 6	; 2
 406:	00 c0       	rjmp	.+0      	; 0x408 <toggle_e+0x4>
 408:	16 98       	cbi	0x02, 6	; 2
 40a:	08 95       	ret

0000040c <lcd_write>:
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	d8 2f       	mov	r29, r24
 412:	66 23       	and	r22, r22
 414:	11 f0       	breq	.+4      	; 0x41a <lcd_write+0xe>
 416:	14 9a       	sbi	0x02, 4	; 2
 418:	01 c0       	rjmp	.+2      	; 0x41c <lcd_write+0x10>
 41a:	14 98       	cbi	0x02, 4	; 2
 41c:	15 98       	cbi	0x02, 5	; 2
 41e:	81 b1       	in	r24, 0x01	; 1
 420:	8f 60       	ori	r24, 0x0F	; 15
 422:	81 b9       	out	0x01, r24	; 1
 424:	c2 b1       	in	r28, 0x02	; 2
 426:	c0 7f       	andi	r28, 0xF0	; 240
 428:	8d 2f       	mov	r24, r29
 42a:	82 95       	swap	r24
 42c:	8f 70       	andi	r24, 0x0F	; 15
 42e:	8c 2b       	or	r24, r28
 430:	82 b9       	out	0x02, r24	; 2
 432:	e8 df       	rcall	.-48     	; 0x404 <toggle_e>
 434:	df 70       	andi	r29, 0x0F	; 15
 436:	dc 2b       	or	r29, r28
 438:	d2 b9       	out	0x02, r29	; 2
 43a:	e4 df       	rcall	.-56     	; 0x404 <toggle_e>
 43c:	cf 60       	ori	r28, 0x0F	; 15
 43e:	c2 b9       	out	0x02, r28	; 2
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <lcd_read>:
 446:	88 23       	and	r24, r24
 448:	11 f0       	breq	.+4      	; 0x44e <lcd_read+0x8>
 44a:	14 9a       	sbi	0x02, 4	; 2
 44c:	01 c0       	rjmp	.+2      	; 0x450 <lcd_read+0xa>
 44e:	14 98       	cbi	0x02, 4	; 2
 450:	15 9a       	sbi	0x02, 5	; 2
 452:	81 b1       	in	r24, 0x01	; 1
 454:	80 7f       	andi	r24, 0xF0	; 240
 456:	81 b9       	out	0x01, r24	; 1
 458:	16 9a       	sbi	0x02, 6	; 2
 45a:	00 c0       	rjmp	.+0      	; 0x45c <lcd_read+0x16>
 45c:	20 b1       	in	r18, 0x00	; 0
 45e:	16 98       	cbi	0x02, 6	; 2
 460:	00 c0       	rjmp	.+0      	; 0x462 <lcd_read+0x1c>
 462:	16 9a       	sbi	0x02, 6	; 2
 464:	00 c0       	rjmp	.+0      	; 0x466 <lcd_read+0x20>
 466:	90 b1       	in	r25, 0x00	; 0
 468:	22 95       	swap	r18
 46a:	20 7f       	andi	r18, 0xF0	; 240
 46c:	89 2f       	mov	r24, r25
 46e:	8f 70       	andi	r24, 0x0F	; 15
 470:	16 98       	cbi	0x02, 6	; 2
 472:	82 2b       	or	r24, r18
 474:	08 95       	ret

00000476 <lcd_waitbusy>:
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	e6 df       	rcall	.-52     	; 0x446 <lcd_read>
 47a:	88 23       	and	r24, r24
 47c:	e4 f3       	brlt	.-8      	; 0x476 <lcd_waitbusy>
 47e:	82 e0       	ldi	r24, 0x02	; 2
 480:	8a 95       	dec	r24
 482:	f1 f7       	brne	.-4      	; 0x480 <lcd_waitbusy+0xa>
 484:	80 e0       	ldi	r24, 0x00	; 0
 486:	df cf       	rjmp	.-66     	; 0x446 <lcd_read>
 488:	08 95       	ret

0000048a <lcd_command>:
 48a:	cf 93       	push	r28
 48c:	c8 2f       	mov	r28, r24
 48e:	f3 df       	rcall	.-26     	; 0x476 <lcd_waitbusy>
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	8c 2f       	mov	r24, r28
 494:	bb df       	rcall	.-138    	; 0x40c <lcd_write>
 496:	cf 91       	pop	r28
 498:	08 95       	ret

0000049a <lcd_gotoxy>:
 49a:	61 11       	cpse	r22, r1
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <lcd_gotoxy+0xa>
 49e:	80 58       	subi	r24, 0x80	; 128
 4a0:	f4 cf       	rjmp	.-24     	; 0x48a <lcd_command>
 4a2:	08 95       	ret
 4a4:	80 54       	subi	r24, 0x40	; 64
 4a6:	f1 cf       	rjmp	.-30     	; 0x48a <lcd_command>
 4a8:	08 95       	ret

000004aa <lcd_clrscr>:
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	ee df       	rcall	.-36     	; 0x48a <lcd_command>
 4ae:	89 ef       	ldi	r24, 0xF9	; 249
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <lcd_clrscr+0x8>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <lcd_clrscr+0xe>
 4b8:	00 00       	nop
 4ba:	08 95       	ret

000004bc <lcd_home>:
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	e5 df       	rcall	.-54     	; 0x48a <lcd_command>
 4c0:	89 ef       	ldi	r24, 0xF9	; 249
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <lcd_home+0x8>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <lcd_home+0xe>
 4ca:	00 00       	nop
 4cc:	08 95       	ret

000004ce <lcd_putc>:
 4ce:	cf 93       	push	r28
 4d0:	c8 2f       	mov	r28, r24
 4d2:	d1 df       	rcall	.-94     	; 0x476 <lcd_waitbusy>
 4d4:	ca 30       	cpi	r28, 0x0A	; 10
 4d6:	41 f4       	brne	.+16     	; 0x4e8 <lcd_putc+0x1a>
 4d8:	80 34       	cpi	r24, 0x40	; 64
 4da:	10 f0       	brcs	.+4      	; 0x4e0 <lcd_putc+0x12>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	01 c0       	rjmp	.+2      	; 0x4e2 <lcd_putc+0x14>
 4e0:	80 e4       	ldi	r24, 0x40	; 64
 4e2:	80 58       	subi	r24, 0x80	; 128
 4e4:	d2 df       	rcall	.-92     	; 0x48a <lcd_command>
 4e6:	03 c0       	rjmp	.+6      	; 0x4ee <lcd_putc+0x20>
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	8c 2f       	mov	r24, r28
 4ec:	8f df       	rcall	.-226    	; 0x40c <lcd_write>
 4ee:	cf 91       	pop	r28
 4f0:	08 95       	ret

000004f2 <lcd_puts>:
 4f2:	cf 93       	push	r28
 4f4:	df 93       	push	r29
 4f6:	ec 01       	movw	r28, r24
 4f8:	21 96       	adiw	r28, 0x01	; 1
 4fa:	fc 01       	movw	r30, r24
 4fc:	80 81       	ld	r24, Z
 4fe:	88 23       	and	r24, r24
 500:	21 f0       	breq	.+8      	; 0x50a <lcd_puts+0x18>
 502:	e5 df       	rcall	.-54     	; 0x4ce <lcd_putc>
 504:	89 91       	ld	r24, Y+
 506:	81 11       	cpse	r24, r1
 508:	fc cf       	rjmp	.-8      	; 0x502 <lcd_puts+0x10>
 50a:	df 91       	pop	r29
 50c:	cf 91       	pop	r28
 50e:	08 95       	ret

00000510 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 510:	cf 93       	push	r28
 512:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 514:	91 b1       	in	r25, 0x01	; 1
 516:	9f 67       	ori	r25, 0x7F	; 127
 518:	91 b9       	out	0x01, r25	; 1
 51a:	87 e8       	ldi	r24, 0x87	; 135
 51c:	93 e1       	ldi	r25, 0x13	; 19
 51e:	01 97       	sbiw	r24, 0x01	; 1
 520:	f1 f7       	brne	.-4      	; 0x51e <lcd_init+0xe>
 522:	00 c0       	rjmp	.+0      	; 0x524 <lcd_init+0x14>
 524:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 526:	11 9a       	sbi	0x02, 1	; 2
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 528:	10 9a       	sbi	0x02, 0	; 2
    lcd_e_toggle();
 52a:	6c df       	rcall	.-296    	; 0x404 <toggle_e>
 52c:	8b ed       	ldi	r24, 0xDB	; 219
 52e:	95 e0       	ldi	r25, 0x05	; 5
 530:	01 97       	sbiw	r24, 0x01	; 1
 532:	f1 f7       	brne	.-4      	; 0x530 <lcd_init+0x20>
 534:	00 c0       	rjmp	.+0      	; 0x536 <lcd_init+0x26>
 536:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 538:	65 df       	rcall	.-310    	; 0x404 <toggle_e>
 53a:	97 e1       	ldi	r25, 0x17	; 23
 53c:	9a 95       	dec	r25
 53e:	f1 f7       	brne	.-4      	; 0x53c <lcd_init+0x2c>
 540:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 542:	60 df       	rcall	.-320    	; 0x404 <toggle_e>
 544:	87 e1       	ldi	r24, 0x17	; 23
 546:	8a 95       	dec	r24
 548:	f1 f7       	brne	.-4      	; 0x546 <lcd_init+0x36>
 54a:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 54c:	10 98       	cbi	0x02, 0	; 2
    lcd_e_toggle();
 54e:	5a df       	rcall	.-332    	; 0x404 <toggle_e>
 550:	97 e1       	ldi	r25, 0x17	; 23
 552:	9a 95       	dec	r25
 554:	f1 f7       	brne	.-4      	; 0x552 <lcd_init+0x42>
 556:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 558:	88 e2       	ldi	r24, 0x28	; 40
 55a:	97 df       	rcall	.-210    	; 0x48a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 55c:	88 e0       	ldi	r24, 0x08	; 8
 55e:	95 df       	rcall	.-214    	; 0x48a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 560:	a4 df       	rcall	.-184    	; 0x4aa <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 562:	86 e0       	ldi	r24, 0x06	; 6
 564:	92 df       	rcall	.-220    	; 0x48a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 566:	8c 2f       	mov	r24, r28
 568:	90 df       	rcall	.-224    	; 0x48a <lcd_command>

}/* lcd_init */
 56a:	cf 91       	pop	r28
 56c:	08 95       	ret

0000056e <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	72 ec       	ldi	r23, 0xC2	; 194
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	be dd       	rcall	.-1156   	; 0xf4 <bluetooth_setup>
	//lcd_setup();
	lcd_init(LCD_DISP_ON); /* initialize lcd, display on, cursor on */
 578:	8c e0       	ldi	r24, 0x0C	; 12
 57a:	ca df       	rcall	.-108    	; 0x510 <lcd_init>
	i2c_setup(0x02);
 57c:	82 e0       	ldi	r24, 0x02	; 2
 57e:	58 de       	rcall	.-848    	; 0x230 <i2c_setup>
	sei(); // Enable interrupt
 580:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 582:	2f ef       	ldi	r18, 0xFF	; 255
 584:	8f ef       	ldi	r24, 0xFF	; 255
 586:	99 e5       	ldi	r25, 0x59	; 89
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	80 40       	sbci	r24, 0x00	; 0
 58c:	90 40       	sbci	r25, 0x00	; 0
 58e:	e1 f7       	brne	.-8      	; 0x588 <initialize+0x1a>
 590:	00 c0       	rjmp	.+0      	; 0x592 <initialize+0x24>
 592:	00 00       	nop
 594:	08 95       	ret

00000596 <doLCD>:
		bluetooth_handle_data();
		i2c_handle_data();
	}
}

void doLCD(char* s1, char* s2){
 596:	0f 93       	push	r16
 598:	1f 93       	push	r17
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	8c 01       	movw	r16, r24
 5a0:	eb 01       	movw	r28, r22
	lcd_clrscr();             /* clear screen of lcd */
 5a2:	83 df       	rcall	.-250    	; 0x4aa <lcd_clrscr>
	lcd_home();               /* bring cursor to 0,0 */
 5a4:	8b df       	rcall	.-234    	; 0x4bc <lcd_home>
	lcd_puts(s1);        /* type something random */
 5a6:	c8 01       	movw	r24, r16
 5a8:	a4 df       	rcall	.-184    	; 0x4f2 <lcd_puts>
	lcd_gotoxy(1,1);          /* go to 2nd col, 2nd row*/
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	75 df       	rcall	.-278    	; 0x49a <lcd_gotoxy>
	lcd_puts(s2);  /* type something random */
 5b0:	ce 01       	movw	r24, r28
 5b2:	9f df       	rcall	.-194    	; 0x4f2 <lcd_puts>
}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

000005be <run>:
	_delay_ms(2000);
}
char data[15];

void run(void){	
	doLCD("ProcessorKlubben" , "Kombo-Monstret");
 5be:	64 e0       	ldi	r22, 0x04	; 4
 5c0:	71 e0       	ldi	r23, 0x01	; 1
 5c2:	83 e1       	ldi	r24, 0x13	; 19
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	e7 df       	rcall	.-50     	; 0x596 <doLCD>
	while(true)	{
		//i2c_requestToSend(0x04,data);
		bluetooth_handle_data();
 5c8:	bf dd       	rcall	.-1154   	; 0x148 <bluetooth_handle_data>
		i2c_handle_data();
 5ca:	09 df       	rcall	.-494    	; 0x3de <i2c_handle_data>
	}
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <run+0xa>

000005ce <main>:
void initialize(void);
//void doLCD(void);
void doLCD(char* s1, char* s2);

int main (void){
	board_init();
 5ce:	7c dd       	rcall	.-1288   	; 0xc8 <board_init>
	initialize();
 5d0:	ce df       	rcall	.-100    	; 0x56e <initialize>
	run();
 5d2:	f5 df       	rcall	.-22     	; 0x5be <run>

000005d4 <_exit>:
 5d4:	f8 94       	cli

000005d6 <__stop_program>:
 5d6:	ff cf       	rjmp	.-2      	; 0x5d6 <__stop_program>
