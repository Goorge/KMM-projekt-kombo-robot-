
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000006a8  0000073c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800124  00800124  00000760  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000790  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000140e  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  00001d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001bcb  00000000  00000000  00002644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000360  00000000  00000000  00004210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000126b2  00000000  00000000  00004570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000934  00000000  00000000  00016c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00017556  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004e96  00000000  00000000  000176ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	1c c1       	rjmp	.+568    	; 0x28a <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	d1 c1       	rjmp	.+930    	; 0x40c <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c6 d2       	rcall	.+1420   	; 0x650 <main>
  c4:	ef c2       	rjmp	.+1502   	; 0x6a4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
	//	data[i] = data_from_bt[i];
	return data_from_bt;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_add_to_send_queue>:
}

// Lägg in data i kö för att skicka över BT
bool bluetooth_add_to_send_queue(byte* data){
	//int nr_of_bytes = NELEMS(data);
	int nr_of_bytes = ((data[0] >> 4) & 0x0f);
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	42 95       	swap	r20
 11a:	4f 70       	andi	r20, 0x0F	; 15
 11c:	50 e0       	ldi	r21, 0x00	; 0
	//if(number_of_bytes_to_bt + nr_of_bytes > 15)
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
 11e:	50 93 25 01 	sts	0x0125, r21
 122:	40 93 24 01 	sts	0x0124, r20
	bytes_left_to_bt = nr_of_bytes;
 126:	50 93 01 01 	sts	0x0101, r21
 12a:	40 93 00 01 	sts	0x0100, r20
 12e:	a2 e3       	ldi	r26, 0x32	; 50
 130:	b1 e0       	ldi	r27, 0x01	; 1
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i <= nr_of_bytes; i++)
		data_to_bt[i] = data[i];
 136:	81 91       	ld	r24, Z+
 138:	8d 93       	st	X+, r24
	//	return false;
	//for(int i = number_of_bytes_to_bt; i < number_of_bytes_to_bt + nr_of_bytes; i++)
	//	data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt = nr_of_bytes;
	bytes_left_to_bt = nr_of_bytes;
	for(int i = 0; i <= nr_of_bytes; i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	42 17       	cp	r20, r18
 140:	53 07       	cpc	r21, r19
 142:	cc f7       	brge	.-14     	; 0x136 <bluetooth_add_to_send_queue+0x22>
		data_to_bt[i] = data[i];
	
	return true;
}
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	08 95       	ret

00000148 <bluetooth_handle_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }

// Behandla bluetooth
void bluetooth_handle_data( void ){		
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	00 d0       	rcall	.+0      	; 0x14e <bluetooth_handle_data+0x6>
 14e:	00 d0       	rcall	.+0      	; 0x150 <bluetooth_handle_data+0x8>
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	// Hantera eventuell ny data ifrån BT
	if(newData == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 154:	80 91 2a 01 	lds	r24, 0x012A
 158:	88 23       	and	r24, r24
 15a:	81 f1       	breq	.+96     	; 0x1bc <bluetooth_handle_data+0x74>
		byte data = dataFromBT; // Hämta ut data å sätt newData false
 15c:	20 91 28 01 	lds	r18, 0x0128
		newData = false;
 160:	10 92 2a 01 	sts	0x012A, r1
		
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 164:	80 91 02 01 	lds	r24, 0x0102
 168:	90 91 03 01 	lds	r25, 0x0103
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	61 f4       	brne	.+24     	; 0x188 <bluetooth_handle_data+0x40>
			number_of_bytes_from_bt = (data >> 4) & 0x0f; 
 170:	82 2f       	mov	r24, r18
 172:	82 95       	swap	r24
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	90 93 27 01 	sts	0x0127, r25
 17c:	80 93 26 01 	sts	0x0126, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 180:	90 93 03 01 	sts	0x0103, r25
 184:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
 188:	80 91 02 01 	lds	r24, 0x0102
 18c:	90 91 03 01 	lds	r25, 0x0103
 190:	e0 91 26 01 	lds	r30, 0x0126
 194:	f0 91 27 01 	lds	r31, 0x0127
 198:	e8 1b       	sub	r30, r24
 19a:	f9 0b       	sbc	r31, r25
 19c:	ee 5b       	subi	r30, 0xBE	; 190
 19e:	fe 4f       	sbci	r31, 0xFE	; 254
 1a0:	20 83       	st	Z, r18
		bytes_left_from_bt--;
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	90 93 03 01 	sts	0x0103, r25
 1a8:	80 93 02 01 	sts	0x0102, r24
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 1ac:	01 96       	adiw	r24, 0x01	; 1
 1ae:	11 f0       	breq	.+4      	; 0x1b4 <bluetooth_handle_data+0x6c>
			bluetooth_clear_to_send();
 1b0:	af df       	rcall	.-162    	; 0x110 <bluetooth_clear_to_send>
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <bluetooth_handle_data+0x74>
		else 
			new_data_bt = true; // Denna sändningen är klar och vi vill inte ha mer data förens den är behandlad
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	80 93 29 01 	sts	0x0129, r24
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <bluetooth_handle_data+0x7e>
	} 

	// Om ny data, skicka vidare
	if(new_data_bt){ //Här är lite fel data_from_bt funkar inte...
 1bc:	80 91 29 01 	lds	r24, 0x0129
 1c0:	88 23       	and	r24, r24
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <bluetooth_handle_data+0x7e>
 1c4:	3e c0       	rjmp	.+124    	; 0x242 <bluetooth_handle_data+0xfa>
		//int nr_of_bytes = ((data_from_bt[0] >> 4) & 0x0f) + 1;
		//byte data[nr_of_bytes];
		//for(int i = 0; i < nr_of_bytes; i++)
		//	data[i] = data_from_bt[i];
		if(data_from_bt[0] == 0x3f){
 1c6:	80 91 42 01 	lds	r24, 0x0142
 1ca:	8f 33       	cpi	r24, 0x3F	; 63
 1cc:	81 f5       	brne	.+96     	; 0x22e <bluetooth_handle_data+0xe6>
			if(data_from_bt[1] == 0x01){
 1ce:	80 91 43 01 	lds	r24, 0x0143
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	61 f5       	brne	.+88     	; 0x22e <bluetooth_handle_data+0xe6>
				int a1 = data_from_bt[2];// + '0';
 1d6:	e2 e4       	ldi	r30, 0x42	; 66
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	82 81       	ldd	r24, Z+2	; 0x02
 1dc:	90 e0       	ldi	r25, 0x00	; 0
				int a2 = data_from_bt[3];// + '0';
 1de:	e3 81       	ldd	r30, Z+3	; 0x03
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
				char s1[2];
				s1[0] = (a1 / 100) % 10 +'0';
 1e2:	2a e0       	ldi	r18, 0x0A	; 10
 1e4:	30 e0       	ldi	r19, 0x00	; 0
				s1[1] = (a1 / 10) % 10 +'0';
 1e6:	b9 01       	movw	r22, r18
 1e8:	36 d2       	rcall	.+1132   	; 0x656 <__divmodhi4>
 1ea:	48 2f       	mov	r20, r24
 1ec:	cb 01       	movw	r24, r22
 1ee:	b9 01       	movw	r22, r18
 1f0:	32 d2       	rcall	.+1124   	; 0x656 <__divmodhi4>
 1f2:	80 5d       	subi	r24, 0xD0	; 208
 1f4:	8c 83       	std	Y+4, r24	; 0x04
				s1[2] = (a1 / 1) % 10 +'0';
 1f6:	40 5d       	subi	r20, 0xD0	; 208
 1f8:	4d 83       	std	Y+5, r20	; 0x05
				char s2[2];
				s2[0] = (a2 / 100) % 10 +'0';
 1fa:	cf 01       	movw	r24, r30
 1fc:	64 e6       	ldi	r22, 0x64	; 100
 1fe:	70 e0       	ldi	r23, 0x00	; 0
 200:	2a d2       	rcall	.+1108   	; 0x656 <__divmodhi4>
 202:	cb 01       	movw	r24, r22
 204:	b9 01       	movw	r22, r18
 206:	27 d2       	rcall	.+1102   	; 0x656 <__divmodhi4>
 208:	80 5d       	subi	r24, 0xD0	; 208
 20a:	89 83       	std	Y+1, r24	; 0x01
				s2[1] = (a2 / 10) % 10 +'0';
 20c:	cf 01       	movw	r24, r30
 20e:	b9 01       	movw	r22, r18
 210:	22 d2       	rcall	.+1092   	; 0x656 <__divmodhi4>
 212:	48 2f       	mov	r20, r24
 214:	cb 01       	movw	r24, r22
 216:	b9 01       	movw	r22, r18
 218:	1e d2       	rcall	.+1084   	; 0x656 <__divmodhi4>
 21a:	80 5d       	subi	r24, 0xD0	; 208
 21c:	8a 83       	std	Y+2, r24	; 0x02
				s2[2] = (a2 / 1) % 10 +'0';
 21e:	40 5d       	subi	r20, 0xD0	; 208
 220:	4b 83       	std	Y+3, r20	; 0x03
				doLCD(s1, s2);	
 222:	be 01       	movw	r22, r28
 224:	6f 5f       	subi	r22, 0xFF	; 255
 226:	7f 4f       	sbci	r23, 0xFF	; 255
 228:	ce 01       	movw	r24, r28
 22a:	03 96       	adiw	r24, 0x03	; 3
 22c:	f5 d1       	rcall	.+1002   	; 0x618 <doLCD>
			}
		}
		i2c_requestToSend(0x04, data_from_bt);
 22e:	62 e4       	ldi	r22, 0x42	; 66
 230:	71 e0       	ldi	r23, 0x01	; 1
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	45 d0       	rcall	.+138    	; 0x2c0 <i2c_requestToSend>
		bluetooth_add_to_send_queue(data_from_bt); // Ta bort när den skickar över i2c. 
 236:	82 e4       	ldi	r24, 0x42	; 66
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	6c df       	rcall	.-296    	; 0x114 <bluetooth_add_to_send_queue>
		new_data_bt = false;
 23c:	10 92 29 01 	sts	0x0129, r1
		bluetooth_clear_to_send();
 240:	67 df       	rcall	.-306    	; 0x110 <bluetooth_clear_to_send>
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 242:	4a 99       	sbic	0x09, 2	; 9
 244:	1b c0       	rjmp	.+54     	; 0x27c <bluetooth_handle_data+0x134>
 246:	80 91 00 01 	lds	r24, 0x0100
 24a:	90 91 01 01 	lds	r25, 0x0101
 24e:	8f 3f       	cpi	r24, 0xFF	; 255
 250:	3f ef       	ldi	r19, 0xFF	; 255
 252:	93 07       	cpc	r25, r19
 254:	99 f0       	breq	.+38     	; 0x27c <bluetooth_handle_data+0x134>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt]);
 256:	e0 91 24 01 	lds	r30, 0x0124
 25a:	f0 91 25 01 	lds	r31, 0x0125
 25e:	e8 1b       	sub	r30, r24
 260:	f9 0b       	sbc	r31, r25
 262:	ee 5c       	subi	r30, 0xCE	; 206
 264:	fe 4f       	sbci	r31, 0xFE	; 254
 266:	80 81       	ld	r24, Z
 268:	4b df       	rcall	.-362    	; 0x100 <bluetooth_send_byte>
		bytes_left_to_bt--;
 26a:	80 91 00 01 	lds	r24, 0x0100
 26e:	90 91 01 01 	lds	r25, 0x0101
 272:	01 97       	sbiw	r24, 0x01	; 1
 274:	90 93 01 01 	sts	0x0101, r25
 278:	80 93 00 01 	sts	0x0100, r24
	}
}
 27c:	0f 90       	pop	r0
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <__vector_20>:
	
	return true;
}

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 296:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 298:	80 91 c6 00 	lds	r24, 0x00C6
 29c:	80 93 28 01 	sts	0x0128, r24
	newData = true; // Tala om för main att vi har fått data
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	80 93 2a 01 	sts	0x012A, r24
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <i2c_setup>:
	incomingData();	
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
}

void i2c_setup(byte adress_) {
	TWAR = adress_;
 2b2:	80 93 ba 00 	sts	0x00BA, r24
	//TWSR = 0x00; // Ska nog inte vara med
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 2b6:	85 ec       	ldi	r24, 0xC5	; 197
 2b8:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 2bc:	3e 9a       	sbi	0x07, 6	; 7
 2be:	08 95       	ret

000002c0 <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 2c0:	fb 01       	movw	r30, r22
 2c2:	20 81       	ld	r18, Z
 2c4:	22 95       	swap	r18
 2c6:	2f 70       	andi	r18, 0x0F	; 15
 2c8:	42 2f       	mov	r20, r18
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	50 93 31 01 	sts	0x0131, r21
 2d0:	40 93 30 01 	sts	0x0130, r20
 2d4:	a1 e6       	ldi	r26, 0x61	; 97
 2d6:	b1 e0       	ldi	r27, 0x01	; 1
 2d8:	9a 01       	movw	r18, r20
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	62 0f       	add	r22, r18
 2e0:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 2e2:	91 91       	ld	r25, Z+
 2e4:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 2e6:	e6 17       	cp	r30, r22
 2e8:	f7 07       	cpc	r31, r23
 2ea:	d9 f7       	brne	.-10     	; 0x2e2 <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 2ec:	80 93 70 01 	sts	0x0170, r24
	bytesSent = 0;
 2f0:	10 92 2f 01 	sts	0x012F, r1
 2f4:	10 92 2e 01 	sts	0x012E, r1
	PORTC |= (1 << PC6);
 2f8:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fa:	f6 e3       	ldi	r31, 0x36	; 54
 2fc:	fa 95       	dec	r31
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <i2c_requestToSend+0x3c>
 300:	00 00       	nop
	_delay_us(11);
	PORTC &= ~(1 << PC6);
 302:	46 98       	cbi	0x08, 6	; 8
 304:	08 95       	ret

00000306 <i2c_send>:
}



void i2c_send(byte prossesor,byte data){
	TWDR = data;
 306:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 30a:	ec eb       	ldi	r30, 0xBC	; 188
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	80 6c       	ori	r24, 0xC0	; 192
 312:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 314:	80 81       	ld	r24, Z
 316:	88 23       	and	r24, r24
 318:	ec f7       	brge	.-6      	; 0x314 <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 31a:	80 91 b9 00 	lds	r24, 0x00B9
 31e:	88 7f       	andi	r24, 0xF8	; 248
 320:	88 3b       	cpi	r24, 0xB8	; 184
 322:	c1 f0       	breq	.+48     	; 0x354 <i2c_send+0x4e>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 324:	84 e9       	ldi	r24, 0x94	; 148
 326:	80 93 bc 00 	sts	0x00BC, r24
		if(bytes_to_send_i2c >= bytesSent){
 32a:	20 91 30 01 	lds	r18, 0x0130
 32e:	30 91 31 01 	lds	r19, 0x0131
 332:	80 91 2e 01 	lds	r24, 0x012E
 336:	90 91 2f 01 	lds	r25, 0x012F
 33a:	28 17       	cp	r18, r24
 33c:	39 07       	cpc	r19, r25
 33e:	54 f0       	brlt	.+20     	; 0x354 <i2c_send+0x4e>
 340:	82 e6       	ldi	r24, 0x62	; 98
 342:	8a 95       	dec	r24
 344:	f1 f7       	brne	.-4      	; 0x342 <i2c_send+0x3c>
 346:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 348:	46 9a       	sbi	0x08, 6	; 8
 34a:	86 e3       	ldi	r24, 0x36	; 54
 34c:	8a 95       	dec	r24
 34e:	f1 f7       	brne	.-4      	; 0x34c <i2c_send+0x46>
 350:	00 00       	nop
			_delay_us(11);
			PORTC &= ~(1 << PC6);
 352:	46 98       	cbi	0x08, 6	; 8
 354:	08 95       	ret

00000356 <i2c_recive>:
}

byte i2c_recive(void){
	//  if((TWSR & 0xF8)!=0x80)
	//	return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
 356:	ec eb       	ldi	r30, 0xBC	; 188
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 6c       	ori	r24, 0xC0	; 192
 35e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 360:	80 81       	ld	r24, Z
 362:	88 23       	and	r24, r24
 364:	ec f7       	brge	.-6      	; 0x360 <i2c_recive+0xa>
	byte test = TWDR;
 366:	80 91 bb 00 	lds	r24, 0x00BB
	return test;	
}
 36a:	08 95       	ret

0000036c <incomingData>:
	_delay_us(11);
	PORTC &= ~(1 << PC6);
}


byte incomingData(void){	
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // rec data, ack sent	
 370:	80 91 b9 00 	lds	r24, 0x00B9
 374:	88 7f       	andi	r24, 0xF8	; 248
 376:	80 36       	cpi	r24, 0x60	; 96
 378:	39 f5       	brne	.+78     	; 0x3c8 <incomingData+0x5c>
		i2c_data[bytefrom_i2c] = i2c_recive();
 37a:	c0 91 2c 01 	lds	r28, 0x012C
 37e:	d0 91 2d 01 	lds	r29, 0x012D
 382:	e9 df       	rcall	.-46     	; 0x356 <i2c_recive>
 384:	ce 5a       	subi	r28, 0xAE	; 174
 386:	de 4f       	sbci	r29, 0xFE	; 254
 388:	88 83       	st	Y, r24
		if(bytefrom_i2c < ((i2c_data[0]>>4) &0x0f)){
 38a:	80 91 52 01 	lds	r24, 0x0152
 38e:	82 95       	swap	r24
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	20 91 2c 01 	lds	r18, 0x012C
 398:	30 91 2d 01 	lds	r19, 0x012D
 39c:	28 17       	cp	r18, r24
 39e:	39 07       	cpc	r19, r25
 3a0:	34 f4       	brge	.+12     	; 0x3ae <incomingData+0x42>
			TWCR &= ~(1 << TWINT);
 3a2:	ec eb       	ldi	r30, 0xBC	; 188
 3a4:	f0 e0       	ldi	r31, 0x00	; 0
 3a6:	80 81       	ld	r24, Z
 3a8:	8f 77       	andi	r24, 0x7F	; 127
 3aa:	80 83       	st	Z, r24
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <incomingData+0x48>
		}
		else if((bytefrom_i2c) >= ((i2c_data[0]>>4)&0x0f))
			i2c_new_data = true;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	80 93 2b 01 	sts	0x012B, r24
		bytefrom_i2c++;
 3b4:	80 91 2c 01 	lds	r24, 0x012C
 3b8:	90 91 2d 01 	lds	r25, 0x012D
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	90 93 2d 01 	sts	0x012D, r25
 3c2:	80 93 2c 01 	sts	0x012C, r24
 3c6:	1e c0       	rjmp	.+60     	; 0x404 <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
 3c8:	80 91 b9 00 	lds	r24, 0x00B9
 3cc:	88 7f       	andi	r24, 0xF8	; 248
 3ce:	88 3a       	cpi	r24, 0xA8	; 168
 3d0:	99 f4       	brne	.+38     	; 0x3f8 <incomingData+0x8c>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 3d2:	80 91 2e 01 	lds	r24, 0x012E
 3d6:	90 91 2f 01 	lds	r25, 0x012F
 3da:	9c 01       	movw	r18, r24
 3dc:	2f 5f       	subi	r18, 0xFF	; 255
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	30 93 2f 01 	sts	0x012F, r19
 3e4:	20 93 2e 01 	sts	0x012E, r18
 3e8:	fc 01       	movw	r30, r24
 3ea:	ef 59       	subi	r30, 0x9F	; 159
 3ec:	fe 4f       	sbci	r31, 0xFE	; 254
 3ee:	60 81       	ld	r22, Z
 3f0:	80 91 70 01 	lds	r24, 0x0170
 3f4:	88 df       	rcall	.-240    	; 0x306 <i2c_send>
 3f6:	06 c0       	rjmp	.+12     	; 0x404 <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
 3f8:	80 91 b9 00 	lds	r24, 0x00B9
 3fc:	88 7f       	andi	r24, 0xF8	; 248
 3fe:	80 38       	cpi	r24, 0x80	; 128
 400:	09 f4       	brne	.+2      	; 0x404 <incomingData+0x98>
		i2c_recive();
 402:	a9 df       	rcall	.-174    	; 0x356 <i2c_recive>
	}
	
	return 0x00;
}
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <__vector_26>:
int bytefrom_i2c=0;
byte i2c_data[15];
bool i2c_new_data = false;


ISR(TWI_vect){
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	0b b6       	in	r0, 0x3b	; 59
 418:	0f 92       	push	r0
 41a:	2f 93       	push	r18
 41c:	3f 93       	push	r19
 41e:	4f 93       	push	r20
 420:	5f 93       	push	r21
 422:	6f 93       	push	r22
 424:	7f 93       	push	r23
 426:	8f 93       	push	r24
 428:	9f 93       	push	r25
 42a:	af 93       	push	r26
 42c:	bf 93       	push	r27
 42e:	ef 93       	push	r30
 430:	ff 93       	push	r31
	incomingData();	
 432:	9c df       	rcall	.-200    	; 0x36c <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
 434:	85 ec       	ldi	r24, 0xC5	; 197
 436:	80 93 bc 00 	sts	0x00BC, r24
}
 43a:	ff 91       	pop	r31
 43c:	ef 91       	pop	r30
 43e:	bf 91       	pop	r27
 440:	af 91       	pop	r26
 442:	9f 91       	pop	r25
 444:	8f 91       	pop	r24
 446:	7f 91       	pop	r23
 448:	6f 91       	pop	r22
 44a:	5f 91       	pop	r21
 44c:	4f 91       	pop	r20
 44e:	3f 91       	pop	r19
 450:	2f 91       	pop	r18
 452:	0f 90       	pop	r0
 454:	0b be       	out	0x3b, r0	; 59
 456:	0f 90       	pop	r0
 458:	0f be       	out	0x3f, r0	; 63
 45a:	0f 90       	pop	r0
 45c:	1f 90       	pop	r1
 45e:	18 95       	reti

00000460 <i2c_handle_data>:
	byte test = TWDR;
	return test;	
}

void i2c_handle_data(void){
	if(i2c_new_data == true){
 460:	80 91 2b 01 	lds	r24, 0x012B
 464:	88 23       	and	r24, r24
 466:	71 f0       	breq	.+28     	; 0x484 <i2c_handle_data+0x24>
		//if(((i2c_data[0] >> 4) & 0x0f) == 3) 
		bluetooth_add_to_send_queue(i2c_data);
 468:	82 e5       	ldi	r24, 0x52	; 82
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	53 de       	rcall	.-858    	; 0x114 <bluetooth_add_to_send_queue>
		i2c_new_data = false;
 46e:	10 92 2b 01 	sts	0x012B, r1
		bytefrom_i2c = 0;
 472:	10 92 2d 01 	sts	0x012D, r1
 476:	10 92 2c 01 	sts	0x012C, r1
		TWCR &= ~(1 << TWINT);
 47a:	ec eb       	ldi	r30, 0xBC	; 188
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	8f 77       	andi	r24, 0x7F	; 127
 482:	80 83       	st	Z, r24
 484:	08 95       	ret

00000486 <toggle_e>:
 486:	16 9a       	sbi	0x02, 6	; 2
 488:	00 c0       	rjmp	.+0      	; 0x48a <toggle_e+0x4>
 48a:	16 98       	cbi	0x02, 6	; 2
 48c:	08 95       	ret

0000048e <lcd_write>:
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	d8 2f       	mov	r29, r24
 494:	66 23       	and	r22, r22
 496:	11 f0       	breq	.+4      	; 0x49c <lcd_write+0xe>
 498:	14 9a       	sbi	0x02, 4	; 2
 49a:	01 c0       	rjmp	.+2      	; 0x49e <lcd_write+0x10>
 49c:	14 98       	cbi	0x02, 4	; 2
 49e:	15 98       	cbi	0x02, 5	; 2
 4a0:	81 b1       	in	r24, 0x01	; 1
 4a2:	8f 60       	ori	r24, 0x0F	; 15
 4a4:	81 b9       	out	0x01, r24	; 1
 4a6:	c2 b1       	in	r28, 0x02	; 2
 4a8:	c0 7f       	andi	r28, 0xF0	; 240
 4aa:	8d 2f       	mov	r24, r29
 4ac:	82 95       	swap	r24
 4ae:	8f 70       	andi	r24, 0x0F	; 15
 4b0:	8c 2b       	or	r24, r28
 4b2:	82 b9       	out	0x02, r24	; 2
 4b4:	e8 df       	rcall	.-48     	; 0x486 <toggle_e>
 4b6:	df 70       	andi	r29, 0x0F	; 15
 4b8:	dc 2b       	or	r29, r28
 4ba:	d2 b9       	out	0x02, r29	; 2
 4bc:	e4 df       	rcall	.-56     	; 0x486 <toggle_e>
 4be:	cf 60       	ori	r28, 0x0F	; 15
 4c0:	c2 b9       	out	0x02, r28	; 2
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <lcd_read>:
 4c8:	88 23       	and	r24, r24
 4ca:	11 f0       	breq	.+4      	; 0x4d0 <lcd_read+0x8>
 4cc:	14 9a       	sbi	0x02, 4	; 2
 4ce:	01 c0       	rjmp	.+2      	; 0x4d2 <lcd_read+0xa>
 4d0:	14 98       	cbi	0x02, 4	; 2
 4d2:	15 9a       	sbi	0x02, 5	; 2
 4d4:	81 b1       	in	r24, 0x01	; 1
 4d6:	80 7f       	andi	r24, 0xF0	; 240
 4d8:	81 b9       	out	0x01, r24	; 1
 4da:	16 9a       	sbi	0x02, 6	; 2
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <lcd_read+0x16>
 4de:	20 b1       	in	r18, 0x00	; 0
 4e0:	16 98       	cbi	0x02, 6	; 2
 4e2:	00 c0       	rjmp	.+0      	; 0x4e4 <lcd_read+0x1c>
 4e4:	16 9a       	sbi	0x02, 6	; 2
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <lcd_read+0x20>
 4e8:	90 b1       	in	r25, 0x00	; 0
 4ea:	22 95       	swap	r18
 4ec:	20 7f       	andi	r18, 0xF0	; 240
 4ee:	89 2f       	mov	r24, r25
 4f0:	8f 70       	andi	r24, 0x0F	; 15
 4f2:	16 98       	cbi	0x02, 6	; 2
 4f4:	82 2b       	or	r24, r18
 4f6:	08 95       	ret

000004f8 <lcd_waitbusy>:
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	e6 df       	rcall	.-52     	; 0x4c8 <lcd_read>
 4fc:	88 23       	and	r24, r24
 4fe:	e4 f3       	brlt	.-8      	; 0x4f8 <lcd_waitbusy>
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	8a 95       	dec	r24
 504:	f1 f7       	brne	.-4      	; 0x502 <lcd_waitbusy+0xa>
 506:	80 e0       	ldi	r24, 0x00	; 0
 508:	df cf       	rjmp	.-66     	; 0x4c8 <lcd_read>
 50a:	08 95       	ret

0000050c <lcd_command>:
 50c:	cf 93       	push	r28
 50e:	c8 2f       	mov	r28, r24
 510:	f3 df       	rcall	.-26     	; 0x4f8 <lcd_waitbusy>
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	8c 2f       	mov	r24, r28
 516:	bb df       	rcall	.-138    	; 0x48e <lcd_write>
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <lcd_gotoxy>:
 51c:	61 11       	cpse	r22, r1
 51e:	03 c0       	rjmp	.+6      	; 0x526 <lcd_gotoxy+0xa>
 520:	80 58       	subi	r24, 0x80	; 128
 522:	f4 cf       	rjmp	.-24     	; 0x50c <lcd_command>
 524:	08 95       	ret
 526:	80 54       	subi	r24, 0x40	; 64
 528:	f1 cf       	rjmp	.-30     	; 0x50c <lcd_command>
 52a:	08 95       	ret

0000052c <lcd_clrscr>:
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	ee df       	rcall	.-36     	; 0x50c <lcd_command>
 530:	89 ef       	ldi	r24, 0xF9	; 249
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <lcd_clrscr+0x8>
 538:	00 c0       	rjmp	.+0      	; 0x53a <lcd_clrscr+0xe>
 53a:	00 00       	nop
 53c:	08 95       	ret

0000053e <lcd_home>:
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	e5 df       	rcall	.-54     	; 0x50c <lcd_command>
 542:	89 ef       	ldi	r24, 0xF9	; 249
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	01 97       	sbiw	r24, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <lcd_home+0x8>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <lcd_home+0xe>
 54c:	00 00       	nop
 54e:	08 95       	ret

00000550 <lcd_putc>:
 550:	cf 93       	push	r28
 552:	c8 2f       	mov	r28, r24
 554:	d1 df       	rcall	.-94     	; 0x4f8 <lcd_waitbusy>
 556:	ca 30       	cpi	r28, 0x0A	; 10
 558:	41 f4       	brne	.+16     	; 0x56a <lcd_putc+0x1a>
 55a:	80 34       	cpi	r24, 0x40	; 64
 55c:	10 f0       	brcs	.+4      	; 0x562 <lcd_putc+0x12>
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	01 c0       	rjmp	.+2      	; 0x564 <lcd_putc+0x14>
 562:	80 e4       	ldi	r24, 0x40	; 64
 564:	80 58       	subi	r24, 0x80	; 128
 566:	d2 df       	rcall	.-92     	; 0x50c <lcd_command>
 568:	03 c0       	rjmp	.+6      	; 0x570 <lcd_putc+0x20>
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	8c 2f       	mov	r24, r28
 56e:	8f df       	rcall	.-226    	; 0x48e <lcd_write>
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <lcd_puts>:
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	ec 01       	movw	r28, r24
 57a:	21 96       	adiw	r28, 0x01	; 1
 57c:	fc 01       	movw	r30, r24
 57e:	80 81       	ld	r24, Z
 580:	88 23       	and	r24, r24
 582:	21 f0       	breq	.+8      	; 0x58c <lcd_puts+0x18>
 584:	e5 df       	rcall	.-54     	; 0x550 <lcd_putc>
 586:	89 91       	ld	r24, Y+
 588:	81 11       	cpse	r24, r1
 58a:	fc cf       	rjmp	.-8      	; 0x584 <lcd_puts+0x10>
 58c:	df 91       	pop	r29
 58e:	cf 91       	pop	r28
 590:	08 95       	ret

00000592 <lcd_init>:
 592:	cf 93       	push	r28
 594:	c8 2f       	mov	r28, r24
 596:	91 b1       	in	r25, 0x01	; 1
 598:	9f 67       	ori	r25, 0x7F	; 127
 59a:	91 b9       	out	0x01, r25	; 1
 59c:	87 e8       	ldi	r24, 0x87	; 135
 59e:	93 e1       	ldi	r25, 0x13	; 19
 5a0:	01 97       	sbiw	r24, 0x01	; 1
 5a2:	f1 f7       	brne	.-4      	; 0x5a0 <lcd_init+0xe>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <lcd_init+0x14>
 5a6:	00 00       	nop
 5a8:	11 9a       	sbi	0x02, 1	; 2
 5aa:	10 9a       	sbi	0x02, 0	; 2
 5ac:	6c df       	rcall	.-296    	; 0x486 <toggle_e>
 5ae:	8b ed       	ldi	r24, 0xDB	; 219
 5b0:	95 e0       	ldi	r25, 0x05	; 5
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <lcd_init+0x20>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <lcd_init+0x26>
 5b8:	00 00       	nop
 5ba:	65 df       	rcall	.-310    	; 0x486 <toggle_e>
 5bc:	97 e1       	ldi	r25, 0x17	; 23
 5be:	9a 95       	dec	r25
 5c0:	f1 f7       	brne	.-4      	; 0x5be <lcd_init+0x2c>
 5c2:	00 00       	nop
 5c4:	60 df       	rcall	.-320    	; 0x486 <toggle_e>
 5c6:	87 e1       	ldi	r24, 0x17	; 23
 5c8:	8a 95       	dec	r24
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <lcd_init+0x36>
 5cc:	00 00       	nop
 5ce:	10 98       	cbi	0x02, 0	; 2
 5d0:	5a df       	rcall	.-332    	; 0x486 <toggle_e>
 5d2:	97 e1       	ldi	r25, 0x17	; 23
 5d4:	9a 95       	dec	r25
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <lcd_init+0x42>
 5d8:	00 00       	nop
 5da:	88 e2       	ldi	r24, 0x28	; 40
 5dc:	97 df       	rcall	.-210    	; 0x50c <lcd_command>
 5de:	88 e0       	ldi	r24, 0x08	; 8
 5e0:	95 df       	rcall	.-214    	; 0x50c <lcd_command>
 5e2:	a4 df       	rcall	.-184    	; 0x52c <lcd_clrscr>
 5e4:	86 e0       	ldi	r24, 0x06	; 6
 5e6:	92 df       	rcall	.-220    	; 0x50c <lcd_command>
 5e8:	8c 2f       	mov	r24, r28
 5ea:	90 df       	rcall	.-224    	; 0x50c <lcd_command>
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <initialize>:
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	72 ec       	ldi	r23, 0xC2	; 194
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	7d dd       	rcall	.-1286   	; 0xf4 <bluetooth_setup>
 5fa:	8c e0       	ldi	r24, 0x0C	; 12
 5fc:	ca df       	rcall	.-108    	; 0x592 <lcd_init>
 5fe:	82 e0       	ldi	r24, 0x02	; 2
 600:	58 de       	rcall	.-848    	; 0x2b2 <i2c_setup>
 602:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 604:	2f ef       	ldi	r18, 0xFF	; 255
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	99 e5       	ldi	r25, 0x59	; 89
 60a:	21 50       	subi	r18, 0x01	; 1
 60c:	80 40       	sbci	r24, 0x00	; 0
 60e:	90 40       	sbci	r25, 0x00	; 0
 610:	e1 f7       	brne	.-8      	; 0x60a <initialize+0x1a>
 612:	00 c0       	rjmp	.+0      	; 0x614 <initialize+0x24>
 614:	00 00       	nop
 616:	08 95       	ret

00000618 <doLCD>:
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	8c 01       	movw	r16, r24
 622:	eb 01       	movw	r28, r22
 624:	83 df       	rcall	.-250    	; 0x52c <lcd_clrscr>
 626:	8b df       	rcall	.-234    	; 0x53e <lcd_home>
 628:	c8 01       	movw	r24, r16
 62a:	a4 df       	rcall	.-184    	; 0x574 <lcd_puts>
 62c:	61 e0       	ldi	r22, 0x01	; 1
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	75 df       	rcall	.-278    	; 0x51c <lcd_gotoxy>
 632:	ce 01       	movw	r24, r28
 634:	9f df       	rcall	.-194    	; 0x574 <lcd_puts>
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	1f 91       	pop	r17
 63c:	0f 91       	pop	r16
 63e:	08 95       	ret

00000640 <run>:
 640:	64 e0       	ldi	r22, 0x04	; 4
 642:	71 e0       	ldi	r23, 0x01	; 1
 644:	83 e1       	ldi	r24, 0x13	; 19
 646:	91 e0       	ldi	r25, 0x01	; 1
 648:	e7 df       	rcall	.-50     	; 0x618 <doLCD>
 64a:	7e dd       	rcall	.-1284   	; 0x148 <bluetooth_handle_data>
 64c:	09 df       	rcall	.-494    	; 0x460 <i2c_handle_data>
 64e:	fd cf       	rjmp	.-6      	; 0x64a <run+0xa>

00000650 <main>:
 650:	3b dd       	rcall	.-1418   	; 0xc8 <board_init>
 652:	ce df       	rcall	.-100    	; 0x5f0 <initialize>
 654:	f5 df       	rcall	.-22     	; 0x640 <run>

00000656 <__divmodhi4>:
 656:	97 fb       	bst	r25, 7
 658:	07 2e       	mov	r0, r23
 65a:	16 f4       	brtc	.+4      	; 0x660 <__divmodhi4+0xa>
 65c:	00 94       	com	r0
 65e:	06 d0       	rcall	.+12     	; 0x66c <__divmodhi4_neg1>
 660:	77 fd       	sbrc	r23, 7
 662:	08 d0       	rcall	.+16     	; 0x674 <__divmodhi4_neg2>
 664:	0b d0       	rcall	.+22     	; 0x67c <__udivmodhi4>
 666:	07 fc       	sbrc	r0, 7
 668:	05 d0       	rcall	.+10     	; 0x674 <__divmodhi4_neg2>
 66a:	3e f4       	brtc	.+14     	; 0x67a <__divmodhi4_exit>

0000066c <__divmodhi4_neg1>:
 66c:	90 95       	com	r25
 66e:	81 95       	neg	r24
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	08 95       	ret

00000674 <__divmodhi4_neg2>:
 674:	70 95       	com	r23
 676:	61 95       	neg	r22
 678:	7f 4f       	sbci	r23, 0xFF	; 255

0000067a <__divmodhi4_exit>:
 67a:	08 95       	ret

0000067c <__udivmodhi4>:
 67c:	aa 1b       	sub	r26, r26
 67e:	bb 1b       	sub	r27, r27
 680:	51 e1       	ldi	r21, 0x11	; 17
 682:	07 c0       	rjmp	.+14     	; 0x692 <__udivmodhi4_ep>

00000684 <__udivmodhi4_loop>:
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	a6 17       	cp	r26, r22
 68a:	b7 07       	cpc	r27, r23
 68c:	10 f0       	brcs	.+4      	; 0x692 <__udivmodhi4_ep>
 68e:	a6 1b       	sub	r26, r22
 690:	b7 0b       	sbc	r27, r23

00000692 <__udivmodhi4_ep>:
 692:	88 1f       	adc	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	5a 95       	dec	r21
 698:	a9 f7       	brne	.-22     	; 0x684 <__udivmodhi4_loop>
 69a:	80 95       	com	r24
 69c:	90 95       	com	r25
 69e:	bc 01       	movw	r22, r24
 6a0:	cd 01       	movw	r24, r26
 6a2:	08 95       	ret

000006a4 <_exit>:
 6a4:	f8 94       	cli

000006a6 <__stop_program>:
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <__stop_program>
