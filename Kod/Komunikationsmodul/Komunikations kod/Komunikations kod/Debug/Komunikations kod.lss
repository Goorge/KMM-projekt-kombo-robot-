
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800120  00800120  000003da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bd2  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000053f  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013cc  00000000  00000000  0000163d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011dc3  00000000  00000000  00002ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002eb  00000000  00000000  0001496b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00014c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004684  00000000  00000000  00014d3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	70 c0       	rjmp	.+224    	; 0x13a <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e2       	ldi	r30, 0x26	; 38
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 32       	cpi	r26, 0x20	; 32
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e2       	ldi	r26, 0x20	; 32
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 32       	cpi	r26, 0x22	; 34
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	2c d1       	rcall	.+600    	; 0x31c <main>
  c4:	2e c1       	rjmp	.+604    	; 0x322 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <usart_setup>:
}

// Skicka en byte över BT
void bluetooth_send_byte(byte data){
	while ( !( UCSR0A & (1<<UDRE0)) );/* Wait for empty transmit buffer */
	UDR0 = data; // Put the data in to the buffer and send it
  ca:	88 ed       	ldi	r24, 0xD8	; 216
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a e0       	ldi	r18, 0x0A	; 10
  f6:	2a b9       	out	0x0a, r18	; 10
  f8:	cb 01       	movw	r24, r22
  fa:	e7 cf       	rjmp	.-50     	; 0xca <usart_setup>
  fc:	08 95       	ret

000000fe <bluetooth_clear_to_send>:
}

// Säg till blåtandsenheten att du är redo att ta emot mer data. 
void bluetooth_clear_to_send(void){	PORTD &= ~(1 << RTS); }// Clear To Send;
  fe:	5b 98       	cbi	0x0b, 3	; 11
 100:	08 95       	ret

00000102 <bluetooth_fetch_new_data>:

//Hämta ut datan från BT
byte bluetooth_fetch_new_data(void){
	newData = false;
 102:	10 92 21 01 	sts	0x0121, r1
	return dataFromBT;
}
 106:	80 91 20 01 	lds	r24, 0x0120
 10a:	08 95       	ret

0000010c <bluetooth_get_new_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return newData; }
 10c:	80 91 21 01 	lds	r24, 0x0121
 110:	08 95       	ret

00000112 <__vector_20>:


//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 11e:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 120:	80 91 c6 00 	lds	r24, 0x00C6
 124:	80 93 20 01 	sts	0x0120, r24
	newData = true; // Tala om för main att vi har fått data
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	80 93 21 01 	sts	0x0121, r24
}	
 12e:	8f 91       	pop	r24
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_22>:

 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <lcd_write_char>:
	PORTA |= (letter & (1 << 3));
	PORTA |= (letter & (1 << 2));
	PORTA |= (letter & (1 << 1));
	PORTA |= (letter & (1 << 0));
*/
	PORTA = letter;	// Lägg ín data på pinnarna in data
 14e:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~(1 << E);	// Försäkring om att E är låg innan vi försöker skriva
 150:	5f 98       	cbi	0x0b, 7	; 11
	
	PORTD |= (1 << RS); // sätt RS
 152:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << E); // Sätt Enable
 154:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <lcd_write_char+0xa>
	
	_delay_us(1); //TSU2	// Vänta på att data ska stabiliseras
	PORTD &= ~(1 << E);
 15c:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 15e:	5e 98       	cbi	0x0b, 6	; 11
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	8a 95       	dec	r24
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_write_char+0x14>
 166:	08 95       	ret

00000168 <lcd_write_instruction>:
	_delay_us(1);
}

void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);
 168:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 16a:	5e 98       	cbi	0x0b, 6	; 11
	PORTA |= (instruction & (1 << 2));
	PORTA |= (instruction & (1 << 1));
	PORTA |= (instruction & (1 << 0));
	*/
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 16c:	82 b9       	out	0x02, r24	; 2
 16e:	08 95       	ret

00000170 <lcd_setup>:

bool directionLeft = true;

//LCD Setup, inits all the variables
void lcd_setup(void)	{
	DDRA = 0xFF;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	81 b9       	out	0x01, r24	; 1
	DDRD = (1 << E) | (1 << RS);
 174:	80 ec       	ldi	r24, 0xC0	; 192
 176:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	8f e7       	ldi	r24, 0x7F	; 127
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <lcd_setup+0xe>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_setup+0x18>
 188:	00 00       	nop
			
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	//Function reset
	lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  
 18a:	80 e3       	ldi	r24, 0x30	; 48
 18c:	ed df       	rcall	.-38     	; 0x168 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	86 e2       	ldi	r24, 0x26	; 38
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_setup+0x22>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_setup+0x28>
 198:	00 00       	nop
	_delay_us(80);
	//Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 19a:	88 e3       	ldi	r24, 0x38	; 56
 19c:	e5 df       	rcall	.-54     	; 0x168 <lcd_write_instruction>
 19e:	86 e2       	ldi	r24, 0x26	; 38
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_setup+0x32>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_setup+0x38>
 1a8:	00 00       	nop
	_delay_us(80);
	//Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	dd df       	rcall	.-70     	; 0x168 <lcd_write_instruction>
 1ae:	86 e2       	ldi	r24, 0x26	; 38
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_setup+0x42>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_setup+0x48>
 1b8:	00 00       	nop
	_delay_us(80);
	//Display clear
	lcd_write_instruction(lcd_Clear);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	d5 df       	rcall	.-86     	; 0x168 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	89 e9       	ldi	r24, 0x99	; 153
 1c0:	99 e3       	ldi	r25, 0x39	; 57
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_setup+0x52>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_setup+0x58>
	_delay_ms(4);
	//Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 1c8:	86 e0       	ldi	r24, 0x06	; 6
 1ca:	ce df       	rcall	.-100    	; 0x168 <lcd_write_instruction>
 1cc:	86 e6       	ldi	r24, 0x66	; 102
 1ce:	9e e0       	ldi	r25, 0x0E	; 14
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_setup+0x60>
 1d4:	00 00       	nop
	_delay_ms(1);
	
	lcd_write_instruction(lcd_SetCursor);
 1d6:	80 e8       	ldi	r24, 0x80	; 128
 1d8:	c7 df       	rcall	.-114    	; 0x168 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	86 e2       	ldi	r24, 0x26	; 38
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_setup+0x6e>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_setup+0x74>
 1e4:	00 00       	nop
 1e6:	08 95       	ret

000001e8 <lcd_write_string>:
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
}

//Erases data on LCD and write new one.
void lcd_write_string(char string[2][16]){
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	7c 01       	movw	r14, r24
	lcd_write_instruction(lcd_Clear);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	b7 df       	rcall	.-146    	; 0x168 <lcd_write_instruction>
 1fa:	86 e2       	ldi	r24, 0x26	; 38
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_write_string+0x16>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_write_string+0x1c>
 204:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	af df       	rcall	.-162    	; 0x168 <lcd_write_instruction>
 20a:	e6 e2       	ldi	r30, 0x26	; 38
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	31 97       	sbiw	r30, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_write_string+0x26>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_write_string+0x2c>
 214:	00 00       	nop
 216:	87 01       	movw	r16, r14
 218:	e7 01       	movw	r28, r14
 21a:	60 96       	adiw	r28, 0x10	; 16
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 21c:	f8 01       	movw	r30, r16
 21e:	81 91       	ld	r24, Z+
 220:	8f 01       	movw	r16, r30
 222:	95 df       	rcall	.-214    	; 0x14e <lcd_write_char>
 224:	86 e2       	ldi	r24, 0x26	; 38
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <lcd_write_string+0x40>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <lcd_write_string+0x46>
 22e:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 230:	0c 17       	cp	r16, r28
 232:	1d 07       	cpc	r17, r29
 234:	99 f7       	brne	.-26     	; 0x21c <lcd_write_string+0x34>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 236:	80 ec       	ldi	r24, 0xC0	; 192
 238:	97 df       	rcall	.-210    	; 0x168 <lcd_write_instruction>
 23a:	e6 e2       	ldi	r30, 0x26	; 38
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_write_string+0x56>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_write_string+0x5c>
 244:	00 00       	nop
 246:	87 01       	movw	r16, r14
 248:	00 5e       	subi	r16, 0xE0	; 224
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 24c:	89 91       	ld	r24, Y+
 24e:	7f df       	rcall	.-258    	; 0x14e <lcd_write_char>
 250:	86 e2       	ldi	r24, 0x26	; 38
 252:	91 e0       	ldi	r25, 0x01	; 1
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <lcd_write_string+0x6c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <lcd_write_string+0x72>
 25a:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 25c:	c0 17       	cp	r28, r16
 25e:	d1 07       	cpc	r29, r17
 260:	a9 f7       	brne	.-22     	; 0x24c <lcd_write_string+0x64>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	81 df       	rcall	.-254    	; 0x168 <lcd_write_instruction>
 266:	e6 e2       	ldi	r30, 0x26	; 38
 268:	f1 e0       	ldi	r31, 0x01	; 1
 26a:	31 97       	sbiw	r30, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_write_string+0x82>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_write_string+0x88>
 270:	00 00       	nop
		_delay_us(80); 
	}
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	ff 90       	pop	r15
 27c:	ef 90       	pop	r14
 27e:	08 95       	ret

00000280 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	72 ec       	ldi	r23, 0xC2	; 194
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	35 df       	rcall	.-406    	; 0xf4 <bluetooth_setup>
	lcd_setup();
 28a:	72 df       	rcall	.-284    	; 0x170 <lcd_setup>
	//i2c_setup(0x02);
	sei();
 28c:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28e:	2f ef       	ldi	r18, 0xFF	; 255
 290:	8f e7       	ldi	r24, 0x7F	; 127
 292:	94 e0       	ldi	r25, 0x04	; 4
 294:	21 50       	subi	r18, 0x01	; 1
 296:	80 40       	sbci	r24, 0x00	; 0
 298:	90 40       	sbci	r25, 0x00	; 0
 29a:	e1 f7       	brne	.-8      	; 0x294 <initialize+0x14>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <initialize+0x1e>
 29e:	00 00       	nop
 2a0:	08 95       	ret

000002a2 <run>:
	_delay_ms(100);
}

void run(void){
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	cd b7       	in	r28, 0x3d	; 61
 2a8:	de b7       	in	r29, 0x3e	; 62
 2aa:	a0 97       	sbiw	r28, 0x20	; 32
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
	char test[2][16] = {"test", "Mer Test"};
 2b6:	80 e2       	ldi	r24, 0x20	; 32
 2b8:	e0 e0       	ldi	r30, 0x00	; 0
 2ba:	f1 e0       	ldi	r31, 0x01	; 1
 2bc:	de 01       	movw	r26, r28
 2be:	11 96       	adiw	r26, 0x01	; 1
 2c0:	01 90       	ld	r0, Z+
 2c2:	0d 92       	st	X+, r0
 2c4:	8a 95       	dec	r24
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <run+0x1e>
	lcd_write_string(test);
 2c8:	ce 01       	movw	r24, r28
 2ca:	01 96       	adiw	r24, 0x01	; 1
 2cc:	8d df       	rcall	.-230    	; 0x1e8 <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	86 e2       	ldi	r24, 0x26	; 38
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <run+0x30>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <run+0x36>
 2d8:	00 00       	nop
	//How many bytes is there during current read
	short number_of_bytes_from_bt = 0;
	//short number_of_bytes_from_i2c = 0;
	
	// how many bytes is left to read=
	short bytes_left_from_bt = -1;
 2da:	0f ef       	ldi	r16, 0xFF	; 255
 2dc:	1f ef       	ldi	r17, 0xFF	; 255
			if(bytes_left_from_bt != 0)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
				bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
		} 
		
		if( bytes_left_from_bt == 0){
			bytes_left_from_bt = -1; 
 2de:	ee 24       	eor	r14, r14
 2e0:	ea 94       	dec	r14
 2e2:	ff 24       	eor	r15, r15
 2e4:	fa 94       	dec	r15
	//byte data_to_i2c[16];
	
	while(true)	{		

		// Ta emot data från BT
		if(bluetooth_get_new_data() == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 2e6:	12 df       	rcall	.-476    	; 0x10c <bluetooth_get_new_data>
 2e8:	88 23       	and	r24, r24
 2ea:	71 f0       	breq	.+28     	; 0x308 <run+0x66>
			byte data = bluetooth_fetch_new_data(); // Hämta ut data å sätt newData false
 2ec:	0a df       	rcall	.-492    	; 0x102 <bluetooth_fetch_new_data>
			
			// Om vi inte har någon kö för stunden så kör
			if (bytes_left_from_bt == -1){ 
 2ee:	0f 3f       	cpi	r16, 0xFF	; 255
 2f0:	9f ef       	ldi	r25, 0xFF	; 255
 2f2:	19 07       	cpc	r17, r25
 2f4:	21 f4       	brne	.+8      	; 0x2fe <run+0x5c>
				number_of_bytes_from_bt = (data >> 4); 
 2f6:	82 95       	swap	r24
 2f8:	8f 70       	andi	r24, 0x0F	; 15
 2fa:	08 2f       	mov	r16, r24
 2fc:	10 e0       	ldi	r17, 0x00	; 0
				bytes_left_from_bt = number_of_bytes_from_bt;
			}
			
			// Lägg in datan i vektorn
			data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
			--bytes_left_from_bt;
 2fe:	01 50       	subi	r16, 0x01	; 1
 300:	11 09       	sbc	r17, r1
			
			// Vill vi ha mer data från samma sändning? 				
			if(bytes_left_from_bt != 0)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 302:	41 f0       	breq	.+16     	; 0x314 <run+0x72>
				bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
 304:	fc de       	rcall	.-520    	; 0xfe <bluetooth_clear_to_send>
 306:	08 c0       	rjmp	.+16     	; 0x318 <run+0x76>
		} 
		
		if( bytes_left_from_bt == 0){
 308:	01 15       	cp	r16, r1
 30a:	11 05       	cpc	r17, r1
 30c:	29 f4       	brne	.+10     	; 0x318 <run+0x76>
			bytes_left_from_bt = -1; 
 30e:	0e 2d       	mov	r16, r14
 310:	1f 2d       	mov	r17, r15
 312:	02 c0       	rjmp	.+4      	; 0x318 <run+0x76>
 314:	0e 2d       	mov	r16, r14
 316:	1f 2d       	mov	r17, r15
			// Då det bara kommer skickas styrdata via bt är det dags att skicka data till styrmodulen
			// i2csendstuff.
		} 
		
		// Skicka data via BT
		if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 318:	89 b1       	in	r24, 0x09	; 9
 31a:	e5 cf       	rjmp	.-54     	; 0x2e6 <run+0x44>

0000031c <main>:
void initialize(void);
void update_lcd(void);

int main (void)
{
	board_init();
 31c:	d5 de       	rcall	.-598    	; 0xc8 <board_init>
	initialize();
 31e:	b0 df       	rcall	.-160    	; 0x280 <initialize>
	run();
 320:	c0 df       	rcall	.-128    	; 0x2a2 <run>

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
