
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000464  000004f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000464  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800104  00800104  000004fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000052c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d75  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005f2  00000000  00000000  00001401  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001595  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  00002f88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011ec7  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000546  00000000  00000000  000150b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000155fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004690  00000000  00000000  000156dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	ac c0       	rjmp	.+344    	; 0x1aa <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	9d c1       	rjmp	.+826    	; 0x3a4 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e6       	ldi	r30, 0x64	; 100
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 35       	cpi	r26, 0x51	; 81
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cb d1       	rcall	.+918    	; 0x45a <main>
  c4:	cd c1       	rjmp	.+922    	; 0x460 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <usart_setup>:
	bytes_left_to_bt += nr_of_bytes;
	for(int i = number_of_bytes_to_bt; i < nr_of_bytes + number_of_bytes_to_bt; i++)
		data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt += nr_of_bytes;
	return true;
}
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_handle_data>:
 110:	80 91 0a 01 	lds	r24, 0x010A
 114:	88 23       	and	r24, r24
 116:	59 f1       	breq	.+86     	; 0x16e <bluetooth_handle_data+0x5e>
 118:	20 91 08 01 	lds	r18, 0x0108
 11c:	80 91 02 01 	lds	r24, 0x0102
 120:	90 91 03 01 	lds	r25, 0x0103
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	61 f4       	brne	.+24     	; 0x140 <bluetooth_handle_data+0x30>
 128:	82 2f       	mov	r24, r18
 12a:	82 95       	swap	r24
 12c:	8f 70       	andi	r24, 0x0F	; 15
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 07 01 	sts	0x0107, r25
 134:	80 93 06 01 	sts	0x0106, r24
 138:	90 93 03 01 	sts	0x0103, r25
 13c:	80 93 02 01 	sts	0x0102, r24
 140:	80 91 02 01 	lds	r24, 0x0102
 144:	90 91 03 01 	lds	r25, 0x0103
 148:	e0 91 06 01 	lds	r30, 0x0106
 14c:	f0 91 07 01 	lds	r31, 0x0107
 150:	e8 1b       	sub	r30, r24
 152:	f9 0b       	sbc	r31, r25
 154:	ee 5d       	subi	r30, 0xDE	; 222
 156:	fe 4f       	sbci	r31, 0xFE	; 254
 158:	20 83       	st	Z, r18
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	90 93 03 01 	sts	0x0103, r25
 160:	80 93 02 01 	sts	0x0102, r24
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	19 f0       	breq	.+6      	; 0x16e <bluetooth_handle_data+0x5e>
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 09 01 	sts	0x0109, r24
 16e:	4a 99       	sbic	0x09, 2	; 9
 170:	1b c0       	rjmp	.+54     	; 0x1a8 <bluetooth_handle_data+0x98>
 172:	80 91 00 01 	lds	r24, 0x0100
 176:	90 91 01 01 	lds	r25, 0x0101
 17a:	8f 3f       	cpi	r24, 0xFF	; 255
 17c:	3f ef       	ldi	r19, 0xFF	; 255
 17e:	93 07       	cpc	r25, r19
 180:	99 f0       	breq	.+38     	; 0x1a8 <bluetooth_handle_data+0x98>
 182:	e0 91 04 01 	lds	r30, 0x0104
 186:	f0 91 05 01 	lds	r31, 0x0105
 18a:	e8 1b       	sub	r30, r24
 18c:	f9 0b       	sbc	r31, r25
 18e:	ee 5e       	subi	r30, 0xEE	; 238
 190:	fe 4f       	sbci	r31, 0xFE	; 254
 192:	80 81       	ld	r24, Z
 194:	b5 df       	rcall	.-150    	; 0x100 <bluetooth_send_byte>
 196:	80 91 00 01 	lds	r24, 0x0100
 19a:	90 91 01 01 	lds	r25, 0x0101
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	90 93 01 01 	sts	0x0101, r25
 1a4:	80 93 00 01 	sts	0x0100, r24
 1a8:	08 95       	ret

000001aa <__vector_20>:

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 1aa:	1f 92       	push	r1
 1ac:	0f 92       	push	r0
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	0f 92       	push	r0
 1b2:	11 24       	eor	r1, r1
 1b4:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 1b6:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 1b8:	80 91 c6 00 	lds	r24, 0x00C6
 1bc:	80 93 08 01 	sts	0x0108, r24
	newData = true; // Tala om för main att vi har fått data
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 0a 01 	sts	0x010A, r24
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <lcd_write_instruction>:
	_delay_us(100); //TSU2	// Vänta på att data ska stabiliseras
}

// Writes instruction 
void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);// Se till att E är låg från början
 1d2:	5f 98       	cbi	0x0b, 7	; 11
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 1d4:	82 b9       	out	0x02, r24	; 2
	
	
	PORTD &= ~(1 << RS); // sätt RS
 1d6:	5e 98       	cbi	0x0b, 6	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d8:	95 e0       	ldi	r25, 0x05	; 5
 1da:	9a 95       	dec	r25
 1dc:	f1 f7       	brne	.-4      	; 0x1da <lcd_write_instruction+0x8>
	_delay_us(1); //TSU1
	PORTD |= (1 << E); // Sätt Enable
 1de:	5f 9a       	sbi	0x0b, 7	; 11
 1e0:	95 e0       	ldi	r25, 0x05	; 5
 1e2:	9a 95       	dec	r25
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_write_instruction+0x10>
	_delay_us(1); // TW
	PORTD &= ~(1 << E);
 1e6:	5f 98       	cbi	0x0b, 7	; 11
 1e8:	95 e0       	ldi	r25, 0x05	; 5
 1ea:	9a 95       	dec	r25
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_write_instruction+0x18>
	_delay_us(1); // TH1
	PORTD &= ~(1 << RS); // Nolställ E och RS så att dom är noll vid nästa instruktion/charläsning	
 1ee:	5e 98       	cbi	0x0b, 6	; 11

	// Lägg in behövd delay ( 1.53 ms för clear och home & 39 us för de andra )
	if(instruction == lcd_Home || instruction == lcd_Clear)
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	82 30       	cpi	r24, 0x02	; 2
 1f4:	28 f4       	brcc	.+10     	; 0x200 <lcd_write_instruction+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	83 e3       	ldi	r24, 0x33	; 51
 1f8:	9b e2       	ldi	r25, 0x2B	; 43
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_write_instruction+0x28>
 1fe:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 200:	80 e7       	ldi	r24, 0x70	; 112
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <lcd_write_instruction+0x32>
 208:	00 c0       	rjmp	.+0      	; 0x20a <lcd_write_instruction+0x38>
 20a:	08 95       	ret

0000020c <lcd_setup>:
#include "LCD.h"
#include  "bluetooth.h"

//LCD Setup, inits all the variables
void lcd_setup(void){
	DDRA = 0xFF;
 20c:	8f ef       	ldi	r24, 0xFF	; 255
 20e:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1 << E) | (1 << RS);
 210:	8a b1       	in	r24, 0x0a	; 10
 212:	80 6c       	ori	r24, 0xC0	; 192
 214:	8a b9       	out	0x0a, r24	; 10
		
	PORTD &= ~((1 << E) | (1 << RS));		
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8f 73       	andi	r24, 0x3F	; 63
 21a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21c:	2f ef       	ldi	r18, 0xFF	; 255
 21e:	8f e7       	ldi	r24, 0x7F	; 127
 220:	94 e0       	ldi	r25, 0x04	; 4
 222:	21 50       	subi	r18, 0x01	; 1
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	90 40       	sbci	r25, 0x00	; 0
 228:	e1 f7       	brne	.-8      	; 0x222 <lcd_setup+0x16>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <lcd_setup+0x20>
 22c:	00 00       	nop
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	// Function reset Behövs nog inte
	//lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  // Kanske inte behövs
	// Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 22e:	88 e3       	ldi	r24, 0x38	; 56
 230:	d0 df       	rcall	.-96     	; 0x1d2 <lcd_write_instruction>
	// Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 232:	8c e0       	ldi	r24, 0x0C	; 12
 234:	ce df       	rcall	.-100    	; 0x1d2 <lcd_write_instruction>
	// Display clear
	lcd_write_instruction(lcd_Clear);
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	cc df       	rcall	.-104    	; 0x1d2 <lcd_write_instruction>
	// Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	ca df       	rcall	.-108    	; 0x1d2 <lcd_write_instruction>
	// Set cursor home and on ddrd 
	lcd_write_instruction(lcd_SetCursor);
 23e:	80 e8       	ldi	r24, 0x80	; 128
 240:	c8 cf       	rjmp	.-112    	; 0x1d2 <lcd_write_instruction>
 242:	08 95       	ret

00000244 <i2c_setup>:
		return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
	return TWDR;	
}

void i2c_store_data(byte data){
 244:	80 93 ba 00 	sts	0x00BA, r24
 248:	85 ec       	ldi	r24, 0xC5	; 197
 24a:	80 93 bc 00 	sts	0x00BC, r24
 24e:	3e 9a       	sbi	0x07, 6	; 7
 250:	08 95       	ret

00000252 <requestToSend>:
 252:	fb 01       	movw	r30, r22
 254:	20 81       	ld	r18, Z
 256:	22 95       	swap	r18
 258:	2f 70       	andi	r18, 0x0F	; 15
 25a:	42 2f       	mov	r20, r18
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	50 93 11 01 	sts	0x0111, r21
 262:	40 93 10 01 	sts	0x0110, r20
 266:	a1 e4       	ldi	r26, 0x41	; 65
 268:	b1 e0       	ldi	r27, 0x01	; 1
 26a:	9a 01       	movw	r18, r20
 26c:	2f 5f       	subi	r18, 0xFF	; 255
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	62 0f       	add	r22, r18
 272:	73 1f       	adc	r23, r19
 274:	91 91       	ld	r25, Z+
 276:	9d 93       	st	X+, r25
 278:	e6 17       	cp	r30, r22
 27a:	f7 07       	cpc	r31, r23
 27c:	d9 f7       	brne	.-10     	; 0x274 <requestToSend+0x22>
 27e:	80 93 50 01 	sts	0x0150, r24
 282:	10 92 0f 01 	sts	0x010F, r1
 286:	10 92 0e 01 	sts	0x010E, r1
 28a:	46 9a       	sbi	0x08, 6	; 8
 28c:	46 98       	cbi	0x08, 6	; 8
 28e:	08 95       	ret

00000290 <i2c_send>:
 290:	60 93 bb 00 	sts	0x00BB, r22
 294:	ec eb       	ldi	r30, 0xBC	; 188
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 6c       	ori	r24, 0xC0	; 192
 29c:	80 83       	st	Z, r24
 29e:	80 81       	ld	r24, Z
 2a0:	88 23       	and	r24, r24
 2a2:	ec f7       	brge	.-6      	; 0x29e <i2c_send+0xe>
 2a4:	80 91 b9 00 	lds	r24, 0x00B9
 2a8:	88 7f       	andi	r24, 0xF8	; 248
 2aa:	88 3b       	cpi	r24, 0xB8	; 184
 2ac:	a1 f0       	breq	.+40     	; 0x2d6 <i2c_send+0x46>
 2ae:	84 e9       	ldi	r24, 0x94	; 148
 2b0:	80 93 bc 00 	sts	0x00BC, r24
 2b4:	20 91 10 01 	lds	r18, 0x0110
 2b8:	30 91 11 01 	lds	r19, 0x0111
 2bc:	80 91 0e 01 	lds	r24, 0x010E
 2c0:	90 91 0f 01 	lds	r25, 0x010F
 2c4:	28 17       	cp	r18, r24
 2c6:	39 07       	cpc	r19, r25
 2c8:	34 f0       	brlt	.+12     	; 0x2d6 <i2c_send+0x46>
 2ca:	82 e6       	ldi	r24, 0x62	; 98
 2cc:	8a 95       	dec	r24
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <i2c_send+0x3c>
 2d0:	00 00       	nop
 2d2:	46 9a       	sbi	0x08, 6	; 8
 2d4:	46 98       	cbi	0x08, 6	; 8
 2d6:	08 95       	ret

000002d8 <i2c_recive>:
 2d8:	80 91 b9 00 	lds	r24, 0x00B9
 2dc:	88 7f       	andi	r24, 0xF8	; 248
 2de:	80 38       	cpi	r24, 0x80	; 128
 2e0:	41 f4       	brne	.+16     	; 0x2f2 <i2c_recive+0x1a>
 2e2:	ec eb       	ldi	r30, 0xBC	; 188
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 6c       	ori	r24, 0xC0	; 192
 2ea:	80 83       	st	Z, r24
 2ec:	80 91 bb 00 	lds	r24, 0x00BB
 2f0:	08 95       	ret
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	08 95       	ret

000002f6 <incomingData>:
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	80 91 b9 00 	lds	r24, 0x00B9
 2fe:	88 7f       	andi	r24, 0xF8	; 248
 300:	80 36       	cpi	r24, 0x60	; 96
 302:	61 f5       	brne	.+88     	; 0x35c <incomingData+0x66>
 304:	c0 91 0c 01 	lds	r28, 0x010C
 308:	d0 91 0d 01 	lds	r29, 0x010D
 30c:	e5 df       	rcall	.-54     	; 0x2d8 <i2c_recive>
 30e:	ce 5c       	subi	r28, 0xCE	; 206
 310:	de 4f       	sbci	r29, 0xFE	; 254
 312:	88 83       	st	Y, r24
 314:	80 91 32 01 	lds	r24, 0x0132
 318:	82 95       	swap	r24
 31a:	8f 70       	andi	r24, 0x0F	; 15
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	20 91 0c 01 	lds	r18, 0x010C
 322:	30 91 0d 01 	lds	r19, 0x010D
 326:	82 17       	cp	r24, r18
 328:	93 07       	cpc	r25, r19
 32a:	41 f4       	brne	.+16     	; 0x33c <incomingData+0x46>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 0b 01 	sts	0x010B, r24
 332:	ec eb       	ldi	r30, 0xBC	; 188
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	8f 77       	andi	r24, 0x7F	; 127
 33a:	80 83       	st	Z, r24
 33c:	80 91 0c 01 	lds	r24, 0x010C
 340:	90 91 0d 01 	lds	r25, 0x010D
 344:	9c 01       	movw	r18, r24
 346:	2f 5f       	subi	r18, 0xFF	; 255
 348:	3f 4f       	sbci	r19, 0xFF	; 255
 34a:	30 93 0d 01 	sts	0x010D, r19
 34e:	20 93 0c 01 	sts	0x010C, r18
 352:	fc 01       	movw	r30, r24
 354:	ee 5c       	subi	r30, 0xCE	; 206
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	80 81       	ld	r24, Z
 35a:	21 c0       	rjmp	.+66     	; 0x39e <incomingData+0xa8>
 35c:	80 91 b9 00 	lds	r24, 0x00B9
 360:	88 7f       	andi	r24, 0xF8	; 248
 362:	88 3a       	cpi	r24, 0xA8	; 168
 364:	a1 f4       	brne	.+40     	; 0x38e <incomingData+0x98>
 366:	80 91 0e 01 	lds	r24, 0x010E
 36a:	90 91 0f 01 	lds	r25, 0x010F
 36e:	9c 01       	movw	r18, r24
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	30 93 0f 01 	sts	0x010F, r19
 378:	20 93 0e 01 	sts	0x010E, r18
 37c:	fc 01       	movw	r30, r24
 37e:	ef 5b       	subi	r30, 0xBF	; 191
 380:	fe 4f       	sbci	r31, 0xFE	; 254
 382:	60 81       	ld	r22, Z
 384:	80 91 50 01 	lds	r24, 0x0150
 388:	83 df       	rcall	.-250    	; 0x290 <i2c_send>
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 c0       	rjmp	.+16     	; 0x39e <incomingData+0xa8>
 38e:	80 91 b9 00 	lds	r24, 0x00B9
 392:	88 7f       	andi	r24, 0xF8	; 248
 394:	80 38       	cpi	r24, 0x80	; 128
 396:	11 f4       	brne	.+4      	; 0x39c <incomingData+0xa6>
 398:	9f df       	rcall	.-194    	; 0x2d8 <i2c_recive>
 39a:	01 c0       	rjmp	.+2      	; 0x39e <incomingData+0xa8>
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	08 95       	ret

000003a4 <__vector_26>:
 3a4:	1f 92       	push	r1
 3a6:	0f 92       	push	r0
 3a8:	0f b6       	in	r0, 0x3f	; 63
 3aa:	0f 92       	push	r0
 3ac:	11 24       	eor	r1, r1
 3ae:	0b b6       	in	r0, 0x3b	; 59
 3b0:	0f 92       	push	r0
 3b2:	2f 93       	push	r18
 3b4:	3f 93       	push	r19
 3b6:	4f 93       	push	r20
 3b8:	5f 93       	push	r21
 3ba:	6f 93       	push	r22
 3bc:	7f 93       	push	r23
 3be:	8f 93       	push	r24
 3c0:	9f 93       	push	r25
 3c2:	af 93       	push	r26
 3c4:	bf 93       	push	r27
 3c6:	ef 93       	push	r30
 3c8:	ff 93       	push	r31
 3ca:	95 df       	rcall	.-214    	; 0x2f6 <incomingData>
 3cc:	85 ec       	ldi	r24, 0xC5	; 197
 3ce:	80 93 bc 00 	sts	0x00BC, r24
 3d2:	ff 91       	pop	r31
 3d4:	ef 91       	pop	r30
 3d6:	bf 91       	pop	r27
 3d8:	af 91       	pop	r26
 3da:	9f 91       	pop	r25
 3dc:	8f 91       	pop	r24
 3de:	7f 91       	pop	r23
 3e0:	6f 91       	pop	r22
 3e2:	5f 91       	pop	r21
 3e4:	4f 91       	pop	r20
 3e6:	3f 91       	pop	r19
 3e8:	2f 91       	pop	r18
 3ea:	0f 90       	pop	r0
 3ec:	0b be       	out	0x3b, r0	; 59
 3ee:	0f 90       	pop	r0
 3f0:	0f be       	out	0x3f, r0	; 63
 3f2:	0f 90       	pop	r0
 3f4:	1f 90       	pop	r1
 3f6:	18 95       	reti

000003f8 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	72 ec       	ldi	r23, 0xC2	; 194
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	79 de       	rcall	.-782    	; 0xf4 <bluetooth_setup>
	lcd_setup();
 402:	04 df       	rcall	.-504    	; 0x20c <lcd_setup>
	i2c_setup(0x02);
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	1e df       	rcall	.-452    	; 0x244 <i2c_setup>
	sei(); // Enable interrupt
 408:	78 94       	sei
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	99 e5       	ldi	r25, 0x59	; 89
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <initialize+0x18>
 418:	00 c0       	rjmp	.+0      	; 0x41a <initialize+0x22>
 41a:	00 00       	nop
 41c:	08 95       	ret

0000041e <run>:
	_delay_ms(2000);
}

void run(void){
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	00 d0       	rcall	.+0      	; 0x424 <run+0x6>
 424:	00 d0       	rcall	.+0      	; 0x426 <run+0x8>
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
	byte data[4] = {0x3A, 0x0f, 0x12, 0x13};
 42a:	8a e3       	ldi	r24, 0x3A	; 58
 42c:	89 83       	std	Y+1, r24	; 0x01
 42e:	8f e0       	ldi	r24, 0x0F	; 15
 430:	8a 83       	std	Y+2, r24	; 0x02
 432:	82 e1       	ldi	r24, 0x12	; 18
 434:	8b 83       	std	Y+3, r24	; 0x03
 436:	83 e1       	ldi	r24, 0x13	; 19
 438:	8c 83       	std	Y+4, r24	; 0x04
		
	while(true)	{
		bluetooth_handle_data();
 43a:	6a de       	rcall	.-812    	; 0x110 <bluetooth_handle_data>
 43c:	2f ef       	ldi	r18, 0xFF	; 255
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	9c e2       	ldi	r25, 0x2C	; 44
 442:	21 50       	subi	r18, 0x01	; 1
 444:	80 40       	sbci	r24, 0x00	; 0
 446:	90 40       	sbci	r25, 0x00	; 0
 448:	e1 f7       	brne	.-8      	; 0x442 <run+0x24>
 44a:	00 c0       	rjmp	.+0      	; 0x44c <run+0x2e>
 44c:	00 00       	nop
		_delay_ms(1000);
		requestToSend(0x04, data);
 44e:	be 01       	movw	r22, r28
 450:	6f 5f       	subi	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	fd de       	rcall	.-518    	; 0x252 <requestToSend>
	}
 458:	f0 cf       	rjmp	.-32     	; 0x43a <run+0x1c>

0000045a <main>:

void run(void);
void initialize(void);

int main (void){
	board_init();
 45a:	36 de       	rcall	.-916    	; 0xc8 <board_init>
	initialize();
 45c:	cd df       	rcall	.-102    	; 0x3f8 <initialize>
	run();
 45e:	df df       	rcall	.-66     	; 0x41e <run>

00000460 <_exit>:
 460:	f8 94       	cli

00000462 <__stop_program>:
 462:	ff cf       	rjmp	.-2      	; 0x462 <__stop_program>
