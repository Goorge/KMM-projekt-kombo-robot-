
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800100  00800100  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000029c  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000155  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cb  00000000  00000000  000006e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0001168e  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  0001242e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00012547  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00000252  00000000  00000000  00012597  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	6b c0       	rjmp	.+214    	; 0x140 <__vector_26>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 30       	cpi	r26, 0x09	; 9
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	80 d0       	rcall	.+256    	; 0x1aa <main>
  aa:	81 c0       	rjmp	.+258    	; 0x1ae <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <i2c_setup>:
};

void requestToSend(byte adress, byte* data){
	dataToSend = data;
	reciverAdress = adress;
	bytesSent = 0;
  ae:	80 93 07 01 	sts	0x0107, r24
  b2:	80 93 ba 00 	sts	0x00BA, r24
  b6:	85 ec       	ldi	r24, 0xC5	; 197
  b8:	80 93 bc 00 	sts	0x00BC, r24
  bc:	08 95       	ret

000000be <i2c_send>:

	return 0x00;
}

void i2c_send(byte prossesor,byte data){
	TWDR = data;
  be:	60 93 bb 00 	sts	0x00BB, r22
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
  c2:	ec eb       	ldi	r30, 0xBC	; 188
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	88 23       	and	r24, r24
  ca:	ec f7       	brge	.-6      	; 0xc6 <i2c_send+0x8>
};
  cc:	08 95       	ret

000000ce <i2c_recive>:

byte i2c_recive(){
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
  ce:	ec eb       	ldi	r30, 0xBC	; 188
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	88 23       	and	r24, r24
  d6:	ec f7       	brge	.-6      	; 0xd2 <i2c_recive+0x4>
	if((TWSR & 0xF8) != TW_MT_SLA_ACK)
  d8:	80 91 b9 00 	lds	r24, 0x00B9
  dc:	88 7f       	andi	r24, 0xF8	; 248
  de:	88 31       	cpi	r24, 0x18	; 24
  e0:	19 f4       	brne	.+6      	; 0xe8 <i2c_recive+0x1a>
		return false;
	return TWDR;
  e2:	80 91 bb 00 	lds	r24, 0x00BB
  e6:	08 95       	ret
};

byte i2c_recive(){
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
	if((TWSR & 0xF8) != TW_MT_SLA_ACK)
		return false;
  e8:	80 e0       	ldi	r24, 0x00	; 0
	return TWDR;
  ea:	08 95       	ret

000000ec <incomingData>:
	bytesSent = 0;
}

byte incomingData(){
	int counter=0;
	TWAR = adress;
  ec:	80 91 07 01 	lds	r24, 0x0107
  f0:	80 93 ba 00 	sts	0x00BA, r24
	if((TWSR & 0xF8)==0x60)
  f4:	80 91 b9 00 	lds	r24, 0x00B9
  f8:	88 7f       	andi	r24, 0xF8	; 248
  fa:	80 36       	cpi	r24, 0x60	; 96
  fc:	c1 f4       	brne	.+48     	; 0x12e <incomingData+0x42>
	{
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
  fe:	20 91 04 01 	lds	r18, 0x0104
 102:	30 91 05 01 	lds	r19, 0x0105
 106:	80 91 00 01 	lds	r24, 0x0100
 10a:	90 91 01 01 	lds	r25, 0x0101
 10e:	ac 01       	movw	r20, r24
 110:	4f 5f       	subi	r20, 0xFF	; 255
 112:	5f 4f       	sbci	r21, 0xFF	; 255
 114:	50 93 01 01 	sts	0x0101, r21
 118:	40 93 00 01 	sts	0x0100, r20
 11c:	f9 01       	movw	r30, r18
 11e:	e8 0f       	add	r30, r24
 120:	f9 1f       	adc	r31, r25
 122:	60 81       	ld	r22, Z
 124:	80 91 08 01 	lds	r24, 0x0108
 128:	ca df       	rcall	.-108    	; 0xbe <i2c_send>
	else if((TWSR & 0xF8)==0xA8)// blir 0xF8
		{
			return i2c_recive();
		}

	return 0x00;
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	08 95       	ret
	TWAR = adress;
	if((TWSR & 0xF8)==0x60)
	{
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
	}
	else if((TWSR & 0xF8)==0xA8)// blir 0xF8
 12e:	80 91 b9 00 	lds	r24, 0x00B9
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 3a       	cpi	r24, 0xA8	; 168
 136:	11 f4       	brne	.+4      	; 0x13c <incomingData+0x50>
		{
			return i2c_recive();
 138:	ca cf       	rjmp	.-108    	; 0xce <i2c_recive>
 13a:	08 95       	ret
		}

	return 0x00;
 13c:	80 e0       	ldi	r24, 0x00	; 0
}
 13e:	08 95       	ret

00000140 <__vector_26>:

byte firstdata;
byte* extradata;
int datatoget=0;
bool data_recived=false; //flagga för om all data motagen
ISR(TWI_vect){
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	0b b6       	in	r0, 0x3b	; 59
 14c:	0f 92       	push	r0
 14e:	2f 93       	push	r18
 150:	3f 93       	push	r19
 152:	4f 93       	push	r20
 154:	5f 93       	push	r21
 156:	6f 93       	push	r22
 158:	7f 93       	push	r23
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
 15e:	af 93       	push	r26
 160:	bf 93       	push	r27
 162:	ef 93       	push	r30
 164:	ff 93       	push	r31

	firstdata=incomingData();
 166:	c2 df       	rcall	.-124    	; 0xec <incomingData>
 168:	80 93 06 01 	sts	0x0106, r24
		else
			data_recived=false;
	}
	*/
	
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0b be       	out	0x3b, r0	; 59
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <initialize>:
	run();
	/* Insert application code here, after the board has been initialized. */
}

void initialize(){
	i2c_setup(0x02);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	8c df       	rcall	.-232    	; 0xae <i2c_setup>
	sei();
 196:	78 94       	sei
 198:	08 95       	ret

0000019a <run>:

void run(){
	
	while(true)	{
		if(firstdata == 0x0f){
			DDRD = 1<<PD7;
 19a:	90 e8       	ldi	r25, 0x80	; 128
}

void run(){
	
	while(true)	{
		if(firstdata == 0x0f){
 19c:	80 91 06 01 	lds	r24, 0x0106
 1a0:	8f 30       	cpi	r24, 0x0F	; 15
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <run+0x6>
			DDRD = 1<<PD7;
 1a4:	9a b9       	out	0x0a, r25	; 10
			PORTD= 1<<PD7;
 1a6:	9b b9       	out	0x0b, r25	; 11
 1a8:	f9 cf       	rjmp	.-14     	; 0x19c <run+0x2>

000001aa <main>:
int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	//board_init();
	initialize();
 1aa:	f3 df       	rcall	.-26     	; 0x192 <initialize>
	run();
 1ac:	f6 df       	rcall	.-20     	; 0x19a <run>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
