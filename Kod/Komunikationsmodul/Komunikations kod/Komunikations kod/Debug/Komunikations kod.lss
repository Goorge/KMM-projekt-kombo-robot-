
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000005c4  00000658  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800124  00800124  0000067c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000135c  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088f  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b7b  00000000  00000000  00002467  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00003fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00012633  00000000  00000000  00004334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008bc  00000000  00000000  00016967  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00017223  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004e4e  00000000  00000000  0001737b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	d8 c0       	rjmp	.+432    	; 0x202 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	8d c1       	rjmp	.+794    	; 0x384 <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ec       	ldi	r30, 0xC4	; 196
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 37       	cpi	r26, 0x71	; 113
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7b d2       	rcall	.+1270   	; 0x5ba <main>
  c4:	7d c2       	rjmp	.+1274   	; 0x5c0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <usart_setup>:
	bluetooth_clear_to_send(); // Säg att du vill ha mer BT data
	return data_from_bt;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_handle_data>:

// Behandla bluetooth
void bluetooth_handle_data( void ){		
	// Hantera eventuell ny data ifrån BT
	if(newData == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 114:	80 91 2a 01 	lds	r24, 0x012A
 118:	88 23       	and	r24, r24
 11a:	81 f1       	breq	.+96     	; 0x17c <bluetooth_handle_data+0x68>
		byte data = dataFromBT; // Hämta ut data å sätt newData false
 11c:	20 91 28 01 	lds	r18, 0x0128
		newData = false;
 120:	10 92 2a 01 	sts	0x012A, r1
		
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 124:	80 91 02 01 	lds	r24, 0x0102
 128:	90 91 03 01 	lds	r25, 0x0103
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	61 f4       	brne	.+24     	; 0x148 <bluetooth_handle_data+0x34>
			number_of_bytes_from_bt = (data >> 4) & 0x0f; 
 130:	82 2f       	mov	r24, r18
 132:	82 95       	swap	r24
 134:	8f 70       	andi	r24, 0x0F	; 15
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 27 01 	sts	0x0127, r25
 13c:	80 93 26 01 	sts	0x0126, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 140:	90 93 03 01 	sts	0x0103, r25
 144:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt] = data;
 148:	80 91 02 01 	lds	r24, 0x0102
 14c:	90 91 03 01 	lds	r25, 0x0103
 150:	e0 91 26 01 	lds	r30, 0x0126
 154:	f0 91 27 01 	lds	r31, 0x0127
 158:	e8 1b       	sub	r30, r24
 15a:	f9 0b       	sbc	r31, r25
 15c:	ee 5b       	subi	r30, 0xBE	; 190
 15e:	fe 4f       	sbci	r31, 0xFE	; 254
 160:	20 83       	st	Z, r18
		bytes_left_from_bt--;
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	90 93 03 01 	sts	0x0103, r25
 168:	80 93 02 01 	sts	0x0102, r24
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	11 f0       	breq	.+4      	; 0x174 <bluetooth_handle_data+0x60>
			bluetooth_clear_to_send();
 170:	cf df       	rcall	.-98     	; 0x110 <bluetooth_clear_to_send>
 172:	04 c0       	rjmp	.+8      	; 0x17c <bluetooth_handle_data+0x68>
		else 
			new_data_bt = true; // Denna sändningen är klar och vi vill inte ha mer data förens den är behandlad
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 29 01 	sts	0x0129, r24
 17a:	04 c0       	rjmp	.+8      	; 0x184 <bluetooth_handle_data+0x70>
	} 

	// Om ny data, skicka vidare
	if(new_data_bt){ 
 17c:	80 91 29 01 	lds	r24, 0x0129
 180:	88 23       	and	r24, r24
 182:	39 f0       	breq	.+14     	; 0x192 <bluetooth_handle_data+0x7e>
		i2c_requestToSend(0x04, data_from_bt); // Begör att få skicka data
 184:	62 e4       	ldi	r22, 0x42	; 66
 186:	71 e0       	ldi	r23, 0x01	; 1
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	56 d0       	rcall	.+172    	; 0x238 <i2c_requestToSend>
		new_data_bt = false; // Sätt new_data till false så vi inte hoppar in här igen nästa gång.
 18c:	10 92 29 01 	sts	0x0129, r1
		bluetooth_clear_to_send(); 
 190:	bf df       	rcall	.-130    	; 0x110 <bluetooth_clear_to_send>
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1){ // Vi har tillåtelse att skicka data & data att skicka
 192:	4a 99       	sbic	0x09, 2	; 9
 194:	1b c0       	rjmp	.+54     	; 0x1cc <bluetooth_handle_data+0xb8>
 196:	80 91 00 01 	lds	r24, 0x0100
 19a:	90 91 01 01 	lds	r25, 0x0101
 19e:	8f 3f       	cpi	r24, 0xFF	; 255
 1a0:	3f ef       	ldi	r19, 0xFF	; 255
 1a2:	93 07       	cpc	r25, r19
 1a4:	99 f0       	breq	.+38     	; 0x1cc <bluetooth_handle_data+0xb8>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt]);
 1a6:	e0 91 24 01 	lds	r30, 0x0124
 1aa:	f0 91 25 01 	lds	r31, 0x0125
 1ae:	e8 1b       	sub	r30, r24
 1b0:	f9 0b       	sbc	r31, r25
 1b2:	ee 5c       	subi	r30, 0xCE	; 206
 1b4:	fe 4f       	sbci	r31, 0xFE	; 254
 1b6:	80 81       	ld	r24, Z
 1b8:	a3 df       	rcall	.-186    	; 0x100 <bluetooth_send_byte>
		bytes_left_to_bt--;
 1ba:	80 91 00 01 	lds	r24, 0x0100
 1be:	90 91 01 01 	lds	r25, 0x0101
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	90 93 01 01 	sts	0x0101, r25
 1c8:	80 93 00 01 	sts	0x0100, r24
 1cc:	08 95       	ret

000001ce <bluetooth_add_to_send_queue>:
	}
}

// Lägg in data i kö för att skicka över BT
bool bluetooth_add_to_send_queue(byte* data){;
	int nr_of_bytes = ((data[0] >> 4) & 0x0f);
 1ce:	fc 01       	movw	r30, r24
 1d0:	40 81       	ld	r20, Z
 1d2:	42 95       	swap	r20
 1d4:	4f 70       	andi	r20, 0x0F	; 15
 1d6:	50 e0       	ldi	r21, 0x00	; 0
	number_of_bytes_to_bt = nr_of_bytes;
 1d8:	50 93 25 01 	sts	0x0125, r21
 1dc:	40 93 24 01 	sts	0x0124, r20
	bytes_left_to_bt = nr_of_bytes;
 1e0:	50 93 01 01 	sts	0x0101, r21
 1e4:	40 93 00 01 	sts	0x0100, r20
 1e8:	a2 e3       	ldi	r26, 0x32	; 50
 1ea:	b1 e0       	ldi	r27, 0x01	; 1
 1ec:	20 e0       	ldi	r18, 0x00	; 0
 1ee:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i <= nr_of_bytes; i++)
		data_to_bt[i] = data[i];	// Lägg in en byte i taget för att se till så att vi är redo att skicka
 1f0:	81 91       	ld	r24, Z+
 1f2:	8d 93       	st	X+, r24
// Lägg in data i kö för att skicka över BT
bool bluetooth_add_to_send_queue(byte* data){;
	int nr_of_bytes = ((data[0] >> 4) & 0x0f);
	number_of_bytes_to_bt = nr_of_bytes;
	bytes_left_to_bt = nr_of_bytes;
	for(int i = 0; i <= nr_of_bytes; i++)
 1f4:	2f 5f       	subi	r18, 0xFF	; 255
 1f6:	3f 4f       	sbci	r19, 0xFF	; 255
 1f8:	42 17       	cp	r20, r18
 1fa:	53 07       	cpc	r21, r19
 1fc:	cc f7       	brge	.-14     	; 0x1f0 <bluetooth_add_to_send_queue+0x22>
		data_to_bt[i] = data[i];	// Lägg in en byte i taget för att se till så att vi är redo att skicka
	return true;
}
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	08 95       	ret

00000202 <__vector_20>:

//Hämtar datan
ISR ( USART0_RX_vect ){		//recieve complete // USART0_RX_vect
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
	PORTD |= (1 << RTS);	//Säg att du inte vill ha mer data atm
 20e:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 210:	80 91 c6 00 	lds	r24, 0x00C6
 214:	80 93 28 01 	sts	0x0128, r24
	newData = true;			// Tala om för main att vi har fått data
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	80 93 2a 01 	sts	0x012A, r24
 21e:	8f 91       	pop	r24
 220:	0f 90       	pop	r0
 222:	0f be       	out	0x3f, r0	; 63
 224:	0f 90       	pop	r0
 226:	1f 90       	pop	r1
 228:	18 95       	reti

0000022a <i2c_setup>:
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);// ettsätt acknowledge flaggan (och lite annat) 
}

// Initierar I2C. Adressen som skickas in här är vilken adress som kommer användas för att anropa denna processorn
void i2c_setup(byte adress_) {
	TWAR = adress_; // sätter adressen
 22a:	80 93 ba 00 	sts	0x00BA, r24
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 22e:	85 ec       	ldi	r24, 0xC5	; 197
 230:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 234:	3e 9a       	sbi	0x07, 6	; 7
 236:	08 95       	ret

00000238 <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 238:	fb 01       	movw	r30, r22
 23a:	20 81       	ld	r18, Z
 23c:	22 95       	swap	r18
 23e:	2f 70       	andi	r18, 0x0F	; 15
 240:	42 2f       	mov	r20, r18
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	50 93 31 01 	sts	0x0131, r21
 248:	40 93 30 01 	sts	0x0130, r20
 24c:	a1 e6       	ldi	r26, 0x61	; 97
 24e:	b1 e0       	ldi	r27, 0x01	; 1
 250:	9a 01       	movw	r18, r20
 252:	2f 5f       	subi	r18, 0xFF	; 255
 254:	3f 4f       	sbci	r19, 0xFF	; 255
 256:	62 0f       	add	r22, r18
 258:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 25a:	91 91       	ld	r25, Z+
 25c:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 25e:	e6 17       	cp	r30, r22
 260:	f7 07       	cpc	r31, r23
 262:	d9 f7       	brne	.-10     	; 0x25a <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 264:	80 93 70 01 	sts	0x0170, r24
	bytesSent = 0;
 268:	10 92 2f 01 	sts	0x012F, r1
 26c:	10 92 2e 01 	sts	0x012E, r1
	PORTC |= (1 << PC6); // Skicka avbrott till mastern om att du vill skicka data
 270:	46 9a       	sbi	0x08, 6	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	f6 e3       	ldi	r31, 0x36	; 54
 274:	fa 95       	dec	r31
 276:	f1 f7       	brne	.-4      	; 0x274 <i2c_requestToSend+0x3c>
 278:	00 00       	nop
	_delay_us(11);
	PORTC &= ~(1 << PC6); // Nolla avbrottspinnen så att vi i framtiden kan genera avbrott igen
 27a:	46 98       	cbi	0x08, 6	; 8
 27c:	08 95       	ret

0000027e <i2c_send>:
}


// Skickar en byte till processor med adressen prossesor.
void i2c_send(byte prossesor,byte data){
	TWDR = data;
 27e:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 282:	ec eb       	ldi	r30, 0xBC	; 188
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 6c       	ori	r24, 0xC0	; 192
 28a:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 28c:	80 81       	ld	r24, Z
 28e:	88 23       	and	r24, r24
 290:	ec f7       	brge	.-6      	; 0x28c <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 292:	80 91 b9 00 	lds	r24, 0x00B9
 296:	88 7f       	andi	r24, 0xF8	; 248
 298:	88 3b       	cpi	r24, 0xB8	; 184
 29a:	c1 f0       	breq	.+48     	; 0x2cc <i2c_send+0x4e>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 29c:	84 e9       	ldi	r24, 0x94	; 148
 29e:	80 93 bc 00 	sts	0x00BC, r24
		// om vi vill skicka fler bytes så skapar vi ett nytt avbrott hos mastern här.
		// Vi kommer då tillbaks hit om en liten stund och kan på så sätt skicka hela meddelanden. 
		if(bytes_to_send_i2c >= bytesSent){ 
 2a2:	20 91 30 01 	lds	r18, 0x0130
 2a6:	30 91 31 01 	lds	r19, 0x0131
 2aa:	80 91 2e 01 	lds	r24, 0x012E
 2ae:	90 91 2f 01 	lds	r25, 0x012F
 2b2:	28 17       	cp	r18, r24
 2b4:	39 07       	cpc	r19, r25
 2b6:	54 f0       	brlt	.+20     	; 0x2cc <i2c_send+0x4e>
 2b8:	82 e6       	ldi	r24, 0x62	; 98
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <i2c_send+0x3c>
 2be:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 2c0:	46 9a       	sbi	0x08, 6	; 8
 2c2:	86 e3       	ldi	r24, 0x36	; 54
 2c4:	8a 95       	dec	r24
 2c6:	f1 f7       	brne	.-4      	; 0x2c4 <i2c_send+0x46>
 2c8:	00 00       	nop
			_delay_us(11);
			PORTC &= ~(1 << PC6);
 2ca:	46 98       	cbi	0x08, 6	; 8
 2cc:	08 95       	ret

000002ce <i2c_recive>:
	}
}

// Tar emot en byte ifrån i2c
byte i2c_recive(void){
	TWCR |= (1<<TWEA) | (1<<TWINT);
 2ce:	ec eb       	ldi	r30, 0xBC	; 188
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	80 6c       	ori	r24, 0xC0	; 192
 2d6:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 2d8:	80 81       	ld	r24, Z
 2da:	88 23       	and	r24, r24
 2dc:	ec f7       	brge	.-6      	; 0x2d8 <i2c_recive+0xa>
	byte data = TWDR;
 2de:	80 91 bb 00 	lds	r24, 0x00BB
	return data;	
}
 2e2:	08 95       	ret

000002e4 <incomingData>:
	PORTC &= ~(1 << PC6); // Nolla avbrottspinnen så att vi i framtiden kan genera avbrott igen
}

//Om vi får vår adress kommer vi hit. 
//Vi kollar då upp om vi ska skicka eller ta emot data och utför enligt önskemål. 
byte incomingData(void){	
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // received data, acknowledge sent	
 2e8:	80 91 b9 00 	lds	r24, 0x00B9
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	80 36       	cpi	r24, 0x60	; 96
 2f0:	39 f5       	brne	.+78     	; 0x340 <incomingData+0x5c>
		i2c_data[bytefrom_i2c] = i2c_recive(); // Ta emot en byte data.
 2f2:	c0 91 2c 01 	lds	r28, 0x012C
 2f6:	d0 91 2d 01 	lds	r29, 0x012D
 2fa:	e9 df       	rcall	.-46     	; 0x2ce <i2c_recive>
 2fc:	ce 5a       	subi	r28, 0xAE	; 174
 2fe:	de 4f       	sbci	r29, 0xFE	; 254
 300:	88 83       	st	Y, r24
		if(bytefrom_i2c < ((i2c_data[0]>>4) &0x0f)){ // Om vi inte har tagit emot all data denna sändning gör vi oss klara för mer data
 302:	80 91 52 01 	lds	r24, 0x0152
 306:	82 95       	swap	r24
 308:	8f 70       	andi	r24, 0x0F	; 15
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	20 91 2c 01 	lds	r18, 0x012C
 310:	30 91 2d 01 	lds	r19, 0x012D
 314:	28 17       	cp	r18, r24
 316:	39 07       	cpc	r19, r25
 318:	34 f4       	brge	.+12     	; 0x326 <incomingData+0x42>
			TWCR &= ~(1 << TWINT);
 31a:	ec eb       	ldi	r30, 0xBC	; 188
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	8f 77       	andi	r24, 0x7F	; 127
 322:	80 83       	st	Z, r24
 324:	03 c0       	rjmp	.+6      	; 0x32c <incomingData+0x48>
		}
		else if((bytefrom_i2c) >= ((i2c_data[0]>>4)&0x0f)) // Annars sätter vi flaggan i2c_new_data till true och behandlar nästa gång i loopen.
			i2c_new_data = true;
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	80 93 2b 01 	sts	0x012B, r24
		bytefrom_i2c++;
 32c:	80 91 2c 01 	lds	r24, 0x012C
 330:	90 91 2d 01 	lds	r25, 0x012D
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	90 93 2d 01 	sts	0x012D, r25
 33a:	80 93 2c 01 	sts	0x012C, r24
 33e:	1e c0       	rjmp	.+60     	; 0x37c <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, acknowledge sent
 340:	80 91 b9 00 	lds	r24, 0x00B9
 344:	88 7f       	andi	r24, 0xF8	; 248
 346:	88 3a       	cpi	r24, 0xA8	; 168
 348:	99 f4       	brne	.+38     	; 0x370 <incomingData+0x8c>
		i2c_send(reciverAdress,dataToSend[bytesSent++]); // skicka en byte.
 34a:	80 91 2e 01 	lds	r24, 0x012E
 34e:	90 91 2f 01 	lds	r25, 0x012F
 352:	9c 01       	movw	r18, r24
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255
 358:	30 93 2f 01 	sts	0x012F, r19
 35c:	20 93 2e 01 	sts	0x012E, r18
 360:	fc 01       	movw	r30, r24
 362:	ef 59       	subi	r30, 0x9F	; 159
 364:	fe 4f       	sbci	r31, 0xFE	; 254
 366:	60 81       	ld	r22, Z
 368:	80 91 70 01 	lds	r24, 0x0170
 36c:	88 df       	rcall	.-240    	; 0x27e <i2c_send>
 36e:	06 c0       	rjmp	.+12     	; 0x37c <incomingData+0x98>
	}
	else if((TWSR & 0xF8)==0x80){// rep start, händer aldrig för stunden. 
 370:	80 91 b9 00 	lds	r24, 0x00B9
 374:	88 7f       	andi	r24, 0xF8	; 248
 376:	80 38       	cpi	r24, 0x80	; 128
 378:	09 f4       	brne	.+2      	; 0x37c <incomingData+0x98>
		i2c_recive();
 37a:	a9 df       	rcall	.-174    	; 0x2ce <i2c_recive>
	}
	return 0x00;
}
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <__vector_26>:
int bytefrom_i2c=0; //How many bytes are we going to receive? 
byte i2c_data[15]; // Here incoming data will e stored before we handle it.
bool i2c_new_data = false; // A variable that tells us if we have new data. 

//Avbrott som får om våran adress kommer från i2c.
ISR(TWI_vect){ 
 384:	1f 92       	push	r1
 386:	0f 92       	push	r0
 388:	0f b6       	in	r0, 0x3f	; 63
 38a:	0f 92       	push	r0
 38c:	11 24       	eor	r1, r1
 38e:	0b b6       	in	r0, 0x3b	; 59
 390:	0f 92       	push	r0
 392:	2f 93       	push	r18
 394:	3f 93       	push	r19
 396:	4f 93       	push	r20
 398:	5f 93       	push	r21
 39a:	6f 93       	push	r22
 39c:	7f 93       	push	r23
 39e:	8f 93       	push	r24
 3a0:	9f 93       	push	r25
 3a2:	af 93       	push	r26
 3a4:	bf 93       	push	r27
 3a6:	ef 93       	push	r30
 3a8:	ff 93       	push	r31
	incomingData();	
 3aa:	9c df       	rcall	.-200    	; 0x2e4 <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);// ettsätt acknowledge flaggan (och lite annat) 
 3ac:	85 ec       	ldi	r24, 0xC5	; 197
 3ae:	80 93 bc 00 	sts	0x00BC, r24
}
 3b2:	ff 91       	pop	r31
 3b4:	ef 91       	pop	r30
 3b6:	bf 91       	pop	r27
 3b8:	af 91       	pop	r26
 3ba:	9f 91       	pop	r25
 3bc:	8f 91       	pop	r24
 3be:	7f 91       	pop	r23
 3c0:	6f 91       	pop	r22
 3c2:	5f 91       	pop	r21
 3c4:	4f 91       	pop	r20
 3c6:	3f 91       	pop	r19
 3c8:	2f 91       	pop	r18
 3ca:	0f 90       	pop	r0
 3cc:	0b be       	out	0x3b, r0	; 59
 3ce:	0f 90       	pop	r0
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	0f 90       	pop	r0
 3d4:	1f 90       	pop	r1
 3d6:	18 95       	reti

000003d8 <i2c_handle_data>:
	return data;	
}

// Behandlar i2cmodulen, i detta fall så skickar vi bara vidare datan över bluetooth när vi har tagit emot ett meddelande.
void i2c_handle_data(void){
	if(i2c_new_data == true){
 3d8:	80 91 2b 01 	lds	r24, 0x012B
 3dc:	88 23       	and	r24, r24
 3de:	71 f0       	breq	.+28     	; 0x3fc <i2c_handle_data+0x24>
		bluetooth_add_to_send_queue(i2c_data);
 3e0:	82 e5       	ldi	r24, 0x52	; 82
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	f4 de       	rcall	.-536    	; 0x1ce <bluetooth_add_to_send_queue>
		i2c_new_data = false;
 3e6:	10 92 2b 01 	sts	0x012B, r1
		bytefrom_i2c = 0;
 3ea:	10 92 2d 01 	sts	0x012D, r1
 3ee:	10 92 2c 01 	sts	0x012C, r1
		TWCR &= ~(1 << TWINT); // Sist sätter vi avbrottsflaggan för att visa att vi är redo att ta emot mer data. 
 3f2:	ec eb       	ldi	r30, 0xBC	; 188
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	8f 77       	andi	r24, 0x7F	; 127
 3fa:	80 83       	st	Z, r24
 3fc:	08 95       	ret

000003fe <toggle_e>:
 3fe:	16 9a       	sbi	0x02, 6	; 2
 400:	00 c0       	rjmp	.+0      	; 0x402 <toggle_e+0x4>
 402:	16 98       	cbi	0x02, 6	; 2
 404:	08 95       	ret

00000406 <lcd_write>:
 406:	cf 93       	push	r28
 408:	df 93       	push	r29
 40a:	d8 2f       	mov	r29, r24
 40c:	66 23       	and	r22, r22
 40e:	11 f0       	breq	.+4      	; 0x414 <lcd_write+0xe>
 410:	14 9a       	sbi	0x02, 4	; 2
 412:	01 c0       	rjmp	.+2      	; 0x416 <lcd_write+0x10>
 414:	14 98       	cbi	0x02, 4	; 2
 416:	15 98       	cbi	0x02, 5	; 2
 418:	81 b1       	in	r24, 0x01	; 1
 41a:	8f 60       	ori	r24, 0x0F	; 15
 41c:	81 b9       	out	0x01, r24	; 1
 41e:	c2 b1       	in	r28, 0x02	; 2
 420:	c0 7f       	andi	r28, 0xF0	; 240
 422:	8d 2f       	mov	r24, r29
 424:	82 95       	swap	r24
 426:	8f 70       	andi	r24, 0x0F	; 15
 428:	8c 2b       	or	r24, r28
 42a:	82 b9       	out	0x02, r24	; 2
 42c:	e8 df       	rcall	.-48     	; 0x3fe <toggle_e>
 42e:	df 70       	andi	r29, 0x0F	; 15
 430:	dc 2b       	or	r29, r28
 432:	d2 b9       	out	0x02, r29	; 2
 434:	e4 df       	rcall	.-56     	; 0x3fe <toggle_e>
 436:	cf 60       	ori	r28, 0x0F	; 15
 438:	c2 b9       	out	0x02, r28	; 2
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <lcd_read>:
 440:	88 23       	and	r24, r24
 442:	11 f0       	breq	.+4      	; 0x448 <lcd_read+0x8>
 444:	14 9a       	sbi	0x02, 4	; 2
 446:	01 c0       	rjmp	.+2      	; 0x44a <lcd_read+0xa>
 448:	14 98       	cbi	0x02, 4	; 2
 44a:	15 9a       	sbi	0x02, 5	; 2
 44c:	81 b1       	in	r24, 0x01	; 1
 44e:	80 7f       	andi	r24, 0xF0	; 240
 450:	81 b9       	out	0x01, r24	; 1
 452:	16 9a       	sbi	0x02, 6	; 2
 454:	00 c0       	rjmp	.+0      	; 0x456 <lcd_read+0x16>
 456:	20 b1       	in	r18, 0x00	; 0
 458:	16 98       	cbi	0x02, 6	; 2
 45a:	00 c0       	rjmp	.+0      	; 0x45c <lcd_read+0x1c>
 45c:	16 9a       	sbi	0x02, 6	; 2
 45e:	00 c0       	rjmp	.+0      	; 0x460 <lcd_read+0x20>
 460:	90 b1       	in	r25, 0x00	; 0
 462:	22 95       	swap	r18
 464:	20 7f       	andi	r18, 0xF0	; 240
 466:	89 2f       	mov	r24, r25
 468:	8f 70       	andi	r24, 0x0F	; 15
 46a:	16 98       	cbi	0x02, 6	; 2
 46c:	82 2b       	or	r24, r18
 46e:	08 95       	ret

00000470 <lcd_waitbusy>:
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	e6 df       	rcall	.-52     	; 0x440 <lcd_read>
 474:	88 23       	and	r24, r24
 476:	e4 f3       	brlt	.-8      	; 0x470 <lcd_waitbusy>
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	8a 95       	dec	r24
 47c:	f1 f7       	brne	.-4      	; 0x47a <lcd_waitbusy+0xa>
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	df cf       	rjmp	.-66     	; 0x440 <lcd_read>
 482:	08 95       	ret

00000484 <lcd_command>:
 484:	cf 93       	push	r28
 486:	c8 2f       	mov	r28, r24
 488:	f3 df       	rcall	.-26     	; 0x470 <lcd_waitbusy>
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	8c 2f       	mov	r24, r28
 48e:	bb df       	rcall	.-138    	; 0x406 <lcd_write>
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <lcd_gotoxy>:
 494:	61 11       	cpse	r22, r1
 496:	03 c0       	rjmp	.+6      	; 0x49e <lcd_gotoxy+0xa>
 498:	80 58       	subi	r24, 0x80	; 128
 49a:	f4 cf       	rjmp	.-24     	; 0x484 <lcd_command>
 49c:	08 95       	ret
 49e:	80 54       	subi	r24, 0x40	; 64
 4a0:	f1 cf       	rjmp	.-30     	; 0x484 <lcd_command>
 4a2:	08 95       	ret

000004a4 <lcd_clrscr>:
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	ee df       	rcall	.-36     	; 0x484 <lcd_command>
 4a8:	89 ef       	ldi	r24, 0xF9	; 249
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	01 97       	sbiw	r24, 0x01	; 1
 4ae:	f1 f7       	brne	.-4      	; 0x4ac <lcd_clrscr+0x8>
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <lcd_clrscr+0xe>
 4b2:	00 00       	nop
 4b4:	08 95       	ret

000004b6 <lcd_putc>:
 4b6:	cf 93       	push	r28
 4b8:	c8 2f       	mov	r28, r24
 4ba:	da df       	rcall	.-76     	; 0x470 <lcd_waitbusy>
 4bc:	ca 30       	cpi	r28, 0x0A	; 10
 4be:	41 f4       	brne	.+16     	; 0x4d0 <lcd_putc+0x1a>
 4c0:	80 34       	cpi	r24, 0x40	; 64
 4c2:	10 f0       	brcs	.+4      	; 0x4c8 <lcd_putc+0x12>
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	01 c0       	rjmp	.+2      	; 0x4ca <lcd_putc+0x14>
 4c8:	80 e4       	ldi	r24, 0x40	; 64
 4ca:	80 58       	subi	r24, 0x80	; 128
 4cc:	db df       	rcall	.-74     	; 0x484 <lcd_command>
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <lcd_putc+0x20>
 4d0:	61 e0       	ldi	r22, 0x01	; 1
 4d2:	8c 2f       	mov	r24, r28
 4d4:	98 df       	rcall	.-208    	; 0x406 <lcd_write>
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <lcd_puts>:
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	ec 01       	movw	r28, r24
 4e0:	21 96       	adiw	r28, 0x01	; 1
 4e2:	fc 01       	movw	r30, r24
 4e4:	80 81       	ld	r24, Z
 4e6:	88 23       	and	r24, r24
 4e8:	21 f0       	breq	.+8      	; 0x4f2 <lcd_puts+0x18>
 4ea:	e5 df       	rcall	.-54     	; 0x4b6 <lcd_putc>
 4ec:	89 91       	ld	r24, Y+
 4ee:	81 11       	cpse	r24, r1
 4f0:	fc cf       	rjmp	.-8      	; 0x4ea <lcd_puts+0x10>
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <lcd_init>:
 4f8:	cf 93       	push	r28
 4fa:	c8 2f       	mov	r28, r24
 4fc:	91 b1       	in	r25, 0x01	; 1
 4fe:	9f 67       	ori	r25, 0x7F	; 127
 500:	91 b9       	out	0x01, r25	; 1
 502:	87 e8       	ldi	r24, 0x87	; 135
 504:	93 e1       	ldi	r25, 0x13	; 19
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	f1 f7       	brne	.-4      	; 0x506 <lcd_init+0xe>
 50a:	00 c0       	rjmp	.+0      	; 0x50c <lcd_init+0x14>
 50c:	00 00       	nop
 50e:	11 9a       	sbi	0x02, 1	; 2
 510:	10 9a       	sbi	0x02, 0	; 2
 512:	75 df       	rcall	.-278    	; 0x3fe <toggle_e>
 514:	8b ed       	ldi	r24, 0xDB	; 219
 516:	95 e0       	ldi	r25, 0x05	; 5
 518:	01 97       	sbiw	r24, 0x01	; 1
 51a:	f1 f7       	brne	.-4      	; 0x518 <lcd_init+0x20>
 51c:	00 c0       	rjmp	.+0      	; 0x51e <lcd_init+0x26>
 51e:	00 00       	nop
 520:	6e df       	rcall	.-292    	; 0x3fe <toggle_e>
 522:	97 e1       	ldi	r25, 0x17	; 23
 524:	9a 95       	dec	r25
 526:	f1 f7       	brne	.-4      	; 0x524 <lcd_init+0x2c>
 528:	00 00       	nop
 52a:	69 df       	rcall	.-302    	; 0x3fe <toggle_e>
 52c:	87 e1       	ldi	r24, 0x17	; 23
 52e:	8a 95       	dec	r24
 530:	f1 f7       	brne	.-4      	; 0x52e <lcd_init+0x36>
 532:	00 00       	nop
 534:	10 98       	cbi	0x02, 0	; 2
 536:	63 df       	rcall	.-314    	; 0x3fe <toggle_e>
 538:	97 e1       	ldi	r25, 0x17	; 23
 53a:	9a 95       	dec	r25
 53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_init+0x42>
 53e:	00 00       	nop
 540:	88 e2       	ldi	r24, 0x28	; 40
 542:	a0 df       	rcall	.-192    	; 0x484 <lcd_command>
 544:	88 e0       	ldi	r24, 0x08	; 8
 546:	9e df       	rcall	.-196    	; 0x484 <lcd_command>
 548:	ad df       	rcall	.-166    	; 0x4a4 <lcd_clrscr>
 54a:	86 e0       	ldi	r24, 0x06	; 6
 54c:	9b df       	rcall	.-202    	; 0x484 <lcd_command>
 54e:	8c 2f       	mov	r24, r28
 550:	99 df       	rcall	.-206    	; 0x484 <lcd_command>
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	72 ec       	ldi	r23, 0xC2	; 194
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	ca dd       	rcall	.-1132   	; 0xf4 <bluetooth_setup>
	lcd_init(LCD_DISP_ON); /* initialize lcd, display on, cursor on */
 560:	8c e0       	ldi	r24, 0x0C	; 12
 562:	ca df       	rcall	.-108    	; 0x4f8 <lcd_init>
	i2c_setup(0x02);
 564:	82 e0       	ldi	r24, 0x02	; 2
 566:	61 de       	rcall	.-830    	; 0x22a <i2c_setup>
	sei(); // Enable interrupt
 568:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 56a:	2f ef       	ldi	r18, 0xFF	; 255
 56c:	8f ef       	ldi	r24, 0xFF	; 255
 56e:	99 e5       	ldi	r25, 0x59	; 89
 570:	21 50       	subi	r18, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <initialize+0x1a>
 578:	00 c0       	rjmp	.+0      	; 0x57a <initialize+0x24>
 57a:	00 00       	nop
 57c:	08 95       	ret

0000057e <doLCD>:
		bluetooth_handle_data();
		i2c_handle_data();
	}
}

void doLCD(char* s1, char* s2){
 57e:	0f 93       	push	r16
 580:	1f 93       	push	r17
 582:	cf 93       	push	r28
 584:	df 93       	push	r29
 586:	8c 01       	movw	r16, r24
 588:	eb 01       	movw	r28, r22
	lcd_clrscr();             /* clear screen of lcd */
 58a:	8c df       	rcall	.-232    	; 0x4a4 <lcd_clrscr>
	lcd_gotoxy(0,0);              /* bring cursor to 0,0 */
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	80 e0       	ldi	r24, 0x00	; 0
 590:	81 df       	rcall	.-254    	; 0x494 <lcd_gotoxy>
	lcd_puts(s1);        /* type something random */
 592:	c8 01       	movw	r24, r16
 594:	a2 df       	rcall	.-188    	; 0x4da <lcd_puts>
	lcd_gotoxy(0,1);          /* go to 0nd col, 1nd row (or 1, 2 depending on how you count)*/
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	80 e0       	ldi	r24, 0x00	; 0
 59a:	7c df       	rcall	.-264    	; 0x494 <lcd_gotoxy>
	lcd_puts(s2);  /* type something random */
 59c:	ce 01       	movw	r24, r28
 59e:	9d df       	rcall	.-198    	; 0x4da <lcd_puts>
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	08 95       	ret

000005aa <run>:
	_delay_ms(2000);
}
char data[15];

void run(void){	
	doLCD("ProcessorKlubben" , "Kombo-Monstret");
 5aa:	64 e0       	ldi	r22, 0x04	; 4
 5ac:	71 e0       	ldi	r23, 0x01	; 1
 5ae:	83 e1       	ldi	r24, 0x13	; 19
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	e5 df       	rcall	.-54     	; 0x57e <doLCD>
	while(true)	{
		//i2c_requestToSend(0x04,data);
		bluetooth_handle_data();
 5b4:	af dd       	rcall	.-1186   	; 0x114 <bluetooth_handle_data>
		i2c_handle_data();
 5b6:	10 df       	rcall	.-480    	; 0x3d8 <i2c_handle_data>
	}
 5b8:	fd cf       	rjmp	.-6      	; 0x5b4 <run+0xa>

000005ba <main>:
void run(void);
void initialize(void);
void doLCD(char* s1, char* s2);

int main (void){
	board_init();
 5ba:	86 dd       	rcall	.-1268   	; 0xc8 <board_init>
	initialize();
 5bc:	cc df       	rcall	.-104    	; 0x556 <initialize>
	run();
 5be:	f5 df       	rcall	.-22     	; 0x5aa <run>

000005c0 <_exit>:
 5c0:	f8 94       	cli

000005c2 <__stop_program>:
 5c2:	ff cf       	rjmp	.-2      	; 0x5c2 <__stop_program>
