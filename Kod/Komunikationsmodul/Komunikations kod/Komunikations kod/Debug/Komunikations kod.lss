
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000061c  000006b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000061c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800122  00800122  000006d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf9  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056a  00000000  00000000  0000143d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014a8  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002e50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011d40  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cd  00000000  00000000  00014d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00015039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004688  00000000  00000000  00015141  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	81 c0       	rjmp	.+258    	; 0x154 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e1       	ldi	r30, 0x1C	; 28
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e2       	ldi	r26, 0x22	; 34
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 32       	cpi	r26, 0x23	; 35
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	20 d1       	rcall	.+576    	; 0x304 <main>
  c4:	a9 c2       	rjmp	.+1362   	; 0x618 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <usart_setup>:
//}

byte fetchNewData(void){
	newData = false;
	return dataFromBT;
}
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	bc 01       	movw	r22, r24
  d0:	88 ed       	ldi	r24, 0xD8	; 216
  d2:	80 93 c1 00 	sts	0x00C1, r24
  d6:	8e e0       	ldi	r24, 0x0E	; 14
  d8:	80 93 c2 00 	sts	0x00C2, r24
  dc:	cb 01       	movw	r24, r22
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	aa 1f       	adc	r26, r26
  e8:	bb 1f       	adc	r27, r27
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	aa 1f       	adc	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	bc 01       	movw	r22, r24
  f4:	cd 01       	movw	r24, r26
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	88 1f       	adc	r24, r24
  fc:	99 1f       	adc	r25, r25
  fe:	66 0f       	add	r22, r22
 100:	77 1f       	adc	r23, r23
 102:	88 1f       	adc	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	fa d1       	rcall	.+1012   	; 0x4fc <__floatunsisf>
 108:	9b 01       	movw	r18, r22
 10a:	ac 01       	movw	r20, r24
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	81 e6       	ldi	r24, 0x61	; 97
 112:	9b e4       	ldi	r25, 0x4B	; 75
 114:	5f d1       	rcall	.+702    	; 0x3d4 <__divsf3>
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	40 e8       	ldi	r20, 0x80	; 128
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	f5 d0       	rcall	.+490    	; 0x30a <__subsf3>
 120:	c1 d1       	rcall	.+898    	; 0x4a4 <__fixunssfsi>
 122:	07 2f       	mov	r16, r23
 124:	18 2f       	mov	r17, r24
 126:	29 2f       	mov	r18, r25
 128:	33 27       	eor	r19, r19
 12a:	00 93 c5 00 	sts	0x00C5, r16
 12e:	60 93 c4 00 	sts	0x00C4, r22
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	98 e0       	ldi	r25, 0x08	; 8
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <usart_setup+0x6e>
 140:	00 c0       	rjmp	.+0      	; 0x142 <usart_setup+0x78>
 142:	00 00       	nop
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <bluetooth_setup>:
 14a:	2a e0       	ldi	r18, 0x0A	; 10
 14c:	2a b9       	out	0x0a, r18	; 10
 14e:	cb 01       	movw	r24, r22
 150:	bc cf       	rjmp	.-136    	; 0xca <usart_setup>
 152:	08 95       	ret

00000154 <__vector_20>:

	 
//Hämtar datan
ISR ( USART0_RX_vect){ //recieve complete // USART0_RX_vect
 154:	1f 92       	push	r1
 156:	0f 92       	push	r0
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	0f 92       	push	r0
 15c:	11 24       	eor	r1, r1
 15e:	8f 93       	push	r24
	PORTB = 0xff;
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	85 b9       	out	0x05, r24	; 5
	newData = true;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 22 01 	sts	0x0122, r24
	dataFromBT = UDR0;		
 16a:	80 91 c6 00 	lds	r24, 0x00C6
 16e:	80 93 00 01 	sts	0x0100, r24
 172:	8f 91       	pop	r24
 174:	0f 90       	pop	r0
 176:	0f be       	out	0x3f, r0	; 63
 178:	0f 90       	pop	r0
 17a:	1f 90       	pop	r1
 17c:	18 95       	reti

0000017e <lcd_write_char>:
	PORTA |= (letter & (1 << 3));
	PORTA |= (letter & (1 << 2));
	PORTA |= (letter & (1 << 1));
	PORTA |= (letter & (1 << 0));
*/
	PORTA = letter;	// Lägg ín data på pinnarna in data
 17e:	82 b9       	out	0x02, r24	; 2
	PORTD &= ~(1 << E);	// Försäkring om att E är låg innan vi försöker skriva
 180:	5f 98       	cbi	0x0b, 7	; 11
	
	PORTD |= (1 << RS); // sätt RS
 182:	5e 9a       	sbi	0x0b, 6	; 11
	PORTD |= (1 << E); // Sätt Enable
 184:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	8a 95       	dec	r24
 18a:	f1 f7       	brne	.-4      	; 0x188 <lcd_write_char+0xa>
	
	_delay_us(1); //TSU2	// Vänta på att data ska stabiliseras
	PORTD &= ~(1 << E);
 18c:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 18e:	5e 98       	cbi	0x0b, 6	; 11
 190:	85 e0       	ldi	r24, 0x05	; 5
 192:	8a 95       	dec	r24
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_write_char+0x14>
 196:	08 95       	ret

00000198 <lcd_write_instruction>:
	_delay_us(1);
}

void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);
 198:	5f 98       	cbi	0x0b, 7	; 11
	PORTD &= ~(1 << RS);
 19a:	5e 98       	cbi	0x0b, 6	; 11
	PORTA |= (instruction & (1 << 2));
	PORTA |= (instruction & (1 << 1));
	PORTA |= (instruction & (1 << 0));
	*/
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 19c:	82 b9       	out	0x02, r24	; 2
 19e:	08 95       	ret

000001a0 <lcd_setup>:

bool directionLeft = true;

//LCD Setup, inits all the variables
void lcd_setup(void)	{
	DDRA = 0xFF;
 1a0:	8f ef       	ldi	r24, 0xFF	; 255
 1a2:	81 b9       	out	0x01, r24	; 1
	DDRD = (1 << E) | (1 << RS);
 1a4:	80 ec       	ldi	r24, 0xC0	; 192
 1a6:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	8f e7       	ldi	r24, 0x7F	; 127
 1ac:	94 e0       	ldi	r25, 0x04	; 4
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <lcd_setup+0xe>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_setup+0x18>
 1b8:	00 00       	nop
			
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	//Function reset
	lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  
 1ba:	80 e3       	ldi	r24, 0x30	; 48
 1bc:	ed df       	rcall	.-38     	; 0x198 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	86 e2       	ldi	r24, 0x26	; 38
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_setup+0x22>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <lcd_setup+0x28>
 1c8:	00 00       	nop
	_delay_us(80);
	//Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 1ca:	88 e3       	ldi	r24, 0x38	; 56
 1cc:	e5 df       	rcall	.-54     	; 0x198 <lcd_write_instruction>
 1ce:	86 e2       	ldi	r24, 0x26	; 38
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_setup+0x32>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_setup+0x38>
 1d8:	00 00       	nop
	_delay_us(80);
	//Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 1da:	8c e0       	ldi	r24, 0x0C	; 12
 1dc:	dd df       	rcall	.-70     	; 0x198 <lcd_write_instruction>
 1de:	86 e2       	ldi	r24, 0x26	; 38
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <lcd_setup+0x42>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <lcd_setup+0x48>
 1e8:	00 00       	nop
	_delay_us(80);
	//Display clear
	lcd_write_instruction(lcd_Clear);
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	d5 df       	rcall	.-86     	; 0x198 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ee:	89 e9       	ldi	r24, 0x99	; 153
 1f0:	99 e3       	ldi	r25, 0x39	; 57
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <lcd_setup+0x52>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <lcd_setup+0x58>
	_delay_ms(4);
	//Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 1f8:	86 e0       	ldi	r24, 0x06	; 6
 1fa:	ce df       	rcall	.-100    	; 0x198 <lcd_write_instruction>
 1fc:	86 e6       	ldi	r24, 0x66	; 102
 1fe:	9e e0       	ldi	r25, 0x0E	; 14
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_setup+0x60>
 204:	00 00       	nop
	_delay_ms(1);
	
	lcd_write_instruction(lcd_SetCursor);
 206:	80 e8       	ldi	r24, 0x80	; 128
 208:	c7 df       	rcall	.-114    	; 0x198 <lcd_write_instruction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20a:	86 e2       	ldi	r24, 0x26	; 38
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <lcd_setup+0x6e>
 212:	00 c0       	rjmp	.+0      	; 0x214 <lcd_setup+0x74>
 214:	00 00       	nop
 216:	08 95       	ret

00000218 <lcd_write_string>:
	
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
}

//Erases data on LCD and write new one.
void lcd_write_string(char string[2][16]){
 218:	ef 92       	push	r14
 21a:	ff 92       	push	r15
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	7c 01       	movw	r14, r24
	lcd_write_instruction(lcd_Clear);
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	b7 df       	rcall	.-146    	; 0x198 <lcd_write_instruction>
 22a:	86 e2       	ldi	r24, 0x26	; 38
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_write_string+0x16>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_write_string+0x1c>
 234:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
 236:	80 e8       	ldi	r24, 0x80	; 128
 238:	af df       	rcall	.-162    	; 0x198 <lcd_write_instruction>
 23a:	e6 e2       	ldi	r30, 0x26	; 38
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <lcd_write_string+0x26>
 242:	00 c0       	rjmp	.+0      	; 0x244 <lcd_write_string+0x2c>
 244:	00 00       	nop
 246:	87 01       	movw	r16, r14
 248:	e7 01       	movw	r28, r14
 24a:	60 96       	adiw	r28, 0x10	; 16
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 24c:	f8 01       	movw	r30, r16
 24e:	81 91       	ld	r24, Z+
 250:	8f 01       	movw	r16, r30
 252:	95 df       	rcall	.-214    	; 0x17e <lcd_write_char>
 254:	86 e2       	ldi	r24, 0x26	; 38
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_write_string+0x40>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_write_string+0x46>
 25e:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 260:	0c 17       	cp	r16, r28
 262:	1d 07       	cpc	r17, r29
 264:	99 f7       	brne	.-26     	; 0x24c <lcd_write_string+0x34>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 266:	80 ec       	ldi	r24, 0xC0	; 192
 268:	97 df       	rcall	.-210    	; 0x198 <lcd_write_instruction>
 26a:	e6 e2       	ldi	r30, 0x26	; 38
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	31 97       	sbiw	r30, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_write_string+0x56>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_write_string+0x5c>
 274:	00 00       	nop
 276:	87 01       	movw	r16, r14
 278:	00 5e       	subi	r16, 0xE0	; 224
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
			lcd_write_char(string[line][i]); 
 27c:	89 91       	ld	r24, Y+
 27e:	7f df       	rcall	.-258    	; 0x17e <lcd_write_char>
 280:	86 e2       	ldi	r24, 0x26	; 38
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_write_string+0x6c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_write_string+0x72>
 28a:	00 00       	nop
	_delay_us(80);
	lcd_write_instruction(lcd_SetCursor | lcd_LineOne);
	_delay_us(80);	// Behövs troligtvis inte då clear borde 0, om jag inte fattar databladet fel
	
	for(int line = 0; line < 2; line++){
		for(int i = 0; i < NELEMS(string[line]); i++){
 28c:	c0 17       	cp	r28, r16
 28e:	d1 07       	cpc	r29, r17
 290:	a9 f7       	brne	.-22     	; 0x27c <lcd_write_string+0x64>
			lcd_write_char(string[line][i]); 
			_delay_us(80);
		}
		lcd_write_instruction(lcd_SetCursor | lcd_LineTwo);
 292:	80 ec       	ldi	r24, 0xC0	; 192
 294:	81 df       	rcall	.-254    	; 0x198 <lcd_write_instruction>
 296:	e6 e2       	ldi	r30, 0x26	; 38
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	31 97       	sbiw	r30, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <lcd_write_string+0x82>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <lcd_write_string+0x88>
 2a0:	00 00       	nop
		_delay_us(80); 
	}
}
 2a2:	df 91       	pop	r29
 2a4:	cf 91       	pop	r28
 2a6:	1f 91       	pop	r17
 2a8:	0f 91       	pop	r16
 2aa:	ff 90       	pop	r15
 2ac:	ef 90       	pop	r14
 2ae:	08 95       	ret

000002b0 <initialize>:
	run();
}

void initialize(void){
	//i2c_setup(0x02);
	DDRB = 0xff;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	84 b9       	out	0x04, r24	; 4
	bluetooth_setup((long)115200);
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	72 ec       	ldi	r23, 0xC2	; 194
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	46 df       	rcall	.-372    	; 0x14a <bluetooth_setup>
	
	lcd_setup();
 2be:	70 df       	rcall	.-288    	; 0x1a0 <lcd_setup>
	
	sei();
 2c0:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c2:	2f ef       	ldi	r18, 0xFF	; 255
 2c4:	8f e7       	ldi	r24, 0x7F	; 127
 2c6:	94 e0       	ldi	r25, 0x04	; 4
 2c8:	21 50       	subi	r18, 0x01	; 1
 2ca:	80 40       	sbci	r24, 0x00	; 0
 2cc:	90 40       	sbci	r25, 0x00	; 0
 2ce:	e1 f7       	brne	.-8      	; 0x2c8 <initialize+0x18>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <initialize+0x22>
 2d2:	00 00       	nop
 2d4:	08 95       	ret

000002d6 <run>:
	_delay_ms(100);
}

void run(void){
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	a0 97       	sbiw	r28, 0x20	; 32
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	f8 94       	cli
 2e4:	de bf       	out	0x3e, r29	; 62
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	cd bf       	out	0x3d, r28	; 61
	char test[2][16] = {"test", "Mer Test"};
 2ea:	80 e2       	ldi	r24, 0x20	; 32
 2ec:	e1 e0       	ldi	r30, 0x01	; 1
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	de 01       	movw	r26, r28
 2f2:	11 96       	adiw	r26, 0x01	; 1
 2f4:	01 90       	ld	r0, Z+
 2f6:	0d 92       	st	X+, r0
 2f8:	8a 95       	dec	r24
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <run+0x1e>
	lcd_write_string(test);
 2fc:	ce 01       	movw	r24, r28
 2fe:	01 96       	adiw	r24, 0x01	; 1
 300:	8b df       	rcall	.-234    	; 0x218 <lcd_write_string>
		//bluetooth_send_char(0x04);
		
		//if udre0
		//while(!(UCSR0A & (1 << RXC0)));
		//PORTB = UDR0;
	}
 302:	ff cf       	rjmp	.-2      	; 0x302 <run+0x2c>

00000304 <main>:

byte a;

int main (void)
{
	board_init();
 304:	e1 de       	rcall	.-574    	; 0xc8 <board_init>
	initialize();
 306:	d4 df       	rcall	.-88     	; 0x2b0 <initialize>
	run();
 308:	e6 df       	rcall	.-52     	; 0x2d6 <run>

0000030a <__subsf3>:
 30a:	50 58       	subi	r21, 0x80	; 128

0000030c <__addsf3>:
 30c:	bb 27       	eor	r27, r27
 30e:	aa 27       	eor	r26, r26
 310:	0e d0       	rcall	.+28     	; 0x32e <__addsf3x>
 312:	48 c1       	rjmp	.+656    	; 0x5a4 <__fp_round>
 314:	39 d1       	rcall	.+626    	; 0x588 <__fp_pscA>
 316:	30 f0       	brcs	.+12     	; 0x324 <__addsf3+0x18>
 318:	3e d1       	rcall	.+636    	; 0x596 <__fp_pscB>
 31a:	20 f0       	brcs	.+8      	; 0x324 <__addsf3+0x18>
 31c:	31 f4       	brne	.+12     	; 0x32a <__addsf3+0x1e>
 31e:	9f 3f       	cpi	r25, 0xFF	; 255
 320:	11 f4       	brne	.+4      	; 0x326 <__addsf3+0x1a>
 322:	1e f4       	brtc	.+6      	; 0x32a <__addsf3+0x1e>
 324:	2e c1       	rjmp	.+604    	; 0x582 <__fp_nan>
 326:	0e f4       	brtc	.+2      	; 0x32a <__addsf3+0x1e>
 328:	e0 95       	com	r30
 32a:	e7 fb       	bst	r30, 7
 32c:	24 c1       	rjmp	.+584    	; 0x576 <__fp_inf>

0000032e <__addsf3x>:
 32e:	e9 2f       	mov	r30, r25
 330:	4a d1       	rcall	.+660    	; 0x5c6 <__fp_split3>
 332:	80 f3       	brcs	.-32     	; 0x314 <__addsf3+0x8>
 334:	ba 17       	cp	r27, r26
 336:	62 07       	cpc	r22, r18
 338:	73 07       	cpc	r23, r19
 33a:	84 07       	cpc	r24, r20
 33c:	95 07       	cpc	r25, r21
 33e:	18 f0       	brcs	.+6      	; 0x346 <__addsf3x+0x18>
 340:	71 f4       	brne	.+28     	; 0x35e <__addsf3x+0x30>
 342:	9e f5       	brtc	.+102    	; 0x3aa <__addsf3x+0x7c>
 344:	62 c1       	rjmp	.+708    	; 0x60a <__fp_zero>
 346:	0e f4       	brtc	.+2      	; 0x34a <__addsf3x+0x1c>
 348:	e0 95       	com	r30
 34a:	0b 2e       	mov	r0, r27
 34c:	ba 2f       	mov	r27, r26
 34e:	a0 2d       	mov	r26, r0
 350:	0b 01       	movw	r0, r22
 352:	b9 01       	movw	r22, r18
 354:	90 01       	movw	r18, r0
 356:	0c 01       	movw	r0, r24
 358:	ca 01       	movw	r24, r20
 35a:	a0 01       	movw	r20, r0
 35c:	11 24       	eor	r1, r1
 35e:	ff 27       	eor	r31, r31
 360:	59 1b       	sub	r21, r25
 362:	99 f0       	breq	.+38     	; 0x38a <__addsf3x+0x5c>
 364:	59 3f       	cpi	r21, 0xF9	; 249
 366:	50 f4       	brcc	.+20     	; 0x37c <__addsf3x+0x4e>
 368:	50 3e       	cpi	r21, 0xE0	; 224
 36a:	68 f1       	brcs	.+90     	; 0x3c6 <__addsf3x+0x98>
 36c:	1a 16       	cp	r1, r26
 36e:	f0 40       	sbci	r31, 0x00	; 0
 370:	a2 2f       	mov	r26, r18
 372:	23 2f       	mov	r18, r19
 374:	34 2f       	mov	r19, r20
 376:	44 27       	eor	r20, r20
 378:	58 5f       	subi	r21, 0xF8	; 248
 37a:	f3 cf       	rjmp	.-26     	; 0x362 <__addsf3x+0x34>
 37c:	46 95       	lsr	r20
 37e:	37 95       	ror	r19
 380:	27 95       	ror	r18
 382:	a7 95       	ror	r26
 384:	f0 40       	sbci	r31, 0x00	; 0
 386:	53 95       	inc	r21
 388:	c9 f7       	brne	.-14     	; 0x37c <__addsf3x+0x4e>
 38a:	7e f4       	brtc	.+30     	; 0x3aa <__addsf3x+0x7c>
 38c:	1f 16       	cp	r1, r31
 38e:	ba 0b       	sbc	r27, r26
 390:	62 0b       	sbc	r22, r18
 392:	73 0b       	sbc	r23, r19
 394:	84 0b       	sbc	r24, r20
 396:	ba f0       	brmi	.+46     	; 0x3c6 <__addsf3x+0x98>
 398:	91 50       	subi	r25, 0x01	; 1
 39a:	a1 f0       	breq	.+40     	; 0x3c4 <__addsf3x+0x96>
 39c:	ff 0f       	add	r31, r31
 39e:	bb 1f       	adc	r27, r27
 3a0:	66 1f       	adc	r22, r22
 3a2:	77 1f       	adc	r23, r23
 3a4:	88 1f       	adc	r24, r24
 3a6:	c2 f7       	brpl	.-16     	; 0x398 <__addsf3x+0x6a>
 3a8:	0e c0       	rjmp	.+28     	; 0x3c6 <__addsf3x+0x98>
 3aa:	ba 0f       	add	r27, r26
 3ac:	62 1f       	adc	r22, r18
 3ae:	73 1f       	adc	r23, r19
 3b0:	84 1f       	adc	r24, r20
 3b2:	48 f4       	brcc	.+18     	; 0x3c6 <__addsf3x+0x98>
 3b4:	87 95       	ror	r24
 3b6:	77 95       	ror	r23
 3b8:	67 95       	ror	r22
 3ba:	b7 95       	ror	r27
 3bc:	f7 95       	ror	r31
 3be:	9e 3f       	cpi	r25, 0xFE	; 254
 3c0:	08 f0       	brcs	.+2      	; 0x3c4 <__addsf3x+0x96>
 3c2:	b3 cf       	rjmp	.-154    	; 0x32a <__addsf3+0x1e>
 3c4:	93 95       	inc	r25
 3c6:	88 0f       	add	r24, r24
 3c8:	08 f0       	brcs	.+2      	; 0x3cc <__addsf3x+0x9e>
 3ca:	99 27       	eor	r25, r25
 3cc:	ee 0f       	add	r30, r30
 3ce:	97 95       	ror	r25
 3d0:	87 95       	ror	r24
 3d2:	08 95       	ret

000003d4 <__divsf3>:
 3d4:	0c d0       	rcall	.+24     	; 0x3ee <__divsf3x>
 3d6:	e6 c0       	rjmp	.+460    	; 0x5a4 <__fp_round>
 3d8:	de d0       	rcall	.+444    	; 0x596 <__fp_pscB>
 3da:	40 f0       	brcs	.+16     	; 0x3ec <__divsf3+0x18>
 3dc:	d5 d0       	rcall	.+426    	; 0x588 <__fp_pscA>
 3de:	30 f0       	brcs	.+12     	; 0x3ec <__divsf3+0x18>
 3e0:	21 f4       	brne	.+8      	; 0x3ea <__divsf3+0x16>
 3e2:	5f 3f       	cpi	r21, 0xFF	; 255
 3e4:	19 f0       	breq	.+6      	; 0x3ec <__divsf3+0x18>
 3e6:	c7 c0       	rjmp	.+398    	; 0x576 <__fp_inf>
 3e8:	51 11       	cpse	r21, r1
 3ea:	10 c1       	rjmp	.+544    	; 0x60c <__fp_szero>
 3ec:	ca c0       	rjmp	.+404    	; 0x582 <__fp_nan>

000003ee <__divsf3x>:
 3ee:	eb d0       	rcall	.+470    	; 0x5c6 <__fp_split3>
 3f0:	98 f3       	brcs	.-26     	; 0x3d8 <__divsf3+0x4>

000003f2 <__divsf3_pse>:
 3f2:	99 23       	and	r25, r25
 3f4:	c9 f3       	breq	.-14     	; 0x3e8 <__divsf3+0x14>
 3f6:	55 23       	and	r21, r21
 3f8:	b1 f3       	breq	.-20     	; 0x3e6 <__divsf3+0x12>
 3fa:	95 1b       	sub	r25, r21
 3fc:	55 0b       	sbc	r21, r21
 3fe:	bb 27       	eor	r27, r27
 400:	aa 27       	eor	r26, r26
 402:	62 17       	cp	r22, r18
 404:	73 07       	cpc	r23, r19
 406:	84 07       	cpc	r24, r20
 408:	38 f0       	brcs	.+14     	; 0x418 <__divsf3_pse+0x26>
 40a:	9f 5f       	subi	r25, 0xFF	; 255
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	22 0f       	add	r18, r18
 410:	33 1f       	adc	r19, r19
 412:	44 1f       	adc	r20, r20
 414:	aa 1f       	adc	r26, r26
 416:	a9 f3       	breq	.-22     	; 0x402 <__divsf3_pse+0x10>
 418:	33 d0       	rcall	.+102    	; 0x480 <__divsf3_pse+0x8e>
 41a:	0e 2e       	mov	r0, r30
 41c:	3a f0       	brmi	.+14     	; 0x42c <__divsf3_pse+0x3a>
 41e:	e0 e8       	ldi	r30, 0x80	; 128
 420:	30 d0       	rcall	.+96     	; 0x482 <__divsf3_pse+0x90>
 422:	91 50       	subi	r25, 0x01	; 1
 424:	50 40       	sbci	r21, 0x00	; 0
 426:	e6 95       	lsr	r30
 428:	00 1c       	adc	r0, r0
 42a:	ca f7       	brpl	.-14     	; 0x41e <__divsf3_pse+0x2c>
 42c:	29 d0       	rcall	.+82     	; 0x480 <__divsf3_pse+0x8e>
 42e:	fe 2f       	mov	r31, r30
 430:	27 d0       	rcall	.+78     	; 0x480 <__divsf3_pse+0x8e>
 432:	66 0f       	add	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	bb 1f       	adc	r27, r27
 43a:	26 17       	cp	r18, r22
 43c:	37 07       	cpc	r19, r23
 43e:	48 07       	cpc	r20, r24
 440:	ab 07       	cpc	r26, r27
 442:	b0 e8       	ldi	r27, 0x80	; 128
 444:	09 f0       	breq	.+2      	; 0x448 <__divsf3_pse+0x56>
 446:	bb 0b       	sbc	r27, r27
 448:	80 2d       	mov	r24, r0
 44a:	bf 01       	movw	r22, r30
 44c:	ff 27       	eor	r31, r31
 44e:	93 58       	subi	r25, 0x83	; 131
 450:	5f 4f       	sbci	r21, 0xFF	; 255
 452:	2a f0       	brmi	.+10     	; 0x45e <__divsf3_pse+0x6c>
 454:	9e 3f       	cpi	r25, 0xFE	; 254
 456:	51 05       	cpc	r21, r1
 458:	68 f0       	brcs	.+26     	; 0x474 <__divsf3_pse+0x82>
 45a:	8d c0       	rjmp	.+282    	; 0x576 <__fp_inf>
 45c:	d7 c0       	rjmp	.+430    	; 0x60c <__fp_szero>
 45e:	5f 3f       	cpi	r21, 0xFF	; 255
 460:	ec f3       	brlt	.-6      	; 0x45c <__divsf3_pse+0x6a>
 462:	98 3e       	cpi	r25, 0xE8	; 232
 464:	dc f3       	brlt	.-10     	; 0x45c <__divsf3_pse+0x6a>
 466:	86 95       	lsr	r24
 468:	77 95       	ror	r23
 46a:	67 95       	ror	r22
 46c:	b7 95       	ror	r27
 46e:	f7 95       	ror	r31
 470:	9f 5f       	subi	r25, 0xFF	; 255
 472:	c9 f7       	brne	.-14     	; 0x466 <__divsf3_pse+0x74>
 474:	88 0f       	add	r24, r24
 476:	91 1d       	adc	r25, r1
 478:	96 95       	lsr	r25
 47a:	87 95       	ror	r24
 47c:	97 f9       	bld	r25, 7
 47e:	08 95       	ret
 480:	e1 e0       	ldi	r30, 0x01	; 1
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	bb 1f       	adc	r27, r27
 48a:	62 17       	cp	r22, r18
 48c:	73 07       	cpc	r23, r19
 48e:	84 07       	cpc	r24, r20
 490:	ba 07       	cpc	r27, r26
 492:	20 f0       	brcs	.+8      	; 0x49c <__divsf3_pse+0xaa>
 494:	62 1b       	sub	r22, r18
 496:	73 0b       	sbc	r23, r19
 498:	84 0b       	sbc	r24, r20
 49a:	ba 0b       	sbc	r27, r26
 49c:	ee 1f       	adc	r30, r30
 49e:	88 f7       	brcc	.-30     	; 0x482 <__divsf3_pse+0x90>
 4a0:	e0 95       	com	r30
 4a2:	08 95       	ret

000004a4 <__fixunssfsi>:
 4a4:	98 d0       	rcall	.+304    	; 0x5d6 <__fp_splitA>
 4a6:	88 f0       	brcs	.+34     	; 0x4ca <__fixunssfsi+0x26>
 4a8:	9f 57       	subi	r25, 0x7F	; 127
 4aa:	90 f0       	brcs	.+36     	; 0x4d0 <__fixunssfsi+0x2c>
 4ac:	b9 2f       	mov	r27, r25
 4ae:	99 27       	eor	r25, r25
 4b0:	b7 51       	subi	r27, 0x17	; 23
 4b2:	a0 f0       	brcs	.+40     	; 0x4dc <__fixunssfsi+0x38>
 4b4:	d1 f0       	breq	.+52     	; 0x4ea <__fixunssfsi+0x46>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	88 1f       	adc	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	1a f0       	brmi	.+6      	; 0x4c6 <__fixunssfsi+0x22>
 4c0:	ba 95       	dec	r27
 4c2:	c9 f7       	brne	.-14     	; 0x4b6 <__fixunssfsi+0x12>
 4c4:	12 c0       	rjmp	.+36     	; 0x4ea <__fixunssfsi+0x46>
 4c6:	b1 30       	cpi	r27, 0x01	; 1
 4c8:	81 f0       	breq	.+32     	; 0x4ea <__fixunssfsi+0x46>
 4ca:	9f d0       	rcall	.+318    	; 0x60a <__fp_zero>
 4cc:	b1 e0       	ldi	r27, 0x01	; 1
 4ce:	08 95       	ret
 4d0:	9c c0       	rjmp	.+312    	; 0x60a <__fp_zero>
 4d2:	67 2f       	mov	r22, r23
 4d4:	78 2f       	mov	r23, r24
 4d6:	88 27       	eor	r24, r24
 4d8:	b8 5f       	subi	r27, 0xF8	; 248
 4da:	39 f0       	breq	.+14     	; 0x4ea <__fixunssfsi+0x46>
 4dc:	b9 3f       	cpi	r27, 0xF9	; 249
 4de:	cc f3       	brlt	.-14     	; 0x4d2 <__fixunssfsi+0x2e>
 4e0:	86 95       	lsr	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b3 95       	inc	r27
 4e8:	d9 f7       	brne	.-10     	; 0x4e0 <__fixunssfsi+0x3c>
 4ea:	3e f4       	brtc	.+14     	; 0x4fa <__fixunssfsi+0x56>
 4ec:	90 95       	com	r25
 4ee:	80 95       	com	r24
 4f0:	70 95       	com	r23
 4f2:	61 95       	neg	r22
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	08 95       	ret

000004fc <__floatunsisf>:
 4fc:	e8 94       	clt
 4fe:	09 c0       	rjmp	.+18     	; 0x512 <__floatsisf+0x12>

00000500 <__floatsisf>:
 500:	97 fb       	bst	r25, 7
 502:	3e f4       	brtc	.+14     	; 0x512 <__floatsisf+0x12>
 504:	90 95       	com	r25
 506:	80 95       	com	r24
 508:	70 95       	com	r23
 50a:	61 95       	neg	r22
 50c:	7f 4f       	sbci	r23, 0xFF	; 255
 50e:	8f 4f       	sbci	r24, 0xFF	; 255
 510:	9f 4f       	sbci	r25, 0xFF	; 255
 512:	99 23       	and	r25, r25
 514:	a9 f0       	breq	.+42     	; 0x540 <__floatsisf+0x40>
 516:	f9 2f       	mov	r31, r25
 518:	96 e9       	ldi	r25, 0x96	; 150
 51a:	bb 27       	eor	r27, r27
 51c:	93 95       	inc	r25
 51e:	f6 95       	lsr	r31
 520:	87 95       	ror	r24
 522:	77 95       	ror	r23
 524:	67 95       	ror	r22
 526:	b7 95       	ror	r27
 528:	f1 11       	cpse	r31, r1
 52a:	f8 cf       	rjmp	.-16     	; 0x51c <__floatsisf+0x1c>
 52c:	fa f4       	brpl	.+62     	; 0x56c <__floatsisf+0x6c>
 52e:	bb 0f       	add	r27, r27
 530:	11 f4       	brne	.+4      	; 0x536 <__floatsisf+0x36>
 532:	60 ff       	sbrs	r22, 0
 534:	1b c0       	rjmp	.+54     	; 0x56c <__floatsisf+0x6c>
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	8f 4f       	sbci	r24, 0xFF	; 255
 53c:	9f 4f       	sbci	r25, 0xFF	; 255
 53e:	16 c0       	rjmp	.+44     	; 0x56c <__floatsisf+0x6c>
 540:	88 23       	and	r24, r24
 542:	11 f0       	breq	.+4      	; 0x548 <__floatsisf+0x48>
 544:	96 e9       	ldi	r25, 0x96	; 150
 546:	11 c0       	rjmp	.+34     	; 0x56a <__floatsisf+0x6a>
 548:	77 23       	and	r23, r23
 54a:	21 f0       	breq	.+8      	; 0x554 <__floatsisf+0x54>
 54c:	9e e8       	ldi	r25, 0x8E	; 142
 54e:	87 2f       	mov	r24, r23
 550:	76 2f       	mov	r23, r22
 552:	05 c0       	rjmp	.+10     	; 0x55e <__floatsisf+0x5e>
 554:	66 23       	and	r22, r22
 556:	71 f0       	breq	.+28     	; 0x574 <__floatsisf+0x74>
 558:	96 e8       	ldi	r25, 0x86	; 134
 55a:	86 2f       	mov	r24, r22
 55c:	70 e0       	ldi	r23, 0x00	; 0
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	2a f0       	brmi	.+10     	; 0x56c <__floatsisf+0x6c>
 562:	9a 95       	dec	r25
 564:	66 0f       	add	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	da f7       	brpl	.-10     	; 0x562 <__floatsisf+0x62>
 56c:	88 0f       	add	r24, r24
 56e:	96 95       	lsr	r25
 570:	87 95       	ror	r24
 572:	97 f9       	bld	r25, 7
 574:	08 95       	ret

00000576 <__fp_inf>:
 576:	97 f9       	bld	r25, 7
 578:	9f 67       	ori	r25, 0x7F	; 127
 57a:	80 e8       	ldi	r24, 0x80	; 128
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	08 95       	ret

00000582 <__fp_nan>:
 582:	9f ef       	ldi	r25, 0xFF	; 255
 584:	80 ec       	ldi	r24, 0xC0	; 192
 586:	08 95       	ret

00000588 <__fp_pscA>:
 588:	00 24       	eor	r0, r0
 58a:	0a 94       	dec	r0
 58c:	16 16       	cp	r1, r22
 58e:	17 06       	cpc	r1, r23
 590:	18 06       	cpc	r1, r24
 592:	09 06       	cpc	r0, r25
 594:	08 95       	ret

00000596 <__fp_pscB>:
 596:	00 24       	eor	r0, r0
 598:	0a 94       	dec	r0
 59a:	12 16       	cp	r1, r18
 59c:	13 06       	cpc	r1, r19
 59e:	14 06       	cpc	r1, r20
 5a0:	05 06       	cpc	r0, r21
 5a2:	08 95       	ret

000005a4 <__fp_round>:
 5a4:	09 2e       	mov	r0, r25
 5a6:	03 94       	inc	r0
 5a8:	00 0c       	add	r0, r0
 5aa:	11 f4       	brne	.+4      	; 0x5b0 <__fp_round+0xc>
 5ac:	88 23       	and	r24, r24
 5ae:	52 f0       	brmi	.+20     	; 0x5c4 <__fp_round+0x20>
 5b0:	bb 0f       	add	r27, r27
 5b2:	40 f4       	brcc	.+16     	; 0x5c4 <__fp_round+0x20>
 5b4:	bf 2b       	or	r27, r31
 5b6:	11 f4       	brne	.+4      	; 0x5bc <__fp_round+0x18>
 5b8:	60 ff       	sbrs	r22, 0
 5ba:	04 c0       	rjmp	.+8      	; 0x5c4 <__fp_round+0x20>
 5bc:	6f 5f       	subi	r22, 0xFF	; 255
 5be:	7f 4f       	sbci	r23, 0xFF	; 255
 5c0:	8f 4f       	sbci	r24, 0xFF	; 255
 5c2:	9f 4f       	sbci	r25, 0xFF	; 255
 5c4:	08 95       	ret

000005c6 <__fp_split3>:
 5c6:	57 fd       	sbrc	r21, 7
 5c8:	90 58       	subi	r25, 0x80	; 128
 5ca:	44 0f       	add	r20, r20
 5cc:	55 1f       	adc	r21, r21
 5ce:	59 f0       	breq	.+22     	; 0x5e6 <__fp_splitA+0x10>
 5d0:	5f 3f       	cpi	r21, 0xFF	; 255
 5d2:	71 f0       	breq	.+28     	; 0x5f0 <__fp_splitA+0x1a>
 5d4:	47 95       	ror	r20

000005d6 <__fp_splitA>:
 5d6:	88 0f       	add	r24, r24
 5d8:	97 fb       	bst	r25, 7
 5da:	99 1f       	adc	r25, r25
 5dc:	61 f0       	breq	.+24     	; 0x5f6 <__fp_splitA+0x20>
 5de:	9f 3f       	cpi	r25, 0xFF	; 255
 5e0:	79 f0       	breq	.+30     	; 0x600 <__fp_splitA+0x2a>
 5e2:	87 95       	ror	r24
 5e4:	08 95       	ret
 5e6:	12 16       	cp	r1, r18
 5e8:	13 06       	cpc	r1, r19
 5ea:	14 06       	cpc	r1, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	f2 cf       	rjmp	.-28     	; 0x5d4 <__fp_split3+0xe>
 5f0:	46 95       	lsr	r20
 5f2:	f1 df       	rcall	.-30     	; 0x5d6 <__fp_splitA>
 5f4:	08 c0       	rjmp	.+16     	; 0x606 <__fp_splitA+0x30>
 5f6:	16 16       	cp	r1, r22
 5f8:	17 06       	cpc	r1, r23
 5fa:	18 06       	cpc	r1, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	f1 cf       	rjmp	.-30     	; 0x5e2 <__fp_splitA+0xc>
 600:	86 95       	lsr	r24
 602:	71 05       	cpc	r23, r1
 604:	61 05       	cpc	r22, r1
 606:	08 94       	sec
 608:	08 95       	ret

0000060a <__fp_zero>:
 60a:	e8 94       	clt

0000060c <__fp_szero>:
 60c:	bb 27       	eor	r27, r27
 60e:	66 27       	eor	r22, r22
 610:	77 27       	eor	r23, r23
 612:	cb 01       	movw	r24, r22
 614:	97 f9       	bld	r25, 7
 616:	08 95       	ret

00000618 <_exit>:
 618:	f8 94       	cli

0000061a <__stop_program>:
 61a:	ff cf       	rjmp	.-2      	; 0x61a <__stop_program>
