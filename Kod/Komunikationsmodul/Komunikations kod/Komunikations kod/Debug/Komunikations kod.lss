
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000560  000005f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000560  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800104  00800104  000005f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e60  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ff  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b7c  00000000  00000000  00001cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  0000387c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011ed9  00000000  00000000  00003b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000062f  00000000  00000000  000159d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00016008  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004960  00000000  00000000  000160f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	2e c1       	rjmp	.+604    	; 0x2ae <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	f1 c1       	rjmp	.+994    	; 0x44c <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e6       	ldi	r30, 0x60	; 96
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 35       	cpi	r26, 0x52	; 82
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	49 d2       	rcall	.+1170   	; 0x556 <main>
  c4:	4b c2       	rjmp	.+1174   	; 0x55c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <usart_setup>:
	//	data[i] = data_from_bt[i];
	return data_from_bt;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_add_to_send_queue>:
	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1) // Vi har tillåtelse att skicka data & data att skicka
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt--]);
}

bool bluetooth_add_to_send_queue(byte* data){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	int nr_of_bytes = (data[0] >> 4) & 0x0f;
 118:	fc 01       	movw	r30, r24
 11a:	40 81       	ld	r20, Z
 11c:	42 95       	swap	r20
 11e:	4f 70       	andi	r20, 0x0F	; 15
 120:	50 e0       	ldi	r21, 0x00	; 0
	if(number_of_bytes_to_bt + nr_of_bytes > 15)
 122:	c0 91 04 01 	lds	r28, 0x0104
 126:	d0 91 05 01 	lds	r29, 0x0105
 12a:	be 01       	movw	r22, r28
 12c:	64 0f       	add	r22, r20
 12e:	75 1f       	adc	r23, r21
 130:	60 31       	cpi	r22, 0x10	; 16
 132:	71 05       	cpc	r23, r1
 134:	04 f5       	brge	.+64     	; 0x176 <bluetooth_add_to_send_queue+0x62>
		return false;
	bytes_left_to_bt += nr_of_bytes;
 136:	20 91 00 01 	lds	r18, 0x0100
 13a:	30 91 01 01 	lds	r19, 0x0101
 13e:	42 0f       	add	r20, r18
 140:	53 1f       	adc	r21, r19
 142:	50 93 01 01 	sts	0x0101, r21
 146:	40 93 00 01 	sts	0x0100, r20
	for(int i = number_of_bytes_to_bt; i < nr_of_bytes + number_of_bytes_to_bt; i++)
 14a:	c6 17       	cp	r28, r22
 14c:	d7 07       	cpc	r29, r23
 14e:	6c f4       	brge	.+26     	; 0x16a <bluetooth_add_to_send_queue+0x56>
 150:	de 01       	movw	r26, r28
 152:	ad 5e       	subi	r26, 0xED	; 237
 154:	be 4f       	sbci	r27, 0xFE	; 254
 156:	9b 01       	movw	r18, r22
 158:	2c 1b       	sub	r18, r28
 15a:	3d 0b       	sbc	r19, r29
 15c:	28 0f       	add	r18, r24
 15e:	39 1f       	adc	r19, r25
		data_to_bt[i] = data[i - number_of_bytes_to_bt];
 160:	91 91       	ld	r25, Z+
 162:	9d 93       	st	X+, r25
bool bluetooth_add_to_send_queue(byte* data){
	int nr_of_bytes = (data[0] >> 4) & 0x0f;
	if(number_of_bytes_to_bt + nr_of_bytes > 15)
		return false;
	bytes_left_to_bt += nr_of_bytes;
	for(int i = number_of_bytes_to_bt; i < nr_of_bytes + number_of_bytes_to_bt; i++)
 164:	e2 17       	cp	r30, r18
 166:	f3 07       	cpc	r31, r19
 168:	d9 f7       	brne	.-10     	; 0x160 <bluetooth_add_to_send_queue+0x4c>
		data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt += nr_of_bytes;
 16a:	70 93 05 01 	sts	0x0105, r23
 16e:	60 93 04 01 	sts	0x0104, r22
	return true;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	01 c0       	rjmp	.+2      	; 0x178 <bluetooth_add_to_send_queue+0x64>
}

bool bluetooth_add_to_send_queue(byte* data){
	int nr_of_bytes = (data[0] >> 4) & 0x0f;
	if(number_of_bytes_to_bt + nr_of_bytes > 15)
		return false;
 176:	80 e0       	ldi	r24, 0x00	; 0
	bytes_left_to_bt += nr_of_bytes;
	for(int i = number_of_bytes_to_bt; i < nr_of_bytes + number_of_bytes_to_bt; i++)
		data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt += nr_of_bytes;
	return true;
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <bluetooth_handle_data>:

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }

// Behandla bluetooth
void bluetooth_handle_data( void ){		
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1) // Vi har tillåtelse att skicka data & data att skicka
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt--]);
}
 18e:	0d b7       	in	r16, 0x3d	; 61
 190:	1e b7       	in	r17, 0x3e	; 62
bool bluetooth_get_new_data(void){ return new_data_bt; }

// Behandla bluetooth
void bluetooth_handle_data( void ){		
	// Hantera eventuell ny data ifrån BT
	if(newData == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 192:	80 91 0a 01 	lds	r24, 0x010A
 196:	88 23       	and	r24, r24
 198:	89 f1       	breq	.+98     	; 0x1fc <bluetooth_handle_data+0x7e>
		byte data = dataFromBT; // Hämta ut data å sätt newData false
 19a:	40 91 08 01 	lds	r20, 0x0108
		newData = false;
 19e:	10 92 0a 01 	sts	0x010A, r1
		
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 1a2:	80 91 02 01 	lds	r24, 0x0102
 1a6:	90 91 03 01 	lds	r25, 0x0103
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	61 f4       	brne	.+24     	; 0x1c6 <bluetooth_handle_data+0x48>
			number_of_bytes_from_bt = (data >> 4) & 0x0f; 
 1ae:	84 2f       	mov	r24, r20
 1b0:	82 95       	swap	r24
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	90 93 07 01 	sts	0x0107, r25
 1ba:	80 93 06 01 	sts	0x0106, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 1be:	90 93 03 01 	sts	0x0103, r25
 1c2:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt--] = data;
 1c6:	e0 91 06 01 	lds	r30, 0x0106
 1ca:	f0 91 07 01 	lds	r31, 0x0107
 1ce:	20 91 02 01 	lds	r18, 0x0102
 1d2:	30 91 03 01 	lds	r19, 0x0103
 1d6:	c9 01       	movw	r24, r18
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	90 93 03 01 	sts	0x0103, r25
 1de:	80 93 02 01 	sts	0x0102, r24
 1e2:	e2 1b       	sub	r30, r18
 1e4:	f3 0b       	sbc	r31, r19
 1e6:	ed 5d       	subi	r30, 0xDD	; 221
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	40 83       	st	Z, r20
			
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	11 f0       	breq	.+4      	; 0x1f4 <bluetooth_handle_data+0x76>
			bluetooth_clear_to_send();
 1f0:	8f df       	rcall	.-226    	; 0x110 <bluetooth_clear_to_send>
 1f2:	04 c0       	rjmp	.+8      	; 0x1fc <bluetooth_handle_data+0x7e>
		else 
			new_data_bt = true; // Denna sändningen är klar och vi vill inte ha mer data förens den är behandlad
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 09 01 	sts	0x0109, r24
 1fa:	04 c0       	rjmp	.+8      	; 0x204 <bluetooth_handle_data+0x86>
	} 

	// Om ny data, skicka vidare
	if(new_data_bt){ //Här är lite fel data_from_bt funkar inte...
 1fc:	80 91 09 01 	lds	r24, 0x0109
 200:	88 23       	and	r24, r24
 202:	71 f1       	breq	.+92     	; 0x260 <bluetooth_handle_data+0xe2>
 204:	ed b6       	in	r14, 0x3d	; 61
 206:	fe b6       	in	r15, 0x3e	; 62
		int nr_of_bytes = ((data_from_bt[0] >> 4) & 0x0f);
 208:	20 91 23 01 	lds	r18, 0x0123
 20c:	22 95       	swap	r18
 20e:	2f 70       	andi	r18, 0x0F	; 15
		byte data[nr_of_bytes];
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	8d b7       	in	r24, 0x3d	; 61
 214:	9e b7       	in	r25, 0x3e	; 62
 216:	82 1b       	sub	r24, r18
 218:	93 0b       	sbc	r25, r19
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	f8 94       	cli
 21e:	9e bf       	out	0x3e, r25	; 62
 220:	0f be       	out	0x3f, r0	; 63
 222:	8d bf       	out	0x3d, r24	; 61
 224:	6d b7       	in	r22, 0x3d	; 61
 226:	7e b7       	in	r23, 0x3e	; 62
 228:	6f 5f       	subi	r22, 0xFF	; 255
 22a:	7f 4f       	sbci	r23, 0xFF	; 255
		for(int i = 0; i < nr_of_bytes; i++)
 22c:	12 16       	cp	r1, r18
 22e:	13 06       	cpc	r1, r19
 230:	54 f4       	brge	.+20     	; 0x246 <bluetooth_handle_data+0xc8>
 232:	a3 e2       	ldi	r26, 0x23	; 35
 234:	b1 e0       	ldi	r27, 0x01	; 1
 236:	fb 01       	movw	r30, r22
 238:	26 0f       	add	r18, r22
 23a:	37 1f       	adc	r19, r23
			data[i] = data_from_bt[i];
 23c:	8d 91       	ld	r24, X+
 23e:	81 93       	st	Z+, r24

	// Om ny data, skicka vidare
	if(new_data_bt){ //Här är lite fel data_from_bt funkar inte...
		int nr_of_bytes = ((data_from_bt[0] >> 4) & 0x0f);
		byte data[nr_of_bytes];
		for(int i = 0; i < nr_of_bytes; i++)
 240:	e2 17       	cp	r30, r18
 242:	f3 07       	cpc	r31, r19
 244:	d9 f7       	brne	.-10     	; 0x23c <bluetooth_handle_data+0xbe>
			data[i] = data_from_bt[i];
		i2c_requestToSend(0x04, data);
 246:	84 e0       	ldi	r24, 0x04	; 4
 248:	4d d0       	rcall	.+154    	; 0x2e4 <i2c_requestToSend>
		bluetooth_add_to_send_queue(data_from_bt); // Ta bort när den skickar över i2c. 
 24a:	83 e2       	ldi	r24, 0x23	; 35
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	62 df       	rcall	.-316    	; 0x114 <bluetooth_add_to_send_queue>
		new_data_bt = false;
 250:	10 92 09 01 	sts	0x0109, r1
		bluetooth_clear_to_send();
 254:	5d df       	rcall	.-326    	; 0x110 <bluetooth_clear_to_send>
 256:	0f b6       	in	r0, 0x3f	; 63
 258:	f8 94       	cli
 25a:	fe be       	out	0x3e, r15	; 62
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	ed be       	out	0x3d, r14	; 61
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1) // Vi har tillåtelse att skicka data & data att skicka
 260:	4a 99       	sbic	0x09, 2	; 9
 262:	19 c0       	rjmp	.+50     	; 0x296 <bluetooth_handle_data+0x118>
 264:	80 91 00 01 	lds	r24, 0x0100
 268:	90 91 01 01 	lds	r25, 0x0101
 26c:	8f 3f       	cpi	r24, 0xFF	; 255
 26e:	2f ef       	ldi	r18, 0xFF	; 255
 270:	92 07       	cpc	r25, r18
 272:	89 f0       	breq	.+34     	; 0x296 <bluetooth_handle_data+0x118>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt--]);
 274:	e0 91 04 01 	lds	r30, 0x0104
 278:	f0 91 05 01 	lds	r31, 0x0105
 27c:	9c 01       	movw	r18, r24
 27e:	21 50       	subi	r18, 0x01	; 1
 280:	31 09       	sbc	r19, r1
 282:	30 93 01 01 	sts	0x0101, r19
 286:	20 93 00 01 	sts	0x0100, r18
 28a:	e8 1b       	sub	r30, r24
 28c:	f9 0b       	sbc	r31, r25
 28e:	ed 5e       	subi	r30, 0xED	; 237
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	80 81       	ld	r24, Z
 294:	35 df       	rcall	.-406    	; 0x100 <bluetooth_send_byte>
}
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	1e bf       	out	0x3e, r17	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0d bf       	out	0x3d, r16	; 61
 2a0:	df 91       	pop	r29
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	ff 90       	pop	r15
 2aa:	ef 90       	pop	r14
 2ac:	08 95       	ret

000002ae <__vector_20>:
	number_of_bytes_to_bt += nr_of_bytes;
	return true;
}

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 2ba:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 2bc:	80 91 c6 00 	lds	r24, 0x00C6
 2c0:	80 93 08 01 	sts	0x0108, r24
	newData = true; // Tala om för main att vi har fått data
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 0a 01 	sts	0x010A, r24
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <i2c_setup>:
	incomingData();	
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
}

void i2c_setup(byte adress_) {
	TWAR = adress_;
 2d6:	80 93 ba 00 	sts	0x00BA, r24
	//TWSR = 0x00; // Ska nog inte vara med
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 2da:	85 ec       	ldi	r24, 0xC5	; 197
 2dc:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 2e0:	3e 9a       	sbi	0x07, 6	; 7
 2e2:	08 95       	ret

000002e4 <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 2e4:	fb 01       	movw	r30, r22
 2e6:	20 81       	ld	r18, Z
 2e8:	22 95       	swap	r18
 2ea:	2f 70       	andi	r18, 0x0F	; 15
 2ec:	42 2f       	mov	r20, r18
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	50 93 12 01 	sts	0x0112, r21
 2f4:	40 93 11 01 	sts	0x0111, r20
 2f8:	a2 e4       	ldi	r26, 0x42	; 66
 2fa:	b1 e0       	ldi	r27, 0x01	; 1
 2fc:	9a 01       	movw	r18, r20
 2fe:	2f 5f       	subi	r18, 0xFF	; 255
 300:	3f 4f       	sbci	r19, 0xFF	; 255
 302:	62 0f       	add	r22, r18
 304:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 306:	91 91       	ld	r25, Z+
 308:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 30a:	e6 17       	cp	r30, r22
 30c:	f7 07       	cpc	r31, r23
 30e:	d9 f7       	brne	.-10     	; 0x306 <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 310:	80 93 51 01 	sts	0x0151, r24
	bytesSent = 0;
 314:	10 92 10 01 	sts	0x0110, r1
 318:	10 92 0f 01 	sts	0x010F, r1
	PORTC |= (1 << PC6);
 31c:	46 9a       	sbi	0x08, 6	; 8
	PORTC &= ~(1 << PC6);
 31e:	46 98       	cbi	0x08, 6	; 8
 320:	08 95       	ret

00000322 <i2c_send>:
}



void i2c_send(byte prossesor,byte data){
	TWDR = data;
 322:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 326:	ec eb       	ldi	r30, 0xBC	; 188
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	80 6c       	ori	r24, 0xC0	; 192
 32e:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 330:	80 81       	ld	r24, Z
 332:	88 23       	and	r24, r24
 334:	ec f7       	brge	.-6      	; 0x330 <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 336:	80 91 b9 00 	lds	r24, 0x00B9
 33a:	88 7f       	andi	r24, 0xF8	; 248
 33c:	88 3b       	cpi	r24, 0xB8	; 184
 33e:	a1 f0       	breq	.+40     	; 0x368 <i2c_send+0x46>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 340:	84 e9       	ldi	r24, 0x94	; 148
 342:	80 93 bc 00 	sts	0x00BC, r24

		if(bytes_to_send_i2c >= bytesSent){
 346:	20 91 11 01 	lds	r18, 0x0111
 34a:	30 91 12 01 	lds	r19, 0x0112
 34e:	80 91 0f 01 	lds	r24, 0x010F
 352:	90 91 10 01 	lds	r25, 0x0110
 356:	28 17       	cp	r18, r24
 358:	39 07       	cpc	r19, r25
 35a:	34 f0       	brlt	.+12     	; 0x368 <i2c_send+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 35c:	82 e6       	ldi	r24, 0x62	; 98
 35e:	8a 95       	dec	r24
 360:	f1 f7       	brne	.-4      	; 0x35e <i2c_send+0x3c>
 362:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 364:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1 << PC6);
 366:	46 98       	cbi	0x08, 6	; 8
 368:	08 95       	ret

0000036a <i2c_recive>:
		return ;
	}
}

byte i2c_recive(void){
	if((TWSR & 0xF8)!=0x80)
 36a:	80 91 b9 00 	lds	r24, 0x00B9
 36e:	88 7f       	andi	r24, 0xF8	; 248
 370:	80 38       	cpi	r24, 0x80	; 128
 372:	41 f4       	brne	.+16     	; 0x384 <i2c_recive+0x1a>
		return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
 374:	ec eb       	ldi	r30, 0xBC	; 188
 376:	f0 e0       	ldi	r31, 0x00	; 0
 378:	80 81       	ld	r24, Z
 37a:	80 6c       	ori	r24, 0xC0	; 192
 37c:	80 83       	st	Z, r24
	return TWDR;	
 37e:	80 91 bb 00 	lds	r24, 0x00BB
 382:	08 95       	ret
	}
}

byte i2c_recive(void){
	if((TWSR & 0xF8)!=0x80)
		return false;
 384:	80 e0       	ldi	r24, 0x00	; 0
	TWCR |= (1<<TWEA) | (1<<TWINT);
	return TWDR;	
}
 386:	08 95       	ret

00000388 <incomingData>:
	PORTC |= (1 << PC6);
	PORTC &= ~(1 << PC6);
}


byte incomingData(void){	
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // rec data, ack sent	
 38c:	80 91 b9 00 	lds	r24, 0x00B9
 390:	88 7f       	andi	r24, 0xF8	; 248
 392:	80 36       	cpi	r24, 0x60	; 96
 394:	b9 f5       	brne	.+110    	; 0x404 <incomingData+0x7c>
		i2c_data[bytefrom_i2c] = i2c_recive();
 396:	c0 91 0d 01 	lds	r28, 0x010D
 39a:	d0 91 0e 01 	lds	r29, 0x010E
 39e:	e5 df       	rcall	.-54     	; 0x36a <i2c_recive>
 3a0:	cd 5c       	subi	r28, 0xCD	; 205
 3a2:	de 4f       	sbci	r29, 0xFE	; 254
 3a4:	88 83       	st	Y, r24
		if(bytefrom_i2c == ((i2c_data[0]>>4) &0x0f)){
 3a6:	80 91 33 01 	lds	r24, 0x0133
 3aa:	82 95       	swap	r24
 3ac:	8f 70       	andi	r24, 0x0F	; 15
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	20 91 0d 01 	lds	r18, 0x010D
 3b4:	30 91 0e 01 	lds	r19, 0x010E
 3b8:	82 17       	cp	r24, r18
 3ba:	93 07       	cpc	r25, r19
 3bc:	41 f4       	brne	.+16     	; 0x3ce <incomingData+0x46>
			newdata = true;
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	80 93 0c 01 	sts	0x010C, r24
			TWCR &= ~(1 << TWINT);
 3c4:	ec eb       	ldi	r30, 0xBC	; 188
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	8f 77       	andi	r24, 0x7F	; 127
 3cc:	80 83       	st	Z, r24
		}
		if((bytefrom_i2c+1) == ((i2c_data[0]>>4)&0x0f))
 3ce:	20 91 0d 01 	lds	r18, 0x010D
 3d2:	30 91 0e 01 	lds	r19, 0x010E
 3d6:	a9 01       	movw	r20, r18
 3d8:	4f 5f       	subi	r20, 0xFF	; 255
 3da:	5f 4f       	sbci	r21, 0xFF	; 255
 3dc:	80 91 33 01 	lds	r24, 0x0133
 3e0:	82 95       	swap	r24
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	48 17       	cp	r20, r24
 3e8:	59 07       	cpc	r21, r25
 3ea:	19 f4       	brne	.+6      	; 0x3f2 <incomingData+0x6a>
			i2c_new_data=true;
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	80 93 0b 01 	sts	0x010B, r24
		return i2c_data[bytefrom_i2c++];
 3f2:	50 93 0e 01 	sts	0x010E, r21
 3f6:	40 93 0d 01 	sts	0x010D, r20
 3fa:	f9 01       	movw	r30, r18
 3fc:	ed 5c       	subi	r30, 0xCD	; 205
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	80 81       	ld	r24, Z
 402:	21 c0       	rjmp	.+66     	; 0x446 <incomingData+0xbe>
		
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
 404:	80 91 b9 00 	lds	r24, 0x00B9
 408:	88 7f       	andi	r24, 0xF8	; 248
 40a:	88 3a       	cpi	r24, 0xA8	; 168
 40c:	a1 f4       	brne	.+40     	; 0x436 <incomingData+0xae>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 40e:	80 91 0f 01 	lds	r24, 0x010F
 412:	90 91 10 01 	lds	r25, 0x0110
 416:	9c 01       	movw	r18, r24
 418:	2f 5f       	subi	r18, 0xFF	; 255
 41a:	3f 4f       	sbci	r19, 0xFF	; 255
 41c:	30 93 10 01 	sts	0x0110, r19
 420:	20 93 0f 01 	sts	0x010F, r18
 424:	fc 01       	movw	r30, r24
 426:	ee 5b       	subi	r30, 0xBE	; 190
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	60 81       	ld	r22, Z
 42c:	80 91 51 01 	lds	r24, 0x0151
 430:	78 df       	rcall	.-272    	; 0x322 <i2c_send>
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
		return i2c_recive();
	}
	return 0x00;
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	08 c0       	rjmp	.+16     	; 0x446 <incomingData+0xbe>
		
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
 436:	80 91 b9 00 	lds	r24, 0x00B9
 43a:	88 7f       	andi	r24, 0xF8	; 248
 43c:	80 38       	cpi	r24, 0x80	; 128
 43e:	11 f4       	brne	.+4      	; 0x444 <incomingData+0xbc>
		return i2c_recive();
 440:	94 df       	rcall	.-216    	; 0x36a <i2c_recive>
 442:	01 c0       	rjmp	.+2      	; 0x446 <incomingData+0xbe>
	}
	return 0x00;
 444:	80 e0       	ldi	r24, 0x00	; 0
}
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <__vector_26>:
byte i2c_data[15];
bool newdata = false;
bool i2c_new_data = false;


ISR(TWI_vect){
 44c:	1f 92       	push	r1
 44e:	0f 92       	push	r0
 450:	0f b6       	in	r0, 0x3f	; 63
 452:	0f 92       	push	r0
 454:	11 24       	eor	r1, r1
 456:	0b b6       	in	r0, 0x3b	; 59
 458:	0f 92       	push	r0
 45a:	2f 93       	push	r18
 45c:	3f 93       	push	r19
 45e:	4f 93       	push	r20
 460:	5f 93       	push	r21
 462:	6f 93       	push	r22
 464:	7f 93       	push	r23
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	af 93       	push	r26
 46c:	bf 93       	push	r27
 46e:	ef 93       	push	r30
 470:	ff 93       	push	r31
	incomingData();	
 472:	8a df       	rcall	.-236    	; 0x388 <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
 474:	85 ec       	ldi	r24, 0xC5	; 197
 476:	80 93 bc 00 	sts	0x00BC, r24
}
 47a:	ff 91       	pop	r31
 47c:	ef 91       	pop	r30
 47e:	bf 91       	pop	r27
 480:	af 91       	pop	r26
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	7f 91       	pop	r23
 488:	6f 91       	pop	r22
 48a:	5f 91       	pop	r21
 48c:	4f 91       	pop	r20
 48e:	3f 91       	pop	r19
 490:	2f 91       	pop	r18
 492:	0f 90       	pop	r0
 494:	0b be       	out	0x3b, r0	; 59
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <i2c_handle_data>:
	TWCR |= (1<<TWEA) | (1<<TWINT);
	return TWDR;	
}

void i2c_handle_data(void){
	if(i2c_new_data==true)
 4a0:	80 91 0b 01 	lds	r24, 0x010B
 4a4:	88 23       	and	r24, r24
 4a6:	29 f0       	breq	.+10     	; 0x4b2 <i2c_handle_data+0x12>
	{
		bluetooth_add_to_send_queue(i2c_data);
 4a8:	83 e3       	ldi	r24, 0x33	; 51
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	33 de       	rcall	.-922    	; 0x114 <bluetooth_add_to_send_queue>
		i2c_new_data=false;
 4ae:	10 92 0b 01 	sts	0x010B, r1
 4b2:	08 95       	ret

000004b4 <lcd_write_instruction>:
	_delay_us(100); //TSU2	// Vänta på att data ska stabiliseras
}

// Writes instruction 
void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);// Se till att E är låg från början
 4b4:	5f 98       	cbi	0x0b, 7	; 11
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 4b6:	82 b9       	out	0x02, r24	; 2
	
	
	PORTD &= ~(1 << RS); // sätt RS
 4b8:	5e 98       	cbi	0x0b, 6	; 11
 4ba:	95 e0       	ldi	r25, 0x05	; 5
 4bc:	9a 95       	dec	r25
 4be:	f1 f7       	brne	.-4      	; 0x4bc <lcd_write_instruction+0x8>
	_delay_us(1); //TSU1
	PORTD |= (1 << E); // Sätt Enable
 4c0:	5f 9a       	sbi	0x0b, 7	; 11
 4c2:	95 e0       	ldi	r25, 0x05	; 5
 4c4:	9a 95       	dec	r25
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <lcd_write_instruction+0x10>
	_delay_us(1); // TW
	PORTD &= ~(1 << E);
 4c8:	5f 98       	cbi	0x0b, 7	; 11
 4ca:	95 e0       	ldi	r25, 0x05	; 5
 4cc:	9a 95       	dec	r25
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <lcd_write_instruction+0x18>
	_delay_us(1); // TH1
	PORTD &= ~(1 << RS); // Nolställ E och RS så att dom är noll vid nästa instruktion/charläsning	
 4d0:	5e 98       	cbi	0x0b, 6	; 11

	// Lägg in behövd delay ( 1.53 ms för clear och home & 39 us för de andra )
	if(instruction == lcd_Home || instruction == lcd_Clear)
 4d2:	81 50       	subi	r24, 0x01	; 1
 4d4:	82 30       	cpi	r24, 0x02	; 2
 4d6:	28 f4       	brcc	.+10     	; 0x4e2 <lcd_write_instruction+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d8:	83 e3       	ldi	r24, 0x33	; 51
 4da:	9b e2       	ldi	r25, 0x2B	; 43
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	f1 f7       	brne	.-4      	; 0x4dc <lcd_write_instruction+0x28>
 4e0:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e2:	80 e7       	ldi	r24, 0x70	; 112
 4e4:	91 e0       	ldi	r25, 0x01	; 1
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <lcd_write_instruction+0x32>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <lcd_write_instruction+0x38>
 4ec:	08 95       	ret

000004ee <lcd_setup>:
#include "LCD.h"
#include  "bluetooth.h"

//LCD Setup, inits all the variables
void lcd_setup(void){
	DDRA = 0xFF;
 4ee:	8f ef       	ldi	r24, 0xFF	; 255
 4f0:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1 << E) | (1 << RS);
 4f2:	8a b1       	in	r24, 0x0a	; 10
 4f4:	80 6c       	ori	r24, 0xC0	; 192
 4f6:	8a b9       	out	0x0a, r24	; 10
		
	PORTD &= ~((1 << E) | (1 << RS));		
 4f8:	8b b1       	in	r24, 0x0b	; 11
 4fa:	8f 73       	andi	r24, 0x3F	; 63
 4fc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4fe:	2f ef       	ldi	r18, 0xFF	; 255
 500:	8f e7       	ldi	r24, 0x7F	; 127
 502:	94 e0       	ldi	r25, 0x04	; 4
 504:	21 50       	subi	r18, 0x01	; 1
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <lcd_setup+0x16>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <lcd_setup+0x20>
 50e:	00 00       	nop
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	// Function reset Behövs nog inte
	//lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  // Kanske inte behövs
	// Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 510:	88 e3       	ldi	r24, 0x38	; 56
 512:	d0 df       	rcall	.-96     	; 0x4b4 <lcd_write_instruction>
	// Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 514:	8c e0       	ldi	r24, 0x0C	; 12
 516:	ce df       	rcall	.-100    	; 0x4b4 <lcd_write_instruction>
	// Display clear
	lcd_write_instruction(lcd_Clear);
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	cc df       	rcall	.-104    	; 0x4b4 <lcd_write_instruction>
	// Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 51c:	86 e0       	ldi	r24, 0x06	; 6
 51e:	ca df       	rcall	.-108    	; 0x4b4 <lcd_write_instruction>
	// Set cursor home and on ddrd 
	lcd_write_instruction(lcd_SetCursor);
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	c8 cf       	rjmp	.-112    	; 0x4b4 <lcd_write_instruction>
 524:	08 95       	ret

00000526 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	72 ec       	ldi	r23, 0xC2	; 194
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	e2 dd       	rcall	.-1084   	; 0xf4 <bluetooth_setup>
	lcd_setup();
 530:	de df       	rcall	.-68     	; 0x4ee <lcd_setup>
	i2c_setup(0x02);
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	d0 de       	rcall	.-608    	; 0x2d6 <i2c_setup>
	sei(); // Enable interrupt
 536:	78 94       	sei
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	8f ef       	ldi	r24, 0xFF	; 255
 53c:	99 e5       	ldi	r25, 0x59	; 89
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <initialize+0x18>
 546:	00 c0       	rjmp	.+0      	; 0x548 <initialize+0x22>
 548:	00 00       	nop
 54a:	08 95       	ret

0000054c <run>:
	_delay_ms(2000);
}

void run(void){		
	bluetooth_send_byte(0x0f);
 54c:	8f e0       	ldi	r24, 0x0F	; 15
 54e:	d8 dd       	rcall	.-1104   	; 0x100 <bluetooth_send_byte>
	while(true)	{
		bluetooth_handle_data();
 550:	16 de       	rcall	.-980    	; 0x17e <bluetooth_handle_data>
		i2c_handle_data();
 552:	a6 df       	rcall	.-180    	; 0x4a0 <i2c_handle_data>
	}
 554:	fd cf       	rjmp	.-6      	; 0x550 <run+0x4>

00000556 <main>:

void run(void);
void initialize(void);

int main (void){
	board_init();
 556:	b8 dd       	rcall	.-1168   	; 0xc8 <board_init>
	initialize();
 558:	e6 df       	rcall	.-52     	; 0x526 <initialize>
	run();
 55a:	f8 df       	rcall	.-16     	; 0x54c <run>

0000055c <_exit>:
 55c:	f8 94       	cli

0000055e <__stop_program>:
 55e:	ff cf       	rjmp	.-2      	; 0x55e <__stop_program>
