
Komunikations kod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004f2  00000586  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800104  00800104  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e18  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ca  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b50  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011ed9  00000000  00000000  000039c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cb  00000000  00000000  000158a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00015d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00004960  00000000  00000000  00015e54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f7 c0       	rjmp	.+494    	; 0x240 <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	ba c1       	rjmp	.+884    	; 0x3de <__vector_26>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a2 35       	cpi	r26, 0x52	; 82
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	12 d2       	rcall	.+1060   	; 0x4e8 <main>
  c4:	14 c2       	rjmp	.+1064   	; 0x4ee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
  c8:	08 95       	ret

000000ca <usart_setup>:
	//	data[i] = data_from_bt[i];
	return data_from_bt;
}

// Kolla om vi har fått in någon ny data
bool bluetooth_get_new_data(void){ return new_data_bt; }
  ca:	88 e9       	ldi	r24, 0x98	; 152
  cc:	80 93 c1 00 	sts	0x00C1, r24
  d0:	86 e0       	ldi	r24, 0x06	; 6
  d2:	80 93 c2 00 	sts	0x00C2, r24
  d6:	10 92 c5 00 	sts	0x00C5, r1
  da:	87 e0       	ldi	r24, 0x07	; 7
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	98 e0       	ldi	r25, 0x08	; 8
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <usart_setup+0x1c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <usart_setup+0x26>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <bluetooth_setup>:
  f4:	2a b1       	in	r18, 0x0a	; 10
  f6:	2a 60       	ori	r18, 0x0A	; 10
  f8:	2a b9       	out	0x0a, r18	; 10
  fa:	cb 01       	movw	r24, r22
  fc:	e6 cf       	rjmp	.-52     	; 0xca <usart_setup>
  fe:	08 95       	ret

00000100 <bluetooth_send_byte>:
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <bluetooth_send_byte+0x4>
 10a:	80 93 c6 00 	sts	0x00C6, r24
 10e:	08 95       	ret

00000110 <bluetooth_clear_to_send>:
 110:	5b 98       	cbi	0x0b, 3	; 11
 112:	08 95       	ret

00000114 <bluetooth_add_to_send_queue>:
	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1) // Vi har tillåtelse att skicka data & data att skicka
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt--]);
}

bool bluetooth_add_to_send_queue(byte* data){
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	int nr_of_bytes = (data[0] >> 4) & 0x0f;
 118:	fc 01       	movw	r30, r24
 11a:	40 81       	ld	r20, Z
 11c:	42 95       	swap	r20
 11e:	4f 70       	andi	r20, 0x0F	; 15
 120:	50 e0       	ldi	r21, 0x00	; 0
	if(number_of_bytes_to_bt + nr_of_bytes > 15)
 122:	c0 91 04 01 	lds	r28, 0x0104
 126:	d0 91 05 01 	lds	r29, 0x0105
 12a:	be 01       	movw	r22, r28
 12c:	64 0f       	add	r22, r20
 12e:	75 1f       	adc	r23, r21
 130:	60 31       	cpi	r22, 0x10	; 16
 132:	71 05       	cpc	r23, r1
 134:	04 f5       	brge	.+64     	; 0x176 <bluetooth_add_to_send_queue+0x62>
		return false;
	bytes_left_to_bt += nr_of_bytes;
 136:	20 91 00 01 	lds	r18, 0x0100
 13a:	30 91 01 01 	lds	r19, 0x0101
 13e:	42 0f       	add	r20, r18
 140:	53 1f       	adc	r21, r19
 142:	50 93 01 01 	sts	0x0101, r21
 146:	40 93 00 01 	sts	0x0100, r20
	for(int i = number_of_bytes_to_bt; i < nr_of_bytes + number_of_bytes_to_bt; i++)
 14a:	c6 17       	cp	r28, r22
 14c:	d7 07       	cpc	r29, r23
 14e:	6c f4       	brge	.+26     	; 0x16a <bluetooth_add_to_send_queue+0x56>
 150:	de 01       	movw	r26, r28
 152:	ad 5e       	subi	r26, 0xED	; 237
 154:	be 4f       	sbci	r27, 0xFE	; 254
 156:	9b 01       	movw	r18, r22
 158:	2c 1b       	sub	r18, r28
 15a:	3d 0b       	sbc	r19, r29
 15c:	28 0f       	add	r18, r24
 15e:	39 1f       	adc	r19, r25
		data_to_bt[i] = data[i - number_of_bytes_to_bt];
 160:	91 91       	ld	r25, Z+
 162:	9d 93       	st	X+, r25
bool bluetooth_add_to_send_queue(byte* data){
	int nr_of_bytes = (data[0] >> 4) & 0x0f;
	if(number_of_bytes_to_bt + nr_of_bytes > 15)
		return false;
	bytes_left_to_bt += nr_of_bytes;
	for(int i = number_of_bytes_to_bt; i < nr_of_bytes + number_of_bytes_to_bt; i++)
 164:	e2 17       	cp	r30, r18
 166:	f3 07       	cpc	r31, r19
 168:	d9 f7       	brne	.-10     	; 0x160 <bluetooth_add_to_send_queue+0x4c>
		data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt += nr_of_bytes;
 16a:	70 93 05 01 	sts	0x0105, r23
 16e:	60 93 04 01 	sts	0x0104, r22
	return true;
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	01 c0       	rjmp	.+2      	; 0x178 <bluetooth_add_to_send_queue+0x64>
}

bool bluetooth_add_to_send_queue(byte* data){
	int nr_of_bytes = (data[0] >> 4) & 0x0f;
	if(number_of_bytes_to_bt + nr_of_bytes > 15)
		return false;
 176:	80 e0       	ldi	r24, 0x00	; 0
	bytes_left_to_bt += nr_of_bytes;
	for(int i = number_of_bytes_to_bt; i < nr_of_bytes + number_of_bytes_to_bt; i++)
		data_to_bt[i] = data[i - number_of_bytes_to_bt];
	number_of_bytes_to_bt += nr_of_bytes;
	return true;
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <bluetooth_handle_data>:
bool bluetooth_get_new_data(void){ return new_data_bt; }

// Behandla bluetooth
void bluetooth_handle_data( void ){		
	// Hantera eventuell ny data ifrån BT
	if(newData == true){ // Om vi har fått data sätts newData till true i BT och vi kollar på den här
 17e:	80 91 0a 01 	lds	r24, 0x010A
 182:	88 23       	and	r24, r24
 184:	89 f1       	breq	.+98     	; 0x1e8 <bluetooth_handle_data+0x6a>
		byte data = dataFromBT; // Hämta ut data å sätt newData false
 186:	40 91 08 01 	lds	r20, 0x0108
		newData = false;
 18a:	10 92 0a 01 	sts	0x010A, r1
		
		// Om vi inte har någon kö för stunden så kör
		if (bytes_left_from_bt == -1){ 
 18e:	80 91 02 01 	lds	r24, 0x0102
 192:	90 91 03 01 	lds	r25, 0x0103
 196:	01 96       	adiw	r24, 0x01	; 1
 198:	61 f4       	brne	.+24     	; 0x1b2 <bluetooth_handle_data+0x34>
			number_of_bytes_from_bt = (data >> 4) & 0x0f; 
 19a:	84 2f       	mov	r24, r20
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	90 93 07 01 	sts	0x0107, r25
 1a6:	80 93 06 01 	sts	0x0106, r24
			bytes_left_from_bt = number_of_bytes_from_bt;
 1aa:	90 93 03 01 	sts	0x0103, r25
 1ae:	80 93 02 01 	sts	0x0102, r24
		}
			
		// Lägg in datan i vektorn
		data_from_bt[number_of_bytes_from_bt - bytes_left_from_bt--] = data;
 1b2:	e0 91 06 01 	lds	r30, 0x0106
 1b6:	f0 91 07 01 	lds	r31, 0x0107
 1ba:	20 91 02 01 	lds	r18, 0x0102
 1be:	30 91 03 01 	lds	r19, 0x0103
 1c2:	c9 01       	movw	r24, r18
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	90 93 03 01 	sts	0x0103, r25
 1ca:	80 93 02 01 	sts	0x0102, r24
 1ce:	e2 1b       	sub	r30, r18
 1d0:	f3 0b       	sbc	r31, r19
 1d2:	ed 5d       	subi	r30, 0xDD	; 221
 1d4:	fe 4f       	sbci	r31, 0xFE	; 254
 1d6:	40 83       	st	Z, r20
			
		// Vill vi ha mer data från samma sändning? 				
		if(bytes_left_from_bt != -1)// Om rts är 0 lagara blåtandseneheten data å skickar via usart när usarten är redo
 1d8:	01 96       	adiw	r24, 0x01	; 1
 1da:	11 f0       	breq	.+4      	; 0x1e0 <bluetooth_handle_data+0x62>
			bluetooth_clear_to_send();
 1dc:	99 df       	rcall	.-206    	; 0x110 <bluetooth_clear_to_send>
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <bluetooth_handle_data+0x6a>
		else 
			new_data_bt = true; // Denna sändningen är klar och vi vill inte ha mer data förens den är behandlad
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 09 01 	sts	0x0109, r24
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <bluetooth_handle_data+0x72>
	} 

	// Om ny data, skicka vidare
	if(new_data_bt){
 1e8:	80 91 09 01 	lds	r24, 0x0109
 1ec:	88 23       	and	r24, r24
 1ee:	61 f0       	breq	.+24     	; 0x208 <bluetooth_handle_data+0x8a>
		i2c_requestToSend(0x04, data_from_bt);
 1f0:	63 e2       	ldi	r22, 0x23	; 35
 1f2:	71 e0       	ldi	r23, 0x01	; 1
 1f4:	84 e0       	ldi	r24, 0x04	; 4
 1f6:	3f d0       	rcall	.+126    	; 0x276 <i2c_requestToSend>
		bluetooth_add_to_send_queue(data_from_bt);
 1f8:	83 e2       	ldi	r24, 0x23	; 35
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	8b df       	rcall	.-234    	; 0x114 <bluetooth_add_to_send_queue>
		new_data_bt = false;
 1fe:	10 92 09 01 	sts	0x0109, r1
		bluetooth_send_byte(0x0f);
 202:	8f e0       	ldi	r24, 0x0F	; 15
 204:	7d df       	rcall	.-262    	; 0x100 <bluetooth_send_byte>
		bluetooth_clear_to_send();
 206:	84 df       	rcall	.-248    	; 0x110 <bluetooth_clear_to_send>
	}

	// Skicka data via BT
	if(((PIND & (1<<CTS)) == 0) && bytes_left_to_bt != -1) // Vi har tillåtelse att skicka data & data att skicka
 208:	4a 99       	sbic	0x09, 2	; 9
 20a:	19 c0       	rjmp	.+50     	; 0x23e <bluetooth_handle_data+0xc0>
 20c:	80 91 00 01 	lds	r24, 0x0100
 210:	90 91 01 01 	lds	r25, 0x0101
 214:	8f 3f       	cpi	r24, 0xFF	; 255
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	92 07       	cpc	r25, r18
 21a:	89 f0       	breq	.+34     	; 0x23e <bluetooth_handle_data+0xc0>
		bluetooth_send_byte(data_to_bt[number_of_bytes_to_bt - bytes_left_to_bt--]);
 21c:	e0 91 04 01 	lds	r30, 0x0104
 220:	f0 91 05 01 	lds	r31, 0x0105
 224:	9c 01       	movw	r18, r24
 226:	21 50       	subi	r18, 0x01	; 1
 228:	31 09       	sbc	r19, r1
 22a:	30 93 01 01 	sts	0x0101, r19
 22e:	20 93 00 01 	sts	0x0100, r18
 232:	e8 1b       	sub	r30, r24
 234:	f9 0b       	sbc	r31, r25
 236:	ed 5e       	subi	r30, 0xED	; 237
 238:	fe 4f       	sbci	r31, 0xFE	; 254
 23a:	80 81       	ld	r24, Z
 23c:	61 cf       	rjmp	.-318    	; 0x100 <bluetooth_send_byte>
 23e:	08 95       	ret

00000240 <__vector_20>:
	number_of_bytes_to_bt += nr_of_bytes;
	return true;
}

//Hämtar datan
ISR ( USART0_RX_vect ){ //recieve complete // USART0_RX_vect
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	8f 93       	push	r24
	PORTD |= (1 << RTS);//Säg att du inte vill ha mer data atm
 24c:	5b 9a       	sbi	0x0b, 3	; 11
	dataFromBT = UDR0;		// Hämta ut datan
 24e:	80 91 c6 00 	lds	r24, 0x00C6
 252:	80 93 08 01 	sts	0x0108, r24
	newData = true; // Tala om för main att vi har fått data
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 0a 01 	sts	0x010A, r24
 25c:	8f 91       	pop	r24
 25e:	0f 90       	pop	r0
 260:	0f be       	out	0x3f, r0	; 63
 262:	0f 90       	pop	r0
 264:	1f 90       	pop	r1
 266:	18 95       	reti

00000268 <i2c_setup>:
	incomingData();	
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
}

void i2c_setup(byte adress_) {
	TWAR = adress_;
 268:	80 93 ba 00 	sts	0x00BA, r24
	//TWSR = 0x00; // Ska nog inte vara med
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);
 26c:	85 ec       	ldi	r24, 0xC5	; 197
 26e:	80 93 bc 00 	sts	0x00BC, r24
	DDRC |= (1 << PC6);
 272:	3e 9a       	sbi	0x07, 6	; 7
 274:	08 95       	ret

00000276 <i2c_requestToSend>:
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
 276:	fb 01       	movw	r30, r22
 278:	20 81       	ld	r18, Z
 27a:	22 95       	swap	r18
 27c:	2f 70       	andi	r18, 0x0F	; 15
 27e:	42 2f       	mov	r20, r18
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	50 93 12 01 	sts	0x0112, r21
 286:	40 93 11 01 	sts	0x0111, r20
 28a:	a2 e4       	ldi	r26, 0x42	; 66
 28c:	b1 e0       	ldi	r27, 0x01	; 1
 28e:	9a 01       	movw	r18, r20
 290:	2f 5f       	subi	r18, 0xFF	; 255
 292:	3f 4f       	sbci	r19, 0xFF	; 255
 294:	62 0f       	add	r22, r18
 296:	73 1f       	adc	r23, r19
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
		dataToSend[i] = data[i];
 298:	91 91       	ld	r25, Z+
 29a:	9d 93       	st	X+, r25
	DDRC |= (1 << PC6);
};

void i2c_requestToSend(byte adress, byte data[]){
	bytes_to_send_i2c = (data[0] >> 4) & 0x0f;
	for(int i = 0; i < bytes_to_send_i2c+1; i++)
 29c:	e6 17       	cp	r30, r22
 29e:	f7 07       	cpc	r31, r23
 2a0:	d9 f7       	brne	.-10     	; 0x298 <i2c_requestToSend+0x22>
		dataToSend[i] = data[i];
	reciverAdress = adress;
 2a2:	80 93 51 01 	sts	0x0151, r24
	bytesSent = 0;
 2a6:	10 92 10 01 	sts	0x0110, r1
 2aa:	10 92 0f 01 	sts	0x010F, r1
	PORTC |= (1 << PC6);
 2ae:	46 9a       	sbi	0x08, 6	; 8
	PORTC &= ~(1 << PC6);
 2b0:	46 98       	cbi	0x08, 6	; 8
 2b2:	08 95       	ret

000002b4 <i2c_send>:
}



void i2c_send(byte prossesor,byte data){
	TWDR = data;
 2b4:	60 93 bb 00 	sts	0x00BB, r22
	TWCR |= (1<<TWEA) | (1<<TWINT);
 2b8:	ec eb       	ldi	r30, 0xBC	; 188
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	80 6c       	ori	r24, 0xC0	; 192
 2c0:	80 83       	st	Z, r24
	while(!(TWCR & (1<<TWINT)));
 2c2:	80 81       	ld	r24, Z
 2c4:	88 23       	and	r24, r24
 2c6:	ec f7       	brge	.-6      	; 0x2c2 <i2c_send+0xe>
	if((TWSR & 0xF8) != TW_ST_DATA_ACK){
 2c8:	80 91 b9 00 	lds	r24, 0x00B9
 2cc:	88 7f       	andi	r24, 0xF8	; 248
 2ce:	88 3b       	cpi	r24, 0xB8	; 184
 2d0:	a1 f0       	breq	.+40     	; 0x2fa <i2c_send+0x46>
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 2d2:	84 e9       	ldi	r24, 0x94	; 148
 2d4:	80 93 bc 00 	sts	0x00BC, r24

		if(bytes_to_send_i2c >= bytesSent){
 2d8:	20 91 11 01 	lds	r18, 0x0111
 2dc:	30 91 12 01 	lds	r19, 0x0112
 2e0:	80 91 0f 01 	lds	r24, 0x010F
 2e4:	90 91 10 01 	lds	r25, 0x0110
 2e8:	28 17       	cp	r18, r24
 2ea:	39 07       	cpc	r19, r25
 2ec:	34 f0       	brlt	.+12     	; 0x2fa <i2c_send+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	82 e6       	ldi	r24, 0x62	; 98
 2f0:	8a 95       	dec	r24
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <i2c_send+0x3c>
 2f4:	00 00       	nop
			_delay_us(20);
			PORTC |= (1 << PC6);
 2f6:	46 9a       	sbi	0x08, 6	; 8
			PORTC &= ~(1 << PC6);
 2f8:	46 98       	cbi	0x08, 6	; 8
 2fa:	08 95       	ret

000002fc <i2c_recive>:
		return ;
	}
}

byte i2c_recive(void){
	if((TWSR & 0xF8)!=0x80)
 2fc:	80 91 b9 00 	lds	r24, 0x00B9
 300:	88 7f       	andi	r24, 0xF8	; 248
 302:	80 38       	cpi	r24, 0x80	; 128
 304:	41 f4       	brne	.+16     	; 0x316 <i2c_recive+0x1a>
		return false;
	TWCR |= (1<<TWEA) | (1<<TWINT);
 306:	ec eb       	ldi	r30, 0xBC	; 188
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	80 6c       	ori	r24, 0xC0	; 192
 30e:	80 83       	st	Z, r24
	return TWDR;	
 310:	80 91 bb 00 	lds	r24, 0x00BB
 314:	08 95       	ret
	}
}

byte i2c_recive(void){
	if((TWSR & 0xF8)!=0x80)
		return false;
 316:	80 e0       	ldi	r24, 0x00	; 0
	TWCR |= (1<<TWEA) | (1<<TWINT);
	return TWDR;	
}
 318:	08 95       	ret

0000031a <incomingData>:
	PORTC |= (1 << PC6);
	PORTC &= ~(1 << PC6);
}


byte incomingData(void){	
 31a:	cf 93       	push	r28
 31c:	df 93       	push	r29
	if((TWSR & 0xF8) == 0x60){ // rec data, ack sent	
 31e:	80 91 b9 00 	lds	r24, 0x00B9
 322:	88 7f       	andi	r24, 0xF8	; 248
 324:	80 36       	cpi	r24, 0x60	; 96
 326:	b9 f5       	brne	.+110    	; 0x396 <incomingData+0x7c>
		i2c_data[bytefrom_i2c] = i2c_recive();
 328:	c0 91 0d 01 	lds	r28, 0x010D
 32c:	d0 91 0e 01 	lds	r29, 0x010E
 330:	e5 df       	rcall	.-54     	; 0x2fc <i2c_recive>
 332:	cd 5c       	subi	r28, 0xCD	; 205
 334:	de 4f       	sbci	r29, 0xFE	; 254
 336:	88 83       	st	Y, r24
		if(bytefrom_i2c == ((i2c_data[0]>>4) &0x0f)){
 338:	80 91 33 01 	lds	r24, 0x0133
 33c:	82 95       	swap	r24
 33e:	8f 70       	andi	r24, 0x0F	; 15
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	20 91 0d 01 	lds	r18, 0x010D
 346:	30 91 0e 01 	lds	r19, 0x010E
 34a:	82 17       	cp	r24, r18
 34c:	93 07       	cpc	r25, r19
 34e:	41 f4       	brne	.+16     	; 0x360 <incomingData+0x46>
			newdata = true;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 0c 01 	sts	0x010C, r24
			TWCR &= ~(1 << TWINT);
 356:	ec eb       	ldi	r30, 0xBC	; 188
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	8f 77       	andi	r24, 0x7F	; 127
 35e:	80 83       	st	Z, r24
		}
		if((bytefrom_i2c+1) == ((i2c_data[0]>>4)&0x0f))
 360:	20 91 0d 01 	lds	r18, 0x010D
 364:	30 91 0e 01 	lds	r19, 0x010E
 368:	a9 01       	movw	r20, r18
 36a:	4f 5f       	subi	r20, 0xFF	; 255
 36c:	5f 4f       	sbci	r21, 0xFF	; 255
 36e:	80 91 33 01 	lds	r24, 0x0133
 372:	82 95       	swap	r24
 374:	8f 70       	andi	r24, 0x0F	; 15
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	48 17       	cp	r20, r24
 37a:	59 07       	cpc	r21, r25
 37c:	19 f4       	brne	.+6      	; 0x384 <incomingData+0x6a>
			i2c_new_data=true;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 0b 01 	sts	0x010B, r24
		return i2c_data[bytefrom_i2c++];
 384:	50 93 0e 01 	sts	0x010E, r21
 388:	40 93 0d 01 	sts	0x010D, r20
 38c:	f9 01       	movw	r30, r18
 38e:	ed 5c       	subi	r30, 0xCD	; 205
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	80 81       	ld	r24, Z
 394:	21 c0       	rjmp	.+66     	; 0x3d8 <incomingData+0xbe>
		
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
 396:	80 91 b9 00 	lds	r24, 0x00B9
 39a:	88 7f       	andi	r24, 0xF8	; 248
 39c:	88 3a       	cpi	r24, 0xA8	; 168
 39e:	a1 f4       	brne	.+40     	; 0x3c8 <incomingData+0xae>
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
 3a0:	80 91 0f 01 	lds	r24, 0x010F
 3a4:	90 91 10 01 	lds	r25, 0x0110
 3a8:	9c 01       	movw	r18, r24
 3aa:	2f 5f       	subi	r18, 0xFF	; 255
 3ac:	3f 4f       	sbci	r19, 0xFF	; 255
 3ae:	30 93 10 01 	sts	0x0110, r19
 3b2:	20 93 0f 01 	sts	0x010F, r18
 3b6:	fc 01       	movw	r30, r24
 3b8:	ee 5b       	subi	r30, 0xBE	; 190
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	60 81       	ld	r22, Z
 3be:	80 91 51 01 	lds	r24, 0x0151
 3c2:	78 df       	rcall	.-272    	; 0x2b4 <i2c_send>
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
		return i2c_recive();
	}
	return 0x00;
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <incomingData+0xbe>
		
	}
	else if((TWSR & 0xF8)==0xA8){ // send data, ack sent
		i2c_send(reciverAdress,dataToSend[bytesSent++]);
	}
	else if((TWSR & 0xF8)==0x80){// rep start? 
 3c8:	80 91 b9 00 	lds	r24, 0x00B9
 3cc:	88 7f       	andi	r24, 0xF8	; 248
 3ce:	80 38       	cpi	r24, 0x80	; 128
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <incomingData+0xbc>
		return i2c_recive();
 3d2:	94 df       	rcall	.-216    	; 0x2fc <i2c_recive>
 3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <incomingData+0xbe>
	}
	return 0x00;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
}
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <__vector_26>:
byte i2c_data[15];
bool newdata = false;
bool i2c_new_data = false;


ISR(TWI_vect){
 3de:	1f 92       	push	r1
 3e0:	0f 92       	push	r0
 3e2:	0f b6       	in	r0, 0x3f	; 63
 3e4:	0f 92       	push	r0
 3e6:	11 24       	eor	r1, r1
 3e8:	0b b6       	in	r0, 0x3b	; 59
 3ea:	0f 92       	push	r0
 3ec:	2f 93       	push	r18
 3ee:	3f 93       	push	r19
 3f0:	4f 93       	push	r20
 3f2:	5f 93       	push	r21
 3f4:	6f 93       	push	r22
 3f6:	7f 93       	push	r23
 3f8:	8f 93       	push	r24
 3fa:	9f 93       	push	r25
 3fc:	af 93       	push	r26
 3fe:	bf 93       	push	r27
 400:	ef 93       	push	r30
 402:	ff 93       	push	r31
	incomingData();	
 404:	8a df       	rcall	.-236    	; 0x31a <incomingData>
	TWCR = (1 << TWIE) | (1 << TWEN)| (1<<TWEA) | (1<<TWINT);//TWCR |= (1<<TWEA) | (1<<TWINT); 
 406:	85 ec       	ldi	r24, 0xC5	; 197
 408:	80 93 bc 00 	sts	0x00BC, r24
}
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0b be       	out	0x3b, r0	; 59
 428:	0f 90       	pop	r0
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	0f 90       	pop	r0
 42e:	1f 90       	pop	r1
 430:	18 95       	reti

00000432 <i2c_handle_data>:
	TWCR |= (1<<TWEA) | (1<<TWINT);
	return TWDR;	
}

void i2c_handle_data(void){
	if(i2c_new_data==true)
 432:	80 91 0b 01 	lds	r24, 0x010B
 436:	88 23       	and	r24, r24
 438:	29 f0       	breq	.+10     	; 0x444 <i2c_handle_data+0x12>
	{
		bluetooth_add_to_send_queue(i2c_data);
 43a:	83 e3       	ldi	r24, 0x33	; 51
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	6a de       	rcall	.-812    	; 0x114 <bluetooth_add_to_send_queue>
		i2c_new_data=false;
 440:	10 92 0b 01 	sts	0x010B, r1
 444:	08 95       	ret

00000446 <lcd_write_instruction>:
	_delay_us(100); //TSU2	// Vänta på att data ska stabiliseras
}

// Writes instruction 
void lcd_write_instruction(uint8_t instruction){
	PORTD &= ~(1 << E);// Se till att E är låg från början
 446:	5f 98       	cbi	0x0b, 7	; 11
	PORTA = instruction; // funkar inte detta prova bit för bit. Gäller isf även utskrift.
 448:	82 b9       	out	0x02, r24	; 2
	
	
	PORTD &= ~(1 << RS); // sätt RS
 44a:	5e 98       	cbi	0x0b, 6	; 11
 44c:	95 e0       	ldi	r25, 0x05	; 5
 44e:	9a 95       	dec	r25
 450:	f1 f7       	brne	.-4      	; 0x44e <lcd_write_instruction+0x8>
	_delay_us(1); //TSU1
	PORTD |= (1 << E); // Sätt Enable
 452:	5f 9a       	sbi	0x0b, 7	; 11
 454:	95 e0       	ldi	r25, 0x05	; 5
 456:	9a 95       	dec	r25
 458:	f1 f7       	brne	.-4      	; 0x456 <lcd_write_instruction+0x10>
	_delay_us(1); // TW
	PORTD &= ~(1 << E);
 45a:	5f 98       	cbi	0x0b, 7	; 11
 45c:	95 e0       	ldi	r25, 0x05	; 5
 45e:	9a 95       	dec	r25
 460:	f1 f7       	brne	.-4      	; 0x45e <lcd_write_instruction+0x18>
	_delay_us(1); // TH1
	PORTD &= ~(1 << RS); // Nolställ E och RS så att dom är noll vid nästa instruktion/charläsning	
 462:	5e 98       	cbi	0x0b, 6	; 11

	// Lägg in behövd delay ( 1.53 ms för clear och home & 39 us för de andra )
	if(instruction == lcd_Home || instruction == lcd_Clear)
 464:	81 50       	subi	r24, 0x01	; 1
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	28 f4       	brcc	.+10     	; 0x474 <lcd_write_instruction+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 46a:	83 e3       	ldi	r24, 0x33	; 51
 46c:	9b e2       	ldi	r25, 0x2B	; 43
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <lcd_write_instruction+0x28>
 472:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 474:	80 e7       	ldi	r24, 0x70	; 112
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <lcd_write_instruction+0x32>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <lcd_write_instruction+0x38>
 47e:	08 95       	ret

00000480 <lcd_setup>:
#include "LCD.h"
#include  "bluetooth.h"

//LCD Setup, inits all the variables
void lcd_setup(void){
	DDRA = 0xFF;
 480:	8f ef       	ldi	r24, 0xFF	; 255
 482:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1 << E) | (1 << RS);
 484:	8a b1       	in	r24, 0x0a	; 10
 486:	80 6c       	ori	r24, 0xC0	; 192
 488:	8a b9       	out	0x0a, r24	; 10
		
	PORTD &= ~((1 << E) | (1 << RS));		
 48a:	8b b1       	in	r24, 0x0b	; 11
 48c:	8f 73       	andi	r24, 0x3F	; 63
 48e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 490:	2f ef       	ldi	r18, 0xFF	; 255
 492:	8f e7       	ldi	r24, 0x7F	; 127
 494:	94 e0       	ldi	r25, 0x04	; 4
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <lcd_setup+0x16>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <lcd_setup+0x20>
 4a0:	00 00       	nop
	_delay_ms(100); // wait for vdd to rise to 4.5V 
	// Function reset Behövs nog inte
	//lcd_write_instruction(lcd_FunctionReset); //b3 antal rader, b2 antal punkter, 8 eller 11  // Kanske inte behövs
	// Function set
	lcd_write_instruction(lcd_FunctionSet); //b3 antal rader, b2 antal punkter, 8 eller 11  
 4a2:	88 e3       	ldi	r24, 0x38	; 56
 4a4:	d0 df       	rcall	.-96     	; 0x446 <lcd_write_instruction>
	// Display on
	lcd_write_instruction(lcd_DisplayOn); //b2 display, b1 cursor, b0 blink
 4a6:	8c e0       	ldi	r24, 0x0C	; 12
 4a8:	ce df       	rcall	.-100    	; 0x446 <lcd_write_instruction>
	// Display clear
	lcd_write_instruction(lcd_Clear);
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	cc df       	rcall	.-104    	; 0x446 <lcd_write_instruction>
	// Entry Mode Set
	lcd_write_instruction(lcd_EntryMode);//b1 inc/dec, b0, Entire shift
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	ca df       	rcall	.-108    	; 0x446 <lcd_write_instruction>
	// Set cursor home and on ddrd 
	lcd_write_instruction(lcd_SetCursor);
 4b2:	80 e8       	ldi	r24, 0x80	; 128
 4b4:	c8 cf       	rjmp	.-112    	; 0x446 <lcd_write_instruction>
 4b6:	08 95       	ret

000004b8 <initialize>:
	initialize();
	run();
}

void initialize(void){
	bluetooth_setup((long)115200);
 4b8:	60 e0       	ldi	r22, 0x00	; 0
 4ba:	72 ec       	ldi	r23, 0xC2	; 194
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	19 de       	rcall	.-974    	; 0xf4 <bluetooth_setup>
	lcd_setup();
 4c2:	de df       	rcall	.-68     	; 0x480 <lcd_setup>
	i2c_setup(0x02);
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	d0 de       	rcall	.-608    	; 0x268 <i2c_setup>
	sei(); // Enable interrupt
 4c8:	78 94       	sei
 4ca:	2f ef       	ldi	r18, 0xFF	; 255
 4cc:	8f ef       	ldi	r24, 0xFF	; 255
 4ce:	99 e5       	ldi	r25, 0x59	; 89
 4d0:	21 50       	subi	r18, 0x01	; 1
 4d2:	80 40       	sbci	r24, 0x00	; 0
 4d4:	90 40       	sbci	r25, 0x00	; 0
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <initialize+0x18>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <initialize+0x22>
 4da:	00 00       	nop
 4dc:	08 95       	ret

000004de <run>:
	_delay_ms(2000);
}

void run(void){		
	bluetooth_send_byte(0x0f);
 4de:	8f e0       	ldi	r24, 0x0F	; 15
 4e0:	0f de       	rcall	.-994    	; 0x100 <bluetooth_send_byte>
	while(true)	{
		bluetooth_handle_data();
 4e2:	4d de       	rcall	.-870    	; 0x17e <bluetooth_handle_data>
		i2c_handle_data();
 4e4:	a6 df       	rcall	.-180    	; 0x432 <i2c_handle_data>
	}
 4e6:	fd cf       	rjmp	.-6      	; 0x4e2 <run+0x4>

000004e8 <main>:

void run(void);
void initialize(void);

int main (void){
	board_init();
 4e8:	ef dd       	rcall	.-1058   	; 0xc8 <board_init>
	initialize();
 4ea:	e6 df       	rcall	.-52     	; 0x4b8 <initialize>
	run();
 4ec:	f8 df       	rcall	.-16     	; 0x4de <run>

000004ee <_exit>:
 4ee:	f8 94       	cli

000004f0 <__stop_program>:
 4f0:	ff cf       	rjmp	.-2      	; 0x4f0 <__stop_program>
