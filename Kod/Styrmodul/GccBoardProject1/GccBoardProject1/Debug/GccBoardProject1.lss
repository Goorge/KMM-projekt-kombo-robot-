
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000272  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000317  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018d  00000000  00000000  000006b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000566  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000138  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000783c  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000338  00000000  00000000  00008720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00008a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000194  00000000  00000000  00008ab0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	02 c1       	rjmp	.+516    	; 0x20a <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	d8 d0       	rcall	.+432    	; 0x25a <main>
  aa:	e1 c0       	rjmp	.+450    	; 0x26e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <i2c_setup>:
	for(int i=0;i<11;i++)
	{
		styr_fel=styr_fel+(i-5)*data>>(i*2+1)&1;
	}
	return styr_fel;
}
  ae:	89 2b       	or	r24, r25
  b0:	79 f0       	breq	.+30     	; 0xd0 <i2c_setup+0x22>
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	87 b9       	out	0x07, r24	; 7
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	87 b9       	out	0x07, r24	; 7
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	8d bb       	out	0x1d, r24	; 29
  be:	93 e0       	ldi	r25, 0x03	; 3
  c0:	95 bf       	out	0x35, r25	; 53
  c2:	80 93 b8 00 	sts	0x00B8, r24
  c6:	10 92 b9 00 	sts	0x00B9, r1
  ca:	84 e0       	ldi	r24, 0x04	; 4
  cc:	80 93 ba 00 	sts	0x00BA, r24
  d0:	08 95       	ret

000000d2 <i2c_send>:
  d2:	8f 92       	push	r8
  d4:	9f 92       	push	r9
  d6:	af 92       	push	r10
  d8:	bf 92       	push	r11
  da:	cf 92       	push	r12
  dc:	df 92       	push	r13
  de:	ef 92       	push	r14
  e0:	ff 92       	push	r15
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	eb 01       	movw	r28, r22
  ec:	08 81       	ld	r16, Y
  ee:	02 95       	swap	r16
  f0:	0f 70       	andi	r16, 0x0F	; 15
  f2:	10 e0       	ldi	r17, 0x00	; 0
  f4:	4b 01       	movw	r8, r22
  f6:	68 94       	set
  f8:	ee 24       	eor	r14, r14
  fa:	e3 f8       	bld	r14, 3
  fc:	f1 2c       	mov	r15, r1
  fe:	40 e0       	ldi	r20, 0x00	; 0
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	0f 2e       	mov	r0, r31
 108:	f4 ea       	ldi	r31, 0xA4	; 164
 10a:	df 2e       	mov	r13, r31
 10c:	f0 2d       	mov	r31, r0
 10e:	a9 eb       	ldi	r26, 0xB9	; 185
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	81 60       	ori	r24, 0x01	; 1
 114:	c8 2e       	mov	r12, r24
 116:	6b eb       	ldi	r22, 0xBB	; 187
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	84 e8       	ldi	r24, 0x84	; 132
 11c:	68 94       	set
 11e:	aa 24       	eor	r10, r10
 120:	a4 f8       	bld	r10, 4
 122:	b1 2c       	mov	r11, r1
 124:	d0 82       	st	Z, r13
 126:	90 81       	ld	r25, Z
 128:	99 23       	and	r25, r25
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_send+0x54>
 12c:	2c 91       	ld	r18, X
 12e:	28 7f       	andi	r18, 0xF8	; 248
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	2e 15       	cp	r18, r14
 134:	3f 05       	cpc	r19, r15
 136:	21 f5       	brne	.+72     	; 0x180 <i2c_send+0xae>
 138:	eb 01       	movw	r28, r22
 13a:	c8 82       	st	Y, r12
 13c:	80 83       	st	Z, r24
 13e:	90 81       	ld	r25, Z
 140:	99 23       	and	r25, r25
 142:	ec f7       	brge	.-6      	; 0x13e <i2c_send+0x6c>
 144:	9c 91       	ld	r25, X
 146:	98 7f       	andi	r25, 0xF8	; 248
 148:	98 31       	cpi	r25, 0x18	; 24
 14a:	e9 f4       	brne	.+58     	; 0x186 <i2c_send+0xb4>
 14c:	e4 01       	movw	r28, r8
 14e:	99 91       	ld	r25, Y+
 150:	4e 01       	movw	r8, r28
 152:	eb 01       	movw	r28, r22
 154:	98 83       	st	Y, r25
 156:	80 83       	st	Z, r24
 158:	90 81       	ld	r25, Z
 15a:	99 23       	and	r25, r25
 15c:	ec f7       	brge	.-6      	; 0x158 <i2c_send+0x86>
 15e:	9c 91       	ld	r25, X
 160:	98 7f       	andi	r25, 0xF8	; 248
 162:	98 32       	cpi	r25, 0x28	; 40
 164:	99 f4       	brne	.+38     	; 0x18c <i2c_send+0xba>
 166:	4f 5f       	subi	r20, 0xFF	; 255
 168:	5f 4f       	sbci	r21, 0xFF	; 255
 16a:	ea 2c       	mov	r14, r10
 16c:	fb 2c       	mov	r15, r11
 16e:	40 17       	cp	r20, r16
 170:	51 07       	cpc	r21, r17
 172:	c4 f2       	brlt	.-80     	; 0x124 <i2c_send+0x52>
 174:	84 e9       	ldi	r24, 0x94	; 148
 176:	80 93 bc 00 	sts	0x00BC, r24
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	08 c0       	rjmp	.+16     	; 0x190 <i2c_send+0xbe>
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	05 c0       	rjmp	.+10     	; 0x190 <i2c_send+0xbe>
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <i2c_send+0xbe>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	0f 91       	pop	r16
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	9f 90       	pop	r9
 1a6:	8f 90       	pop	r8
 1a8:	08 95       	ret

000001aa <i2c_recive>:
 1aa:	94 ea       	ldi	r25, 0xA4	; 164
 1ac:	90 93 bc 00 	sts	0x00BC, r25
 1b0:	ec eb       	ldi	r30, 0xBC	; 188
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	90 81       	ld	r25, Z
 1b6:	99 23       	and	r25, r25
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <i2c_recive+0xa>
 1ba:	90 91 b9 00 	lds	r25, 0x00B9
 1be:	98 7f       	andi	r25, 0xF8	; 248
 1c0:	98 30       	cpi	r25, 0x08	; 8
 1c2:	d9 f4       	brne	.+54     	; 0x1fa <i2c_recive+0x50>
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	80 93 bb 00 	sts	0x00BB, r24
 1ca:	84 e8       	ldi	r24, 0x84	; 132
 1cc:	80 93 bc 00 	sts	0x00BC, r24
 1d0:	ec eb       	ldi	r30, 0xBC	; 188
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	ec f7       	brge	.-6      	; 0x1d4 <i2c_recive+0x2a>
 1da:	80 91 b9 00 	lds	r24, 0x00B9
 1de:	88 7f       	andi	r24, 0xF8	; 248
 1e0:	88 31       	cpi	r24, 0x18	; 24
 1e2:	59 f4       	brne	.+22     	; 0x1fa <i2c_recive+0x50>
 1e4:	ab eb       	ldi	r26, 0xBB	; 187
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	8c 91       	ld	r24, X
 1ea:	e0 91 00 00 	lds	r30, 0x0000
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	8c 91       	ld	r24, X
 1f2:	8c 91       	ld	r24, X
 1f4:	80 83       	st	Z, r24
 1f6:	80 91 bc 00 	lds	r24, 0x00BC
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret

00000200 <led_test>:
 200:	8f ef       	ldi	r24, 0xFF	; 255
 202:	8a b9       	out	0x0a, r24	; 10
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	8b b9       	out	0x0b, r24	; 11
 208:	08 95       	ret

0000020a <__vector_1>:
#include "i2c_master.c"
#include "linje.c"

//avbrotsrutiner
ISR(INT0_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	0b b6       	in	r0, 0x3b	; 59
 216:	0f 92       	push	r0
 218:	2f 93       	push	r18
 21a:	3f 93       	push	r19
 21c:	4f 93       	push	r20
 21e:	5f 93       	push	r21
 220:	6f 93       	push	r22
 222:	7f 93       	push	r23
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
 228:	af 93       	push	r26
 22a:	bf 93       	push	r27
 22c:	ef 93       	push	r30
 22e:	ff 93       	push	r31
	if (PC6){	//komunikation vill skicka
		i2c_recive(0x02); // processor 1
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	bb df       	rcall	.-138    	; 0x1aa <i2c_recive>
	}
	else if(PC7){ //sensor vill skicka
		i2c_recive(0x06); // processor 3
	}
	
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	7f 91       	pop	r23
 242:	6f 91       	pop	r22
 244:	5f 91       	pop	r21
 246:	4f 91       	pop	r20
 248:	3f 91       	pop	r19
 24a:	2f 91       	pop	r18
 24c:	0f 90       	pop	r0
 24e:	0b be       	out	0x3b, r0	; 59
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <main>:


int main(){
	//init
	i2c_setup(true);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	27 df       	rcall	.-434    	; 0xae <i2c_setup>
	
	sei();				//Enable Global Interrupt
 260:	78 94       	sei
	
	while(1){
		//FUNKTIONSLOP
		i2c_send(0x02, 0xf0);
 262:	60 ef       	ldi	r22, 0xF0	; 240
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	82 e0       	ldi	r24, 0x02	; 2
 268:	34 df       	rcall	.-408    	; 0xd2 <i2c_send>
		led_test();
 26a:	ca df       	rcall	.-108    	; 0x200 <led_test>
	};
 26c:	fa cf       	rjmp	.-12     	; 0x262 <main+0x8>

0000026e <_exit>:
 26e:	f8 94       	cli

00000270 <__stop_program>:
 270:	ff cf       	rjmp	.-2      	; 0x270 <__stop_program>
