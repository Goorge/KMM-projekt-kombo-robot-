
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000294  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000061a  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002c6  00000000  00000000  000009ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c77  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  0000190c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011ba1  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000050b  00000000  00000000  00013665  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00013b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000040ac  00000000  00000000  00013c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	ca c0       	rjmp	.+404    	; 0x19a <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a3 30       	cpi	r26, 0x03	; 3
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	9c d0       	rcall	.+312    	; 0x1fc <main>
  c4:	ab c0       	rjmp	.+342    	; 0x21c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <i2c_setup>:
				break;		
			default :
				break;
		}
	}
	EIMSK |= (1<<INT0);
  ca:	88 23       	and	r24, r24
  cc:	71 f0       	breq	.+28     	; 0xea <i2c_setup+0x20>
  ce:	3e 98       	cbi	0x07, 6	; 7
  d0:	3f 98       	cbi	0x07, 7	; 7
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8d bb       	out	0x1d, r24	; 29
  d6:	e9 e6       	ldi	r30, 0x69	; 105
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	83 60       	ori	r24, 0x03	; 3
  de:	80 83       	st	Z, r24
  e0:	80 e1       	ldi	r24, 0x10	; 16
  e2:	80 93 b8 00 	sts	0x00B8, r24
  e6:	10 92 b9 00 	sts	0x00B9, r1
  ea:	08 95       	ret

000000ec <i2c_recive>:
  ec:	ec eb       	ldi	r30, 0xBC	; 188
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	94 6a       	ori	r25, 0xA4	; 164
  f4:	90 83       	st	Z, r25
  f6:	90 81       	ld	r25, Z
  f8:	99 23       	and	r25, r25
  fa:	ec f7       	brge	.-6      	; 0xf6 <i2c_recive+0xa>
  fc:	90 91 b9 00 	lds	r25, 0x00B9
 100:	98 7f       	andi	r25, 0xF8	; 248
 102:	98 30       	cpi	r25, 0x08	; 8
 104:	21 f0       	breq	.+8      	; 0x10e <i2c_recive+0x22>
 106:	84 e9       	ldi	r24, 0x94	; 148
 108:	80 93 bc 00 	sts	0x00BC, r24
 10c:	3b c0       	rjmp	.+118    	; 0x184 <i2c_recive+0x98>
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	80 93 bb 00 	sts	0x00BB, r24
 114:	84 e8       	ldi	r24, 0x84	; 132
 116:	80 93 bc 00 	sts	0x00BC, r24
 11a:	ec eb       	ldi	r30, 0xBC	; 188
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	80 81       	ld	r24, Z
 120:	88 23       	and	r24, r24
 122:	ec f7       	brge	.-6      	; 0x11e <i2c_recive+0x32>
 124:	80 91 b9 00 	lds	r24, 0x00B9
 128:	88 7f       	andi	r24, 0xF8	; 248
 12a:	80 34       	cpi	r24, 0x40	; 64
 12c:	21 f0       	breq	.+8      	; 0x136 <i2c_recive+0x4a>
 12e:	84 e9       	ldi	r24, 0x94	; 148
 130:	80 93 bc 00 	sts	0x00BC, r24
 134:	27 c0       	rjmp	.+78     	; 0x184 <i2c_recive+0x98>
 136:	ec eb       	ldi	r30, 0xBC	; 188
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	84 68       	ori	r24, 0x84	; 132
 13e:	80 83       	st	Z, r24
 140:	80 81       	ld	r24, Z
 142:	88 23       	and	r24, r24
 144:	ec f7       	brge	.-6      	; 0x140 <i2c_recive+0x54>
 146:	80 91 b9 00 	lds	r24, 0x00B9
 14a:	88 7f       	andi	r24, 0xF8	; 248
 14c:	80 35       	cpi	r24, 0x50	; 80
 14e:	21 f0       	breq	.+8      	; 0x158 <i2c_recive+0x6c>
 150:	84 e9       	ldi	r24, 0x94	; 148
 152:	80 93 bc 00 	sts	0x00BC, r24
 156:	16 c0       	rjmp	.+44     	; 0x184 <i2c_recive+0x98>
 158:	ab eb       	ldi	r26, 0xBB	; 187
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	ec 91       	ld	r30, X
 15e:	e2 95       	swap	r30
 160:	ef 70       	andi	r30, 0x0F	; 15
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	e0 81       	ld	r30, Z
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	8c 91       	ld	r24, X
 16a:	8c 91       	ld	r24, X
 16c:	80 83       	st	Z, r24
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	80 93 bc 00 	sts	0x00BC, r24
 174:	ec eb       	ldi	r30, 0xBC	; 188
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	ec f7       	brge	.-6      	; 0x178 <i2c_recive+0x8c>
 17e:	84 e9       	ldi	r24, 0x94	; 148
 180:	80 93 bc 00 	sts	0x00BC, r24
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	08 95       	ret

00000188 <i2c_store_data>:
 188:	10 92 01 01 	sts	0x0101, r1
 18c:	10 92 00 01 	sts	0x0100, r1
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 02 01 	sts	0x0102, r24
 196:	e8 98       	cbi	0x1d, 0	; 29
 198:	08 95       	ret

0000019a <__vector_1>:
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	0b b6       	in	r0, 0x3b	; 59
 1a6:	0f 92       	push	r0
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
 1c0:	30 9b       	sbis	0x06, 0	; 6
 1c2:	04 c0       	rjmp	.+8      	; 0x1cc <__vector_1+0x32>
 1c4:	82 e0       	ldi	r24, 0x02	; 2
 1c6:	92 df       	rcall	.-220    	; 0xec <i2c_recive>
 1c8:	df df       	rcall	.-66     	; 0x188 <i2c_store_data>
 1ca:	05 c0       	rjmp	.+10     	; 0x1d6 <__vector_1+0x3c>
 1cc:	30 9b       	sbis	0x06, 0	; 6
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <__vector_1+0x3c>
 1d0:	86 e0       	ldi	r24, 0x06	; 6
 1d2:	8c df       	rcall	.-232    	; 0xec <i2c_recive>
 1d4:	d9 df       	rcall	.-78     	; 0x188 <i2c_store_data>
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0b be       	out	0x3b, r0	; 59
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <main>:
#include "i2c_master.c"


int main(){
	//init
	board_init();
 1fc:	65 df       	rcall	.-310    	; 0xc8 <board_init>
	//SPI_MasterInit();
	i2c_setup(1);
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	64 df       	rcall	.-312    	; 0xca <i2c_setup>
	sei();	
 202:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	2f ef       	ldi	r18, 0xFF	; 255
 206:	3f ef       	ldi	r19, 0xFF	; 255
 208:	86 e7       	ldi	r24, 0x76	; 118
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	30 40       	sbci	r19, 0x00	; 0
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	d9 f7       	brne	.-10     	; 0x20c <main+0x10>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x1c>
 218:	00 00       	nop
				//Enable Global Interrupt
	byte data[2]={0x12,0x0f};
	while(1){
		//FUNKTIONSLOP
		//i2c_send(0x02,data);
	};
 21a:	ff cf       	rjmp	.-2      	; 0x21a <main+0x1e>

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
