
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000252  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800100  00800100  000002c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000566  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002bf  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd0  00000000  00000000  00000bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  000017d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00011b6b  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000485  00000000  00000000  000134c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00013948  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000040ac  00000000  00000000  000139e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	04 c1       	rjmp	.+520    	; 0x20e <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 31       	cpi	r26, 0x11	; 17
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	ac d0       	rcall	.+344    	; 0x21c <main>
  c4:	c4 c0       	rjmp	.+392    	; 0x24e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <led_test>:
	start=TW_REP_START;
	}while(counter<size);
	if(!(TWCR==(1<<TWINT)|(1<<TWSTO)|(1<<TWEN)))
		return 0;
	return data;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	8a b9       	out	0x0a, r24	; 10
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	08 95       	ret

000000d2 <SPI_Recive>:
  d2:	e3 e0       	ldi	r30, 0x03	; 3
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	28 e0       	ldi	r18, 0x08	; 8
  d8:	31 e0       	ldi	r19, 0x01	; 1
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	11 f4       	brne	.+4      	; 0xe2 <SPI_Recive+0x10>
  de:	35 b9       	out	0x05, r19	; 5
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <SPI_Recive+0x12>
  e2:	25 b9       	out	0x05, r18	; 5
  e4:	0d b4       	in	r0, 0x2d	; 45
  e6:	07 fe       	sbrs	r0, 7
  e8:	fd cf       	rjmp	.-6      	; 0xe4 <SPI_Recive+0x12>
  ea:	9e b5       	in	r25, 0x2e	; 46
  ec:	91 93       	st	Z+, r25
  ee:	f5 cf       	rjmp	.-22     	; 0xda <SPI_Recive+0x8>

000000f0 <i2c_setup>:
  f0:	88 23       	and	r24, r24
  f2:	49 f0       	breq	.+18     	; 0x106 <i2c_setup+0x16>
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	87 b9       	out	0x07, r24	; 7
  f8:	80 e8       	ldi	r24, 0x80	; 128
  fa:	87 b9       	out	0x07, r24	; 7
  fc:	80 e1       	ldi	r24, 0x10	; 16
  fe:	80 93 b8 00 	sts	0x00B8, r24
 102:	10 92 b9 00 	sts	0x00B9, r1
 106:	08 95       	ret

00000108 <i2c_send>:
 108:	3f 92       	push	r3
 10a:	4f 92       	push	r4
 10c:	5f 92       	push	r5
 10e:	6f 92       	push	r6
 110:	7f 92       	push	r7
 112:	8f 92       	push	r8
 114:	9f 92       	push	r9
 116:	af 92       	push	r10
 118:	bf 92       	push	r11
 11a:	cf 92       	push	r12
 11c:	df 92       	push	r13
 11e:	ef 92       	push	r14
 120:	ff 92       	push	r15
 122:	0f 93       	push	r16
 124:	1f 93       	push	r17
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	fb 01       	movw	r30, r22
 12c:	a0 80       	ld	r10, Z
 12e:	a6 94       	lsr	r10
 130:	a6 94       	lsr	r10
 132:	a6 94       	lsr	r10
 134:	a6 94       	lsr	r10
 136:	b1 2c       	mov	r11, r1
 138:	7b 01       	movw	r14, r22
 13a:	28 e0       	ldi	r18, 0x08	; 8
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	81 2c       	mov	r8, r1
 140:	91 2c       	mov	r9, r1
 142:	cc eb       	ldi	r28, 0xBC	; 188
 144:	d0 e0       	ldi	r29, 0x00	; 0
 146:	0f 2e       	mov	r0, r31
 148:	f4 ea       	ldi	r31, 0xA4	; 164
 14a:	6f 2e       	mov	r6, r31
 14c:	f0 2d       	mov	r31, r0
 14e:	09 eb       	ldi	r16, 0xB9	; 185
 150:	10 e0       	ldi	r17, 0x00	; 0
 152:	8e 7f       	andi	r24, 0xFE	; 254
 154:	58 2e       	mov	r5, r24
 156:	0f 2e       	mov	r0, r31
 158:	fb eb       	ldi	r31, 0xBB	; 187
 15a:	cf 2e       	mov	r12, r31
 15c:	d1 2c       	mov	r13, r1
 15e:	f0 2d       	mov	r31, r0
 160:	0f 2e       	mov	r0, r31
 162:	f4 e8       	ldi	r31, 0x84	; 132
 164:	7f 2e       	mov	r7, r31
 166:	f0 2d       	mov	r31, r0
 168:	68 94       	set
 16a:	33 24       	eor	r3, r3
 16c:	34 f8       	bld	r3, 4
 16e:	41 2c       	mov	r4, r1
 170:	68 82       	st	Y, r6
 172:	98 81       	ld	r25, Y
 174:	99 23       	and	r25, r25
 176:	ec f7       	brge	.-6      	; 0x172 <i2c_send+0x6a>
 178:	f8 01       	movw	r30, r16
 17a:	80 81       	ld	r24, Z
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	82 17       	cp	r24, r18
 182:	93 07       	cpc	r25, r19
 184:	89 f5       	brne	.+98     	; 0x1e8 <i2c_send+0xe0>
 186:	f6 01       	movw	r30, r12
 188:	50 82       	st	Z, r5
 18a:	78 82       	st	Y, r7
 18c:	88 81       	ld	r24, Y
 18e:	88 23       	and	r24, r24
 190:	ec f7       	brge	.-6      	; 0x18c <i2c_send+0x84>
 192:	f8 01       	movw	r30, r16
 194:	80 81       	ld	r24, Z
 196:	88 7f       	andi	r24, 0xF8	; 248
 198:	80 32       	cpi	r24, 0x20	; 32
 19a:	29 f0       	breq	.+10     	; 0x1a6 <i2c_send+0x9e>
 19c:	84 e9       	ldi	r24, 0x94	; 148
 19e:	80 93 bc 00 	sts	0x00BC, r24
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	22 c0       	rjmp	.+68     	; 0x1ea <i2c_send+0xe2>
 1a6:	91 df       	rcall	.-222    	; 0xca <led_test>
 1a8:	f7 01       	movw	r30, r14
 1aa:	81 91       	ld	r24, Z+
 1ac:	7f 01       	movw	r14, r30
 1ae:	f6 01       	movw	r30, r12
 1b0:	80 83       	st	Z, r24
 1b2:	78 82       	st	Y, r7
 1b4:	88 81       	ld	r24, Y
 1b6:	88 23       	and	r24, r24
 1b8:	ec f7       	brge	.-6      	; 0x1b4 <i2c_send+0xac>
 1ba:	f8 01       	movw	r30, r16
 1bc:	80 81       	ld	r24, Z
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	80 33       	cpi	r24, 0x30	; 48
 1c2:	29 f0       	breq	.+10     	; 0x1ce <i2c_send+0xc6>
 1c4:	84 e9       	ldi	r24, 0x94	; 148
 1c6:	80 93 bc 00 	sts	0x00BC, r24
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e c0       	rjmp	.+28     	; 0x1ea <i2c_send+0xe2>
 1ce:	ff ef       	ldi	r31, 0xFF	; 255
 1d0:	8f 1a       	sub	r8, r31
 1d2:	9f 0a       	sbc	r9, r31
 1d4:	23 2d       	mov	r18, r3
 1d6:	34 2d       	mov	r19, r4
 1d8:	8a 14       	cp	r8, r10
 1da:	9b 04       	cpc	r9, r11
 1dc:	4c f2       	brlt	.-110    	; 0x170 <i2c_send+0x68>
 1de:	84 e9       	ldi	r24, 0x94	; 148
 1e0:	80 93 bc 00 	sts	0x00BC, r24
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	01 c0       	rjmp	.+2      	; 0x1ea <i2c_send+0xe2>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	9f 90       	pop	r9
 200:	8f 90       	pop	r8
 202:	7f 90       	pop	r7
 204:	6f 90       	pop	r6
 206:	5f 90       	pop	r5
 208:	4f 90       	pop	r4
 20a:	3f 90       	pop	r3
 20c:	08 95       	ret

0000020e <__vector_1>:
#include "i2c_master.c"

//avbrotsrutiner

ISR(INT0_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
	if (PC6){	//komunikation vill skicka
		//i2c_recive(0x02); // processor 1
		SPI_Recive(0x01);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	5b df       	rcall	.-330    	; 0xd2 <SPI_Recive>

0000021c <main>:
	}
	
}


int main(){
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	1f 92       	push	r1
 222:	cd b7       	in	r28, 0x3d	; 61
 224:	de b7       	in	r29, 0x3e	; 62
	//init
	board_init();
 226:	50 df       	rcall	.-352    	; 0xc8 <board_init>
	//SPI_MasterInit();
	i2c_setup(1);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	62 df       	rcall	.-316    	; 0xf0 <i2c_setup>
	
	//sei();				//Enable Global Interrupt
	byte data[1]={0x0f};
 22c:	8f e0       	ldi	r24, 0x0F	; 15
 22e:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	2f e3       	ldi	r18, 0x3F	; 63
 232:	8d e0       	ldi	r24, 0x0D	; 13
 234:	93 e0       	ldi	r25, 0x03	; 3
 236:	21 50       	subi	r18, 0x01	; 1
 238:	80 40       	sbci	r24, 0x00	; 0
 23a:	90 40       	sbci	r25, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <main+0x1a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <main+0x24>
 240:	00 00       	nop
	while(1){
		//FUNKTIONSLOP
		_delay_ms(1000);
		i2c_send(0x02, data);
 242:	be 01       	movw	r22, r28
 244:	6f 5f       	subi	r22, 0xFF	; 255
 246:	7f 4f       	sbci	r23, 0xFF	; 255
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	5e df       	rcall	.-324    	; 0x108 <i2c_send>
		//SPI_MasterTransmit(0x0a,0x01);
		
	};
 24c:	f1 cf       	rjmp	.-30     	; 0x230 <main+0x14>

0000024e <_exit>:
 24e:	f8 94       	cli

00000250 <__stop_program>:
 250:	ff cf       	rjmp	.-2      	; 0x250 <__stop_program>
