
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000580  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000296  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c07  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a4  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011b6b  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004f0  00000000  00000000  00013487  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00013977  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  000040ac  00000000  00000000  00013a0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	b5 c0       	rjmp	.+362    	; 0x170 <__vector_1>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ef       	ldi	r30, 0xF2	; 242
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 30       	cpi	r26, 0x00	; 0
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	7e d0       	rcall	.+252    	; 0x1c0 <main>
  c4:	94 c0       	rjmp	.+296    	; 0x1ee <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
  c8:	08 95       	ret

000000ca <i2c_setup>:
	
	start=TW_REP_START;
	}while (counter <= number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP	
	return true;
};
  ca:	88 23       	and	r24, r24
  cc:	59 f0       	breq	.+22     	; 0xe4 <i2c_setup+0x1a>
  ce:	17 b8       	out	0x07, r1	; 7
  d0:	17 b8       	out	0x07, r1	; 7
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	8d bb       	out	0x1d, r24	; 29
  d6:	83 e0       	ldi	r24, 0x03	; 3
  d8:	85 bf       	out	0x35, r24	; 53
  da:	80 e1       	ldi	r24, 0x10	; 16
  dc:	80 93 b8 00 	sts	0x00B8, r24
  e0:	10 92 b9 00 	sts	0x00B9, r1
  e4:	08 95       	ret

000000e6 <i2c_recive>:
	
byte* i2c_recive(byte prossesor){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
	byte* data;
	int counter=0;
	int start =TW_START;
	int size = 0;
	do{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
  ea:	94 ea       	ldi	r25, 0xA4	; 164
  ec:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
  f0:	ec eb       	ldi	r30, 0xBC	; 188
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	90 81       	ld	r25, Z
  f6:	99 23       	and	r25, r25
  f8:	ec f7       	brge	.-6      	; 0xf4 <i2c_recive+0xe>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
  fa:	90 91 b9 00 	lds	r25, 0x00B9
  fe:	98 7f       	andi	r25, 0xF8	; 248
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	21 f0       	breq	.+8      	; 0x10c <i2c_recive+0x26>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 104:	84 e9       	ldi	r24, 0x94	; 148
 106:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 10a:	2d c0       	rjmp	.+90     	; 0x166 <i2c_recive+0x80>
	}
	TWDR = prossesor | 0x01;
 10c:	81 60       	ori	r24, 0x01	; 1
 10e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 112:	84 e8       	ldi	r24, 0x84	; 132
 114:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 118:	ec eb       	ldi	r30, 0xBC	; 188
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 23       	and	r24, r24
 120:	ec f7       	brge	.-6      	; 0x11c <i2c_recive+0x36>
	if((TWSR & 0xF8) != TW_MR_SLA_ACK)
 122:	80 91 b9 00 	lds	r24, 0x00B9
 126:	88 7f       	andi	r24, 0xF8	; 248
 128:	80 34       	cpi	r24, 0x40	; 64
 12a:	21 f0       	breq	.+8      	; 0x134 <i2c_recive+0x4e>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 12c:	84 e9       	ldi	r24, 0x94	; 148
 12e:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 132:	19 c0       	rjmp	.+50     	; 0x166 <i2c_recive+0x80>
	}
	if((TWSR & 0xF8) != 0x40)
 134:	80 91 b9 00 	lds	r24, 0x00B9
 138:	88 7f       	andi	r24, 0xF8	; 248
 13a:	80 34       	cpi	r24, 0x40	; 64
 13c:	21 f0       	breq	.+8      	; 0x146 <i2c_recive+0x60>
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 13e:	84 e9       	ldi	r24, 0x94	; 148
 140:	80 93 bc 00 	sts	0x00BC, r24
		return false;
 144:	10 c0       	rjmp	.+32     	; 0x166 <i2c_recive+0x80>
	}
	TWCR = (1<<TWINT)|(1<<TWEN);
 146:	ec eb       	ldi	r30, 0xBC	; 188
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	84 e8       	ldi	r24, 0x84	; 132
 14c:	80 83       	st	Z, r24
	if(counter == 0){
		data = data[TWDR<<4&0x0f];
 14e:	cb eb       	ldi	r28, 0xBB	; 187
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	88 81       	ld	r24, Y
 154:	a0 91 00 00 	lds	r26, 0x0000
 158:	b0 e0       	ldi	r27, 0x00	; 0
		size= TWDR<<4&0x0f;
 15a:	88 81       	ld	r24, Y
	}
	data[counter]=TWDR;
 15c:	88 81       	ld	r24, Y
 15e:	8c 93       	st	X, r24
	counter++;	
	start=TW_REP_START;
	}while(counter<=size);
	if(!(TWCR==(1<<TWINT)|(1<<TWSTO)|(1<<TWEN)))
 160:	80 81       	ld	r24, Z
	{
		TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
		return false;
	}
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 162:	84 e9       	ldi	r24, 0x94	; 148
 164:	80 83       	st	Z, r24
	return data;
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <__vector_1>:
#include "i2c_master.c"

//avbrotsrutiner

ISR(INT0_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	0b b6       	in	r0, 0x3b	; 59
 17c:	0f 92       	push	r0
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	if (PC6){	//komunikation vill skicka
		i2c_recive(0x02); // processor 1
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	a6 df       	rcall	.-180    	; 0xe6 <i2c_recive>
	}
	else if(PC7){ //sensor vill skicka
		i2c_recive(0x06); // processor 3
	}
	
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	bf 91       	pop	r27
 1a0:	af 91       	pop	r26
 1a2:	9f 91       	pop	r25
 1a4:	8f 91       	pop	r24
 1a6:	7f 91       	pop	r23
 1a8:	6f 91       	pop	r22
 1aa:	5f 91       	pop	r21
 1ac:	4f 91       	pop	r20
 1ae:	3f 91       	pop	r19
 1b0:	2f 91       	pop	r18
 1b2:	0f 90       	pop	r0
 1b4:	0b be       	out	0x3b, r0	; 59
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <main>:


int main(){
	//init
	board_init();
 1c0:	83 df       	rcall	.-250    	; 0xc8 <board_init>
	//SPI_MasterInit();
	i2c_setup(1);
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	82 df       	rcall	.-252    	; 0xca <i2c_setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c6:	2f e3       	ldi	r18, 0x3F	; 63
 1c8:	8d e0       	ldi	r24, 0x0D	; 13
 1ca:	93 e0       	ldi	r25, 0x03	; 3
 1cc:	21 50       	subi	r18, 0x01	; 1
 1ce:	80 40       	sbci	r24, 0x00	; 0
 1d0:	90 40       	sbci	r25, 0x00	; 0
 1d2:	e1 f7       	brne	.-8      	; 0x1cc <main+0xc>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <main+0x16>
 1d6:	00 00       	nop
	_delay_ms(1000);
	sei();				//Enable Global Interrupt
 1d8:	78 94       	sei
 1da:	2f e3       	ldi	r18, 0x3F	; 63
 1dc:	8d e0       	ldi	r24, 0x0D	; 13
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x20>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x2a>
 1ea:	00 00       	nop
 1ec:	f6 cf       	rjmp	.-20     	; 0x1da <main+0x1a>

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
