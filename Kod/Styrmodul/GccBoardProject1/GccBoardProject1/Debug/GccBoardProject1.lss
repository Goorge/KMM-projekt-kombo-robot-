
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000276  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002b8  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017c  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000053f  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000128  00000000  00000000  00000d10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007109  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002fa  00000000  00000000  00007f41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000823b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000194  00000000  00000000  0000828b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	04 c1       	rjmp	.+520    	; 0x20e <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	da d0       	rcall	.+436    	; 0x25e <main>
  aa:	e3 c0       	rjmp	.+454    	; 0x272 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <i2c_setup>:
	
	
}

void linje_RGBsveng()
{
  ae:	89 2b       	or	r24, r25
  b0:	89 f0       	breq	.+34     	; 0xd4 <i2c_setup+0x26>
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	87 b9       	out	0x07, r24	; 7
  b6:	88 b9       	out	0x08, r24	; 8
  b8:	80 e8       	ldi	r24, 0x80	; 128
  ba:	87 b9       	out	0x07, r24	; 7
  bc:	88 b9       	out	0x08, r24	; 8
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	8d bb       	out	0x1d, r24	; 29
  c2:	93 e0       	ldi	r25, 0x03	; 3
  c4:	95 bf       	out	0x35, r25	; 53
  c6:	80 93 b8 00 	sts	0x00B8, r24
  ca:	10 92 b9 00 	sts	0x00B9, r1
  ce:	84 e0       	ldi	r24, 0x04	; 4
  d0:	80 93 ba 00 	sts	0x00BA, r24
  d4:	08 95       	ret

000000d6 <i2c_send>:
  d6:	8f 92       	push	r8
  d8:	9f 92       	push	r9
  da:	af 92       	push	r10
  dc:	bf 92       	push	r11
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	eb 01       	movw	r28, r22
  f0:	08 81       	ld	r16, Y
  f2:	02 95       	swap	r16
  f4:	0f 70       	andi	r16, 0x0F	; 15
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	4b 01       	movw	r8, r22
  fa:	68 94       	set
  fc:	ee 24       	eor	r14, r14
  fe:	e3 f8       	bld	r14, 3
 100:	f1 2c       	mov	r15, r1
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	ec eb       	ldi	r30, 0xBC	; 188
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	0f 2e       	mov	r0, r31
 10c:	f4 ea       	ldi	r31, 0xA4	; 164
 10e:	df 2e       	mov	r13, r31
 110:	f0 2d       	mov	r31, r0
 112:	a9 eb       	ldi	r26, 0xB9	; 185
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	81 60       	ori	r24, 0x01	; 1
 118:	c8 2e       	mov	r12, r24
 11a:	6b eb       	ldi	r22, 0xBB	; 187
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	84 e8       	ldi	r24, 0x84	; 132
 120:	68 94       	set
 122:	aa 24       	eor	r10, r10
 124:	a4 f8       	bld	r10, 4
 126:	b1 2c       	mov	r11, r1
 128:	d0 82       	st	Z, r13
 12a:	90 81       	ld	r25, Z
 12c:	99 23       	and	r25, r25
 12e:	ec f7       	brge	.-6      	; 0x12a <i2c_send+0x54>
 130:	2c 91       	ld	r18, X
 132:	28 7f       	andi	r18, 0xF8	; 248
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	2e 15       	cp	r18, r14
 138:	3f 05       	cpc	r19, r15
 13a:	21 f5       	brne	.+72     	; 0x184 <i2c_send+0xae>
 13c:	eb 01       	movw	r28, r22
 13e:	c8 82       	st	Y, r12
 140:	80 83       	st	Z, r24
 142:	90 81       	ld	r25, Z
 144:	99 23       	and	r25, r25
 146:	ec f7       	brge	.-6      	; 0x142 <i2c_send+0x6c>
 148:	9c 91       	ld	r25, X
 14a:	98 7f       	andi	r25, 0xF8	; 248
 14c:	98 31       	cpi	r25, 0x18	; 24
 14e:	e9 f4       	brne	.+58     	; 0x18a <i2c_send+0xb4>
 150:	e4 01       	movw	r28, r8
 152:	99 91       	ld	r25, Y+
 154:	4e 01       	movw	r8, r28
 156:	eb 01       	movw	r28, r22
 158:	98 83       	st	Y, r25
 15a:	80 83       	st	Z, r24
 15c:	90 81       	ld	r25, Z
 15e:	99 23       	and	r25, r25
 160:	ec f7       	brge	.-6      	; 0x15c <i2c_send+0x86>
 162:	9c 91       	ld	r25, X
 164:	98 7f       	andi	r25, 0xF8	; 248
 166:	98 32       	cpi	r25, 0x28	; 40
 168:	99 f4       	brne	.+38     	; 0x190 <i2c_send+0xba>
 16a:	4f 5f       	subi	r20, 0xFF	; 255
 16c:	5f 4f       	sbci	r21, 0xFF	; 255
 16e:	ea 2c       	mov	r14, r10
 170:	fb 2c       	mov	r15, r11
 172:	40 17       	cp	r20, r16
 174:	51 07       	cpc	r21, r17
 176:	c4 f2       	brlt	.-80     	; 0x128 <i2c_send+0x52>
 178:	84 e9       	ldi	r24, 0x94	; 148
 17a:	80 93 bc 00 	sts	0x00BC, r24
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	08 c0       	rjmp	.+16     	; 0x194 <i2c_send+0xbe>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	05 c0       	rjmp	.+10     	; 0x194 <i2c_send+0xbe>
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <i2c_send+0xbe>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	ff 90       	pop	r15
 19e:	ef 90       	pop	r14
 1a0:	df 90       	pop	r13
 1a2:	cf 90       	pop	r12
 1a4:	bf 90       	pop	r11
 1a6:	af 90       	pop	r10
 1a8:	9f 90       	pop	r9
 1aa:	8f 90       	pop	r8
 1ac:	08 95       	ret

000001ae <i2c_recive>:
 1ae:	94 ea       	ldi	r25, 0xA4	; 164
 1b0:	90 93 bc 00 	sts	0x00BC, r25
 1b4:	ec eb       	ldi	r30, 0xBC	; 188
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	90 81       	ld	r25, Z
 1ba:	99 23       	and	r25, r25
 1bc:	ec f7       	brge	.-6      	; 0x1b8 <i2c_recive+0xa>
 1be:	90 91 b9 00 	lds	r25, 0x00B9
 1c2:	98 7f       	andi	r25, 0xF8	; 248
 1c4:	98 30       	cpi	r25, 0x08	; 8
 1c6:	d9 f4       	brne	.+54     	; 0x1fe <i2c_recive+0x50>
 1c8:	8e 7f       	andi	r24, 0xFE	; 254
 1ca:	80 93 bb 00 	sts	0x00BB, r24
 1ce:	84 e8       	ldi	r24, 0x84	; 132
 1d0:	80 93 bc 00 	sts	0x00BC, r24
 1d4:	ec eb       	ldi	r30, 0xBC	; 188
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	ec f7       	brge	.-6      	; 0x1d8 <i2c_recive+0x2a>
 1de:	80 91 b9 00 	lds	r24, 0x00B9
 1e2:	88 7f       	andi	r24, 0xF8	; 248
 1e4:	88 31       	cpi	r24, 0x18	; 24
 1e6:	59 f4       	brne	.+22     	; 0x1fe <i2c_recive+0x50>
 1e8:	ab eb       	ldi	r26, 0xBB	; 187
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	8c 91       	ld	r24, X
 1ee:	e0 91 00 00 	lds	r30, 0x0000
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	8c 91       	ld	r24, X
 1f6:	8c 91       	ld	r24, X
 1f8:	80 83       	st	Z, r24
 1fa:	80 91 bc 00 	lds	r24, 0x00BC
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	08 95       	ret

00000204 <led_test>:
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	8a b9       	out	0x0a, r24	; 10
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	8b b9       	out	0x0b, r24	; 11
 20c:	08 95       	ret

0000020e <__vector_1>:
#include "i2c_master.c"
#include "linje.c"

//avbrotsrutiner
ISR(INT0_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
 218:	0b b6       	in	r0, 0x3b	; 59
 21a:	0f 92       	push	r0
 21c:	2f 93       	push	r18
 21e:	3f 93       	push	r19
 220:	4f 93       	push	r20
 222:	5f 93       	push	r21
 224:	6f 93       	push	r22
 226:	7f 93       	push	r23
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	ef 93       	push	r30
 232:	ff 93       	push	r31
	if (PC6){	//komunikation vill skicka
		i2c_recive(0x02); // processor 1
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	bb df       	rcall	.-138    	; 0x1ae <i2c_recive>
	}
	else if(PC7){ //sensor vill skicka
		i2c_recive(0x06); // processor 3
	}
	
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0b be       	out	0x3b, r0	; 59
 254:	0f 90       	pop	r0
 256:	0f be       	out	0x3f, r0	; 63
 258:	0f 90       	pop	r0
 25a:	1f 90       	pop	r1
 25c:	18 95       	reti

0000025e <main>:


int main(){
	//init
	i2c_setup(true);
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	25 df       	rcall	.-438    	; 0xae <i2c_setup>
	
	sei();				//Enable Global Interrupt
 264:	78 94       	sei
	
	while(1){
		//FUNKTIONSLOP
		i2c_send(0x02, 0xf0);
 266:	60 ef       	ldi	r22, 0xF0	; 240
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	34 df       	rcall	.-408    	; 0xd6 <i2c_send>
		led_test();
 26e:	ca df       	rcall	.-108    	; 0x204 <led_test>
	};
 270:	fa cf       	rjmp	.-12     	; 0x266 <main+0x8>

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
