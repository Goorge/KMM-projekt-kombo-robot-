
GccBoardProject1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000298  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000312  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018d  00000000  00000000  000006d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055e  00000000  00000000  00000863  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000783c  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000369  00000000  00000000  00008754  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00008abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00000194  00000000  00000000  00008b15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	16 c1       	rjmp	.+556    	; 0x232 <__vector_1>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ec d0       	rcall	.+472    	; 0x282 <main>
  aa:	f4 c0       	rjmp	.+488    	; 0x294 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <led_test>:
	for(int i=0;i<11;i++)
	{
		styr_fel=styr_fel+(i-5)*data>>(i*2+1)&1;
	}
	return styr_fel;
}
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	8a b9       	out	0x0a, r24	; 10
  b2:	8b b9       	out	0x0b, r24	; 11
  b4:	08 95       	ret

000000b6 <i2c_setup>:
void i2c_setup(bool master);
bool i2c_send(byte prossesor,byte* data);
byte* i2c_recive(byte prossesor);

void i2c_setup(bool master) {
	if (master){
  b6:	89 2b       	or	r24, r25
  b8:	79 f0       	breq	.+30     	; 0xd8 <i2c_setup+0x22>
		DDRC =1<<PC6;
  ba:	80 e4       	ldi	r24, 0x40	; 64
  bc:	87 b9       	out	0x07, r24	; 7
		//PORTC = 1 <<PC6;
		
		DDRC =1<<PC7;
  be:	80 e8       	ldi	r24, 0x80	; 128
  c0:	87 b9       	out	0x07, r24	; 7
		//PORTC = 1 <<PC7;
		
		EIMSK = 1<<INT0;					// Enable INT0
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	8d bb       	out	0x1d, r24	; 29
		MCUCR = 1<<ISC01 | 1<<ISC00;	// Trigger INT0 on rising edge
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	95 bf       	out	0x35, r25	; 53
		TWBR = 0x01;
  ca:	80 93 b8 00 	sts	0x00B8, r24
		TWSR = (0<<TWPS1)|(0<<TWPS0);
  ce:	10 92 b9 00 	sts	0x00B9, r1
		TWAR = 0x04; // namnge
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	80 93 ba 00 	sts	0x00BA, r24
  d8:	08 95       	ret

000000da <i2c_send>:
	}
	
};
	
bool i2c_send(byte prossesor,byte* data){
  da:	3f 92       	push	r3
  dc:	4f 92       	push	r4
  de:	5f 92       	push	r5
  e0:	6f 92       	push	r6
  e2:	7f 92       	push	r7
  e4:	8f 92       	push	r8
  e6:	9f 92       	push	r9
  e8:	af 92       	push	r10
  ea:	bf 92       	push	r11
  ec:	cf 92       	push	r12
  ee:	df 92       	push	r13
  f0:	ef 92       	push	r14
  f2:	ff 92       	push	r15
  f4:	0f 93       	push	r16
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
	int number_bytes =( data[0]>>4 ) & 0x0f;
  fc:	fb 01       	movw	r30, r22
  fe:	a0 80       	ld	r10, Z
 100:	a6 94       	lsr	r10
 102:	a6 94       	lsr	r10
 104:	a6 94       	lsr	r10
 106:	a6 94       	lsr	r10
 108:	b1 2c       	mov	r11, r1
 10a:	7b 01       	movw	r14, r22
	int counter = 0;
	int start = TW_START;
 10c:	28 e0       	ldi	r18, 0x08	; 8
 10e:	30 e0       	ldi	r19, 0x00	; 0
	
};
	
bool i2c_send(byte prossesor,byte* data){
	int number_bytes =( data[0]>>4 ) & 0x0f;
	int counter = 0;
 110:	81 2c       	mov	r8, r1
 112:	91 2c       	mov	r9, r1
	int start = TW_START;
	
	do{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 114:	cc eb       	ldi	r28, 0xBC	; 188
 116:	d0 e0       	ldi	r29, 0x00	; 0
 118:	0f 2e       	mov	r0, r31
 11a:	f4 ea       	ldi	r31, 0xA4	; 164
 11c:	6f 2e       	mov	r6, r31
 11e:	f0 2d       	mov	r31, r0
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
 120:	09 eb       	ldi	r16, 0xB9	; 185
 122:	10 e0       	ldi	r17, 0x00	; 0
		return false;
	led_test();	
	TWDR = prossesor|0x01;//sista bit R/W
 124:	81 60       	ori	r24, 0x01	; 1
 126:	58 2e       	mov	r5, r24
 128:	0f 2e       	mov	r0, r31
 12a:	fb eb       	ldi	r31, 0xBB	; 187
 12c:	cf 2e       	mov	r12, r31
 12e:	d1 2c       	mov	r13, r1
 130:	f0 2d       	mov	r31, r0
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 132:	0f 2e       	mov	r0, r31
 134:	f4 e8       	ldi	r31, 0x84	; 132
 136:	7f 2e       	mov	r7, r31
 138:	f0 2d       	mov	r31, r0
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
		return false;
	counter++;
	start=TW_REP_START;
 13a:	68 94       	set
 13c:	33 24       	eor	r3, r3
 13e:	34 f8       	bld	r3, 4
 140:	41 2c       	mov	r4, r1
	int number_bytes =( data[0]>>4 ) & 0x0f;
	int counter = 0;
	int start = TW_START;
	
	do{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
 142:	68 82       	st	Y, r6
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 144:	98 81       	ld	r25, Y
 146:	99 23       	and	r25, r25
 148:	ec f7       	brge	.-6      	; 0x144 <i2c_send+0x6a>
	
	if((TWSR & 0xF8) != start) // om status en start
 14a:	f8 01       	movw	r30, r16
 14c:	80 81       	ld	r24, Z
 14e:	88 7f       	andi	r24, 0xF8	; 248
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	82 17       	cp	r24, r18
 154:	93 07       	cpc	r25, r19
 156:	41 f5       	brne	.+80     	; 0x1a8 <i2c_send+0xce>
		return false;
	led_test();	
 158:	aa df       	rcall	.-172    	; 0xae <led_test>
	TWDR = prossesor|0x01;//sista bit R/W
 15a:	f6 01       	movw	r30, r12
 15c:	50 82       	st	Z, r5
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
 15e:	78 82       	st	Y, r7
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
 160:	88 81       	ld	r24, Y
 162:	88 23       	and	r24, r24
 164:	ec f7       	brge	.-6      	; 0x160 <i2c_send+0x86>
	
	if((TWSR & 0xF8) != TW_MT_SLA_ACK) 
 166:	f8 01       	movw	r30, r16
 168:	80 81       	ld	r24, Z
 16a:	88 7f       	andi	r24, 0xF8	; 248
 16c:	88 31       	cpi	r24, 0x18	; 24
 16e:	f9 f4       	brne	.+62     	; 0x1ae <i2c_send+0xd4>
		return false;
	
	TWDR = data[counter];
 170:	f7 01       	movw	r30, r14
 172:	81 91       	ld	r24, Z+
 174:	7f 01       	movw	r14, r30
 176:	f6 01       	movw	r30, r12
 178:	80 83       	st	Z, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data
 17a:	78 82       	st	Y, r7
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK
 17c:	88 81       	ld	r24, Y
 17e:	88 23       	and	r24, r24
 180:	ec f7       	brge	.-6      	; 0x17c <i2c_send+0xa2>
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
 182:	f8 01       	movw	r30, r16
 184:	80 81       	ld	r24, Z
 186:	88 7f       	andi	r24, 0xF8	; 248
 188:	88 32       	cpi	r24, 0x28	; 40
 18a:	a1 f4       	brne	.+40     	; 0x1b4 <i2c_send+0xda>
		return false;
	counter++;
 18c:	ff ef       	ldi	r31, 0xFF	; 255
 18e:	8f 1a       	sub	r8, r31
 190:	9f 0a       	sbc	r9, r31
	start=TW_REP_START;
 192:	23 2d       	mov	r18, r3
 194:	34 2d       	mov	r19, r4
	}while (counter < number_bytes);
 196:	8a 14       	cp	r8, r10
 198:	9b 04       	cpc	r9, r11
 19a:	9c f2       	brlt	.-90     	; 0x142 <i2c_send+0x68>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
 19c:	84 e9       	ldi	r24, 0x94	; 148
 19e:	80 93 bc 00 	sts	0x00BC, r24
	return true;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	08 c0       	rjmp	.+16     	; 0x1b8 <i2c_send+0xde>
	do{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); //send START
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
	
	if((TWSR & 0xF8) != start) // om status en start
		return false;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	05 c0       	rjmp	.+10     	; 0x1b8 <i2c_send+0xde>
	TWDR = prossesor|0x01;//sista bit R/W
	TWCR = (1<<TWINT) | (1<<TWEN);// start transmito of addres
	while(!(TWCR & (1<<TWINT))); // wait for SLA+W transmited and ACK/NACK recived
	
	if((TWSR & 0xF8) != TW_MT_SLA_ACK) 
		return false;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <i2c_send+0xde>
	
	TWDR = data[counter];
	TWCR = (1<<TWINT) | (1<<TWEN);	// start send data
	while(!(TWCR & (1<<TWINT))); //wait for data transmitted and ACK/NACK
	if((TWSR & 0xF8) != TW_MT_DATA_ACK)
		return false;
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
	counter++;
	start=TW_REP_START;
	}while (counter < number_bytes);
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	// Transmition STOP
	return true;
};
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	0f 91       	pop	r16
 1c0:	ff 90       	pop	r15
 1c2:	ef 90       	pop	r14
 1c4:	df 90       	pop	r13
 1c6:	cf 90       	pop	r12
 1c8:	bf 90       	pop	r11
 1ca:	af 90       	pop	r10
 1cc:	9f 90       	pop	r9
 1ce:	8f 90       	pop	r8
 1d0:	7f 90       	pop	r7
 1d2:	6f 90       	pop	r6
 1d4:	5f 90       	pop	r5
 1d6:	4f 90       	pop	r4
 1d8:	3f 90       	pop	r3
 1da:	08 95       	ret

000001dc <i2c_recive>:
	byte* data;
	int counter=0;
	int start =TW_START;
	int size = 0;
	do{
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//START
 1dc:	94 ea       	ldi	r25, 0xA4	; 164
 1de:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))); //Wait for TWINT, START is now sent
 1e2:	ec eb       	ldi	r30, 0xBC	; 188
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	90 81       	ld	r25, Z
 1e8:	99 23       	and	r25, r25
 1ea:	ec f7       	brge	.-6      	; 0x1e6 <i2c_recive+0xa>
	if((TWSR & 0xF8) != start) // om status en start eventuellt bara tw_start
 1ec:	90 91 b9 00 	lds	r25, 0x00B9
 1f0:	98 7f       	andi	r25, 0xF8	; 248
 1f2:	98 30       	cpi	r25, 0x08	; 8
 1f4:	d9 f4       	brne	.+54     	; 0x22c <i2c_recive+0x50>
		return 0;
	TWDR = prossesor & 0xfe;
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
 1fc:	84 e8       	ldi	r24, 0x84	; 132
 1fe:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))); // wait for SLA+R transmited and ACK/NACK recived
 202:	ec eb       	ldi	r30, 0xBC	; 188
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	88 23       	and	r24, r24
 20a:	ec f7       	brge	.-6      	; 0x206 <i2c_recive+0x2a>
	if((TWSR & 0xF8) != TW_MT_SLA_ACK)
 20c:	80 91 b9 00 	lds	r24, 0x00B9
 210:	88 7f       	andi	r24, 0xF8	; 248
 212:	88 31       	cpi	r24, 0x18	; 24
 214:	59 f4       	brne	.+22     	; 0x22c <i2c_recive+0x50>
		return false;
	while(!TWINT);
	if(counter == 0){
		data = data[TWDR<<4&0x0f];
 216:	ab eb       	ldi	r26, 0xBB	; 187
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	8c 91       	ld	r24, X
 21c:	e0 91 00 00 	lds	r30, 0x0000
 220:	f0 e0       	ldi	r31, 0x00	; 0
		size= TWDR<<4&0x0f;
 222:	8c 91       	ld	r24, X
	}
	data[counter]=TWDR;
 224:	8c 91       	ld	r24, X
 226:	80 83       	st	Z, r24
	counter++;	
	start=TW_REP_START;
	}while(counter<size);
	if(!(TWCR==(1<<TWINT)|(1<<TWSTO)|(1<<TWEN)))
 228:	80 91 bc 00 	lds	r24, 0x00BC
		return 0;
	return data;
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	08 95       	ret

00000232 <__vector_1>:
#include "i2c_master.c"


//avbrotsrutiner
ISR(INT0_vect)
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	0b b6       	in	r0, 0x3b	; 59
 23e:	0f 92       	push	r0
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
	if (PC6){	//komunikation vill skicka
		i2c_recive(0x02); // processor 1
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	c0 df       	rcall	.-128    	; 0x1dc <i2c_recive>
	}
	else if(PC7){ //sensor vill skicka
		i2c_recive(0x06); // processor 3
	}
	
}
 25c:	ff 91       	pop	r31
 25e:	ef 91       	pop	r30
 260:	bf 91       	pop	r27
 262:	af 91       	pop	r26
 264:	9f 91       	pop	r25
 266:	8f 91       	pop	r24
 268:	7f 91       	pop	r23
 26a:	6f 91       	pop	r22
 26c:	5f 91       	pop	r21
 26e:	4f 91       	pop	r20
 270:	3f 91       	pop	r19
 272:	2f 91       	pop	r18
 274:	0f 90       	pop	r0
 276:	0b be       	out	0x3b, r0	; 59
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <main>:


int main(){
	//init
	i2c_setup(true);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	17 df       	rcall	.-466    	; 0xb6 <i2c_setup>
	
	sei();				//Enable Global Interrupt
 288:	78 94       	sei
	
	while(1){
		//FUNKTIONSLOP
		i2c_send(0x02, 0x0f);
 28a:	6f e0       	ldi	r22, 0x0F	; 15
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	82 e0       	ldi	r24, 0x02	; 2
 290:	24 df       	rcall	.-440    	; 0xda <i2c_send>
		
	};
 292:	fb cf       	rjmp	.-10     	; 0x28a <main+0x8>

00000294 <_exit>:
 294:	f8 94       	cli

00000296 <__stop_program>:
 296:	ff cf       	rjmp	.-2      	; 0x296 <__stop_program>
